	.text
isspace:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 1 "/Users/nullpo/dev/elvm/libc/ctype.h"
	.loc 1 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L1219, A, 0
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1219:
	mov A, B
	mov B, 1
	jne .L1218, A, 0
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1218:
	mov A, B
	mov B, 1
	jne .L1217, A, 0
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1217:
	mov A, B
	mov B, 1
	jne .L1216, A, 0
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1216:
	mov A, B
	mov B, 1
	jne .L1215, A, 0
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1215:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isdigit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 1 10 0
	# }
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1220, A, 0
	.loc 1 10 0
	# }
	.loc 1 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 10 0
	# }
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1220:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isxdigit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 1 14 0
	# }
	.loc 1 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L1223:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L1222, A, 0
	.loc 1 14 0
	# }
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1224, A, 0
	.loc 1 14 0
	# }
	.loc 1 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 14 0
	# }
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1224:
	mov A, B
	mov B, A
	ne B, 0
	.L1222:
	mov A, B
	mov B, 1
	jne .L1221, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1225, A, 0
	.loc 1 14 0
	# }
	.loc 1 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 14 0
	# }
	mov A, 70
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1225:
	mov A, B
	mov B, A
	ne B, 0
	.L1221:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isupper:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 1 18 0
	# }
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 14 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1226, A, 0
	.loc 1 18 0
	# }
	.loc 1 14 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 18 0
	# }
	mov A, 90
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1226:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isalpha:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 1 22 0
	# }
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1228, A, 0
	.loc 1 22 0
	# }
	.loc 1 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 22 0
	# }
	mov A, 122
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1228:
	mov A, B
	mov B, 1
	jne .L1227, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1229, A, 0
	.loc 1 22 0
	# }
	.loc 1 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 22 0
	# }
	mov A, 90
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1229:
	mov A, B
	mov B, A
	ne B, 0
	.L1227:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isalnum:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 1 26 0
	# }
	.loc 1 22 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L1231:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L1230, A, 0
	.loc 1 26 0
	# }
	.loc 1 22 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L1232:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L1230:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isprint:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 1 30 0
	# }
	.loc 1 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L1234:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L1233, A, 0
	.loc 1 30 0
	# }
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1235, A, 0
	.loc 1 30 0
	# }
	.loc 1 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 30 0
	# }
	mov A, 127
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L1235:
	mov A, B
	mov B, A
	ne B, 0
	.L1233:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
my_div:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 52
	.file 2 "/Users/nullpo/dev/elvm/libc/_builtin.h"
	.loc 2 35 0
	# }
	.loc 2 11 0
	#   unsigned int r[24];
	.loc 2 12 0
	#   unsigned int i;
	.loc 2 13 0
	#   r[0] = 1;
	.loc 2 14 0
	#   for (i = 0;; i++) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 14 0
	#   for (i = 0;; i++) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 21 0
	#   }
	.loc 2 15 0
	#     d[i] = b;
	mov A, 0
	mov B, BP
	add B, 16777167
	store A, B
	.loc 2 21 0
	#   }
	.L0:
	.loc 2 16 0
	#     unsigned int nb = b + b;
	.loc 1 30 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 16 0
	#     unsigned int nb = b + b;
	.loc 2 11 0
	#   unsigned int r[24];
	mov A, BP
	add A, 16777192
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 17 0
	#     if (nb > a || nb < b)
	mov A, 0
	mov B, SP
	.loc 1 30 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777166
	store A, B
	.loc 2 18 0
	#       break;
	.loc 1 30 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L1236, A, 0
	.loc 2 18 0
	#       break;
	.loc 2 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 30 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L1236:
	mov A, B
	jeq .L1237, A, 0
	.loc 2 18 0
	#       break;
	jmp .L2
	.L1237:
	.loc 2 20 0
	#     b = nb;
	.loc 2 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 20 0
	#     b = nb;
	.loc 2 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 20 0
	#     b = nb;
	.loc 2 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 20 0
	#     b = nb;
	.loc 2 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 20 0
	#     b = nb;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 21 0
	#   }
	.loc 2 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 2 21 0
	#   }
	.L1:
	.loc 2 15 0
	#     d[i] = b;
	.loc 2 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777167
	store A, B
	load A, SP
	add SP, 1
	.loc 2 21 0
	#   }
	jmp .L0
	.L2:
	.loc 2 24 0
	#   for (;; i--) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777165
	mov A, 0
	store A, B
	.loc 2 31 0
	#       break;
	.L3:
	.loc 2 26 0
	#     if (a >= v) {
	mov A, 0
	mov B, SP
	.loc 2 11 0
	#   unsigned int r[24];
	mov A, BP
	add A, 16777192
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777164
	store A, B
	.loc 2 29 0
	#     }
	.loc 2 27 0
	#       q += r[i];
	.loc 2 26 0
	#     if (a >= v) {
	mov B, BP
	add B, 16777164
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 30 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1238, A, 0
	.loc 2 29 0
	#     }
	.loc 2 28 0
	#       a -= v;
	.loc 2 24 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777165
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 28 0
	#       a -= v;
	.loc 2 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777165
	store A, B
	.loc 2 29 0
	#     }
	.loc 1 30 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 26 0
	#     if (a >= v) {
	mov B, BP
	add B, 16777164
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.L1238:
	.loc 2 31 0
	#       break;
	.loc 2 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 31 0
	#       break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1239, A, 0
	jmp .L5
	.L1239:
	.L4:
	.loc 2 25 0
	#     unsigned int v = d[i];
	.loc 2 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777167
	store A, B
	load A, SP
	add SP, 1
	.loc 2 31 0
	#       break;
	jmp .L3
	.L5:
	.loc 2 34 0
	#   o->rem = a;
	.loc 2 24 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777165
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 30 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 35 0
	# }
	.loc 1 30 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_mul:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 53
	.loc 2 70 0
	# }
	.loc 2 39 0
	#   if (a < b) {
	.loc 2 43 0
	#   }
	.loc 2 40 0
	#     v = a;
	.loc 2 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1240, A, 0
	.loc 2 43 0
	#   }
	.loc 2 41 0
	#     a = b;
	.loc 2 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 2 42 0
	#     b = v;
	.loc 2 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 43 0
	#   }
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.L1240:
	.loc 2 45 0
	#     return a;
	.loc 2 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 45 0
	#     return a;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1241, A, 0
	.loc 2 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1241:
	.loc 2 47 0
	#     return 0;
	.loc 2 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 47 0
	#     return 0;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1242, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1242:
	.loc 2 49 0
	#   int r[24];
	.loc 2 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	.loc 2 58 0
	#   }
	.loc 2 51 0
	#     d[i] = v;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	mov A, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 2 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 2 58 0
	#   }
	.L6:
	.loc 2 52 0
	#     r[i] = e;
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 52 0
	#     r[i] = e;
	.loc 2 49 0
	#   int r[24];
	mov A, BP
	add A, 16777189
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 53 0
	#     v += v;
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 53 0
	#     v += v;
	.loc 2 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 54 0
	#     int ne = e + e;
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 2 55 0
	#     if (ne < e || ne > b)
	mov A, 0
	mov B, SP
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777164
	store A, B
	.loc 2 56 0
	#       break;
	.loc 2 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L1243, A, 0
	.loc 2 56 0
	#       break;
	.loc 2 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L1243:
	mov A, B
	jeq .L1244, A, 0
	.loc 2 56 0
	#       break;
	jmp .L8
	.L1244:
	.loc 2 58 0
	#   }
	.loc 2 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 2 58 0
	#   }
	.L7:
	.loc 2 51 0
	#     d[i] = v;
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 2 58 0
	#   }
	jmp .L6
	.L8:
	.loc 2 61 0
	#   for (;; i--) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777163
	mov A, 0
	store A, B
	.loc 2 67 0
	#       break;
	.L9:
	.loc 2 65 0
	#     }
	.loc 2 63 0
	#       x += d[i];
	.loc 2 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1245, A, 0
	.loc 2 65 0
	#     }
	.loc 2 64 0
	#       b -= r[i];
	.loc 2 61 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777163
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 64 0
	#       b -= r[i];
	.loc 2 49 0
	#   int r[24];
	mov A, BP
	add A, 16777189
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777163
	store A, B
	.loc 2 65 0
	#     }
	.loc 2 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 65 0
	#     }
	.loc 2 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.L1245:
	.loc 2 67 0
	#       break;
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 67 0
	#       break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1246, A, 0
	jmp .L11
	.L1246:
	.L10:
	.loc 2 62 0
	#     if (b >= r[i]) {
	.loc 2 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 2 67 0
	#       break;
	jmp .L9
	.L11:
	.loc 2 70 0
	# }
	.loc 2 61 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777163
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_div:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 2 78 0
	# }
	.loc 2 74 0
	#     return a;
	.loc 2 70 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 74 0
	#     return a;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1247, A, 0
	.loc 2 70 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1247:
	.loc 2 76 0
	#   my_div(a, b, &r);
	.loc 2 77 0
	#   return r.quot;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 70 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp my_div
	.L1248:
	mov A, B
	add SP, 3
	.loc 2 78 0
	# }
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_mod:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 2 84 0
	# }
	.loc 2 82 0
	#   my_div(a, b, &r);
	.loc 2 83 0
	#   return r.rem;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 78 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp my_div
	.L1249:
	mov A, B
	add SP, 3
	.loc 2 84 0
	# }
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
__builtin_bits_table:
	.long 8388608
	.long 4194304
	.long 2097152
	.long 1048576
	.long 524288
	.long 262144
	.long 131072
	.long 65536
	.long 32768
	.long 16384
	.long 8192
	.long 4096
	.long 2048
	.long 1024
	.long 512
	.long 256
	.long 128
	.long 64
	.long 32
	.long 16
	.long 8
	.long 4
	.long 2
	.long 1
	.text
__builtin_and:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 2 107 0
	# }
	.loc 2 99 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 2 104 0
	#       r += t;
	.loc 2 100 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 2 104 0
	#       r += t;
	.L12:
	.loc 2 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1250, A, 0
	jmp .L1251
	.L1250:
	.loc 2 104 0
	#       r += t;
	jmp .L14
	.L1251:
	.loc 2 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 2 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 2 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 2 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 84 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1252, A, 0
	.loc 2 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 2 84 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 2 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L1253
	.L1252:
	mov A, 0
	.L1253:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 2 103 0
	#     if (a1 && b1)
	mov A, 0
	mov B, SP
	.loc 2 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 84 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1254, A, 0
	.loc 2 103 0
	#     if (a1 && b1)
	.loc 2 84 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 103 0
	#     if (a1 && b1)
	.loc 2 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 2 103 0
	#     if (a1 && b1)
	mov A, 1
	jmp .L1255
	.L1254:
	mov A, 0
	.L1255:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 2 104 0
	#       r += t;
	.loc 2 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, 0
	jeq .L1256, A, 0
	.loc 2 103 0
	#     if (a1 && b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L1256:
	mov A, B
	jeq .L1257, A, 0
	.loc 2 104 0
	#       r += t;
	.loc 2 99 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1257:
	.loc 2 104 0
	#       r += t;
	.L13:
	.loc 2 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 2 104 0
	#       r += t;
	jmp .L12
	.L14:
	.loc 2 107 0
	# }
	.loc 2 99 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_or:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 2 119 0
	# }
	.loc 2 111 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 2 116 0
	#       r += t;
	.loc 2 112 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 2 116 0
	#       r += t;
	.L15:
	.loc 2 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1258, A, 0
	jmp .L1259
	.L1258:
	.loc 2 116 0
	#       r += t;
	jmp .L17
	.L1259:
	.loc 2 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 2 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 2 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 2 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 107 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1260, A, 0
	.loc 2 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 2 107 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 2 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L1261
	.L1260:
	mov A, 0
	.L1261:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 2 115 0
	#     if (a1 || b1)
	mov A, 0
	mov B, SP
	.loc 2 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1262, A, 0
	.loc 2 115 0
	#     if (a1 || b1)
	.loc 2 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 115 0
	#     if (a1 || b1)
	.loc 2 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 2 115 0
	#     if (a1 || b1)
	mov A, 1
	jmp .L1263
	.L1262:
	mov A, 0
	.L1263:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 2 116 0
	#       r += t;
	.loc 2 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, 1
	jne .L1264, A, 0
	.loc 2 115 0
	#     if (a1 || b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L1264:
	mov A, B
	jeq .L1265, A, 0
	.loc 2 116 0
	#       r += t;
	.loc 2 111 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1265:
	.loc 2 116 0
	#       r += t;
	.L16:
	.loc 2 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 2 116 0
	#       r += t;
	jmp .L15
	.L17:
	.loc 2 119 0
	# }
	.loc 2 111 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_xor:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 2 131 0
	# }
	.loc 2 123 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 2 128 0
	#       r += t;
	.loc 2 124 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 2 128 0
	#       r += t;
	.L18:
	.loc 2 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1266, A, 0
	jmp .L1267
	.L1266:
	.loc 2 128 0
	#       r += t;
	jmp .L20
	.L1267:
	.loc 2 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 2 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 2 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 2 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 119 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1268, A, 0
	.loc 2 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 2 119 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 2 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L1269
	.L1268:
	mov A, 0
	.L1269:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 2 127 0
	#     if (a1 != b1)
	mov A, 0
	mov B, SP
	.loc 2 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 119 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1270, A, 0
	.loc 2 127 0
	#     if (a1 != b1)
	.loc 2 119 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 127 0
	#     if (a1 != b1)
	.loc 2 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 2 127 0
	#     if (a1 != b1)
	mov A, 1
	jmp .L1271
	.L1270:
	mov A, 0
	.L1271:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 2 128 0
	#       r += t;
	.loc 2 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 127 0
	#     if (a1 != b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1272, A, 0
	.loc 2 128 0
	#       r += t;
	.loc 2 123 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1272:
	.loc 2 128 0
	#       r += t;
	.L19:
	.loc 2 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 2 128 0
	#       r += t;
	jmp .L18
	.L20:
	.loc 2 131 0
	# }
	.loc 2 123 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_not:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 2 142 0
	# }
	.loc 2 135 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 2 139 0
	#       r += t;
	.loc 2 136 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 2 139 0
	#       r += t;
	.L21:
	.loc 2 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1273, A, 0
	jmp .L1274
	.L1273:
	.loc 2 139 0
	#       r += t;
	jmp .L23
	.L1274:
	.loc 2 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 2 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 2 138 0
	#     if (!a1)
	mov A, 0
	mov B, SP
	.loc 2 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 131 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1275, A, 0
	.loc 2 138 0
	#     if (!a1)
	.loc 2 131 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 138 0
	#     if (!a1)
	.loc 2 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 138 0
	#     if (!a1)
	mov A, 1
	jmp .L1276
	.L1275:
	mov A, 0
	.L1276:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 2 139 0
	#       r += t;
	.loc 2 138 0
	#     if (!a1)
	mov B, BP
	add B, 16777212
	load A, B
	eq A, 0
	jeq .L1277, A, 0
	.loc 2 139 0
	#       r += t;
	.loc 2 135 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1277:
	.loc 2 139 0
	#       r += t;
	.L22:
	.loc 2 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 2 139 0
	#       r += t;
	jmp .L21
	.L23:
	.loc 2 142 0
	# }
	.loc 2 135 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_shl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 2 153 0
	# }
	.loc 2 146 0
	#   for (int i = b; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 2 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 2 147 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	.loc 2 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 2 150 0
	#       r += __builtin_bits_table[i-b];
	.L24:
	.loc 2 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1278, A, 0
	jmp .L1279
	.L1278:
	.loc 2 150 0
	#       r += __builtin_bits_table[i-b];
	jmp .L26
	.L1279:
	.loc 2 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 2 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 2 149 0
	#     if (a1)
	mov A, 0
	mov B, SP
	.loc 2 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1280, A, 0
	.loc 2 149 0
	#     if (a1)
	.loc 2 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 149 0
	#     if (a1)
	.loc 2 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 149 0
	#     if (a1)
	mov A, 1
	jmp .L1281
	.L1280:
	mov A, 0
	.L1281:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 2 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 2 149 0
	#     if (a1)
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L1282, A, 0
	.loc 2 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 2 146 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 2 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 2 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1282:
	.loc 2 150 0
	#       r += __builtin_bits_table[i-b];
	.L25:
	.loc 2 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 2 150 0
	#       r += __builtin_bits_table[i-b];
	jmp .L24
	.L26:
	.loc 2 153 0
	# }
	.loc 2 146 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_shr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 2 164 0
	# }
	.loc 2 157 0
	#   for (int i = b; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 2 161 0
	#       r += __builtin_bits_table[i];
	.loc 2 158 0
	#     int t = __builtin_bits_table[i-b];
	mov A, 0
	mov B, SP
	.loc 2 153 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 2 161 0
	#       r += __builtin_bits_table[i];
	.L27:
	.loc 2 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1283, A, 0
	jmp .L1284
	.L1283:
	.loc 2 161 0
	#       r += __builtin_bits_table[i];
	jmp .L29
	.L1284:
	.loc 2 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 2 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	.loc 2 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 153 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 2 160 0
	#     if (a1)
	mov A, 0
	mov B, SP
	.loc 2 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1285, A, 0
	.loc 2 160 0
	#     if (a1)
	.loc 2 153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 160 0
	#     if (a1)
	.loc 2 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 160 0
	#     if (a1)
	mov A, 1
	jmp .L1286
	.L1285:
	mov A, 0
	.L1286:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 2 161 0
	#       r += __builtin_bits_table[i];
	.loc 2 160 0
	#     if (a1)
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L1287, A, 0
	.loc 2 161 0
	#       r += __builtin_bits_table[i];
	.loc 2 157 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 161 0
	#       r += __builtin_bits_table[i];
	.loc 2 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1287:
	.loc 2 161 0
	#       r += __builtin_bits_table[i];
	.L28:
	.loc 2 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 2 161 0
	#       r += __builtin_bits_table[i];
	jmp .L27
	.L29:
	.loc 2 164 0
	# }
	.loc 2 157 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
print_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 3 "/Users/nullpo/dev/elvm/libc/_raw_print.h"
	.loc 3 9 0
	#     putchar(*p);
	.L30:
	.loc 2 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L1288, A, 0
	jmp .L1289
	.L1288:
	.loc 3 9 0
	#     putchar(*p);
	jmp .L32
	.L1289:
	.loc 2 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 3 9 0
	#     putchar(*p);
	.L31:
	.loc 2 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 3 9 0
	#     putchar(*p);
	jmp .L30
	.L32:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stringify_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 20 0
	# }
	.loc 3 14 0
	#   do {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 3 18 0
	#   } while (v);
	.L33:
	.loc 3 16 0
	#     *p = v % 10 + '0';
	.loc 3 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 3 17 0
	#     v /= 10;
	.loc 3 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 17 0
	#     v /= 10;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L1290:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 3 18 0
	#   } while (v);
	.loc 3 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	#   } while (v);
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1291:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 3 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	jeq .L1292, A, 0
	.loc 3 18 0
	#   } while (v);
	jmp .L33
	.L1292:
	.L34:
	.loc 3 20 0
	# }
	.loc 3 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
print_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 32
	.loc 3 25 0
	# }
	.loc 3 24 0
	#   print_str(stringify_int(v, buf + sizeof(buf) - 1));
	.loc 3 25 0
	# }
	.loc 3 24 0
	#   print_str(stringify_int(v, buf + sizeof(buf) - 1));
	mov A, BP
	add A, 16777184
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 25 0
	# }
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_int
	.L1293:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1294:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stringify_hex:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 3 44 0
	# }
	.loc 3 29 0
	#   int c;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 3 30 0
	#   *p = '\0';
	.loc 3 31 0
	#   if (v < 0) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 3 34 0
	#   }
	.loc 3 32 0
	#     v = -v;
	.loc 3 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 32 0
	#     v = -v;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1295, A, 0
	.loc 3 34 0
	#   }
	.loc 3 33 0
	#     is_negative = 1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 3 34 0
	#   }
	mov A, 1
	mov B, BP
	add B, 16777215
	store A, B
	.L1295:
	.loc 3 40 0
	#   } while (v);
	.L35:
	.loc 3 37 0
	#     c = v % 16;
	.loc 3 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 3 38 0
	#     *p = c < 10 ? c + '0' : c - 10 + 'a';
	.loc 3 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 38 0
	#     *p = c < 10 ? c + '0' : c - 10 + 'a';
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L1296:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 3 39 0
	#     v /= 16;
	.loc 3 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 39 0
	#     v /= 16;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1297, A, 0
	.loc 3 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 39 0
	#     v /= 16;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	jmp .L1298
	.L1297:
	.loc 3 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 39 0
	#     v /= 16;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	.L1298:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 3 40 0
	#   } while (v);
	.loc 3 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 40 0
	#   } while (v);
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1299:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 3 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L1300, A, 0
	.loc 3 40 0
	#   } while (v);
	jmp .L35
	.L1300:
	.L36:
	.loc 3 42 0
	#     *--p = '-';
	.loc 3 29 0
	#   int c;
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L1301, A, 0
	.loc 3 42 0
	#     *--p = '-';
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1301:
	.loc 3 44 0
	# }
	.loc 3 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
abort:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 4 "/Users/nullpo/dev/elvm/libc/stdlib.h"
	.loc 4 21 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
malloc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 4 31 0
	# }
	.loc 4 25 0
	#   _edata += n;
	mov A, 0
	mov B, SP
	.loc 3 44 0
	# }
	mov B, _edata
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 26 0
	#   if (r > _edata) {
	.loc 3 44 0
	# }
	mov B, _edata
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 21 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, _edata
	store A, B
	.loc 4 29 0
	#   }
	.loc 4 27 0
	#     print_str("no memory!\n");
	.loc 3 44 0
	# }
	mov B, _edata
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 25 0
	#   _edata += n;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1302, A, 0
	.loc 4 29 0
	#   }
	.loc 4 28 0
	#     exit(1);
.data
	.L1303:
	.string "no memory!\n"
.text
	mov A, .L1303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1304:
	mov A, B
	add SP, 1
	.loc 4 29 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L1302:
	.loc 4 31 0
	# }
	.loc 4 25 0
	#   _edata += n;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
calloc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 35 0
	# }
	.loc 4 31 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1305:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L1306:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
free:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 35 0
	# }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtol:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 4 116 0
	# }
	.loc 4 45 0
	#   long acc, cutoff;
	.loc 4 46 0
	#   int c;
	.loc 4 47 0
	#   int neg, any, cutlim;
	.loc 4 48 0
	# 
	.loc 4 57 0
	#   }
	.loc 4 54 0
	#     if (endptr != 0)
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 54 0
	#     if (endptr != 0)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L1308, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 54 0
	#     if (endptr != 0)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1308:
	mov A, B
	mov B, 1
	jne .L1307, A, 0
	mov A, 36
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L1307:
	mov A, B
	jeq .L1309, A, 0
	.loc 4 57 0
	#   }
	.loc 4 55 0
	#       *endptr = (char *)nptr;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 55 0
	#       *endptr = (char *)nptr;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1310, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1310:
	.loc 4 57 0
	#   }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1309:
	.loc 4 65 0
	#   do {
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 67 0
	#   } while (isspace(c));
	.L37:
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 67 0
	#   } while (isspace(c));
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L1311:
	mov A, B
	add SP, 1
	jeq .L1312, A, 0
	.loc 4 67 0
	#   } while (isspace(c));
	jmp .L37
	.L1312:
	.L38:
	.loc 4 74 0
	#       c = *s++;
	.loc 4 69 0
	#     neg = 1;
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 69 0
	#     neg = 1;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1313, A, 0
	.loc 4 71 0
	#   } else {
	.loc 4 70 0
	#     c = *s++;
	mov A, 1
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 71 0
	#   } else {
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L1314
	.L1313:
	.loc 4 74 0
	#       c = *s++;
	.loc 4 73 0
	#     if (c == '+')
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 74 0
	#       c = *s++;
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 74 0
	#       c = *s++;
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1315, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.L1315:
	.L1314:
	.loc 4 81 0
	#   }
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L1318, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1318:
	mov A, B
	mov B, 0
	jeq .L1317, A, 0
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1317:
	mov A, B
	mov B, 0
	jeq .L1316, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L1319, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 88
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1319:
	mov A, B
	mov B, A
	ne B, 0
	.L1316:
	mov A, B
	jeq .L1320, A, 0
	.loc 4 81 0
	#   }
	.loc 4 79 0
	#     s += 2;
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 79 0
	#     s += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 80 0
	#     base = 16;
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 80 0
	#     base = 16;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 81 0
	#   }
	mov A, 16
	mov B, BP
	add B, 4
	store A, B
	.L1320:
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1321, A, 0
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1322, A, 0
	mov A, 8
	jmp .L1323
	.L1322:
	mov A, 10
	.L1323:
	mov B, BP
	add B, 4
	store A, B
	.L1321:
	.loc 4 91 0
	#   }
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L1324, A, 0
	.loc 4 91 0
	#   }
	.loc 4 89 0
	#     }
	.loc 4 87 0
	#       cutlim -= base;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1325, A, 0
	.loc 4 89 0
	#     }
	.loc 4 88 0
	#       cutoff += 1;
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 4 89 0
	#     }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 89 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.L1325:
	.loc 4 91 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777209
	store A, B
	.L1324:
	.loc 4 111 0
	#     }
	.loc 4 93 0
	#     if (isdigit(c))
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	mov A, 0
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 111 0
	#     }
	.L39:
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L1326:
	mov A, B
	add SP, 1
	jeq .L1327, A, 0
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 94 0
	#       c -= '0';
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L1328
	.L1327:
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L1329:
	mov A, B
	add SP, 1
	jeq .L1330, A, 0
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isupper
	.L1331:
	mov A, B
	add SP, 1
	jeq .L1332, A, 0
	.loc 4 94 0
	#       c -= '0';
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L1333
	.L1332:
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	.L1333:
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L1334
	.L1330:
	jmp .L41
	.L1334:
	.L1328:
	.loc 4 100 0
	#       break;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1335, A, 0
	.loc 4 100 0
	#       break;
	jmp .L41
	.L1335:
	.loc 4 102 0
	#       continue;
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 102 0
	#       continue;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1336, A, 0
	jmp .L40
	.L1336:
	.loc 4 111 0
	#     }
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L1337, A, 0
	.loc 4 107 0
	#     } else {
	.loc 4 105 0
	#       acc *= base;
	mov A, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 106 0
	#       acc -= c;
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 106 0
	#       acc -= c;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1338:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 107 0
	#     } else {
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 107 0
	#     } else {
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1339
	.L1337:
	.loc 4 111 0
	#     }
	.loc 4 109 0
	#       acc *= base;
	mov A, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 110 0
	#       acc += c;
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 110 0
	#       acc += c;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1340:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 111 0
	#     }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 111 0
	#     }
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L1339:
	.loc 4 111 0
	#     }
	.L40:
	.loc 4 93 0
	#     if (isdigit(c))
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 111 0
	#     }
	jmp .L39
	.L41:
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	.loc 4 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1341, A, 0
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L1342, A, 0
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	jmp .L1343
	.L1342:
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	.L1343:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1341:
	.loc 4 116 0
	# }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoul:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 120 0
	# }
	.loc 4 116 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L1344:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoll:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 124 0
	# }
	.loc 4 120 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L1345:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoull:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 128 0
	# }
	.loc 4 124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L1346:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
atoi:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 4 138 0
	# }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 136 0
	#   }
	.L42:
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1347, A, 0
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1347:
	mov A, B
	jeq .L1348, A, 0
	.loc 4 136 0
	#   }
	.loc 4 135 0
	#     n += s[i++] - '0';
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 135 0
	#     n += s[i++] - '0';
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L1349:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 135 0
	#     n += s[i++] - '0';
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L1350:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 136 0
	#   }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L1351
	.L1348:
	jmp .L43
	.L1351:
	jmp .L42
	.L43:
	.loc 4 138 0
	# }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
getenv:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 142 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
qsort:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 4 184 0
	#         size, compar);
	.loc 4 147 0
	#     return;
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 147 0
	#     return;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1352, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1352:
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov A, 0
	mov B, SP
	.loc 4 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 150 0
	#   char* left = base;
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1353:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1354:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 4 152 0
	# #if 0
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1355:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 179 0
	#   }
	.L44:
	.loc 4 162 0
	#       left += size;
	.L47:
	mov A, 32768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	mov A, .L1356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L1356:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1357, A, 0
	.loc 4 162 0
	#       left += size;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L1358
	.L1357:
	.loc 4 162 0
	#       left += size;
	jmp .L48
	.L1358:
	jmp .L47
	.L48:
	.loc 4 164 0
	#       right -= size;
	.L49:
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	mov A, .L1359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L1359:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 164 0
	#       right -= size;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 32768
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1360, A, 0
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L1361
	.L1360:
	.loc 4 164 0
	#       right -= size;
	jmp .L50
	.L1361:
	jmp .L49
	.L50:
	.loc 4 167 0
	#       break;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1362, A, 0
	.loc 4 167 0
	#       break;
	jmp .L46
	.L1362:
	.loc 4 172 0
	#     }
	.loc 4 169 0
	#       char tmp = left[i];
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 172 0
	#     }
	.L51:
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1363, A, 0
	jmp .L1364
	.L1363:
	.loc 4 172 0
	#     }
	jmp .L53
	.L1364:
	.loc 4 170 0
	#       left[i] = right[i];
	mov A, 0
	mov B, SP
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 171 0
	#       right[i] = tmp;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 171 0
	#       right[i] = tmp;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	.loc 4 170 0
	#       left[i] = right[i];
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 172 0
	#     }
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	.L52:
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	jmp .L51
	.L53:
	.loc 4 174 0
	#       pivot = right;
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1365, A, 0
	.loc 4 174 0
	#       pivot = right;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1366
	.L1365:
	.loc 4 174 0
	#       pivot = right;
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1367, A, 0
	.loc 4 174 0
	#       pivot = right;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L1367:
	.L1366:
	.loc 4 178 0
	#     right -= size;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777213
	store A, B
	.loc 4 179 0
	#   }
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 179 0
	#   }
	.L45:
	jmp .L44
	.L46:
	.loc 4 182 0
	#   qsort(base, (size_t)(left - base) / size, size, compar);
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 183 0
	#   qsort(right, (size_t)(base + nmemb * size - right) / size,
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 183 0
	#   qsort(right, (size_t)(base + nmemb * size - right) / size,
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1368:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L1369:
	mov A, B
	add SP, 4
	.loc 4 184 0
	#         size, compar);
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1370:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1371:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L1372:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
memset:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.file 5 "/Users/nullpo/dev/elvm/libc/string.h"
	.loc 5 13 0
	# }
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	.loc 5 11 0
	#   }
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 11 0
	#   }
	.L54:
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1373, A, 0
	jmp .L1374
	.L1373:
	.loc 5 11 0
	#   }
	jmp .L56
	.L1374:
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 11 0
	#   }
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 11 0
	#   }
	.L55:
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 11 0
	#   }
	jmp .L54
	.L56:
	.loc 5 13 0
	# }
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
memcpy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 21 0
	# }
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	.loc 5 19 0
	#   }
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 19 0
	#   }
	.L57:
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 13 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1375, A, 0
	jmp .L1376
	.L1375:
	.loc 5 19 0
	#   }
	jmp .L59
	.L1376:
	.loc 5 13 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 19 0
	#   }
	.loc 5 13 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 19 0
	#   }
	.L58:
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 19 0
	#   }
	jmp .L57
	.L59:
	.loc 5 21 0
	# }
	.loc 5 13 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strlen:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 27 0
	# }
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	.loc 5 26 0
	#   return r;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.L60:
	.loc 5 21 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	jeq .L1377, A, 0
	jmp .L1378
	.L1377:
	.loc 5 26 0
	#   return r;
	jmp .L62
	.L1378:
	.L61:
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 26 0
	#   return r;
	jmp .L60
	.L62:
	.loc 5 27 0
	# }
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcat:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 35 0
	# }
	.loc 5 31 0
	#   for (; *d; d++) {}
	mov A, 0
	mov B, SP
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 32 0
	#   for (; *s; s++, d++)
	.L63:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L1379, A, 0
	jmp .L1380
	.L1379:
	.loc 5 32 0
	#   for (; *s; s++, d++)
	jmp .L65
	.L1380:
	.L64:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 32 0
	#   for (; *s; s++, d++)
	jmp .L63
	.L65:
	.loc 5 33 0
	#     *d = *s;
	.L66:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jeq .L1381, A, 0
	jmp .L1382
	.L1381:
	.loc 5 33 0
	#     *d = *s;
	jmp .L68
	.L1382:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	.L67:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	jmp .L66
	.L68:
	.loc 5 35 0
	# }
	.loc 5 31 0
	#   for (; *d; d++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcpy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 43 0
	# }
	.loc 5 39 0
	#   for (; *s; s++, d++)
	mov A, 0
	mov B, SP
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 40 0
	#     *d = *s;
	.L69:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jeq .L1383, A, 0
	jmp .L1384
	.L1383:
	.loc 5 40 0
	#     *d = *s;
	jmp .L71
	.L1384:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	.L70:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	jmp .L69
	.L71:
	.loc 5 42 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 43 0
	# }
	.loc 5 39 0
	#   for (; *s; s++, d++)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 5 53 0
	# }
	.loc 5 50 0
	#       return 1;
	.L72:
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, 1
	jne .L1385, A, 0
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	ne B, 0
	.L1385:
	mov A, B
	jeq .L1386, A, 0
	jmp .L1387
	.L1386:
	.loc 5 50 0
	#       return 1;
	jmp .L74
	.L1387:
	.loc 5 48 0
	#       return -1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 48 0
	#       return -1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1388, A, 0
	.loc 5 48 0
	#       return -1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1388:
	.loc 5 50 0
	#       return 1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 50 0
	#       return 1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1389, A, 0
	.loc 5 50 0
	#       return 1;
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1389:
	.L73:
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 50 0
	#       return 1;
	jmp .L72
	.L74:
	.loc 5 53 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strchr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 5 61 0
	# }
	.loc 5 58 0
	#       return s;
	.L75:
	.loc 5 57 0
	#     if (*s == c)
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L1390, A, 0
	jmp .L1391
	.L1390:
	.loc 5 58 0
	#       return s;
	jmp .L77
	.L1391:
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1392, A, 0
	.loc 5 58 0
	#       return s;
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1392:
	.loc 5 58 0
	#       return s;
	.L76:
	.loc 5 57 0
	#     if (*s == c)
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 58 0
	#       return s;
	jmp .L75
	.L77:
	.loc 5 61 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strdup:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 5 68 0
	# }
	.loc 5 65 0
	#   char* r = malloc(l + 1);
	mov A, 0
	mov B, SP
	.loc 5 61 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L1393:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 66 0
	#   strcpy(r, s);
	mov A, 0
	mov B, SP
	.loc 5 65 0
	#   char* r = malloc(l + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 66 0
	#   strcpy(r, s);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L1394:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 67 0
	#   return r;
	.loc 5 61 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 66 0
	#   strcpy(r, s);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcpy
	.L1395:
	mov A, B
	add SP, 2
	.loc 5 68 0
	# }
	.loc 5 66 0
	#   strcpy(r, s);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtok_r:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 5 112 0
	#       }
	.loc 5 75 0
	#   int c, sc;
	.loc 5 76 0
	#   char *tok;
	.loc 5 77 0
	# 
	.loc 5 79 0
	#     return (NULL);
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 79 0
	#     return (NULL);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L1396, A, 0
	.loc 5 68 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 2
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 79 0
	#     return (NULL);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1396:
	mov A, B
	jeq .L1397, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1397:
	.loc 5 85 0
	#   c = *s++;
	.L86:
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 88 0
	#       goto cont;
	.loc 5 87 0
	#     if (c == sc)
	.loc 5 68 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 88 0
	#       goto cont;
	.L78:
	.loc 5 87 0
	#     if (c == sc)
	.loc 5 75 0
	#   int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 87 0
	#     if (c == sc)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1398, A, 0
	jmp .L1399
	.L1398:
	.loc 5 88 0
	#       goto cont;
	jmp .L80
	.L1399:
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1400, A, 0
	.loc 5 88 0
	#       goto cont;
	jmp .L86
	.L1400:
	.L79:
	jmp .L78
	.L80:
	.loc 5 94 0
	#   }
	.loc 5 92 0
	#     *last = NULL;
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 92 0
	#     *last = NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1401, A, 0
	.loc 5 94 0
	#   }
	.loc 5 93 0
	#     return (NULL);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 68 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 94 0
	#   }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1401:
	.loc 5 96 0
	# 
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 96 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 5 112 0
	#       }
	.L81:
	.loc 5 103 0
	#     spanp = delim;
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 104 0
	#     do {
	.loc 5 68 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 112 0
	#       }
	.L84:
	.loc 5 106 0
	#         if (c == 0)
	.loc 5 75 0
	#   int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1402, A, 0
	.loc 5 112 0
	#       }
	.loc 5 107 0
	#           s = NULL;
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 107 0
	#           s = NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1403, A, 0
	mov A, 0
	mov B, BP
	add B, 2
	store A, B
	jmp .L1404
	.L1403:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 107 0
	#           s = NULL;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1404:
	.loc 5 111 0
	#         return (tok);
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 112 0
	#       }
	.loc 5 77 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1402:
	.loc 5 112 0
	#       }
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 112 0
	#       }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1405, A, 0
	jmp .L84
	.L1405:
	.L85:
	.L82:
	jmp .L81
	.L83:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
charmap:
	.long 0
	.long 1
	.long 2
	.long 3
	.long 4
	.long 5
	.long 6
	.long 7
	.long 8
	.long 9
	.long 10
	.long 11
	.long 12
	.long 13
	.long 14
	.long 15
	.long 16
	.long 17
	.long 18
	.long 19
	.long 20
	.long 21
	.long 22
	.long 23
	.long 24
	.long 25
	.long 26
	.long 27
	.long 28
	.long 29
	.long 30
	.long 31
	.long 32
	.long 33
	.long 34
	.long 35
	.long 36
	.long 37
	.long 38
	.long 39
	.long 40
	.long 41
	.long 42
	.long 43
	.long 44
	.long 45
	.long 46
	.long 47
	.long 48
	.long 49
	.long 50
	.long 51
	.long 52
	.long 53
	.long 54
	.long 55
	.long 56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
	.long 64
	.long 97
	.long 98
	.long 99
	.long 100
	.long 101
	.long 102
	.long 103
	.long 104
	.long 105
	.long 106
	.long 107
	.long 108
	.long 109
	.long 110
	.long 111
	.long 112
	.long 113
	.long 114
	.long 115
	.long 116
	.long 117
	.long 118
	.long 119
	.long 120
	.long 121
	.long 122
	.long 91
	.long 92
	.long 93
	.long 94
	.long 95
	.long 96
	.long 97
	.long 98
	.long 99
	.long 100
	.long 101
	.long 102
	.long 103
	.long 104
	.long 105
	.long 106
	.long 107
	.long 108
	.long 109
	.long 110
	.long 111
	.long 112
	.long 113
	.long 114
	.long 115
	.long 116
	.long 117
	.long 118
	.long 119
	.long 120
	.long 121
	.long 122
	.long 123
	.long 124
	.long 125
	.long 126
	.long 127
	.long -128
	.long -127
	.long -126
	.long -125
	.long -124
	.long -123
	.long -122
	.long -121
	.long -120
	.long -119
	.long -118
	.long -117
	.long -116
	.long -115
	.long -114
	.long -113
	.long -112
	.long -111
	.long -110
	.long -109
	.long -108
	.long -107
	.long -106
	.long -105
	.long -104
	.long -103
	.long -102
	.long -101
	.long -100
	.long -99
	.long -98
	.long -97
	.long -96
	.long -95
	.long -94
	.long -93
	.long -92
	.long -91
	.long -90
	.long -89
	.long -88
	.long -87
	.long -86
	.long -85
	.long -84
	.long -83
	.long -82
	.long -81
	.long -80
	.long -79
	.long -78
	.long -77
	.long -76
	.long -75
	.long -74
	.long -73
	.long -72
	.long -71
	.long -70
	.long -69
	.long -68
	.long -67
	.long -66
	.long -65
	.long -64
	.long -63
	.long -62
	.long -61
	.long -60
	.long -59
	.long -58
	.long -57
	.long -56
	.long -55
	.long -54
	.long -53
	.long -52
	.long -51
	.long -50
	.long -49
	.long -48
	.long -47
	.long -46
	.long -45
	.long -44
	.long -43
	.long -42
	.long -41
	.long -40
	.long -39
	.long -38
	.long -37
	.long -36
	.long -35
	.long -34
	.long -33
	.long -32
	.long -31
	.long -30
	.long -29
	.long -28
	.long -27
	.long -26
	.long -25
	.long -24
	.long -23
	.long -22
	.long -21
	.long -20
	.long -19
	.long -18
	.long -17
	.long -16
	.long -15
	.long -14
	.long -13
	.long -12
	.long -11
	.long -10
	.long -9
	.long -8
	.long -7
	.long -6
	.long -5
	.long -4
	.long -3
	.long -2
	.long -1
	.text
strcasecmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov A, charmap
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 166 0
	# 
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.L87:
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 166 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1406, A, 0
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1407, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1407:
	jmp .L1408
	.L1406:
	jmp .L88
	.L1408:
	jmp .L87
	.L88:
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 166 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	sub A, 1
	mov B, BP
	add B, 16777213
	store A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strncasecmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 190 0
	# }
	.loc 5 186 0
	#         break;
	.loc 5 178 0
	#     const unsigned char *cm = charmap;
	.loc 5 171 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 178 0
	#     const unsigned char *cm = charmap;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1409, A, 0
	.loc 5 186 0
	#         break;
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov A, charmap
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov A, 0
	mov B, SP
	.loc 5 171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 181 0
	# 
	mov A, 0
	mov B, SP
	.loc 5 171 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 5 186 0
	#         break;
	.L89:
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 181 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1410, A, 0
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 181 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	sub A, 1
	mov B, BP
	add B, 16777213
	store A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1410:
	.loc 5 186 0
	#         break;
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 186 0
	#         break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1411, A, 0
	jmp .L90
	.L1411:
	.loc 5 171 0
	# }
	mov B, BP
	add B, 4
	load A, B
	sub A, 1
	mov B, BP
	add B, 4
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 186 0
	#         break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1412, A, 0
	jmp .L89
	.L1412:
	.L90:
	.L1409:
	.loc 5 190 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strpbrk:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 205 0
	# }
	.loc 5 197 0
	# 	int c, sc;
	.loc 5 198 0
	# 
	.loc 5 201 0
	# 			if (sc == c)
	.L91:
	.loc 5 200 0
	# 		for (scanp = s2; (sc = *scanp++) != 0;)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 200 0
	# 		for (scanp = s2; (sc = *scanp++) != 0;)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1413, A, 0
	.loc 5 201 0
	# 			if (sc == c)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 201 0
	# 			if (sc == c)
	.L93:
	.loc 5 197 0
	# 	int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 201 0
	# 			if (sc == c)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1414, A, 0
	jmp .L1415
	.L1414:
	jmp .L95
	.L1415:
	.loc 5 198 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1416, A, 0
	.loc 5 201 0
	# 			if (sc == c)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 201 0
	# 			if (sc == c)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1416:
	.L94:
	jmp .L93
	.L95:
	jmp .L1417
	.L1413:
	jmp .L92
	.L1417:
	jmp .L91
	.L92:
	.loc 5 205 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
puts:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 6 "/Users/nullpo/dev/elvm/libc/stdio.h"
	.loc 6 20 0
	# }
	.loc 6 19 0
	#   putchar('\n');
	.loc 5 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1418:
	mov A, B
	add SP, 1
	.loc 6 20 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vsnprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 38
	.loc 6 87 0
	# }
	.loc 6 24 0
	#   size_t off = 0;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 6 84 0
	#   }
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 20 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 84 0
	#   }
	.L96:
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	jeq .L1419, A, 0
	jmp .L1420
	.L1419:
	.loc 6 84 0
	#   }
	jmp .L98
	.L1420:
	.loc 6 38 0
	#     }
	.loc 6 28 0
	#       if (!is_overlow) {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 28 0
	#       if (!is_overlow) {
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1421, A, 0
	.loc 6 38 0
	#     }
	.loc 6 34 0
	#         }
	.loc 6 29 0
	#         if (off + 1 >= size) {
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	jeq .L1422, A, 0
	.loc 6 34 0
	#         }
	.loc 6 30 0
	#           is_overlow = 1;
	.loc 6 20 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 30 0
	#           is_overlow = 1;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 30 0
	#           is_overlow = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1423, A, 0
	.loc 6 32 0
	#         } else {
	.loc 6 31 0
	#           buf[off] = 0;
	mov A, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 6 32 0
	#         } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L1424
	.L1423:
	.loc 6 34 0
	#         }
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 34 0
	#         }
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1424:
	.L1422:
	.loc 6 37 0
	#       continue;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 6 38 0
	#     }
	jmp .L97
	.L1421:
	.loc 6 41 0
	#     char* cur_p;
	.loc 6 42 0
	#  retry:
	.loc 6 72 0
	#     }
	.loc 6 43 0
	#     switch (*++inp) {
	.L108:
	.loc 6 72 0
	#     }
	.loc 6 43 0
	#     switch (*++inp) {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777179
	store A, B
	.loc 6 72 0
	#     }
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 108
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1425, A, 0
	jmp .L100
	.L1425:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 100
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1426, A, 0
	jmp .L101
	.L1426:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1427, A, 0
	jmp .L102
	.L1427:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1428, A, 0
	jmp .L103
	.L1428:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 115
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1429, A, 0
	jmp .L104
	.L1429:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 99
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1430, A, 0
	jmp .L105
	.L1430:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1431, A, 0
	jmp .L106
	.L1431:
	jmp .L107
	.loc 6 45 0
	#         goto retry;
	.L100:
	jmp .L108
	.loc 6 47 0
	#       case 'u':
	.L101:
	.L102:
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 47 0
	#       case 'u':
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_int
	.L1432:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 50 0
	#       case 'x':
	jmp .L99
	.loc 6 51 0
	#         cur_p = stringify_hex(va_arg(ap, long), cur_buf + sizeof(cur_buf) - 1);
	.L103:
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 51 0
	#         cur_p = stringify_hex(va_arg(ap, long), cur_buf + sizeof(cur_buf) - 1);
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_hex
	.L1433:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 53 0
	#       case 's':
	jmp .L99
	.loc 6 54 0
	#         cur_p = va_arg(ap, char*);
	.L104:
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 56 0
	#       case 'c':
	jmp .L99
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	.L105:
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 59 0
	#         cur_p = cur_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 59 0
	#         cur_p = cur_buf;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 60 0
	#         break;
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 61 0
	#       case '%':
	jmp .L99
	.loc 6 62 0
	#         cur_buf[0] = '%';
	.L106:
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 62 0
	#         cur_buf[0] = '%';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 64 0
	#         cur_p = cur_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 64 0
	#         cur_p = cur_buf;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 65 0
	#         break;
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 66 0
	#       default:
	jmp .L99
	.loc 6 67 0
	#         print_int(*inp);
	.L107:
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_int
	.L1434:
	mov A, B
	add SP, 1
	.loc 6 69 0
	#         print_str(fmt);
.data
	.L1435:
	.string " in "
.text
	mov A, .L1435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1436:
	mov A, B
	add SP, 1
	.loc 6 70 0
	#         print_str(": unknown format!\n");
	.loc 6 20 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1437:
	mov A, B
	add SP, 1
	.loc 6 71 0
	#         exit(1);
.data
	.L1438:
	.string ": unknown format!\n"
.text
	mov A, .L1438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1439:
	mov A, B
	add SP, 1
	.loc 6 72 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L99:
	.loc 6 75 0
	#     if (!is_overlow) {
	mov A, 0
	mov B, SP
	.loc 6 42 0
	#  retry:
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L1440:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777178
	store A, B
	.loc 6 81 0
	#       }
	.loc 6 76 0
	#       if (off + len >= size) {
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	jeq .L1441, A, 0
	.loc 6 81 0
	#       }
	.loc 6 77 0
	#         is_overlow = 1;
	.loc 6 20 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 77 0
	#         is_overlow = 1;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 75 0
	#     if (!is_overlow) {
	mov B, BP
	add B, 16777178
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1442, A, 0
	.loc 6 79 0
	#       } else {
	.loc 6 78 0
	#         buf[off] = 0;
	mov A, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 6 79 0
	#       } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L1443
	.L1442:
	.loc 6 81 0
	#       }
	.loc 6 42 0
	#  retry:
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 81 0
	#       }
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcpy
	.L1444:
	mov A, B
	add SP, 2
	.L1443:
	.L1441:
	.loc 6 84 0
	#   }
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 75 0
	#     if (!is_overlow) {
	mov B, BP
	add B, 16777178
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 84 0
	#   }
	.L97:
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 6 84 0
	#   }
	jmp .L96
	.L98:
	.loc 6 86 0
	#   return off;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 87 0
	# }
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vsprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 91 0
	# }
	.loc 6 87 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 91 0
	# }
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 87 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L1445:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
snprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 99 0
	# }
	.loc 6 95 0
	#   va_start(ap, fmt);
	.loc 6 96 0
	#   int r = vsnprintf(buf, size, fmt , ap);
	mov A, BP
	add A, 4
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 97 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 95 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 91 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L1446:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 99 0
	# }
	.loc 6 97 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 107 0
	# }
	.loc 6 103 0
	#   va_start(ap, fmt);
	.loc 6 104 0
	#   int r = vsprintf(buf, fmt, ap);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 105 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 103 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 99 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsprintf
	.L1447:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 107 0
	# }
	.loc 6 105 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 257
	.loc 6 115 0
	# }
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	.loc 6 112 0
	#   buf[r] = 0;
	mov A, 0
	mov B, SP
	.loc 6 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 112 0
	#   buf[r] = 0;
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L1448:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16776959
	store A, B
	.loc 6 113 0
	#   print_str(buf);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 112 0
	#   buf[r] = 0;
	mov B, BP
	add B, 16776959
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 114 0
	#   return r;
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1449:
	mov A, B
	add SP, 1
	.loc 6 115 0
	# }
	.loc 6 112 0
	#   buf[r] = 0;
	mov B, BP
	add B, 16776959
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
printf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 123 0
	# }
	.loc 6 119 0
	#   va_start(ap, fmt);
	.loc 6 120 0
	#   int r = vprintf(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 121 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 119 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 115 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L1450:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 123 0
	# }
	.loc 6 121 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
stdin:
	.long 1
	.data 0
stdout:
	.long 1
	.data 0
stderr:
	.long 1
	.text
fprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 6 135 0
	# }
	.loc 6 132 0
	#   va_start(ap, fmt);
	.loc 6 133 0
	#   vprintf(fmt, ap);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 134 0
	#   va_end(ap);
	.loc 6 132 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L1451:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vfprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 139 0
	# }
	.loc 6 135 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1452
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L1452:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fileno:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 143 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fopen:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 147 0
	# }
	.loc 6 123 0
	# }
	mov B, stdin
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fclose:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 151 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fwrite:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 6 159 0
	# }
	.loc 6 155 0
	#   size_t l = (int)s * (int)n;
	mov A, 0
	mov B, SP
	.loc 6 151 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov A, 0
	mov B, SP
	.loc 6 151 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	.loc 6 151 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1453
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1453:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 157 0
	#     putchar(str[i]);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.L109:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1454, A, 0
	jmp .L1455
	.L1454:
	.loc 6 157 0
	#     putchar(str[i]);
	jmp .L111
	.L1455:
	.loc 6 155 0
	#   size_t l = (int)s * (int)n;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 157 0
	#     putchar(str[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L110:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	jmp .L109
	.L111:
	.loc 6 159 0
	# }
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fputs:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 163 0
	# }
	.loc 6 159 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1456
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1456:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fgets:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 176 0
	# }
	.loc 6 172 0
	#     }
	.loc 6 167 0
	#     int c = getchar();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 6 172 0
	#     }
	.L112:
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 167 0
	#     int c = getchar();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1457, A, 0
	jmp .L1458
	.L1457:
	.loc 6 172 0
	#     }
	jmp .L114
	.L1458:
	.loc 6 168 0
	#     s[i] = c;
	mov A, 0
	mov B, SP
	getc A
	jne .L1459, A, 0
	mov A, -1
	.L1459:
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 169 0
	#     if (c == '\n' || c == EOF) {
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 169 0
	#     if (c == '\n' || c == EOF) {
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	.loc 6 170 0
	#       s[i + 1] = 0;
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 170 0
	#       s[i + 1] = 0;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L1460, A, 0
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 170 0
	#       s[i + 1] = 0;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1460:
	mov A, B
	jeq .L1461, A, 0
	.loc 6 172 0
	#     }
	.loc 6 171 0
	#       return i;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 171 0
	#       return i;
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 171 0
	#       return i;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1461:
	.loc 6 172 0
	#     }
	.L113:
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	jmp .L112
	.L114:
	.loc 6 175 0
	#   return size;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 175 0
	#   return size;
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 175 0
	#   return size;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 176 0
	# }
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
g_ungot:
	.long -1
	.data
	eof_seen:

	.long 0
	.text
fgetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 6 195 0
	# }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	.loc 6 191 0
	#   }
	.loc 6 184 0
	#     // A hack for whitespace, in which getchar after EOF is not
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 184 0
	#     // A hack for whitespace, in which getchar after EOF is not
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1462, A, 0
	.loc 6 191 0
	#   }
	.loc 6 187 0
	#       return EOF;
	.loc 6 176 0
	# }
	mov B, eof_seen
	load A, B
	jeq .L1463, A, 0
	.loc 6 187 0
	#       return EOF;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1463:
	.loc 6 189 0
	#     eof_seen = r == EOF;
	getc A
	jne .L1464, A, 0
	mov A, -1
	.L1464:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 190 0
	#     return r;
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 190 0
	#     return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, eof_seen
	store A, B
	.loc 6 191 0
	#   }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1462:
	.loc 6 193 0
	#   g_ungot = EOF;
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 194 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, g_ungot
	store A, B
	.loc 6 195 0
	# }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
getc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 199 0
	# }
	.loc 6 195 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1465
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fgetc
	.L1465:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ungetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 205 0
	# }
	.loc 6 203 0
	#     return g_ungot = c;
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 203 0
	#     return g_ungot = c;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1466, A, 0
	.loc 6 199 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, g_ungot
	store A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1466:
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_buffer:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.file 7 "out/8cc.c"
	.loc 7 16 0
	# }
	.loc 7 12 0
	#     r->body = malloc(BUFFER_INIT_SIZE);
	mov A, 0
	mov B, SP
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1467
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L1467:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 13 0
	#     r->nalloc = BUFFER_INIT_SIZE;
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1468
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L1468:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 12 0
	#     r->body = malloc(BUFFER_INIT_SIZE);
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 14 0
	#     r->len = 0;
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 12 0
	#     r->body = malloc(BUFFER_INIT_SIZE);
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 15 0
	#     return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 12 0
	#     r->body = malloc(BUFFER_INIT_SIZE);
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 16 0
	# }
	.loc 7 12 0
	#     r->body = malloc(BUFFER_INIT_SIZE);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
realloc_body:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 24 0
	# }
	.loc 7 20 0
	#     char *body = malloc(newsize);
	mov A, 0
	mov B, SP
	.loc 7 16 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 20 0
	#     char *body = malloc(newsize);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1469:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 21 0
	#     memcpy(body, b->body, b->len);
	mov A, 0
	mov B, SP
	.loc 7 20 0
	#     char *body = malloc(newsize);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L1470:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 22 0
	#     b->body = body;
	.loc 7 16 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 22 0
	#     b->body = body;
	.loc 7 16 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 21 0
	#     memcpy(body, b->body, b->len);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L1471:
	mov A, B
	add SP, 3
	.loc 7 23 0
	#     b->nalloc = newsize;
	.loc 7 21 0
	#     memcpy(body, b->body, b->len);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 16 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 24 0
	# }
	.loc 7 20 0
	#     char *body = malloc(newsize);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 16 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
buf_body:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 28 0
	# }
	.loc 7 24 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
buf_len:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 32 0
	# }
	.loc 7 28 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
buf_write:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 38 0
	# }
	.loc 7 36 0
	#         realloc_body(b);
	.loc 7 32 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 36 0
	#         realloc_body(b);
	.loc 7 32 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 36 0
	#         realloc_body(b);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1472, A, 0
	.loc 7 32 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp realloc_body
	.L1473:
	mov A, B
	add SP, 1
	.L1472:
	.loc 7 38 0
	# }
	.loc 7 32 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 38 0
	# }
	.loc 7 32 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 38 0
	# }
	.loc 7 32 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
buf_append:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L115:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 38 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1474, A, 0
	jmp .L1475
	.L1474:
	.loc 7 42 0
	#         buf_write(b, s[i]);
	jmp .L117
	.L1475:
	.loc 7 38 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 38 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1476
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L1476:
	mov A, B
	add SP, 2
	.loc 7 42 0
	#         buf_write(b, s[i]);
	.L116:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L115
	.L117:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
buf_printf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 58 0
	#     }
	.loc 7 47 0
	#     for (;;) {
	.loc 7 58 0
	#     }
	.L118:
	.loc 7 49 0
	#         va_start(args, fmt);
	mov A, 0
	mov B, SP
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 49 0
	#         va_start(args, fmt);
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 50 0
	#         int written = vsnprintf(b->body + b->len, avail, fmt, args);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 51 0
	#         va_end(args);
	mov A, 0
	mov B, SP
	.loc 7 47 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 51 0
	#         va_end(args);
	.loc 7 49 0
	#         va_start(args, fmt);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 51 0
	#         va_end(args);
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 51 0
	#         va_end(args);
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1477
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L1477:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 55 0
	#         }
	.loc 7 53 0
	#             realloc_body(b);
	.loc 7 49 0
	#         va_start(args, fmt);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 51 0
	#         va_end(args);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1478, A, 0
	.loc 7 55 0
	#         }
	.loc 7 54 0
	#             continue;
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1479
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp realloc_body
	.L1479:
	mov A, B
	add SP, 1
	.loc 7 55 0
	#         }
	jmp .L119
	.L1478:
	.loc 7 57 0
	#         return;
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 51 0
	#         va_end(args);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 42 0
	#         buf_write(b, s[i]);
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 58 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L119:
	jmp .L118
	.L120:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vformat:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 75 0
	#     }
	.loc 7 63 0
	#     va_list aq;
	mov A, 0
	mov B, SP
	mov A, .L1480
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L1480:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 64 0
	#     for (;;) {
	.loc 7 75 0
	#     }
	.L121:
	.loc 7 66 0
	#         va_copy(aq, ap);
	mov A, 0
	mov B, SP
	.loc 7 63 0
	#     va_list aq;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 66 0
	#         va_copy(aq, ap);
	.loc 7 63 0
	#     va_list aq;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 67 0
	#         int written = vsnprintf(b->body + b->len, avail, fmt, aq);
	.loc 7 58 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 68 0
	#         va_end(aq);
	mov A, 0
	mov B, SP
	.loc 7 64 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 58 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 68 0
	#         va_end(aq);
	.loc 7 66 0
	#         va_copy(aq, ap);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 68 0
	#         va_end(aq);
	.loc 7 63 0
	#     va_list aq;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 68 0
	#         va_end(aq);
	.loc 7 63 0
	#     va_list aq;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L1481:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 72 0
	#         }
	.loc 7 70 0
	#             realloc_body(b);
	.loc 7 66 0
	#         va_copy(aq, ap);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 68 0
	#         va_end(aq);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1482, A, 0
	.loc 7 72 0
	#         }
	.loc 7 71 0
	#             continue;
	.loc 7 63 0
	#     va_list aq;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp realloc_body
	.L1483:
	mov A, B
	add SP, 1
	.loc 7 72 0
	#         }
	jmp .L122
	.L1482:
	.loc 7 74 0
	#         return buf_body(b);
	.loc 7 63 0
	#     va_list aq;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 68 0
	#         va_end(aq);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 63 0
	#     va_list aq;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 75 0
	#     }
	.loc 7 63 0
	#     va_list aq;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L1484:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 75 0
	#     }
	.L122:
	jmp .L121
	.L123:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
format:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 84 0
	# }
	.loc 7 80 0
	#     va_start(ap, fmt);
	.loc 7 81 0
	#     char *r = vformat(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 82 0
	#     va_end(ap);
	mov A, 0
	mov B, SP
	.loc 7 80 0
	#     va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 75 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vformat
	.L1485:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 84 0
	# }
	.loc 7 82 0
	#     va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
quote:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 97 0
	# }
	.loc 7 95 0
	#     }
	.loc 7 88 0
	#     case '"': return "\\\"";
	.loc 7 84 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 95 0
	#     }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1486, A, 0
	jmp .L125
	.L1486:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1487, A, 0
	jmp .L126
	.L1487:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1488, A, 0
	jmp .L127
	.L1488:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1489, A, 0
	jmp .L128
	.L1489:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1490, A, 0
	jmp .L129
	.L1490:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1491, A, 0
	jmp .L130
	.L1491:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1492, A, 0
	jmp .L131
	.L1492:
	jmp .L124
	.loc 7 89 0
	#     case '\\': return "\\\\";
	.L125:
.data
	.L1493:
	.string "\\\""
.text
	mov A, .L1493
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 90 0
	#     case '\b': return "\\b";
	.L126:
.data
	.L1494:
	.string "\\\\"
.text
	mov A, .L1494
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 91 0
	#     case '\f': return "\\f";
	.L127:
.data
	.L1495:
	.string "\\b"
.text
	mov A, .L1495
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 92 0
	#     case '\n': return "\\n";
	.L128:
.data
	.L1496:
	.string "\\f"
.text
	mov A, .L1496
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 93 0
	#     case '\r': return "\\r";
	.L129:
.data
	.L1497:
	.string "\\n"
.text
	mov A, .L1497
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 94 0
	#     case '\t': return "\\t";
	.L130:
.data
	.L1498:
	.string "\\r"
.text
	mov A, .L1498
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 95 0
	#     }
	.L131:
.data
	.L1499:
	.string "\\t"
.text
	mov A, .L1499
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L124:
	.loc 7 97 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
print:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 108 0
	# #else
	.loc 7 101 0
	#     if (q) {
	mov A, 0
	mov B, SP
	.loc 7 97 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp quote
	.L1500:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 108 0
	# #else
	.loc 7 101 0
	#     if (q) {
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L1501, A, 0
	.loc 7 103 0
	#     } else if (isprint(c)) {
	.loc 7 101 0
	#     if (q) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 103 0
	#     } else if (isprint(c)) {
.data
	.L1502:
	.string "%s"
.text
	mov A, .L1502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 97 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1503
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L1503:
	mov A, B
	add SP, 3
	jmp .L1504
	.L1501:
	.loc 7 108 0
	# #else
	.loc 7 103 0
	#     } else if (isprint(c)) {
	.loc 7 97 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isprint
	.L1505:
	mov A, B
	add SP, 1
	jeq .L1506, A, 0
	.loc 7 105 0
	#     } else {
	.loc 7 97 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 105 0
	#     } else {
.data
	.L1507:
	.string "%c"
.text
	mov A, .L1507
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 97 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L1508:
	mov A, B
	add SP, 3
	jmp .L1509
	.L1506:
	.loc 7 108 0
	# #else
	.loc 7 97 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 108 0
	# #else
.data
	.L1510:
	.string "\\x%x"
.text
	mov A, .L1510
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 97 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1511
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L1511:
	mov A, B
	add SP, 3
	.L1509:
	.L1504:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
quote_cstring:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 119 0
	# }
	.loc 7 116 0
	#     while (*p)
	mov A, 0
	mov B, SP
	mov A, .L1512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L1512:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 117 0
	#         print(b, *p++);
	.L132:
	.loc 7 108 0
	# #else
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L1513, A, 0
	.loc 7 117 0
	#         print(b, *p++);
	.loc 7 108 0
	# #else
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 116 0
	#     while (*p)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print
	.L1514:
	mov A, B
	add SP, 2
	jmp .L1515
	.L1513:
	.loc 7 117 0
	#         print(b, *p++);
	jmp .L133
	.L1515:
	jmp .L132
	.L133:
	.loc 7 119 0
	# }
	.loc 7 116 0
	#     while (*p)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L1516:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
quote_cstring_len:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 126 0
	# }
	.loc 7 123 0
	#     for (int i = 0; i < len; i++)
	mov A, 0
	mov B, SP
	mov A, .L1517
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L1517:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 124 0
	#         print(b, p[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.L134:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 119 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1518, A, 0
	jmp .L1519
	.L1518:
	.loc 7 124 0
	#         print(b, p[i]);
	jmp .L136
	.L1519:
	.loc 7 119 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 124 0
	#         print(b, p[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 123 0
	#     for (int i = 0; i < len; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1520
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print
	.L1520:
	mov A, B
	add SP, 2
	.loc 7 124 0
	#         print(b, p[i]);
	.L135:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	jmp .L134
	.L136:
	.loc 7 126 0
	# }
	.loc 7 123 0
	#     for (int i = 0; i < len; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L1521:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
quote_char:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 132 0
	# }
	.loc 7 130 0
	#     if (c == '\'') return "\\'";
	.loc 7 126 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 130 0
	#     if (c == '\'') return "\\'";
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1522, A, 0
.data
	.L1523:
	.string "\\\\"
.text
	mov A, .L1523
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1522:
	.loc 7 131 0
	#     return format("%c", c);
	.loc 7 126 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 131 0
	#     return format("%c", c);
	mov A, 39
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1524, A, 0
.data
	.L1525:
	.string "\\'"
.text
	mov A, .L1525
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1524:
	.loc 7 132 0
	# }
	.loc 7 126 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 132 0
	# }
.data
	.L1526:
	.string "%c"
.text
	mov A, .L1526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L1527:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
setlocale:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 8 "/Users/nullpo/dev/elvm/libc/locale.h"
	.loc 8 7 0
	# }
	.loc 7 132 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
mmap:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 9 "/Users/nullpo/dev/elvm/libc/unistd.h"
	.loc 9 16 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 8 7 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L1528:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
munmap:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 9 16 0
	# }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isatty:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 9 23 0
	# }
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
macros:
	.data 1
	.L1529:
	.long 0
	.long 0
	.data 0
	.long .L1529
	.data 0
once:
	.data 1
	.L1530:
	.long 0
	.long 0
	.data 0
	.long .L1530
	.data 0
keywords:
	.data 1
	.L1531:
	.long 0
	.long 0
	.data 0
	.long .L1531
	.data 0
include_guard:
	.data 1
	.L1532:
	.long 0
	.long 0
	.data 0
	.long .L1532
	.data 0
cond_incl_stack:
	.data 1
	.L1533:
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L1533
	.data 0
std_include_path:
	.data 1
	.L1534:
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L1534
	.data
	now:

	.data 0
cpp_token_zero:
	.data 1
	.L1535:
	.long 2
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 2
	.L1536:
	.string "0"
	.data 1
	.long .L1536
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L1535
	.data 0
cpp_token_one:
	.data 1
	.L1537:
	.long 2
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 2
	.L1538:
	.string "1"
	.data 1
	.long .L1538
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L1537
	.text
make_cond_incl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 194 0
	# }
	.loc 7 191 0
	#     r->ctx = IN_THEN;
	mov A, 0
	mov B, SP
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L1539:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 192 0
	#     r->wastrue = wastrue;
	.loc 9 23 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 191 0
	#     r->ctx = IN_THEN;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 193 0
	#     return r;
	.loc 9 23 0
	# }
	mov B, BP
	add B, 2
	load A, B
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 191 0
	#     r->ctx = IN_THEN;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 194 0
	# }
	.loc 7 191 0
	#     r->ctx = IN_THEN;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 200 0
	# }
	.loc 7 198 0
	#     *r = *tmpl;
	mov A, 0
	mov B, SP
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L1540:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 199 0
	#     return r;
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 194 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 200 0
	# }
	.loc 7 198 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_obj_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 204 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 200 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov A, BP
	add A, -5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_macro
	.L1541:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_func_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 208 0
	#             MACRO_FUNC, .nargs = nargs, .body = body, .is_varg = is_varg });
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov B, BP
	add B, 16777211
	mov A, 1
	store A, B
	.loc 7 204 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 208 0
	#             MACRO_FUNC, .nargs = nargs, .body = body, .is_varg = is_varg });
	.loc 7 204 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov A, BP
	add A, -5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_macro
	.L1542:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_special_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 213 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 2
	store A, B
	.loc 7 208 0
	#             MACRO_FUNC, .nargs = nargs, .body = body, .is_varg = is_varg });
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	mov A, BP
	add A, -5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_macro
	.L1543:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_macro_token:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 224 0
	# }
	.loc 7 217 0
	#     r->kind = TMACRO_PARAM;
	mov A, 0
	mov B, SP
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L1544:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 218 0
	#     r->is_vararg = is_vararg;
	.loc 6 205 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 217 0
	#     r->kind = TMACRO_PARAM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 219 0
	#     r->hideset = NULL;
	.loc 7 213 0
	# }
	mov B, BP
	add B, 3
	load A, B
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 217 0
	#     r->kind = TMACRO_PARAM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 220 0
	#     r->position = position;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 217 0
	#     r->kind = TMACRO_PARAM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 221 0
	#     r->space = false;
	.loc 7 213 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 217 0
	#     r->kind = TMACRO_PARAM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 222 0
	#     r->bol = false;
	mov A, 0
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 217 0
	#     r->kind = TMACRO_PARAM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 223 0
	#     return r;
	mov A, 0
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 217 0
	#     r->kind = TMACRO_PARAM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 224 0
	# }
	.loc 7 217 0
	#     r->kind = TMACRO_PARAM;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
copy_token:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 230 0
	# }
	.loc 7 228 0
	#     *r = *tok;
	mov A, 0
	mov B, SP
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L1545:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 229 0
	#     return r;
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 224 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 228 0
	#     *r = *tok;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 230 0
	# }
	.loc 7 228 0
	#     *r = *tok;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_expect:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 235 0
	#         errort(tok, "%c expected, but got %s", id, tok2s(tok));
	.loc 7 234 0
	#     if (!is_keyword(tok, id))
	mov A, 0
	mov B, SP
	mov A, .L1546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1546:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 235 0
	#         errort(tok, "%c expected, but got %s", id, tok2s(tok));
	.loc 7 230 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 234 0
	#     if (!is_keyword(tok, id))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1547:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L1548, A, 0
	.loc 7 235 0
	#         errort(tok, "%c expected, but got %s", id, tok2s(tok));
	.loc 7 234 0
	#     if (!is_keyword(tok, id))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1549:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 235 0
	#         errort(tok, "%c expected, but got %s", id, tok2s(tok));
	.loc 7 230 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 235 0
	#         errort(tok, "%c expected, but got %s", id, tok2s(tok));
.data
	.L1550:
	.string "%c expected, but got %s"
.text
	mov A, .L1550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 234 0
	#     if (!is_keyword(tok, id))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1551:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 235 0
	#         errort(tok, "%c expected, but got %s", id, tok2s(tok));
.data
	.L1552:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1553:
	mov A, B
	add SP, 5
	.L1548:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_ident:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 244 0
	# }
	.loc 7 235 0
	#         errort(tok, "%c expected, but got %s", id, tok2s(tok));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L1554, A, 0
	.loc 7 244 0
	# }
	.loc 7 235 0
	#         errort(tok, "%c expected, but got %s", id, tok2s(tok));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 244 0
	# }
	.loc 7 235 0
	#         errort(tok, "%c expected, but got %s", id, tok2s(tok));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L1555:
	mov A, B
	add SP, 2
	eq A, 0
	mov B, A
	ne B, 0
	.L1554:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_next:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 252 0
	# }
	.loc 7 248 0
	#     if (is_keyword(tok, id))
	mov A, 0
	mov B, SP
	mov A, .L1556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1556:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 249 0
	#         return true;
	.loc 7 244 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 248 0
	#     if (is_keyword(tok, id))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1557:
	mov A, B
	add SP, 2
	jeq .L1558, A, 0
	.loc 7 249 0
	#         return true;
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1558:
	.loc 7 251 0
	#     return false;
	.loc 7 248 0
	#     if (is_keyword(tok, id))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L1559:
	mov A, B
	add SP, 1
	.loc 7 252 0
	# }
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
propagate_space:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 260 0
	# }
	.loc 7 256 0
	#         return;
	.loc 7 252 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1560:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 256 0
	#         return;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1561, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1561:
	.loc 7 258 0
	#     tok->space = tmpl->space;
	mov A, 0
	mov B, SP
	.loc 7 252 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_head
	.L1562:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_token
	.L1563:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 259 0
	#     vec_set(tokens, 0, tok);
	.loc 7 252 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 258 0
	#     tok->space = tmpl->space;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 260 0
	# }
	.loc 7 258 0
	#     tok->space = tmpl->space;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 260 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 252 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_set
	.L1564:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_read_ident:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 271 0
	# }
	.loc 7 268 0
	#     if (tok->kind != TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L1565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1565:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 269 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 268 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1566, A, 0
	.loc 7 269 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 268 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1567:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 269 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1568:
	.string "identifier expected, but got %s"
.text
	mov A, .L1568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 268 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1569:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 269 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1570:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1571:
	mov A, B
	add SP, 4
	.L1566:
	.loc 7 271 0
	# }
	.loc 7 268 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
expect_newline:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 276 0
	#         errort(tok, "newline expected, but got %s", tok2s(tok));
	.loc 7 275 0
	#     if (tok->kind != TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L1572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1572:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 276 0
	#         errort(tok, "newline expected, but got %s", tok2s(tok));
	.loc 7 275 0
	#     if (tok->kind != TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1573, A, 0
	.loc 7 276 0
	#         errort(tok, "newline expected, but got %s", tok2s(tok));
	.loc 7 275 0
	#     if (tok->kind != TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1574:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 276 0
	#         errort(tok, "newline expected, but got %s", tok2s(tok));
.data
	.L1575:
	.string "newline expected, but got %s"
.text
	mov A, .L1575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 275 0
	#     if (tok->kind != TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1576:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 276 0
	#         errort(tok, "newline expected, but got %s", tok2s(tok));
.data
	.L1577:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1577
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1578:
	mov A, B
	add SP, 4
	.L1573:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_one_arg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 314 0
	#     }
	.loc 7 281 0
	#     int level = 0;
	mov A, 0
	mov B, SP
	mov A, .L1579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1579:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 282 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 314 0
	#     }
	.L148:
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov A, 0
	mov B, SP
	mov A, .L1580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1580:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 285 0
	#             errort(ident, "unterminated macro argument list");
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1581, A, 0
	.loc 7 285 0
	#             errort(ident, "unterminated macro argument list");
.data
	.L1582:
	.string "unterminated macro argument list"
.text
	mov A, .L1582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 276 0
	#         errort(tok, "newline expected, but got %s", tok2s(tok));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1583:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 285 0
	#             errort(ident, "unterminated macro argument list");
.data
	.L1584:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1585:
	mov A, B
	add SP, 3
	.L1581:
	.loc 7 287 0
	#             continue;
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1586, A, 0
	.loc 7 287 0
	#             continue;
	jmp .L149
	.L1586:
	.loc 7 291 0
	#         }
	.loc 7 289 0
	#             read_directive(tok);
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, 0
	jeq .L1587, A, 0
	.loc 7 289 0
	#             read_directive(tok);
	mov A, 35
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1588:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L1587:
	mov A, B
	jeq .L1589, A, 0
	.loc 7 291 0
	#         }
	.loc 7 290 0
	#             continue;
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_directive
	.L1590:
	mov A, B
	add SP, 1
	.loc 7 291 0
	#         }
	jmp .L149
	.L1589:
	.loc 7 296 0
	#         }
	.loc 7 293 0
	#             unget_token(tok);
	.loc 7 282 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 293 0
	#             unget_token(tok);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L1591, A, 0
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1592:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L1591:
	mov A, B
	jeq .L1593, A, 0
	.loc 7 296 0
	#         }
	.loc 7 294 0
	#             *end = true;
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L1594:
	mov A, B
	add SP, 1
	.loc 7 295 0
	#             return r;
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 276 0
	#         errort(tok, "newline expected, but got %s", tok2s(tok));
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 296 0
	#         }
	.loc 7 281 0
	#     int level = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1593:
	.loc 7 298 0
	#             return r;
	.loc 7 282 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 298 0
	#             return r;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L1596, A, 0
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1597:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L1596:
	mov A, B
	mov B, 0
	jeq .L1595, A, 0
	.loc 7 298 0
	#             return r;
	.loc 7 276 0
	#         errort(tok, "newline expected, but got %s", tok2s(tok));
	mov B, BP
	add B, 4
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L1595:
	mov A, B
	jeq .L1598, A, 0
	.loc 7 298 0
	#             return r;
	.loc 7 281 0
	#     int level = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1598:
	.loc 7 300 0
	#             level++;
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1599:
	mov A, B
	add SP, 2
	jeq .L1600, A, 0
	.loc 7 300 0
	#             level++;
	.loc 7 282 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.L1600:
	.loc 7 302 0
	#             level--;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1601:
	mov A, B
	add SP, 2
	jeq .L1602, A, 0
	.loc 7 302 0
	#             level--;
	.loc 7 282 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.L1602:
	.loc 7 312 0
	#         }
	.loc 7 309 0
	#             tok = copy_token(tok);
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L1603, A, 0
	.loc 7 312 0
	#         }
	.loc 7 310 0
	#             tok->bol = false;
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_token
	.L1604:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 311 0
	#             tok->space = true;
	mov A, 0
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 312 0
	#         }
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.L1603:
	.loc 7 314 0
	#     }
	.loc 7 284 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 281 0
	#     int level = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1605:
	mov A, B
	add SP, 2
	.loc 7 314 0
	#     }
	.L149:
	jmp .L148
	.L150:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_read_args:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 327 0
	# }
	.loc 7 319 0
	#     bool end = false;
	mov A, 0
	mov B, SP
	mov A, .L1606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1606:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.file 10 "/Users/nullpo/dev/elvm/libc/stdbool.h"
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 323 0
	#     }
	.L151:
	.loc 7 321 0
	#         bool in_ellipsis = (macro->is_varg && vec_len(r) + 1 == macro->nargs);
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	jeq .L1607, A, 0
	.loc 7 323 0
	#     }
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 314 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, 0
	jeq .L1608, A, 0
	.loc 10 4 0
	# #define true 1
	.loc 7 319 0
	#     bool end = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1609
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1609:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 10 4 0
	# #define true 1
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 314 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1608:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 323 0
	#     }
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777213
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 323 0
	#     }
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 314 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_one_arg
	.L1610:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 319 0
	#     bool end = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1611:
	mov A, B
	add SP, 2
	jmp .L1612
	.L1607:
	.loc 7 323 0
	#     }
	jmp .L152
	.L1612:
	jmp .L151
	.L152:
	.loc 7 325 0
	#         vec_push(r, make_vector());
	.loc 7 314 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, 0
	jeq .L1613, A, 0
	.loc 7 325 0
	#         vec_push(r, make_vector());
	.loc 7 319 0
	#     bool end = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1614
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1614:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 325 0
	#         vec_push(r, make_vector());
	.loc 7 314 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 325 0
	#         vec_push(r, make_vector());
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1613:
	mov A, B
	jeq .L1615, A, 0
	mov A, .L1616
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1616:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 319 0
	#     bool end = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1617
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1617:
	mov A, B
	add SP, 2
	.L1615:
	.loc 7 327 0
	# }
	.loc 7 319 0
	#     bool end = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_args:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 340 0
	# }
	.loc 7 335 0
	#     }
	.loc 7 331 0
	#         // If a macro M has no parameter, argument list of M()
	.loc 7 327 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 331 0
	#         // If a macro M has no parameter, argument list of M()
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L1618, A, 0
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1619
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek_token
	.L1619:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1620
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1620:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L1618:
	mov A, B
	jeq .L1621, A, 0
	.loc 7 335 0
	#     }
	mov A, .L1622
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1622:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1621:
	.loc 7 337 0
	#     if (vec_len(args) != macro->nargs)
	mov A, 0
	mov B, SP
	.loc 7 327 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1623
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_read_args
	.L1623:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 338 0
	#         errort(tok, "macro argument number does not match");
	.loc 7 337 0
	#     if (vec_len(args) != macro->nargs)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1624
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1624:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 338 0
	#         errort(tok, "macro argument number does not match");
	.loc 7 327 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1625, A, 0
	.loc 7 338 0
	#         errort(tok, "macro argument number does not match");
.data
	.L1626:
	.string "macro argument number does not match"
.text
	mov A, .L1626
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 327 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1627
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1627:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 338 0
	#         errort(tok, "macro argument number does not match");
.data
	.L1628:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1628
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1629
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1629:
	mov A, B
	add SP, 3
	.L1625:
	.loc 7 340 0
	# }
	.loc 7 337 0
	#     if (vec_len(args) != macro->nargs)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
add_hide_set:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 350 0
	# }
	.loc 7 344 0
	#     for (int i = 0; i < vec_len(tokens); i++) {
	mov A, 0
	mov B, SP
	mov A, .L1630
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1630:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 348 0
	#     }
	.loc 7 345 0
	#         Token *t = copy_token(vec_get(tokens, i));
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 348 0
	#     }
	.L153:
	.loc 7 345 0
	#         Token *t = copy_token(vec_get(tokens, i));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 340 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1631:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1632, A, 0
	jmp .L1633
	.L1632:
	.loc 7 348 0
	#     }
	jmp .L155
	.L1633:
	.loc 7 346 0
	#         t->hideset = set_union(t->hideset, hideset);
	mov A, 0
	mov B, SP
	.loc 7 345 0
	#         Token *t = copy_token(vec_get(tokens, i));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 340 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1634
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1634:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1635
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_token
	.L1635:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 347 0
	#         vec_push(r, t);
	.loc 7 340 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 347 0
	#         vec_push(r, t);
	.loc 7 346 0
	#         t->hideset = set_union(t->hideset, hideset);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp set_union
	.L1636:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 348 0
	#     }
	.loc 7 346 0
	#         t->hideset = set_union(t->hideset, hideset);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 344 0
	#     for (int i = 0; i < vec_len(tokens); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1637:
	mov A, B
	add SP, 2
	.loc 7 348 0
	#     }
	.L154:
	.loc 7 345 0
	#         Token *t = copy_token(vec_get(tokens, i));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 348 0
	#     }
	jmp .L153
	.L155:
	.loc 7 350 0
	# }
	.loc 7 344 0
	#     for (int i = 0; i < vec_len(tokens); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
glue_tokens:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 358 0
	# }
	.loc 7 354 0
	#     buf_printf(b, "%s", tok2s(t));
	mov A, 0
	mov B, SP
	mov A, .L1638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L1638:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 355 0
	#     buf_printf(b, "%s", tok2s(u));
	.loc 7 350 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1639
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1639:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 355 0
	#     buf_printf(b, "%s", tok2s(u));
.data
	.L1640:
	.string "%s"
.text
	mov A, .L1640
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 354 0
	#     buf_printf(b, "%s", tok2s(t));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L1641:
	mov A, B
	add SP, 3
	.loc 7 356 0
	#     Token *r = lex_string(buf_body(b));
	.loc 7 350 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1642:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 356 0
	#     Token *r = lex_string(buf_body(b));
.data
	.L1643:
	.string "%s"
.text
	mov A, .L1643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 354 0
	#     buf_printf(b, "%s", tok2s(t));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1644
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L1644:
	mov A, B
	add SP, 3
	.loc 7 357 0
	#     return r;
	mov A, 0
	mov B, SP
	.loc 7 354 0
	#     buf_printf(b, "%s", tok2s(t));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L1645:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_string
	.L1646:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 358 0
	# }
	.loc 7 357 0
	#     return r;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
glue_push:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 363 0
	# }
	.loc 7 362 0
	#     vec_push(tokens, glue_tokens(last, tok));
	mov A, 0
	mov B, SP
	.loc 7 358 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_pop
	.L1647:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 363 0
	# }
	.loc 7 358 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 362 0
	#     vec_push(tokens, glue_tokens(last, tok));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1648
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp glue_tokens
	.L1648:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 358 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1649:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stringize:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 380 0
	# }
	.loc 7 367 0
	#     for (int i = 0; i < vec_len(args); i++) {
	mov A, 0
	mov B, SP
	mov A, .L1650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L1650:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 372 0
	#     }
	.loc 7 368 0
	#         Token *tok = vec_get(args, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 372 0
	#     }
	.L156:
	.loc 7 368 0
	#         Token *tok = vec_get(args, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 363 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1651:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1652, A, 0
	jmp .L1653
	.L1652:
	.loc 7 372 0
	#     }
	jmp .L158
	.L1653:
	.loc 7 369 0
	#         if (buf_len(b) && tok->space)
	mov A, 0
	mov B, SP
	.loc 7 368 0
	#         Token *tok = vec_get(args, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 363 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1654:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 370 0
	#             buf_printf(b, " ");
	.loc 7 367 0
	#     for (int i = 0; i < vec_len(args); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_len
	.L1656:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L1655, A, 0
	.loc 7 370 0
	#             buf_printf(b, " ");
	.loc 7 369 0
	#         if (buf_len(b) && tok->space)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, A
	ne B, 0
	.L1655:
	mov A, B
	jeq .L1657, A, 0
	.loc 7 370 0
	#             buf_printf(b, " ");
.data
	.L1658:
	.string " "
.text
	mov A, .L1658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 367 0
	#     for (int i = 0; i < vec_len(args); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1659
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L1659:
	mov A, B
	add SP, 2
	.L1657:
	.loc 7 372 0
	#     }
	.loc 7 369 0
	#         if (buf_len(b) && tok->space)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1660
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1660:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 372 0
	#     }
.data
	.L1661:
	.string "%s"
.text
	mov A, .L1661
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 367 0
	#     for (int i = 0; i < vec_len(args); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L1662:
	mov A, B
	add SP, 3
	.loc 7 372 0
	#     }
	.L157:
	.loc 7 368 0
	#         Token *tok = vec_get(args, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 372 0
	#     }
	jmp .L156
	.L158:
	.loc 7 374 0
	#     Token *r = copy_token(tmpl);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 367 0
	#     for (int i = 0; i < vec_len(args); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L1663:
	mov A, B
	add SP, 2
	.loc 7 375 0
	#     r->kind = TSTRING;
	mov A, 0
	mov B, SP
	.loc 7 363 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_token
	.L1664:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 376 0
	#     r->sval = buf_body(b);
	.loc 6 205 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 375 0
	#     r->kind = TSTRING;
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 377 0
	#     r->slen = buf_len(b);
	.loc 7 367 0
	#     for (int i = 0; i < vec_len(args); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L1665:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 375 0
	#     r->kind = TSTRING;
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 378 0
	#     r->enc = ENC_NONE;
	.loc 7 367 0
	#     for (int i = 0; i < vec_len(args); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1666
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_len
	.L1666:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 375 0
	#     r->kind = TSTRING;
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 379 0
	#     return r;
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 375 0
	#     r->kind = TSTRING;
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 11
	store B, A
	load A, SP
	add SP, 1
	.loc 7 380 0
	# }
	.loc 7 375 0
	#     r->kind = TSTRING;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
expand_all:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 394 0
	# }
	.loc 7 384 0
	#     Vector *r = make_vector();
	.loc 7 380 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_reverse
	.L1667:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_buffer_stash
	.L1668:
	mov A, B
	add SP, 1
	.loc 7 385 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L1669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1669:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 390 0
	#     }
	.L159:
	.loc 7 387 0
	#         if (tok->kind == TEOF)
	mov A, 0
	mov B, SP
	mov A, .L1670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand
	.L1670:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 388 0
	#             break;
	.loc 7 387 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1671, A, 0
	.loc 7 388 0
	#             break;
	jmp .L161
	.L1671:
	.loc 7 390 0
	#     }
	.loc 7 387 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 385 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1672:
	mov A, B
	add SP, 2
	.loc 7 390 0
	#     }
	.L160:
	jmp .L159
	.L161:
	.loc 7 392 0
	#     token_buffer_unstash();
	.loc 7 380 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 385 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp propagate_space
	.L1673:
	mov A, B
	add SP, 2
	.loc 7 393 0
	#     return r;
	mov A, .L1674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_buffer_unstash
	.L1674:
	mov A, B
	.loc 7 394 0
	# }
	.loc 7 385 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
subst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 11
	.loc 7 451 0
	# }
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov A, 0
	mov B, SP
	mov A, .L1675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1675:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 399 0
	#     for (int i = 0; i < len; i++) {
	mov A, 0
	mov B, SP
	.loc 7 394 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1676:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 449 0
	#     }
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 449 0
	#     }
	.L162:
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 399 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1677, A, 0
	jmp .L1678
	.L1677:
	.loc 7 449 0
	#     }
	jmp .L164
	.L1678:
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov A, 0
	mov B, SP
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	.loc 7 394 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1679:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov A, 0
	mov B, SP
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	.loc 7 399 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1680, A, 0
	mov A, 0
	jmp .L1681
	.L1680:
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 394 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1682:
	mov A, B
	add SP, 2
	.L1681:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	mov B, BP
	add B, 16777210
	store A, B
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, 0
	jeq .L1683, A, 0
	.loc 10 4 0
	# #define true 1
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1683:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 409 0
	#         }
	.loc 7 406 0
	#             vec_push(r, stringize(t0, vec_get(args, t1->position)));
	mov A, 35
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1685:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L1684, A, 0
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	ne B, 0
	.L1684:
	mov A, B
	jeq .L1686, A, 0
	.loc 7 409 0
	#         }
	.loc 7 407 0
	#             i++;
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 394 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1687:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringize
	.L1688:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1689:
	mov A, B
	add SP, 2
	.loc 7 408 0
	#             continue;
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 409 0
	#         }
	jmp .L163
	.L1686:
	.loc 7 427 0
	#         }
	.loc 7 411 0
	#             Vector *arg = vec_get(args, t1->position);
	.loc 6 205 0
	# }
	mov A, 339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1691:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L1690, A, 0
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	ne B, 0
	.L1690:
	mov A, B
	jeq .L1692, A, 0
	.loc 7 427 0
	#         }
	.loc 7 412 0
	#             // [GNU] [,##__VA_ARG__] is expanded to the empty token sequence
	mov A, 0
	mov B, SP
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 394 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1693:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 423 0
	#                     vec_push(r, vec_get(arg, i));
	.loc 7 416 0
	#                 if (vec_len(arg) > 0)
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, 0
	jeq .L1695, A, 0
	.loc 7 416 0
	#                 if (vec_len(arg) > 0)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1696:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L1695:
	mov A, B
	mov B, 0
	jeq .L1694, A, 0
	.loc 7 416 0
	#                 if (vec_len(arg) > 0)
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L1697:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1698:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L1694:
	mov A, B
	jeq .L1699, A, 0
	.loc 7 417 0
	#                     vec_append(r, arg);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 412 0
	#             // [GNU] [,##__VA_ARG__] is expanded to the empty token sequence
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1700:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1701, A, 0
	.loc 7 417 0
	#                     vec_append(r, arg);
	.loc 7 412 0
	#             // [GNU] [,##__VA_ARG__] is expanded to the empty token sequence
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1702
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_append
	.L1702:
	mov A, B
	add SP, 2
	jmp .L1703
	.L1701:
	.loc 7 417 0
	#                     vec_append(r, arg);
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_pop
	.L1704:
	mov A, B
	add SP, 1
	.L1703:
	jmp .L1705
	.L1699:
	.loc 7 423 0
	#                     vec_push(r, vec_get(arg, i));
	.loc 7 417 0
	#                     vec_append(r, arg);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 412 0
	#             // [GNU] [,##__VA_ARG__] is expanded to the empty token sequence
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1706:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1707, A, 0
	.loc 7 423 0
	#                     vec_push(r, vec_get(arg, i));
	.loc 7 422 0
	#                 for (int i = 1; i < vec_len(arg); i++)
	.loc 7 412 0
	#             // [GNU] [,##__VA_ARG__] is expanded to the empty token sequence
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_head
	.L1708:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp glue_push
	.L1709:
	mov A, B
	add SP, 2
	.loc 7 423 0
	#                     vec_push(r, vec_get(arg, i));
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777207
	mov A, 1
	store A, B
	.L165:
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 412 0
	#             // [GNU] [,##__VA_ARG__] is expanded to the empty token sequence
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1710
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1710:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1711, A, 0
	jmp .L1712
	.L1711:
	.loc 7 423 0
	#                     vec_push(r, vec_get(arg, i));
	jmp .L167
	.L1712:
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 412 0
	#             // [GNU] [,##__VA_ARG__] is expanded to the empty token sequence
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1713:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1714:
	mov A, B
	add SP, 2
	.loc 7 423 0
	#                     vec_push(r, vec_get(arg, i));
	.L166:
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777207
	store A, B
	load A, SP
	add SP, 1
	jmp .L165
	.L167:
	.L1707:
	.L1705:
	.loc 7 426 0
	#             continue;
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 427 0
	#         }
	jmp .L163
	.L1692:
	.loc 7 433 0
	#         }
	.loc 7 429 0
	#             hideset = t1->hideset;
	.loc 6 205 0
	# }
	mov A, 339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1716
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1716:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L1715, A, 0
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L1715:
	mov A, B
	jeq .L1717, A, 0
	.loc 7 433 0
	#         }
	.loc 7 430 0
	#             glue_push(r, t1);
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 4
	store A, B
	.loc 7 431 0
	#             i++;
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp glue_push
	.L1718:
	mov A, B
	add SP, 2
	.loc 7 432 0
	#             continue;
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 433 0
	#         }
	jmp .L163
	.L1717:
	.loc 7 442 0
	#         }
	.loc 7 435 0
	#             hideset = t1->hideset;
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777210
	load A, B
	mov B, 0
	jeq .L1720, A, 0
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L1720:
	mov A, B
	mov B, 0
	jeq .L1719, A, 0
	.loc 7 435 0
	#             hideset = t1->hideset;
	.loc 6 205 0
	# }
	mov A, 339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1721
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1721:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L1719:
	mov A, B
	jeq .L1722, A, 0
	.loc 7 442 0
	#         }
	.loc 7 436 0
	#             Vector *arg = vec_get(args, t0->position);
	.loc 7 402 0
	#         bool t0_param = (t0->kind == TMACRO_PARAM);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 4
	store A, B
	.loc 7 437 0
	#             if (vec_len(arg) == 0)
	mov A, 0
	mov B, SP
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 394 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1723:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 438 0
	#                 i++;
	.loc 7 437 0
	#             if (vec_len(arg) == 0)
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1724
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1724:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 438 0
	#                 i++;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1725, A, 0
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	jmp .L1726
	.L1725:
	.loc 7 438 0
	#                 i++;
	.loc 7 437 0
	#             if (vec_len(arg) == 0)
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_append
	.L1727:
	mov A, B
	add SP, 2
	.L1726:
	.loc 7 442 0
	#         }
	jmp .L163
	.L1722:
	.loc 7 447 0
	#         }
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L1728, A, 0
	.loc 7 447 0
	#         }
	.loc 7 445 0
	#             vec_append(r, expand_all(arg, t0));
	mov A, 0
	mov B, SP
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 394 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1729
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1729:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 446 0
	#             continue;
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 445 0
	#             vec_append(r, expand_all(arg, t0));
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expand_all
	.L1730:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1731
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_append
	.L1731:
	mov A, B
	add SP, 2
	.loc 7 447 0
	#         }
	jmp .L163
	.L1728:
	.loc 7 449 0
	#     }
	.loc 7 401 0
	#         Token *t1 = (i == len - 1) ? NULL : vec_get(macro->body, i + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1732
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1732:
	mov A, B
	add SP, 2
	.loc 7 449 0
	#     }
	.L163:
	.loc 7 400 0
	#         Token *t0 = vec_get(macro->body, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 449 0
	#     }
	jmp .L162
	.L164:
	.loc 7 451 0
	# }
	.loc 7 394 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 398 0
	#     int len = vec_len(macro->body);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_hide_set
	.L1733:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unget_all:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 455 0
	#         unget_token(vec_get(tokens, --i));
	mov A, 0
	mov B, SP
	.loc 7 451 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1734:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 455 0
	#         unget_token(vec_get(tokens, --i));
	.L168:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1735, A, 0
	jmp .L1736
	.L1735:
	jmp .L170
	.L1736:
	mov B, BP
	add B, 16777215
	load A, B
	sub A, 1
	mov B, BP
	add B, 16777215
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 451 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L1737:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1738
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L1738:
	mov A, B
	add SP, 1
	.loc 7 455 0
	#         unget_token(vec_get(tokens, --i));
	.L169:
	jmp .L168
	.L170:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_expand_newline:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 492 0
	#         error("internal error");
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L1739
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1739:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 462 0
	#         return tok;
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1740, A, 0
	.loc 7 462 0
	#         return tok;
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1740:
	.loc 7 464 0
	#     Macro *macro = map_get(macros, name);
	mov A, 0
	mov B, SP
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 465 0
	#     if (!macro || set_has(tok->hideset, name))
	mov A, 0
	mov B, SP
	.loc 7 464 0
	#     Macro *macro = map_get(macros, name);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L1741:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 466 0
	#         return tok;
	.loc 7 465 0
	#     if (!macro || set_has(tok->hideset, name))
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	mov B, 1
	jne .L1742, A, 0
	.loc 7 466 0
	#         return tok;
	.loc 7 464 0
	#     Macro *macro = map_get(macros, name);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 466 0
	#         return tok;
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp set_has
	.L1743:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L1742:
	mov A, B
	jeq .L1744, A, 0
	.loc 7 466 0
	#         return tok;
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1744:
	.loc 7 492 0
	#         error("internal error");
	.loc 7 469 0
	#     case MACRO_OBJ: {
	.loc 7 465 0
	#     if (!macro || set_has(tok->hideset, name))
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 492 0
	#         error("internal error");
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1745, A, 0
	jmp .L172
	.L1745:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1746, A, 0
	jmp .L173
	.L1746:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1747, A, 0
	jmp .L174
	.L1747:
	jmp .L175
	.loc 7 475 0
	#     }
	.loc 7 470 0
	#         Set *hideset = set_add(tok->hideset, name);
	.L172:
	.loc 7 475 0
	#     }
	.loc 7 471 0
	#         Vector *tokens = subst(macro, NULL, hideset);
	mov A, 0
	mov B, SP
	.loc 7 464 0
	#     Macro *macro = map_get(macros, name);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 471 0
	#         Vector *tokens = subst(macro, NULL, hideset);
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp set_add
	.L1748:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 472 0
	#         propagate_space(tokens, tok);
	mov A, 0
	mov B, SP
	.loc 7 471 0
	#         Vector *tokens = subst(macro, NULL, hideset);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 472 0
	#         propagate_space(tokens, tok);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 465 0
	#     if (!macro || set_has(tok->hideset, name))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp subst
	.L1749:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 473 0
	#         unget_all(tokens);
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 472 0
	#         propagate_space(tokens, tok);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp propagate_space
	.L1750:
	mov A, B
	add SP, 2
	.loc 7 474 0
	#         return read_expand();
	.loc 7 472 0
	#         propagate_space(tokens, tok);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_all
	.L1751:
	mov A, B
	add SP, 1
	.loc 7 475 0
	#     }
	mov A, .L1752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand
	.L1752:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 487 0
	#     }
	.loc 7 477 0
	#         if (!cpp_next('('))
	.L173:
	.loc 7 487 0
	#     }
	.loc 7 478 0
	#             return tok;
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_next
	.L1753:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L1754, A, 0
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1754:
	.loc 7 480 0
	#         Token *rparen = peek_token();
	mov A, 0
	mov B, SP
	.loc 7 465 0
	#     if (!macro || set_has(tok->hideset, name))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_args
	.L1755:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 481 0
	#         cpp_expect(')');
	mov A, 0
	mov B, SP
	mov A, .L1756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek_token
	.L1756:
	mov A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 482 0
	#         Set *hideset = set_add(set_intersection(tok->hideset, rparen->hideset), name);
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_expect
	.L1757:
	mov A, B
	add SP, 1
	.loc 7 483 0
	#         Vector *tokens = subst(macro, args, hideset);
	mov A, 0
	mov B, SP
	.loc 7 464 0
	#     Macro *macro = map_get(macros, name);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 483 0
	#         Vector *tokens = subst(macro, args, hideset);
	.loc 7 481 0
	#         cpp_expect(')');
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 483 0
	#         Vector *tokens = subst(macro, args, hideset);
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp set_intersection
	.L1758:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp set_add
	.L1759:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 484 0
	#         propagate_space(tokens, tok);
	mov A, 0
	mov B, SP
	.loc 7 483 0
	#         Vector *tokens = subst(macro, args, hideset);
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 480 0
	#         Token *rparen = peek_token();
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 465 0
	#     if (!macro || set_has(tok->hideset, name))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp subst
	.L1760:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 485 0
	#         unget_all(tokens);
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 484 0
	#         propagate_space(tokens, tok);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp propagate_space
	.L1761:
	mov A, B
	add SP, 2
	.loc 7 486 0
	#         return read_expand();
	.loc 7 484 0
	#         propagate_space(tokens, tok);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_all
	.L1762:
	mov A, B
	add SP, 1
	.loc 7 487 0
	#     }
	mov A, .L1763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand
	.L1763:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 489 0
	#         macro->fn(tok);
	.L174:
	.loc 7 461 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 489 0
	#         macro->fn(tok);
	.loc 7 465 0
	#     if (!macro || set_has(tok->hideset, name))
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov C, A
	mov A, .L1764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L1764:
	mov A, B
	add SP, 1
	.loc 7 491 0
	#     default:
	mov A, .L1765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand
	.L1765:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 492 0
	#         error("internal error");
	.L175:
.data
	.L1766:
	.string "internal error"
.text
	mov A, .L1766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L1767:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1768:
	mov A, B
	add SP, 3
	.L171:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_expand:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 500 0
	#             return tok;
	.L176:
	.loc 7 499 0
	#         if (tok->kind != TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L1769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand_newline
	.L1769:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 500 0
	#             return tok;
	.loc 7 499 0
	#         if (tok->kind != TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1770, A, 0
	.loc 7 500 0
	#             return tok;
	.loc 7 499 0
	#         if (tok->kind != TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1770:
	.loc 7 500 0
	#             return tok;
	.L177:
	jmp .L176
	.L178:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_funclike_macro_params:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 531 0
	#     }
	.loc 7 506 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 531 0
	#     }
	.L179:
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov A, 0
	mov B, SP
	mov A, .L1771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1771:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 509 0
	#             return false;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1772:
	mov A, B
	add SP, 2
	jeq .L1773, A, 0
	.loc 7 509 0
	#             return false;
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1773:
	.loc 7 514 0
	#         }
	.loc 7 506 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L1774, A, 0
	.loc 7 514 0
	#         }
	.loc 7 512 0
	#                 errort(tok, ", expected, but got %s", tok2s(tok));
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1775:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L1776, A, 0
	.loc 7 512 0
	#                 errort(tok, ", expected, but got %s", tok2s(tok));
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1777:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 512 0
	#                 errort(tok, ", expected, but got %s", tok2s(tok));
.data
	.L1778:
	.string ", expected, but got %s"
.text
	mov A, .L1778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1779:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 512 0
	#                 errort(tok, ", expected, but got %s", tok2s(tok));
.data
	.L1780:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1781:
	mov A, B
	add SP, 4
	.L1776:
	.loc 7 514 0
	#         }
	mov A, .L1782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1782:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L1774:
	.loc 7 516 0
	#             errort(name, "missing ')' in macro parameter list");
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1783, A, 0
	.loc 7 516 0
	#             errort(name, "missing ')' in macro parameter list");
.data
	.L1784:
	.string "missing ')' in macro parameter list"
.text
	mov A, .L1784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 500 0
	#             return tok;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1785:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 516 0
	#             errort(name, "missing ')' in macro parameter list");
.data
	.L1786:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1787:
	mov A, B
	add SP, 3
	.L1783:
	.loc 7 521 0
	#         }
	.loc 7 518 0
	#             map_put(param, "__VA_ARGS__", make_macro_token(pos++, true));
	.loc 6 205 0
	# }
	mov A, 347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1788:
	mov A, B
	add SP, 2
	jeq .L1789, A, 0
	.loc 7 521 0
	#         }
	.loc 7 519 0
	#             cpp_expect(')');
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 506 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_macro_token
	.L1790:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 519 0
	#             cpp_expect(')');
.data
	.L1791:
	.string "__VA_ARGS__"
.text
	mov A, .L1791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 500 0
	#             return tok;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L1792:
	mov A, B
	add SP, 3
	.loc 7 520 0
	#             return true;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_expect
	.L1793:
	mov A, B
	add SP, 1
	.loc 7 521 0
	#         }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1789:
	.loc 7 523 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1794, A, 0
	.loc 7 523 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1795:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 523 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1796:
	.string "identifier expected, but got %s"
.text
	mov A, .L1796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1797:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 523 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1798:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1799:
	mov A, B
	add SP, 4
	.L1794:
	.loc 7 525 0
	#         if (cpp_next(KELLIPSIS)) {
	mov A, 0
	mov B, SP
	.loc 7 508 0
	#         if (is_keyword(tok, ')'))
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 529 0
	#         }
	.loc 7 526 0
	#             cpp_expect(')');
	.loc 6 205 0
	# }
	mov A, 347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_next
	.L1800:
	mov A, B
	add SP, 1
	jeq .L1801, A, 0
	.loc 7 529 0
	#         }
	.loc 7 527 0
	#             map_put(param, arg, make_macro_token(pos++, true));
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1802
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_expect
	.L1802:
	mov A, B
	add SP, 1
	.loc 7 528 0
	#             return true;
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 506 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_macro_token
	.L1803:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 525 0
	#         if (cpp_next(KELLIPSIS)) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 500 0
	#             return tok;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L1804:
	mov A, B
	add SP, 3
	.loc 7 529 0
	#         }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1801:
	.loc 7 531 0
	#     }
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 506 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_macro_token
	.L1805:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 525 0
	#         if (cpp_next(KELLIPSIS)) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 500 0
	#             return tok;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L1806:
	mov A, B
	add SP, 3
	.loc 7 531 0
	#     }
	.L180:
	jmp .L179
	.L181:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
hashhash_check:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 540 0
	#         errort(vec_tail(v), "'##' cannot appear at end of macro expansion");
	.loc 7 536 0
	#         return;
	.loc 7 531 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1807:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 536 0
	#         return;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1808, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1808:
	.loc 7 538 0
	#         errort(vec_head(v), "'##' cannot appear at start of macro expansion");
	.loc 6 205 0
	# }
	mov A, 339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 538 0
	#         errort(vec_head(v), "'##' cannot appear at start of macro expansion");
	.loc 7 531 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_head
	.L1809:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1810:
	mov A, B
	add SP, 2
	jeq .L1811, A, 0
	.loc 7 538 0
	#         errort(vec_head(v), "'##' cannot appear at start of macro expansion");
.data
	.L1812:
	.string "'##' cannot appear at start of macro expansion"
.text
	mov A, .L1812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 531 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_head
	.L1813:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1814:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 538 0
	#         errort(vec_head(v), "'##' cannot appear at start of macro expansion");
.data
	.L1815:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1816:
	mov A, B
	add SP, 3
	.L1811:
	.loc 7 540 0
	#         errort(vec_tail(v), "'##' cannot appear at end of macro expansion");
	.loc 6 205 0
	# }
	mov A, 339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 540 0
	#         errort(vec_tail(v), "'##' cannot appear at end of macro expansion");
	.loc 7 531 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L1817:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1818:
	mov A, B
	add SP, 2
	jeq .L1819, A, 0
	.loc 7 540 0
	#         errort(vec_tail(v), "'##' cannot appear at end of macro expansion");
.data
	.L1820:
	.string "'##' cannot appear at end of macro expansion"
.text
	mov A, .L1820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 531 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L1821:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1822:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 540 0
	#         errort(vec_tail(v), "'##' cannot appear at end of macro expansion");
.data
	.L1823:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1823
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1824
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1824:
	mov A, B
	add SP, 3
	.L1819:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_funclike_macro_body:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 559 0
	#     }
	.loc 7 545 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L1825
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1825:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 559 0
	#     }
	.L182:
	.loc 7 547 0
	#         if (tok->kind == TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L1826
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1826:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 548 0
	#             return r;
	.loc 7 547 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1827, A, 0
	.loc 7 548 0
	#             return r;
	.loc 7 545 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1827:
	.loc 7 556 0
	#             }
	.loc 7 550 0
	#             Token *subst = map_get(param, tok->sval);
	.loc 7 547 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1828, A, 0
	.loc 7 556 0
	#             }
	.loc 7 551 0
	#             if (subst) {
	mov A, 0
	mov B, SP
	.loc 7 547 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 540 0
	#         errort(vec_tail(v), "'##' cannot appear at end of macro expansion");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L1829:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 556 0
	#             }
	.loc 7 551 0
	#             if (subst) {
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L1830, A, 0
	.loc 7 556 0
	#             }
	.loc 7 553 0
	#                 subst->space = tok->space;
	.loc 7 551 0
	#             if (subst) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_token
	.L1831:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 554 0
	#                 vec_push(r, subst);
	.loc 7 547 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 4
	load A, B
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 551 0
	#             if (subst) {
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 555 0
	#                 continue;
	.loc 7 551 0
	#             if (subst) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 545 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1832:
	mov A, B
	add SP, 2
	.loc 7 556 0
	#             }
	jmp .L183
	.L1830:
	.L1828:
	.loc 7 559 0
	#     }
	.loc 7 547 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 545 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1833:
	mov A, B
	add SP, 2
	.loc 7 559 0
	#     }
	.L183:
	jmp .L182
	.L184:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_funclike_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 569 0
	# }
	.loc 7 564 0
	#     bool is_varg = read_funclike_macro_params(name, param);
	mov A, 0
	mov B, SP
	mov A, .L1834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_map
	.L1834:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 564 0
	#     bool is_varg = read_funclike_macro_params(name, param);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 559 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_funclike_macro_params
	.L1835:
	mov A, B
	add SP, 2
	ne A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 566 0
	#     hashhash_check(body);
	mov A, 0
	mov B, SP
	.loc 7 564 0
	#     bool is_varg = read_funclike_macro_params(name, param);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_funclike_macro_body
	.L1836:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 567 0
	#     Macro *macro = make_func_macro(body, map_len(param), is_varg);
	.loc 7 566 0
	#     hashhash_check(body);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp hashhash_check
	.L1837:
	mov A, B
	add SP, 1
	.loc 7 568 0
	#     map_put(macros, name->sval, macro);
	mov A, 0
	mov B, SP
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 568 0
	#     map_put(macros, name->sval, macro);
	.loc 7 564 0
	#     bool is_varg = read_funclike_macro_params(name, param);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_len
	.L1838:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 566 0
	#     hashhash_check(body);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_func_macro
	.L1839:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 569 0
	# }
	.loc 7 568 0
	#     map_put(macros, name->sval, macro);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 569 0
	# }
	.loc 7 559 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L1840:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_obj_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 581 0
	# }
	.loc 7 573 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L1841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1841:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 578 0
	#     }
	.L185:
	.loc 7 575 0
	#         if (tok->kind == TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L1842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1842:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 576 0
	#             break;
	.loc 7 575 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1843, A, 0
	.loc 7 576 0
	#             break;
	jmp .L187
	.L1843:
	.loc 7 578 0
	#     }
	.loc 7 575 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 573 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1844:
	mov A, B
	add SP, 2
	.loc 7 578 0
	#     }
	.L186:
	jmp .L185
	.L187:
	.loc 7 580 0
	#     map_put(macros, name, make_obj_macro(body));
	.loc 7 573 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp hashhash_check
	.L1845:
	mov A, B
	add SP, 1
	.loc 7 581 0
	# }
	.loc 7 573 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_obj_macro
	.L1846:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 569 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L1847:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_define:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 596 0
	# }
	.loc 7 589 0
	#     Token *tok = lex();
	mov A, 0
	mov B, SP
	mov A, .L1848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_read_ident
	.L1848:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 590 0
	#     if (is_keyword(tok, '(') && !tok->space) {
	mov A, 0
	mov B, SP
	mov A, .L1849
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1849:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 593 0
	#     }
	.loc 7 591 0
	#         read_funclike_macro(name);
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	#     if (is_keyword(tok, '(') && !tok->space) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1851:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L1850, A, 0
	.loc 7 591 0
	#         read_funclike_macro(name);
	.loc 7 590 0
	#     if (is_keyword(tok, '(') && !tok->space) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 4
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L1850:
	mov A, B
	jeq .L1852, A, 0
	.loc 7 593 0
	#     }
	.loc 7 592 0
	#         return;
	.loc 7 589 0
	#     Token *tok = lex();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_funclike_macro
	.L1853:
	mov A, B
	add SP, 1
	.loc 7 593 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1852:
	.loc 7 595 0
	#     read_obj_macro(name->sval);
	.loc 7 590 0
	#     if (is_keyword(tok, '(') && !tok->space) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L1854:
	mov A, B
	add SP, 1
	.loc 7 596 0
	# }
	.loc 7 589 0
	#     Token *tok = lex();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_obj_macro
	.L1855:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_undef:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 606 0
	# }
	.loc 7 604 0
	#     expect_newline();
	mov A, 0
	mov B, SP
	mov A, .L1856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_read_ident
	.L1856:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 605 0
	#     map_remove(macros, name->sval);
	mov A, .L1857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect_newline
	.L1857:
	mov A, B
	.loc 7 606 0
	# }
	.loc 7 604 0
	#     expect_newline();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1858
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_remove
	.L1858:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_defined_op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 621 0
	# }
	.loc 7 614 0
	#     if (is_keyword(tok, '(')) {
	mov A, 0
	mov B, SP
	mov A, .L1859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1859:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 617 0
	#     }
	.loc 7 615 0
	#         tok = lex();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 614 0
	#     if (is_keyword(tok, '(')) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L1860:
	mov A, B
	add SP, 2
	jeq .L1861, A, 0
	.loc 7 617 0
	#     }
	.loc 7 616 0
	#         cpp_expect(')');
	mov A, .L1862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1862:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 617 0
	#     }
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1863
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_expect
	.L1863:
	mov A, B
	add SP, 1
	.L1861:
	.loc 7 619 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 614 0
	#     if (is_keyword(tok, '(')) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1864, A, 0
	.loc 7 619 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 614 0
	#     if (is_keyword(tok, '(')) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1865:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 619 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1866:
	.string "identifier expected, but got %s"
.text
	mov A, .L1866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 614 0
	#     if (is_keyword(tok, '(')) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1867:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 619 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1868:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1869
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1869:
	mov A, B
	add SP, 4
	.L1864:
	.loc 7 621 0
	# }
	.loc 7 614 0
	#     if (is_keyword(tok, '(')) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L1870:
	mov A, B
	add SP, 2
	jeq .L1871, A, 0
	mov B, cpp_token_one
	load A, B
	jmp .L1872
	.L1871:
	mov B, cpp_token_zero
	load A, B
	.L1872:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_intexpr_line:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 637 0
	#         }
	.loc 7 625 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L1873
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L1873:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 637 0
	#         }
	.L188:
	.loc 7 627 0
	#         if (tok->kind == TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L1874
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand_newline
	.L1874:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 628 0
	#             return r;
	.loc 7 627 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1875, A, 0
	.loc 7 628 0
	#             return r;
	.loc 7 625 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1875:
	.loc 7 637 0
	#         }
	.loc 7 630 0
	#             vec_push(r, read_defined_op());
.data
	.L1876:
	.string "defined"
.text
	mov A, .L1876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 627 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_ident
	.L1877:
	mov A, B
	add SP, 2
	jeq .L1878, A, 0
	.loc 7 631 0
	#         } else if (tok->kind == TIDENT) {
	mov A, .L1879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_defined_op
	.L1879:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 625 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1880:
	mov A, B
	add SP, 2
	jmp .L1881
	.L1878:
	.loc 7 637 0
	#         }
	.loc 7 631 0
	#         } else if (tok->kind == TIDENT) {
	.loc 7 627 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1882, A, 0
	.loc 7 635 0
	#         } else {
	.loc 9 23 0
	# }
	mov B, cpp_token_zero
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 625 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1883
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1883:
	mov A, B
	add SP, 2
	jmp .L1884
	.L1882:
	.loc 7 637 0
	#         }
	.loc 7 627 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 625 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1885:
	mov A, B
	add SP, 2
	.L1884:
	.L1881:
	.loc 7 637 0
	#         }
	.L189:
	jmp .L188
	.L190:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_constexpr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 649 0
	# }
	.loc 7 643 0
	#     Node *expr = read_expr();
	mov A, .L1886
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_intexpr_line
	.L1886:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_reverse
	.L1887:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_buffer_stash
	.L1888:
	mov A, B
	add SP, 1
	.loc 7 644 0
	#     Token *tok = lex();
	mov A, 0
	mov B, SP
	mov A, .L1889
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expr
	.L1889:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 645 0
	#     if (tok->kind != TEOF)
	mov A, 0
	mov B, SP
	mov A, .L1890
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1890:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 646 0
	#         errort(tok, "stray token: %s", tok2s(tok));
	.loc 7 645 0
	#     if (tok->kind != TEOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1891, A, 0
	.loc 7 646 0
	#         errort(tok, "stray token: %s", tok2s(tok));
	.loc 7 645 0
	#     if (tok->kind != TEOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1892
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1892:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 646 0
	#         errort(tok, "stray token: %s", tok2s(tok));
.data
	.L1893:
	.string "stray token: %s"
.text
	mov A, .L1893
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 645 0
	#     if (tok->kind != TEOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1894
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1894:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 646 0
	#         errort(tok, "stray token: %s", tok2s(tok));
.data
	.L1895:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1895
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1896
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1896:
	mov A, B
	add SP, 4
	.L1891:
	.loc 7 648 0
	#     return eval_intexpr(expr, NULL);
	mov A, .L1897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_buffer_unstash
	.L1897:
	mov A, B
	.loc 7 649 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 644 0
	#     Token *tok = lex();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1898
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L1898:
	mov A, B
	add SP, 2
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_read_if:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 654 0
	#         skip_cond_incl();
	.loc 7 653 0
	#     if (!istrue)
	.loc 7 649 0
	# }
	mov B, BP
	add B, 2
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_cond_incl
	.L1899:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, cond_incl_stack
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L1900:
	mov A, B
	add SP, 2
	.loc 7 654 0
	#         skip_cond_incl();
	.loc 7 649 0
	# }
	mov B, BP
	add B, 2
	load A, B
	eq A, 0
	jeq .L1901, A, 0
	.loc 7 654 0
	#         skip_cond_incl();
	mov A, .L1902
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_cond_incl
	.L1902:
	mov A, B
	.L1901:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_if:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 659 0
	# }
	mov A, .L1903
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_constexpr
	.L1903:
	mov A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_read_if
	.L1904:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_ifdef:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 667 0
	# }
	.loc 7 663 0
	#     if (tok->kind != TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L1905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1905:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 664 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 663 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1906, A, 0
	.loc 7 664 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 663 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1907:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 664 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1908:
	.string "identifier expected, but got %s"
.text
	mov A, .L1908
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 663 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1909:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 664 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1910:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1911:
	mov A, B
	add SP, 4
	.L1906:
	.loc 7 666 0
	#     do_read_if(map_get(macros, tok->sval));
	mov A, .L1912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect_newline
	.L1912:
	mov A, B
	.loc 7 667 0
	# }
	.loc 7 663 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L1913:
	mov A, B
	add SP, 2
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1914
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_read_if
	.L1914:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_ifndef:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 681 0
	#     }
	.loc 7 671 0
	#     if (tok->kind != TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L1915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1915:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 672 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 671 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1916, A, 0
	.loc 7 672 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 671 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1917:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 672 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1918:
	.string "identifier expected, but got %s"
.text
	mov A, .L1918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 671 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1919:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 672 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L1920:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1921
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1921:
	mov A, B
	add SP, 4
	.L1916:
	.loc 7 674 0
	#     do_read_if(!map_get(macros, tok->sval));
	mov A, .L1922
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect_newline
	.L1922:
	mov A, B
	.loc 7 675 0
	#     if (tok->count == 2) {
	.loc 7 671 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L1923:
	mov A, B
	add SP, 2
	eq A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_read_if
	.L1924:
	mov A, B
	add SP, 1
	.loc 7 681 0
	#     }
	.loc 7 676 0
	#         // "ifndef" is the second token in this file.
	.loc 7 671 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 676 0
	#         // "ifndef" is the second token in this file.
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1925, A, 0
	.loc 7 681 0
	#     }
	.loc 7 679 0
	#         ci->include_guard = tok->sval;
	mov A, 0
	mov B, SP
	.loc 9 23 0
	# }
	mov B, cond_incl_stack
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L1926:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 680 0
	#         ci->file = tok->file;
	.loc 7 671 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 679 0
	#         ci->include_guard = tok->sval;
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 681 0
	#     }
	.loc 7 671 0
	#     if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 679 0
	#         ci->include_guard = tok->sval;
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.L1925:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_else:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 694 0
	#         skip_cond_incl();
	.loc 7 686 0
	#         errort(hash, "stray #else");
	.loc 9 23 0
	# }
	mov B, cond_incl_stack
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1927
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1927:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 686 0
	#         errort(hash, "stray #else");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1928, A, 0
.data
	.L1929:
	.string "stray #else"
.text
	mov A, .L1929
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 681 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1930
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1930:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 686 0
	#         errort(hash, "stray #else");
.data
	.L1931:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1932
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1932:
	mov A, B
	add SP, 3
	.L1928:
	.loc 7 688 0
	#     if (ci->ctx == IN_ELSE)
	mov A, 0
	mov B, SP
	.loc 9 23 0
	# }
	mov B, cond_incl_stack
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L1933:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 689 0
	#         errort(hash, "#else appears in #else");
	.loc 7 688 0
	#     if (ci->ctx == IN_ELSE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1934, A, 0
	.loc 7 689 0
	#         errort(hash, "#else appears in #else");
.data
	.L1935:
	.string "#else appears in #else"
.text
	mov A, .L1935
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 681 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1936:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 689 0
	#         errort(hash, "#else appears in #else");
.data
	.L1937:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1938:
	mov A, B
	add SP, 3
	.L1934:
	.loc 7 691 0
	#     ci->ctx = IN_ELSE;
	mov A, .L1939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect_newline
	.L1939:
	mov A, B
	.loc 7 692 0
	#     ci->include_guard = NULL;
	.loc 9 23 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 688 0
	#     if (ci->ctx == IN_ELSE)
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 693 0
	#     if (ci->wastrue)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 688 0
	#     if (ci->ctx == IN_ELSE)
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 694 0
	#         skip_cond_incl();
	.loc 7 688 0
	#     if (ci->ctx == IN_ELSE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	jeq .L1940, A, 0
	.loc 7 694 0
	#         skip_cond_incl();
	mov A, .L1941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_cond_incl
	.L1941:
	mov A, B
	.L1940:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_elif:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 710 0
	# }
	.loc 7 699 0
	#         errort(hash, "stray #elif");
	.loc 9 23 0
	# }
	mov B, cond_incl_stack
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1942:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 699 0
	#         errort(hash, "stray #elif");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1943, A, 0
.data
	.L1944:
	.string "stray #elif"
.text
	mov A, .L1944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 694 0
	#         skip_cond_incl();
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1945:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 699 0
	#         errort(hash, "stray #elif");
.data
	.L1946:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1947:
	mov A, B
	add SP, 3
	.L1943:
	.loc 7 701 0
	#     if (ci->ctx == IN_ELSE)
	mov A, 0
	mov B, SP
	.loc 9 23 0
	# }
	mov B, cond_incl_stack
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L1948:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 702 0
	#         errort(hash, "#elif after #else");
	.loc 7 701 0
	#     if (ci->ctx == IN_ELSE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1949, A, 0
	.loc 7 702 0
	#         errort(hash, "#elif after #else");
.data
	.L1950:
	.string "#elif after #else"
.text
	mov A, .L1950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 694 0
	#         skip_cond_incl();
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1951
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1951:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 702 0
	#         errort(hash, "#elif after #else");
.data
	.L1952:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1953:
	mov A, B
	add SP, 3
	.L1949:
	.loc 7 704 0
	#     ci->include_guard = NULL;
	.loc 9 23 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 701 0
	#     if (ci->ctx == IN_ELSE)
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 705 0
	#     if (ci->wastrue || !read_constexpr()) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 701 0
	#     if (ci->ctx == IN_ELSE)
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 708 0
	#     }
	.loc 7 706 0
	#         skip_cond_incl();
	.loc 7 701 0
	#     if (ci->ctx == IN_ELSE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, 1
	jne .L1954, A, 0
	.loc 7 706 0
	#         skip_cond_incl();
	mov A, .L1955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_constexpr
	.L1955:
	mov A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L1954:
	mov A, B
	jeq .L1956, A, 0
	.loc 7 708 0
	#     }
	.loc 7 707 0
	#         return;
	mov A, .L1957
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_cond_incl
	.L1957:
	mov A, B
	.loc 7 708 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1956:
	.loc 7 710 0
	# }
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 701 0
	#     if (ci->ctx == IN_ELSE)
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_newlines:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 719 0
	# }
	.loc 7 715 0
	#     while (tok->kind == TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L1958
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1958:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 716 0
	#         tok = lex();
	.L191:
	.loc 7 715 0
	#     while (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1959, A, 0
	.loc 7 716 0
	#         tok = lex();
	mov A, .L1960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1960:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L1961
	.L1959:
	jmp .L192
	.L1961:
	jmp .L191
	.L192:
	.loc 7 718 0
	#     return tok;
	.loc 7 715 0
	#     while (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1962
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L1962:
	mov A, B
	add SP, 1
	.loc 7 719 0
	# }
	.loc 7 715 0
	#     while (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_endif:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 734 0
	#         map_put(include_guard, ci->file->name, ci->include_guard);
	.loc 7 723 0
	#         errort(hash, "stray #endif");
	.loc 9 23 0
	# }
	mov B, cond_incl_stack
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1963
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1963:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 723 0
	#         errort(hash, "stray #endif");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1964, A, 0
.data
	.L1965:
	.string "stray #endif"
.text
	mov A, .L1965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 719 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1966:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 723 0
	#         errort(hash, "stray #endif");
.data
	.L1967:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1968:
	mov A, B
	add SP, 3
	.L1964:
	.loc 7 725 0
	#     expect_newline();
	mov A, 0
	mov B, SP
	.loc 9 23 0
	# }
	mov B, cond_incl_stack
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_pop
	.L1969:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 726 0
	# 
	mov A, .L1970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect_newline
	.L1970:
	mov A, B
	.loc 7 731 0
	#         return;
	.loc 7 725 0
	#     expect_newline();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	eq A, 0
	mov B, 1
	jne .L1971, A, 0
	.loc 7 731 0
	#         return;
	.loc 7 725 0
	#     expect_newline();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 731 0
	#         return;
	.loc 7 719 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L1971:
	mov A, B
	jeq .L1972, A, 0
	.loc 7 731 0
	#         return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1972:
	.loc 7 733 0
	#     if (ci->file != last->file)
	mov A, 0
	mov B, SP
	mov A, .L1973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_newlines
	.L1973:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 734 0
	#         map_put(include_guard, ci->file->name, ci->include_guard);
	.loc 7 725 0
	#     expect_newline();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 734 0
	#         map_put(include_guard, ci->file->name, ci->include_guard);
	.loc 7 733 0
	#     if (ci->file != last->file)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1974, A, 0
	.loc 7 734 0
	#         map_put(include_guard, ci->file->name, ci->include_guard);
	.loc 7 725 0
	#     expect_newline();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 734 0
	#         map_put(include_guard, ci->file->name, ci->include_guard);
	.loc 7 725 0
	#     expect_newline();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, include_guard
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L1975:
	mov A, B
	add SP, 3
	.L1974:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_error_message:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 750 0
	#     }
	.loc 7 743 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L1976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L1976:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 750 0
	#     }
	.L193:
	.loc 7 745 0
	#         if (tok->kind == TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L1977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L1977:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 746 0
	#             return buf_body(b);
	.loc 7 745 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1978, A, 0
	.loc 7 746 0
	#             return buf_body(b);
	.loc 7 743 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L1979:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1978:
	.loc 7 748 0
	#             buf_write(b, ' ');
	.loc 7 743 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_len
	.L1981:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 748 0
	#             buf_write(b, ' ');
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L1980, A, 0
	.loc 7 745 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, A
	ne B, 0
	.L1980:
	mov A, B
	jeq .L1982, A, 0
	.loc 7 748 0
	#             buf_write(b, ' ');
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 743 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L1983:
	mov A, B
	add SP, 2
	.L1982:
	.loc 7 750 0
	#     }
	.loc 7 745 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L1984:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 750 0
	#     }
.data
	.L1985:
	.string "%s"
.text
	mov A, .L1985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 743 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L1986:
	mov A, B
	add SP, 3
	.loc 7 750 0
	#     }
	.L194:
	jmp .L193
	.L195:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_error:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 11 "/Users/nullpo/dev/elvm/out/8cc.h"
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	mov A, .L1987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_error_message
	.L1987:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L1988:
	.string "#error: %s"
.text
	mov A, .L1988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 750 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1989:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
.data
	.L1990:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L1991:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_warning:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 11 355 0
	# 
	mov A, .L1992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_error_message
	.L1992:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L1993:
	.string "#warning: %s"
.text
	mov A, .L1993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L1994:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 355 0
	# 
.data
	.L1995:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L1995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1996
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp warnf
	.L1996:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
join_paths:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 770 0
	# }
	.loc 7 767 0
	#     for (int i = 0; i < vec_len(args); i++)
	mov A, 0
	mov B, SP
	mov A, .L1997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L1997:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 768 0
	#         buf_printf(b, "%s", tok2s(vec_get(args, i)));
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.L196:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 355 0
	# 
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L1998:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1999, A, 0
	jmp .L2000
	.L1999:
	.loc 7 768 0
	#         buf_printf(b, "%s", tok2s(vec_get(args, i)));
	jmp .L198
	.L2000:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 355 0
	# 
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L2001:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L2002:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 768 0
	#         buf_printf(b, "%s", tok2s(vec_get(args, i)));
.data
	.L2003:
	.string "%s"
.text
	mov A, .L2003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 767 0
	#     for (int i = 0; i < vec_len(args); i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2004
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2004:
	mov A, B
	add SP, 3
	.loc 7 768 0
	#         buf_printf(b, "%s", tok2s(vec_get(args, i)));
	.L197:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	jmp .L196
	.L198:
	.loc 7 770 0
	# }
	.loc 7 767 0
	#     for (int i = 0; i < vec_len(args); i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L2005:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_cpp_header_name:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 801 0
	# }
	.loc 7 775 0
	#     if (path)
	mov A, 0
	mov B, SP
	.loc 7 770 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_header_file_name
	.L2006:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 776 0
	#         return path;
	.loc 7 775 0
	#     if (path)
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L2007, A, 0
	.loc 7 776 0
	#         return path;
	.loc 7 775 0
	#     if (path)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2007:
	.loc 7 782 0
	#     if (tok->kind == TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L2008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand_newline
	.L2008:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 783 0
	#         errort(hash, "expected filename, but got newline");
	.loc 7 782 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2009, A, 0
	.loc 7 783 0
	#         errort(hash, "expected filename, but got newline");
.data
	.L2010:
	.string "expected filename, but got newline"
.text
	mov A, .L2010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 770 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2011:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 783 0
	#         errort(hash, "expected filename, but got newline");
.data
	.L2012:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2013:
	mov A, B
	add SP, 3
	.L2009:
	.loc 7 787 0
	#     }
	.loc 7 785 0
	#         *std = false;
	.loc 7 782 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2014, A, 0
	.loc 7 787 0
	#     }
	.loc 7 786 0
	#         return tok->sval;
	mov A, 0
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 770 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 787 0
	#     }
	.loc 7 782 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2014:
	.loc 7 789 0
	#         errort(tok, "< expected, but got %s", tok2s(tok));
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 782 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L2015:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2016, A, 0
	.loc 7 789 0
	#         errort(tok, "< expected, but got %s", tok2s(tok));
	.loc 7 782 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L2017:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 789 0
	#         errort(tok, "< expected, but got %s", tok2s(tok));
.data
	.L2018:
	.string "< expected, but got %s"
.text
	mov A, .L2018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 782 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2019:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 789 0
	#         errort(tok, "< expected, but got %s", tok2s(tok));
.data
	.L2020:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2021:
	mov A, B
	add SP, 4
	.L2016:
	.loc 7 791 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L2022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L2022:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 798 0
	#     }
	.L199:
	.loc 7 793 0
	#         if (tok->kind == TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L2023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand_newline
	.L2023:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 794 0
	#             errort(hash, "premature end of header name");
	.loc 7 793 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2024, A, 0
	.loc 7 794 0
	#             errort(hash, "premature end of header name");
.data
	.L2025:
	.string "premature end of header name"
.text
	mov A, .L2025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 770 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2026:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 794 0
	#             errort(hash, "premature end of header name");
.data
	.L2027:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2028:
	mov A, B
	add SP, 3
	.L2024:
	.loc 7 796 0
	#             break;
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 793 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L2029:
	mov A, B
	add SP, 2
	jeq .L2030, A, 0
	.loc 7 796 0
	#             break;
	jmp .L201
	.L2030:
	.loc 7 798 0
	#     }
	.loc 7 793 0
	#         if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 791 0
	#     for (;;) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L2031:
	mov A, B
	add SP, 2
	.loc 7 798 0
	#     }
	.L200:
	jmp .L199
	.L201:
	.loc 7 800 0
	#     return join_paths(tokens);
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 770 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 801 0
	# }
	.loc 7 791 0
	#     for (;;) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2032
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp join_paths
	.L2032:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
guarded:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 808 0
	# }
	.loc 7 805 0
	#     bool r = (guard && map_get(macros, guard));
	mov A, 0
	mov B, SP
	.loc 7 801 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, include_guard
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L2033:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 805 0
	#     bool r = (guard && map_get(macros, guard));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, 0
	jeq .L2034, A, 0
	.loc 10 4 0
	# #define true 1
	.loc 7 805 0
	#     bool r = (guard && map_get(macros, guard));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L2035:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L2034:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 807 0
	#     return r;
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L2036, A, 0
	.loc 9 23 0
	# }
	mov B, cpp_token_one
	load A, B
	jmp .L2037
	.L2036:
	mov B, cpp_token_zero
	load A, B
	.L2037:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 807 0
	#     return r;
.data
	.L2038:
	.string "__8cc_include_guard"
.text
	mov A, .L2038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2039
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_obj_macro
	.L2039:
	mov A, B
	add SP, 2
	.loc 7 808 0
	# }
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_include:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L2040:
	.string "#include is not supported"
.text
	mov A, .L2040
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2041:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2041
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2042:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_include_next:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
.data
	.L2043:
	.string "#include_next is not supported"
.text
	mov A, .L2043
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2044:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2044
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2045:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parse_pragma_operand:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	.loc 7 889 0
	# #ifdef __eir__
	mov A, 0
	mov B, SP
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	.loc 7 889 0
	# #ifdef __eir__
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
.data
	.L2046:
	.string "unknown #pragma: %s"
.text
	mov A, .L2046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2047:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
.data
	.L2048:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2048
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2049:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_pragma:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 908 0
	# }
	.loc 7 907 0
	#     parse_pragma_operand(tok);
	mov A, 0
	mov B, SP
	mov A, .L2050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_read_ident
	.L2050:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 908 0
	# }
	.loc 7 907 0
	#     parse_pragma_operand(tok);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse_pragma_operand
	.L2051:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_digit_sequence:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 919 0
	# }
	.loc 7 916 0
	#         if (!isdigit(*p))
	.L202:
	.loc 7 908 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L2052, A, 0
	jmp .L2053
	.L2052:
	.loc 7 916 0
	#         if (!isdigit(*p))
	jmp .L204
	.L2053:
	.loc 7 908 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L2054:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L2055, A, 0
	.loc 7 916 0
	#         if (!isdigit(*p))
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2055:
	.L203:
	.loc 7 908 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 7 916 0
	#         if (!isdigit(*p))
	jmp .L202
	.L204:
	.loc 7 919 0
	# }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_line:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 937 0
	#         f->name = filename;
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov A, 0
	mov B, SP
	mov A, .L2056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand_newline
	.L2056:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 924 0
	#         errort(tok, "number expected after #line, but got %s", tok2s(tok));
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 1
	jne .L2057, A, 0
	.loc 7 924 0
	#         errort(tok, "number expected after #line, but got %s", tok2s(tok));
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2058
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_digit_sequence
	.L2058:
	mov A, B
	add SP, 1
	eq A, 0
	mov B, A
	ne B, 0
	.L2057:
	mov A, B
	jeq .L2059, A, 0
	.loc 7 924 0
	#         errort(tok, "number expected after #line, but got %s", tok2s(tok));
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2060
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L2060:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 924 0
	#         errort(tok, "number expected after #line, but got %s", tok2s(tok));
.data
	.L2061:
	.string "number expected after #line, but got %s"
.text
	mov A, .L2061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2062:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 924 0
	#         errort(tok, "number expected after #line, but got %s", tok2s(tok));
.data
	.L2063:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2064:
	mov A, B
	add SP, 4
	.L2059:
	.loc 7 926 0
	#     tok = read_expand_newline();
	mov A, 0
	mov B, SP
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp atoi
	.L2065:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 927 0
	#     char *filename = NULL;
	mov A, .L2066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand_newline
	.L2066:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 928 0
	#     if (tok->kind == TSTRING) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	.loc 7 929 0
	#         filename = tok->sval;
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2067, A, 0
	.loc 7 931 0
	#     } else if (tok->kind != TNEWLINE) {
	.loc 7 930 0
	#         expect_newline();
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 931 0
	#     } else if (tok->kind != TNEWLINE) {
	mov A, .L2068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect_newline
	.L2068:
	mov A, B
	jmp .L2069
	.L2067:
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	.loc 7 931 0
	#     } else if (tok->kind != TNEWLINE) {
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2070, A, 0
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2071
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L2071:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
.data
	.L2072:
	.string "newline or a source name are expected, but got %s"
.text
	mov A, .L2072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 923 0
	#     if (tok->kind != TNUMBER || !is_digit_sequence(tok->sval))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2073:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
.data
	.L2074:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2075
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2075:
	mov A, B
	add SP, 4
	.L2070:
	.L2069:
	.loc 7 935 0
	#     f->line = line;
	mov A, 0
	mov B, SP
	mov A, .L2076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp current_file
	.L2076:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 936 0
	#     if (filename)
	.loc 7 926 0
	#     tok = read_expand_newline();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 935 0
	#     f->line = line;
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 937 0
	#         f->name = filename;
	.loc 7 928 0
	#     if (tok->kind == TSTRING) {
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L2077, A, 0
	.loc 7 937 0
	#         f->name = filename;
	.loc 7 928 0
	#     if (tok->kind == TSTRING) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 935 0
	#     f->line = line;
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.L2077:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_linemarker:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 956 0
	# }
	.loc 7 944 0
	#         errort(tok, "line number expected, but got %s", tok2s(tok));
	.loc 7 937 0
	#         f->name = filename;
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2078
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_digit_sequence
	.L2078:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L2079, A, 0
	.loc 7 944 0
	#         errort(tok, "line number expected, but got %s", tok2s(tok));
	.loc 7 937 0
	#         f->name = filename;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L2080:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 944 0
	#         errort(tok, "line number expected, but got %s", tok2s(tok));
.data
	.L2081:
	.string "line number expected, but got %s"
.text
	mov A, .L2081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 937 0
	#         f->name = filename;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2082:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 944 0
	#         errort(tok, "line number expected, but got %s", tok2s(tok));
.data
	.L2083:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2084:
	mov A, B
	add SP, 4
	.L2079:
	.loc 7 946 0
	#     tok = lex();
	mov A, 0
	mov B, SP
	.loc 7 937 0
	#         f->name = filename;
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp atoi
	.L2085:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 947 0
	#     if (tok->kind != TSTRING)
	mov A, .L2086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L2086:
	mov A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 948 0
	#         errort(tok, "filename expected, but got %s", tok2s(tok));
	.loc 7 937 0
	#         f->name = filename;
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2087, A, 0
	.loc 7 948 0
	#         errort(tok, "filename expected, but got %s", tok2s(tok));
	.loc 7 937 0
	#         f->name = filename;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L2088:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 948 0
	#         errort(tok, "filename expected, but got %s", tok2s(tok));
.data
	.L2089:
	.string "filename expected, but got %s"
.text
	mov A, .L2089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 937 0
	#         f->name = filename;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2090:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 948 0
	#         errort(tok, "filename expected, but got %s", tok2s(tok));
.data
	.L2091:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2092:
	mov A, B
	add SP, 4
	.L2087:
	.loc 7 950 0
	#     do {
	mov A, 0
	mov B, SP
	.loc 7 937 0
	#         f->name = filename;
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 952 0
	#     } while (tok->kind != TNEWLINE);
	.L205:
	mov A, .L2093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L2093:
	mov A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 937 0
	#         f->name = filename;
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2094, A, 0
	.loc 7 952 0
	#     } while (tok->kind != TNEWLINE);
	jmp .L205
	.L2094:
	.L206:
	.loc 7 954 0
	#     file->line = line;
	mov A, 0
	mov B, SP
	mov A, .L2095
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp current_file
	.L2095:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 955 0
	#     file->name = filename;
	.loc 7 946 0
	#     tok = lex();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 954 0
	#     file->line = line;
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 956 0
	# }
	.loc 7 950 0
	#     do {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 954 0
	#     file->line = line;
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_directive:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 992 0
	#     errort(hash, "unsupported preprocessor directive: %s", tok2s(tok));
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov A, 0
	mov B, SP
	mov A, .L2096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L2096:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 965 0
	#         return;
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2097, A, 0
	.loc 7 965 0
	#         return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2097:
	.loc 7 969 0
	#     }
	.loc 7 967 0
	#         read_linemarker(tok);
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2098, A, 0
	.loc 7 969 0
	#     }
	.loc 7 968 0
	#         return;
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_linemarker
	.L2099:
	mov A, B
	add SP, 1
	.loc 7 969 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2098:
	.loc 7 971 0
	#         goto err;
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2100, A, 0
	.loc 7 971 0
	#         goto err;
	jmp .L207
	.L2100:
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov A, 0
	mov B, SP
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
.data
	.L2101:
	.string "define"
.text
	mov A, .L2101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2102:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2103, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	mov A, .L2104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_define
	.L2104:
	mov A, B
	jmp .L2105
	.L2103:
.data
	.L2106:
	.string "elif"
.text
	mov A, .L2106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2107:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2108, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	.loc 7 956 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2109
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_elif
	.L2109:
	mov A, B
	add SP, 1
	jmp .L2110
	.L2108:
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
.data
	.L2111:
	.string "else"
.text
	mov A, .L2111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2112:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2113, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	.loc 7 956 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2114
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_else
	.L2114:
	mov A, B
	add SP, 1
	jmp .L2115
	.L2113:
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
.data
	.L2116:
	.string "endif"
.text
	mov A, .L2116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2117:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2118, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	.loc 7 956 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_endif
	.L2119:
	mov A, B
	add SP, 1
	jmp .L2120
	.L2118:
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
.data
	.L2121:
	.string "error"
.text
	mov A, .L2121
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2122
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2122:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2123, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	.loc 7 956 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_error
	.L2124:
	mov A, B
	add SP, 1
	jmp .L2125
	.L2123:
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
.data
	.L2126:
	.string "if"
.text
	mov A, .L2126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2127:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2128, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	mov A, .L2129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_if
	.L2129:
	mov A, B
	jmp .L2130
	.L2128:
.data
	.L2131:
	.string "ifdef"
.text
	mov A, .L2131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2132:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2133, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	mov A, .L2134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_ifdef
	.L2134:
	mov A, B
	jmp .L2135
	.L2133:
.data
	.L2136:
	.string "ifndef"
.text
	mov A, .L2136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2137:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2138, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	mov A, .L2139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_ifndef
	.L2139:
	mov A, B
	jmp .L2140
	.L2138:
.data
	.L2141:
	.string "import"
.text
	mov A, .L2141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2142:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2143, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 956 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_include
	.L2144:
	mov A, B
	add SP, 3
	jmp .L2145
	.L2143:
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
.data
	.L2146:
	.string "include"
.text
	mov A, .L2146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2147:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2148, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 956 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_include
	.L2149:
	mov A, B
	add SP, 3
	jmp .L2150
	.L2148:
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
.data
	.L2151:
	.string "include_next"
.text
	mov A, .L2151
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2152:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2153, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 956 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_include_next
	.L2154:
	mov A, B
	add SP, 2
	jmp .L2155
	.L2153:
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
.data
	.L2156:
	.string "line"
.text
	mov A, .L2156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2157:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2158, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	mov A, .L2159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_line
	.L2159:
	mov A, B
	jmp .L2160
	.L2158:
.data
	.L2161:
	.string "pragma"
.text
	mov A, .L2161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2162:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2163, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	mov A, .L2164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_pragma
	.L2164:
	mov A, B
	jmp .L2165
	.L2163:
.data
	.L2166:
	.string "undef"
.text
	mov A, .L2166
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2167:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2168, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	mov A, .L2169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_undef
	.L2169:
	mov A, B
	jmp .L2170
	.L2168:
.data
	.L2171:
	.string "warning"
.text
	mov A, .L2171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 973 0
	#     if (!strcmp(s, "define"))            read_define();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2172:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2173, A, 0
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	.loc 7 956 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_warning
	.L2174:
	mov A, B
	add SP, 1
	jmp .L2175
	.L2173:
	.loc 7 974 0
	#     else if (!strcmp(s, "elif"))         read_elif(hash);
	jmp .L207
	.L2175:
	.L2170:
	.L2165:
	.L2160:
	.L2155:
	.L2150:
	.L2145:
	.L2140:
	.L2135:
	.L2130:
	.L2125:
	.L2120:
	.L2115:
	.L2110:
	.L2105:
	.loc 7 990 0
	# 
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 992 0
	#     errort(hash, "unsupported preprocessor directive: %s", tok2s(tok));
	.L207:
	.loc 7 964 0
	#     if (tok->kind == TNEWLINE)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2176
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L2176:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 992 0
	#     errort(hash, "unsupported preprocessor directive: %s", tok2s(tok));
.data
	.L2177:
	.string "unsupported preprocessor directive: %s"
.text
	mov A, .L2177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 956 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2178:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 992 0
	#     errort(hash, "unsupported preprocessor directive: %s", tok2s(tok));
.data
	.L2179:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2180:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_token_pushback:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1006 0
	# }
	.loc 7 1001 0
	#     tok->kind = kind;
	mov A, 0
	mov B, SP
	.loc 7 992 0
	#     errort(hash, "unsupported preprocessor directive: %s", tok2s(tok));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_token
	.L2181:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1002 0
	#     tok->sval = sval;
	.loc 7 992 0
	#     errort(hash, "unsupported preprocessor directive: %s", tok2s(tok));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1001 0
	#     tok->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1003 0
	#     tok->slen = strlen(sval) + 1;
	.loc 7 992 0
	#     errort(hash, "unsupported preprocessor directive: %s", tok2s(tok));
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1001 0
	#     tok->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1004 0
	#     tok->enc = ENC_NONE;
	.loc 7 992 0
	#     errort(hash, "unsupported preprocessor directive: %s", tok2s(tok));
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L2182:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1004 0
	#     tok->enc = ENC_NONE;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1001 0
	#     tok->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1005 0
	#     unget_token(tok);
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1001 0
	#     tok->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 11
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1006 0
	# }
	.loc 7 1001 0
	#     tok->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L2183:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
handle_file_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1032 0
	# }
	.loc 7 1006 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1006 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token_pushback
	.L2184:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
handle_line_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1036 0
	# }
	.loc 7 1032 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1036 0
	# }
.data
	.L2185:
	.string "%d"
.text
	mov A, .L2185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2186:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1032 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token_pushback
	.L2187:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
handle_pragma_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1046 0
	# }
	.loc 7 1040 0
	#     Token *operand = read_token();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_expect
	.L2188:
	mov A, B
	add SP, 1
	.loc 7 1041 0
	#     if (operand->kind != TSTRING)
	mov A, 0
	mov B, SP
	mov A, .L2189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_token
	.L2189:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1042 0
	#         errort(operand, "_Pragma takes a string literal, but got %s", tok2s(operand));
	.loc 7 1041 0
	#     if (operand->kind != TSTRING)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2190, A, 0
	.loc 7 1042 0
	#         errort(operand, "_Pragma takes a string literal, but got %s", tok2s(operand));
	.loc 7 1041 0
	#     if (operand->kind != TSTRING)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2191
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L2191:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1042 0
	#         errort(operand, "_Pragma takes a string literal, but got %s", tok2s(operand));
.data
	.L2192:
	.string "_Pragma takes a string literal, but got %s"
.text
	mov A, .L2192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1041 0
	#     if (operand->kind != TSTRING)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L2193:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1042 0
	#         errort(operand, "_Pragma takes a string literal, but got %s", tok2s(operand));
.data
	.L2194:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2195:
	mov A, B
	add SP, 4
	.L2190:
	.loc 7 1044 0
	#     parse_pragma_operand(operand);
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_expect
	.L2196:
	mov A, B
	add SP, 1
	.loc 7 1045 0
	#     make_token_pushback(tmpl, TNUMBER, "1");
	.loc 7 1041 0
	#     if (operand->kind != TSTRING)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse_pragma_operand
	.L2197:
	mov A, B
	add SP, 1
	.loc 7 1046 0
	# }
.data
	.L2198:
	.string "1"
.text
	mov A, .L2198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1036 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token_pushback
	.L2199:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
handle_base_file_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1050 0
	# }
	mov A, .L2200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_base_file
	.L2200:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1046 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token_pushback
	.L2201:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S0.counter:
	.long 0
	.text
handle_counter_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1055 0
	# }
	.loc 7 1054 0
	#     make_token_pushback(tmpl, TNUMBER, format("%d", counter++));
	mov B, .S0.counter
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, .S0.counter
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1055 0
	# }
.data
	.L2202:
	.string "%d"
.text
	mov A, .L2202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2203:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1050 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token_pushback
	.L2204:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
handle_include_level_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1059 0
	# }
	mov A, .L2205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stream_depth
	.L2205:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2206:
	.string "%d"
.text
	mov A, .L2206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2207:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1055 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token_pushback
	.L2208:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
add_include_path:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1067 0
	# }
	.loc 7 1059 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, std_include_path
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L2209:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
define_obj_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1071 0
	# }
	.loc 7 1067 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector1
	.L2210:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_obj_macro
	.L2211:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2212:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
define_special_macro:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1075 0
	# }
	.loc 7 1071 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2213
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_special_macro
	.L2213:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, macros
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2214:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_keywords:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2215:
	.string "->"
.text
	mov A, .L2215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2216:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2217:
	.string "+="
.text
	mov A, .L2217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2218:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2219:
	.string "&="
.text
	mov A, .L2219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2220
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2220:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2221:
	.string "/="
.text
	mov A, .L2221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2222
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2222:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2223:
	.string "%="
.text
	mov A, .L2223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2224:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2225:
	.string "*="
.text
	mov A, .L2225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2226:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2227:
	.string "|="
.text
	mov A, .L2227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2228:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2229:
	.string "<<="
.text
	mov A, .L2229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2230
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2230:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2231:
	.string ">>="
.text
	mov A, .L2231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2232:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2233:
	.string "-="
.text
	mov A, .L2233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2234:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2235:
	.string "^="
.text
	mov A, .L2235
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2236:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2237:
	.string "--"
.text
	mov A, .L2237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2238:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2239:
	.string "=="
.text
	mov A, .L2239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2240:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2241:
	.string ">="
.text
	mov A, .L2241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2242:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2243:
	.string "++"
.text
	mov A, .L2243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2244:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2245:
	.string "<="
.text
	mov A, .L2245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2246:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2247:
	.string "&&"
.text
	mov A, .L2247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2248:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2249:
	.string "||"
.text
	mov A, .L2249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2250:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2251:
	.string "!="
.text
	mov A, .L2251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2252:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2253:
	.string "<<"
.text
	mov A, .L2253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2254:
	mov A, B
	add SP, 3
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
	.loc 6 205 0
	# }
	mov A, 309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1079 0
	# #define keyword(id, str, _) map_put(keywords, str, (void *)id);
.data
	.L2255:
	.string ">>"
.text
	mov A, .L2255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2256:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2257:
	.string "_Alignas"
.text
	mov A, .L2257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2258:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2259:
	.string "_Alignof"
.text
	mov A, .L2259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2260
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2260:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2261:
	.string "auto"
.text
	mov A, .L2261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2262:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2263:
	.string "_Bool"
.text
	mov A, .L2263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2264:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2265:
	.string "break"
.text
	mov A, .L2265
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2266:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2267:
	.string "case"
.text
	mov A, .L2267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2268:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2269:
	.string "char"
.text
	mov A, .L2269
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2270:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2271:
	.string "_Complex"
.text
	mov A, .L2271
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2272
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2272:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2273:
	.string "const"
.text
	mov A, .L2273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2274:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2275:
	.string "continue"
.text
	mov A, .L2275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2276:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2277:
	.string "default"
.text
	mov A, .L2277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2278:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2279:
	.string "do"
.text
	mov A, .L2279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2280:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2281:
	.string "double"
.text
	mov A, .L2281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2282:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2283:
	.string "else"
.text
	mov A, .L2283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2284:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2285:
	.string "enum"
.text
	mov A, .L2285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2286:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2287:
	.string "extern"
.text
	mov A, .L2287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2288:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2289:
	.string "float"
.text
	mov A, .L2289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2290:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2291:
	.string "for"
.text
	mov A, .L2291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2292:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2293:
	.string "_Generic"
.text
	mov A, .L2293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2294:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2295:
	.string "goto"
.text
	mov A, .L2295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2296:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2297:
	.string "if"
.text
	mov A, .L2297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2298:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2299:
	.string "_Imaginary"
.text
	mov A, .L2299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2300:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 332
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2301:
	.string "inline"
.text
	mov A, .L2301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2302:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2303:
	.string "int"
.text
	mov A, .L2303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2304:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2305:
	.string "long"
.text
	mov A, .L2305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2306:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2307:
	.string "_Noreturn"
.text
	mov A, .L2307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2308:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2309:
	.string "register"
.text
	mov A, .L2309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2310:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2311:
	.string "restrict"
.text
	mov A, .L2311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2312:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2313:
	.string "return"
.text
	mov A, .L2313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2314:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2315:
	.string "##"
.text
	mov A, .L2315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2316:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2317:
	.string "short"
.text
	mov A, .L2317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2318:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2319:
	.string "signed"
.text
	mov A, .L2319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2320:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2321:
	.string "sizeof"
.text
	mov A, .L2321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2322:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2323:
	.string "static"
.text
	mov A, .L2323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2324:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2325:
	.string "_Static_assert"
.text
	mov A, .L2325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2326:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2327:
	.string "struct"
.text
	mov A, .L2327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2328:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2329:
	.string "switch"
.text
	mov A, .L2329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2330:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2331:
	.string "..."
.text
	mov A, .L2331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2332
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2332:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2333:
	.string "typedef"
.text
	mov A, .L2333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2334:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2335:
	.string "typeof"
.text
	mov A, .L2335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2336:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2337:
	.string "union"
.text
	mov A, .L2337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2338:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2339:
	.string "unsigned"
.text
	mov A, .L2339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2340:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2341:
	.string "void"
.text
	mov A, .L2341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2342:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2343:
	.string "volatile"
.text
	mov A, .L2343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2344:
	mov A, B
	add SP, 3
	.loc 7 1080 0
	# #include "keyword.inc"
	.loc 6 205 0
	# }
	mov A, 354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1080 0
	# #include "keyword.inc"
.data
	.L2345:
	.string "while"
.text
	mov A, .L2345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2346:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_predefined_macros:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1138 0
	# #endif
	.loc 7 1100 0
	#     define_special_macro("__LINE__", handle_line_macro);
	mov A, handle_file_macro
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2347:
	.string "__FILE__"
.text
	mov A, .L2347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_special_macro
	.L2348:
	mov A, B
	add SP, 2
	.loc 7 1101 0
	#     define_special_macro("_Pragma",  handle_pragma_macro);
	mov A, handle_line_macro
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2349:
	.string "__LINE__"
.text
	mov A, .L2349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_special_macro
	.L2350:
	mov A, B
	add SP, 2
	.loc 7 1102 0
	#     // [GNU] Non-standard macros
	mov A, handle_pragma_macro
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2351:
	.string "_Pragma"
.text
	mov A, .L2351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_special_macro
	.L2352:
	mov A, B
	add SP, 2
	.loc 7 1104 0
	#     define_special_macro("__COUNTER__", handle_counter_macro);
	mov A, handle_base_file_macro
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2353:
	.string "__BASE_FILE__"
.text
	mov A, .L2353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_special_macro
	.L2354:
	mov A, B
	add SP, 2
	.loc 7 1105 0
	#     define_special_macro("__INCLUDE_LEVEL__", handle_include_level_macro);
	mov A, handle_counter_macro
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2355:
	.string "__COUNTER__"
.text
	mov A, .L2355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_special_macro
	.L2356:
	mov A, B
	add SP, 2
	.loc 7 1106 0
	# #ifndef __eir__
	mov A, handle_include_level_macro
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2357:
	.string "__INCLUDE_LEVEL__"
.text
	mov A, .L2357
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_special_macro
	.L2358:
	mov A, B
	add SP, 2
	.loc 7 1114 0
	#     read_from_string("#define __8cc__ 1");
.data
	.L2359:
	.string "#define _LP64 1"
.text
	mov A, .L2359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2360:
	mov A, B
	add SP, 1
	.loc 7 1115 0
	#     read_from_string("#define __ELF__ 1");
.data
	.L2361:
	.string "#define __8cc__ 1"
.text
	mov A, .L2361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2362:
	mov A, B
	add SP, 1
	.loc 7 1116 0
	#     read_from_string("#define __LP64__ 1");
.data
	.L2363:
	.string "#define __ELF__ 1"
.text
	mov A, .L2363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2364:
	mov A, B
	add SP, 1
	.loc 7 1117 0
	#     read_from_string("#define __SIZEOF_DOUBLE__ 1");
.data
	.L2365:
	.string "#define __LP64__ 1"
.text
	mov A, .L2365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2366:
	mov A, B
	add SP, 1
	.loc 7 1118 0
	#     read_from_string("#define __SIZEOF_FLOAT__ 1");
.data
	.L2367:
	.string "#define __SIZEOF_DOUBLE__ 1"
.text
	mov A, .L2367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2368:
	mov A, B
	add SP, 1
	.loc 7 1119 0
	#     read_from_string("#define __SIZEOF_INT__ 1");
.data
	.L2369:
	.string "#define __SIZEOF_FLOAT__ 1"
.text
	mov A, .L2369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2370:
	mov A, B
	add SP, 1
	.loc 7 1120 0
	#     read_from_string("#define __SIZEOF_LONG_DOUBLE__ 1");
.data
	.L2371:
	.string "#define __SIZEOF_INT__ 1"
.text
	mov A, .L2371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2372:
	mov A, B
	add SP, 1
	.loc 7 1121 0
	#     read_from_string("#define __SIZEOF_LONG_LONG__ 1");
.data
	.L2373:
	.string "#define __SIZEOF_LONG_DOUBLE__ 1"
.text
	mov A, .L2373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2374:
	mov A, B
	add SP, 1
	.loc 7 1122 0
	#     read_from_string("#define __SIZEOF_LONG__ 1");
.data
	.L2375:
	.string "#define __SIZEOF_LONG_LONG__ 1"
.text
	mov A, .L2375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2376:
	mov A, B
	add SP, 1
	.loc 7 1123 0
	#     read_from_string("#define __SIZEOF_POINTER__ 1");
.data
	.L2377:
	.string "#define __SIZEOF_LONG__ 1"
.text
	mov A, .L2377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2378:
	mov A, B
	add SP, 1
	.loc 7 1124 0
	#     read_from_string("#define __SIZEOF_PTRDIFF_T__ 1");
.data
	.L2379:
	.string "#define __SIZEOF_POINTER__ 1"
.text
	mov A, .L2379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2380:
	mov A, B
	add SP, 1
	.loc 7 1125 0
	#     read_from_string("#define __SIZEOF_SHORT__ 1");
.data
	.L2381:
	.string "#define __SIZEOF_PTRDIFF_T__ 1"
.text
	mov A, .L2381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2382:
	mov A, B
	add SP, 1
	.loc 7 1126 0
	#     read_from_string("#define __SIZEOF_SIZE_T__ 1");
.data
	.L2383:
	.string "#define __SIZEOF_SHORT__ 1"
.text
	mov A, .L2383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2384:
	mov A, B
	add SP, 1
	.loc 7 1127 0
	#     read_from_string("#define __STDC_HOSTED__ 1");
.data
	.L2385:
	.string "#define __SIZEOF_SIZE_T__ 1"
.text
	mov A, .L2385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2386:
	mov A, B
	add SP, 1
	.loc 7 1128 0
	#     read_from_string("#define __STDC_ISO_10646__ 201103L");
.data
	.L2387:
	.string "#define __STDC_HOSTED__ 1"
.text
	mov A, .L2387
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2388
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2388:
	mov A, B
	add SP, 1
	.loc 7 1129 0
	#     read_from_string("#define __STDC_NO_ATOMICS__ 1");
.data
	.L2389:
	.string "#define __STDC_ISO_10646__ 201103L"
.text
	mov A, .L2389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2390
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2390:
	mov A, B
	add SP, 1
	.loc 7 1130 0
	#     read_from_string("#define __STDC_NO_COMPLEX__ 1");
.data
	.L2391:
	.string "#define __STDC_NO_ATOMICS__ 1"
.text
	mov A, .L2391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2392:
	mov A, B
	add SP, 1
	.loc 7 1131 0
	#     read_from_string("#define __STDC_NO_THREADS__ 1");
.data
	.L2393:
	.string "#define __STDC_NO_COMPLEX__ 1"
.text
	mov A, .L2393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2394:
	mov A, B
	add SP, 1
	.loc 7 1132 0
	#     read_from_string("#define __STDC_NO_VLA__ 1");
.data
	.L2395:
	.string "#define __STDC_NO_THREADS__ 1"
.text
	mov A, .L2395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2396:
	mov A, B
	add SP, 1
	.loc 7 1133 0
	#     read_from_string("#define __STDC_UTF_16__ 1");
.data
	.L2397:
	.string "#define __STDC_NO_VLA__ 1"
.text
	mov A, .L2397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2398:
	mov A, B
	add SP, 1
	.loc 7 1134 0
	#     read_from_string("#define __STDC_UTF_32__ 1");
.data
	.L2399:
	.string "#define __STDC_UTF_16__ 1"
.text
	mov A, .L2399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2400:
	mov A, B
	add SP, 1
	.loc 7 1135 0
	#     read_from_string("#define __STDC_VERSION__ 201112L");
.data
	.L2401:
	.string "#define __STDC_UTF_32__ 1"
.text
	mov A, .L2401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2402:
	mov A, B
	add SP, 1
	.loc 7 1136 0
	#     read_from_string("#define __STDC__ 1");
.data
	.L2403:
	.string "#define __STDC_VERSION__ 201112L"
.text
	mov A, .L2403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2404:
	mov A, B
	add SP, 1
	.loc 7 1137 0
	#     read_from_string("#define __eir__ 1");
.data
	.L2405:
	.string "#define __STDC__ 1"
.text
	mov A, .L2405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2406:
	mov A, B
	add SP, 1
	.loc 7 1138 0
	# #endif
.data
	.L2407:
	.string "#define __eir__ 1"
.text
	mov A, .L2407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_from_string
	.L2408:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_now:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_init:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1153 0
	# }
	.loc 7 1150 0
	#     init_keywords();
.data
	.L2409:
	.string "C"
.text
	mov A, .L2409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2410
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp setlocale
	.L2410:
	mov A, B
	add SP, 2
	.loc 7 1151 0
	#     init_now();
	mov A, .L2411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_keywords
	.L2411:
	mov A, B
	.loc 7 1152 0
	#     init_predefined_macros();
	mov A, .L2412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_now
	.L2412:
	mov A, B
	.loc 7 1153 0
	# }
	mov A, .L2413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_predefined_macros
	.L2413:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
maybe_convert_keyword:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1169 0
	# }
	.loc 7 1161 0
	#         return tok;
	.loc 7 1153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2414, A, 0
	.loc 7 1161 0
	#         return tok;
	.loc 7 1153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2414:
	.loc 7 1163 0
	#     if (!id)
	mov A, 0
	mov B, SP
	.loc 7 1153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 9 23 0
	# }
	mov B, keywords
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L2415:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1164 0
	#         return tok;
	.loc 7 1163 0
	#     if (!id)
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L2416, A, 0
	.loc 7 1164 0
	#         return tok;
	.loc 7 1153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2416:
	.loc 7 1166 0
	#     r->kind = TKEYWORD;
	mov A, 0
	mov B, SP
	.loc 7 1153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_token
	.L2417:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1167 0
	#     r->id = id;
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1166 0
	#     r->kind = TKEYWORD;
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1168 0
	#     return r;
	.loc 7 1163 0
	#     if (!id)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1166 0
	#     r->kind = TKEYWORD;
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1169 0
	# }
	.loc 7 1166 0
	#     r->kind = TKEYWORD;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_from_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1179 0
	# }
	.loc 7 1175 0
	#     Vector *toplevels = read_toplevels();
	.loc 7 1169 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_file_string
	.L2418:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stream_stash
	.L2419:
	mov A, B
	add SP, 1
	.loc 7 1176 0
	#     for (int i = 0; i < vec_len(toplevels); i++)
	mov A, 0
	mov B, SP
	mov A, .L2420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_toplevels
	.L2420:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1177 0
	#         emit_toplevel(vec_get(toplevels, i));
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.L208:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1176 0
	#     for (int i = 0; i < vec_len(toplevels); i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L2421:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2422, A, 0
	jmp .L2423
	.L2422:
	.loc 7 1177 0
	#         emit_toplevel(vec_get(toplevels, i));
	jmp .L210
	.L2423:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1176 0
	#     for (int i = 0; i < vec_len(toplevels); i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L2424:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_toplevel
	.L2425:
	mov A, B
	add SP, 1
	.loc 7 1177 0
	#         emit_toplevel(vec_get(toplevels, i));
	.L209:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	jmp .L208
	.L210:
	.loc 7 1179 0
	# }
	mov A, .L2426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stream_unstash
	.L2426:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
peek_token:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1185 0
	# }
	.loc 7 1183 0
	#     unget_token(r);
	mov A, 0
	mov B, SP
	mov A, .L2427
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_token
	.L2427:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1184 0
	#     return r;
	.loc 7 1183 0
	#     unget_token(r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L2428:
	mov A, B
	add SP, 1
	.loc 7 1185 0
	# }
	.loc 7 1183 0
	#     unget_token(r);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_token:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1197 0
	#     }
	.loc 7 1189 0
	#     for (;;) {
	.loc 7 1197 0
	#     }
	.L211:
	.loc 7 1191 0
	#         if (tok->bol && is_keyword(tok, '#') && tok->hideset == NULL) {
	mov A, .L2429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expand
	.L2429:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1194 0
	#         }
	.loc 7 1192 0
	#             read_directive(tok);
	.loc 7 1189 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, 0
	jeq .L2431, A, 0
	.loc 7 1192 0
	#             read_directive(tok);
	mov A, 35
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1189 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L2432:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L2431:
	mov A, B
	mov B, 0
	jeq .L2430, A, 0
	.loc 7 1192 0
	#             read_directive(tok);
	.loc 7 1189 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1192 0
	#             read_directive(tok);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L2430:
	mov A, B
	jeq .L2433, A, 0
	.loc 7 1194 0
	#         }
	.loc 7 1193 0
	#             continue;
	.loc 7 1189 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_directive
	.L2434:
	mov A, B
	add SP, 1
	.loc 7 1194 0
	#         }
	jmp .L212
	.L2433:
	.file 12 "/Users/nullpo/dev/elvm/libc/assert.h"
	.loc 12 12 0
	#     }                                           \
	.L214:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 1189 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L2435, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L2436:
	.string "assertion failed: tok->kind < MIN_CPP_TOKEN\n"
.text
	mov A, .L2436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L2437:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L2435:
	mov A, 0
	jeq .L2438, A, 0
	jmp .L214
	.L2438:
	.L215:
	.loc 7 1197 0
	#     }
	.loc 7 1189 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_convert_keyword
	.L2439:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1197 0
	#     }
	.L212:
	jmp .L211
	.L213:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
decorate_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1208 0
	# }
	.loc 7 1205 0
	#     if (ty->bitsize > 0)
	mov A, 0
	mov B, SP
	.loc 7 1197 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	jeq .L2440, A, 0
	.loc 7 1205 0
	#     if (ty->bitsize > 0)
.data
	.L2441:
	.string "u"
.text
	mov A, .L2441
	jmp .L2442
	.L2440:
.data
	.L2443:
	.string ""
.text
	mov A, .L2443
	.L2442:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1206 0
	#         return format("%s%s:%d:%d", u, name, ty->bitoff, ty->bitoff + ty->bitsize);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1197 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2444, A, 0
	.loc 7 1206 0
	#         return format("%s%s:%d:%d", u, name, ty->bitoff, ty->bitoff + ty->bitsize);
	.loc 7 1197 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1206 0
	#         return format("%s%s:%d:%d", u, name, ty->bitoff, ty->bitoff + ty->bitsize);
	.loc 7 1197 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1206 0
	#         return format("%s%s:%d:%d", u, name, ty->bitoff, ty->bitoff + ty->bitsize);
	.loc 7 1197 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1205 0
	#     if (ty->bitsize > 0)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1206 0
	#         return format("%s%s:%d:%d", u, name, ty->bitoff, ty->bitoff + ty->bitsize);
.data
	.L2445:
	.string "%s%s:%d:%d"
.text
	mov A, .L2445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2446:
	mov A, B
	add SP, 5
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2444:
	.loc 7 1208 0
	# }
	.loc 7 1197 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1205 0
	#     if (ty->bitsize > 0)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1208 0
	# }
.data
	.L2447:
	.string "%s%s"
.text
	mov A, .L2447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2448:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_ty2s:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 1261 0
	#         return format("(Unknown ty: %d)", ty->kind);
	.loc 7 1212 0
	#         return "(nil)";
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	jeq .L2449, A, 0
	.loc 7 1212 0
	#         return "(nil)";
.data
	.L2450:
	.string "(nil)"
.text
	mov A, .L2450
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2449:
	.loc 7 1261 0
	#         return format("(Unknown ty: %d)", ty->kind);
	.loc 7 1214 0
	#     case KIND_VOID: return "void";
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 1261 0
	#         return format("(Unknown ty: %d)", ty->kind);
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2451, A, 0
	jmp .L217
	.L2451:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2452, A, 0
	jmp .L218
	.L2452:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2453, A, 0
	jmp .L219
	.L2453:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2454, A, 0
	jmp .L220
	.L2454:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2455, A, 0
	jmp .L221
	.L2455:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2456, A, 0
	jmp .L222
	.L2456:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2457, A, 0
	jmp .L223
	.L2457:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2458, A, 0
	jmp .L224
	.L2458:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2459, A, 0
	jmp .L225
	.L2459:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2460, A, 0
	jmp .L226
	.L2460:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2461, A, 0
	jmp .L227
	.L2461:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2462, A, 0
	jmp .L228
	.L2462:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2463, A, 0
	jmp .L229
	.L2463:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2464, A, 0
	jmp .L233
	.L2464:
	jmp .L237
	.loc 7 1215 0
	#     case KIND_BOOL: return "_Bool";
	.L217:
.data
	.L2465:
	.string "void"
.text
	mov A, .L2465
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1216 0
	#     case KIND_CHAR: return decorate_int("char", ty);
	.L218:
.data
	.L2466:
	.string "_Bool"
.text
	mov A, .L2466
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1217 0
	#     case KIND_SHORT: return decorate_int("short", ty);
	.L219:
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1217 0
	#     case KIND_SHORT: return decorate_int("short", ty);
.data
	.L2467:
	.string "char"
.text
	mov A, .L2467
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2468
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp decorate_int
	.L2468:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1218 0
	#     case KIND_INT:  return decorate_int("int", ty);
	.L220:
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1218 0
	#     case KIND_INT:  return decorate_int("int", ty);
.data
	.L2469:
	.string "short"
.text
	mov A, .L2469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp decorate_int
	.L2470:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1219 0
	#     case KIND_LONG: return decorate_int("long", ty);
	.L221:
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1219 0
	#     case KIND_LONG: return decorate_int("long", ty);
.data
	.L2471:
	.string "int"
.text
	mov A, .L2471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2472
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp decorate_int
	.L2472:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1220 0
	#     case KIND_LLONG: return decorate_int("llong", ty);
	.L222:
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1220 0
	#     case KIND_LLONG: return decorate_int("llong", ty);
.data
	.L2473:
	.string "long"
.text
	mov A, .L2473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2474
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp decorate_int
	.L2474:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1221 0
	#     case KIND_FLOAT: return "float";
	.L223:
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1221 0
	#     case KIND_FLOAT: return "float";
.data
	.L2475:
	.string "llong"
.text
	mov A, .L2475
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2476
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp decorate_int
	.L2476:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1222 0
	#     case KIND_DOUBLE: return "double";
	.L224:
.data
	.L2477:
	.string "float"
.text
	mov A, .L2477
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1223 0
	#     case KIND_LDOUBLE: return "long double";
	.L225:
.data
	.L2478:
	.string "double"
.text
	mov A, .L2478
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1224 0
	#     case KIND_PTR:
	.L226:
.data
	.L2479:
	.string "long double"
.text
	mov A, .L2479
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1225 0
	#         return format("*%s", do_ty2s(dict, ty->ptr));
	.L227:
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2480
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_ty2s
	.L2480:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1225 0
	#         return format("*%s", do_ty2s(dict, ty->ptr));
.data
	.L2481:
	.string "*%s"
.text
	mov A, .L2481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2482
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2482:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1227 0
	#         return format("[%d]%s", ty->len, do_ty2s(dict, ty->ptr));
	.L228:
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_ty2s
	.L2483:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1227 0
	#         return format("[%d]%s", ty->len, do_ty2s(dict, ty->ptr));
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1227 0
	#         return format("[%d]%s", ty->len, do_ty2s(dict, ty->ptr));
.data
	.L2484:
	.string "[%d]%s"
.text
	mov A, .L2484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2485:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1244 0
	#         }
	.loc 7 1229 0
	#         char *kind = ty->is_struct ? "struct" : "union";
	.L229:
	.loc 7 1244 0
	#         }
	.loc 7 1230 0
	#         if (dict_get(dict, format("%p", ty)))
	mov A, 0
	mov B, SP
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 9
	load A, B
	jeq .L2486, A, 0
	.loc 7 1230 0
	#         if (dict_get(dict, format("%p", ty)))
.data
	.L2487:
	.string "struct"
.text
	mov A, .L2487
	jmp .L2488
	.L2486:
.data
	.L2489:
	.string "union"
.text
	mov A, .L2489
	.L2488:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1231 0
	#             return format("(%s)", kind);
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1231 0
	#             return format("(%s)", kind);
.data
	.L2490:
	.string "%p"
.text
	mov A, .L2490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2491:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_get
	.L2492:
	mov A, B
	add SP, 2
	jeq .L2493, A, 0
	.loc 7 1231 0
	#             return format("(%s)", kind);
	.loc 7 1230 0
	#         if (dict_get(dict, format("%p", ty)))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1231 0
	#             return format("(%s)", kind);
.data
	.L2494:
	.string "(%s)"
.text
	mov A, .L2494
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2495
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2495:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2493:
	.loc 7 1233 0
	#         if (ty->fields) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1233 0
	#         if (ty->fields) {
.data
	.L2496:
	.string "%p"
.text
	mov A, .L2496
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2497:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2498
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_put
	.L2498:
	mov A, B
	add SP, 3
	.loc 7 1244 0
	#         }
	.loc 7 1234 0
	#             Buffer *b = make_buffer();
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	jeq .L2499, A, 0
	.loc 7 1244 0
	#         }
	.loc 7 1235 0
	#             buf_printf(b, "(%s", kind);
	mov A, 0
	mov B, SP
	mov A, .L2500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L2500:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1236 0
	#             Vector *keys = dict_keys(ty->fields);
	.loc 7 1230 0
	#         if (dict_get(dict, format("%p", ty)))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1236 0
	#             Vector *keys = dict_keys(ty->fields);
.data
	.L2501:
	.string "(%s"
.text
	mov A, .L2501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1235 0
	#             buf_printf(b, "(%s", kind);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2502:
	mov A, B
	add SP, 3
	.loc 7 1237 0
	#             for (int i = 0; i < vec_len(keys); i++) {
	mov A, 0
	mov B, SP
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2503
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_keys
	.L2503:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 1241 0
	#             }
	.loc 7 1238 0
	#                 char *key = vec_get(keys, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 1241 0
	#             }
	.L230:
	.loc 7 1238 0
	#                 char *key = vec_get(keys, i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1237 0
	#             for (int i = 0; i < vec_len(keys); i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L2504:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2505, A, 0
	jmp .L2506
	.L2505:
	.loc 7 1241 0
	#             }
	jmp .L232
	.L2506:
	.loc 7 1239 0
	#                 Type *fieldtype = dict_get(ty->fields, key);
	mov A, 0
	mov B, SP
	.loc 7 1238 0
	#                 char *key = vec_get(keys, i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1237 0
	#             for (int i = 0; i < vec_len(keys); i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2507
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L2507:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 1240 0
	#                 buf_printf(b, " (%s)", do_ty2s(dict, fieldtype));
	mov A, 0
	mov B, SP
	.loc 7 1239 0
	#                 Type *fieldtype = dict_get(ty->fields, key);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1240 0
	#                 buf_printf(b, " (%s)", do_ty2s(dict, fieldtype));
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_get
	.L2508:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 1241 0
	#             }
	.loc 7 1240 0
	#                 buf_printf(b, " (%s)", do_ty2s(dict, fieldtype));
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_ty2s
	.L2509:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1241 0
	#             }
.data
	.L2510:
	.string " (%s)"
.text
	mov A, .L2510
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1235 0
	#             buf_printf(b, "(%s", kind);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2511
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2511:
	mov A, B
	add SP, 3
	.loc 7 1241 0
	#             }
	.L231:
	.loc 7 1238 0
	#                 char *key = vec_get(keys, i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1241 0
	#             }
	jmp .L230
	.L232:
	.loc 7 1243 0
	#             return buf_body(b);
.data
	.L2512:
	.string ")"
.text
	mov A, .L2512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1235 0
	#             buf_printf(b, "(%s", kind);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2513:
	mov A, B
	add SP, 2
	.loc 7 1244 0
	#         }
	.loc 7 1235 0
	#             buf_printf(b, "(%s", kind);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L2514:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2499:
	.loc 7 1259 0
	#     }
	.loc 7 1247 0
	#         Buffer *b = make_buffer();
	.L233:
	.loc 7 1259 0
	#     }
	.loc 7 1248 0
	#         buf_printf(b, "(");
	mov A, 0
	mov B, SP
	mov A, .L2515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L2515:
	mov A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 1249 0
	#         if (ty->params) {
.data
	.L2516:
	.string "("
.text
	mov A, .L2516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1248 0
	#         buf_printf(b, "(");
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2517
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2517:
	mov A, B
	add SP, 2
	.loc 7 1255 0
	#             }
	.loc 7 1250 0
	#             for (int i = 0; i < vec_len(ty->params); i++) {
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 13
	load A, B
	jeq .L2518, A, 0
	.loc 7 1255 0
	#             }
	.loc 7 1251 0
	#                 if (i > 0)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777208
	mov A, 0
	store A, B
	.loc 7 1255 0
	#             }
	.L234:
	.loc 7 1251 0
	#                 if (i > 0)
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 13
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L2519:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2520, A, 0
	jmp .L2521
	.L2520:
	.loc 7 1255 0
	#             }
	jmp .L236
	.L2521:
	.loc 7 1252 0
	#                     buf_printf(b, ",");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1251 0
	#                 if (i > 0)
	mov B, BP
	add B, 16777208
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2522, A, 0
	.loc 7 1252 0
	#                     buf_printf(b, ",");
.data
	.L2523:
	.string ","
.text
	mov A, .L2523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1248 0
	#         buf_printf(b, "(");
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2524:
	mov A, B
	add SP, 2
	.L2522:
	.loc 7 1254 0
	#                 buf_printf(b, "%s", do_ty2s(dict, t));
	mov A, 0
	mov B, SP
	.loc 7 1251 0
	#                 if (i > 0)
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1254 0
	#                 buf_printf(b, "%s", do_ty2s(dict, t));
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 13
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L2525:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 1255 0
	#             }
	.loc 7 1254 0
	#                 buf_printf(b, "%s", do_ty2s(dict, t));
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_ty2s
	.L2526:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1255 0
	#             }
.data
	.L2527:
	.string "%s"
.text
	mov A, .L2527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1248 0
	#         buf_printf(b, "(");
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2528:
	mov A, B
	add SP, 3
	.loc 7 1255 0
	#             }
	.L235:
	.loc 7 1251 0
	#                 if (i > 0)
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777208
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1255 0
	#             }
	jmp .L234
	.L236:
	.L2518:
	.loc 7 1258 0
	#         return buf_body(b);
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 12
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_ty2s
	.L2529:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1258 0
	#         return buf_body(b);
.data
	.L2530:
	.string ")=>%s"
.text
	mov A, .L2530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1248 0
	#         buf_printf(b, "(");
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2531:
	mov A, B
	add SP, 3
	.loc 7 1259 0
	#     }
	.loc 7 1248 0
	#         buf_printf(b, "(");
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L2532:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1261 0
	#         return format("(Unknown ty: %d)", ty->kind);
	.L237:
	.loc 7 1208 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1261 0
	#         return format("(Unknown ty: %d)", ty->kind);
.data
	.L2533:
	.string "(Unknown ty: %d)"
.text
	mov A, .L2533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2534:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L216:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ty2s:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1267 0
	# }
	.loc 7 1261 0
	#         return format("(Unknown ty: %d)", ty->kind);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1267 0
	# }
	mov A, .L2535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_dict
	.L2535:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_ty2s
	.L2536:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
uop_to_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1271 0
	# }
	.loc 7 1267 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2537:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1271 0
	# }
.data
	.L2538:
	.string "(%s %s)"
.text
	mov A, .L2538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1267 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2539:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
binop_to_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1275 0
	# }
	.loc 7 1271 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2540:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1275 0
	# }
	.loc 7 1271 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2541:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1275 0
	# }
.data
	.L2542:
	.string "(%s %s %s)"
.text
	mov A, .L2542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2543:
	mov A, B
	add SP, 5
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
a2s_declinit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1283 0
	#     }
	.loc 7 1279 0
	#         if (i > 0)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 1283 0
	#     }
	.L238:
	.loc 7 1279 0
	#         if (i > 0)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1275 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L2544:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2545, A, 0
	jmp .L2546
	.L2545:
	.loc 7 1283 0
	#     }
	jmp .L240
	.L2546:
	.loc 7 1280 0
	#             buf_printf(b, " ");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1279 0
	#         if (i > 0)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2547, A, 0
	.loc 7 1280 0
	#             buf_printf(b, " ");
.data
	.L2548:
	.string " "
.text
	mov A, .L2548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1275 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2549:
	mov A, B
	add SP, 2
	.L2547:
	.loc 7 1282 0
	#         buf_printf(b, "%s", node2s(init));
	mov A, 0
	mov B, SP
	.loc 7 1279 0
	#         if (i > 0)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1275 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L2550:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1283 0
	#     }
	.loc 7 1282 0
	#         buf_printf(b, "%s", node2s(init));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2551:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
.data
	.L2552:
	.string "%s"
.text
	mov A, .L2552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1275 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2553:
	mov A, B
	add SP, 3
	.loc 7 1283 0
	#     }
	.L239:
	.loc 7 1279 0
	#         if (i > 0)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1283 0
	#     }
	jmp .L238
	.L240:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_node2s:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 8
	.loc 7 1459 0
	#     }
	.loc 7 1290 0
	#     }
	.loc 7 1288 0
	#         buf_printf(b, "(nil)");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	jeq .L2554, A, 0
	.loc 7 1290 0
	#     }
	.loc 7 1289 0
	#         return;
.data
	.L2555:
	.string "(nil)"
.text
	mov A, .L2555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2556:
	mov A, B
	add SP, 2
	.loc 7 1290 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2554:
	.loc 7 1459 0
	#     }
	.loc 7 1292 0
	#     case AST_LITERAL:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 1459 0
	#     }
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2557, A, 0
	jmp .L242
	.L2557:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 277
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2558, A, 0
	jmp .L253
	.L2558:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2559, A, 0
	jmp .L254
	.L2559:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2560, A, 0
	jmp .L255
	.L2560:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 260
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2561, A, 0
	jmp .L256
	.L2561:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 261
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2562, A, 0
	jmp .L257
	.L2562:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 262
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2563, A, 0
	jmp .L261
	.L2563:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 263
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2564, A, 0
	jmp .L262
	.L2564:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 275
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2565, A, 0
	jmp .L266
	.L2565:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 264
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2566, A, 0
	jmp .L267
	.L2566:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 265
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2567, A, 0
	jmp .L268
	.L2567:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 266
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2568, A, 0
	jmp .L269
	.L2568:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 269
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2569, A, 0
	jmp .L270
	.L2569:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 270
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2570, A, 0
	jmp .L271
	.L2570:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 272
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2571, A, 0
	jmp .L272
	.L2571:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 273
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2572, A, 0
	jmp .L273
	.L2572:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 274
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2573, A, 0
	jmp .L277
	.L2573:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 267
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2574, A, 0
	jmp .L278
	.L2574:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 268
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2575, A, 0
	jmp .L279
	.L2575:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 308
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2576, A, 0
	jmp .L280
	.L2576:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 309
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2577, A, 0
	jmp .L281
	.L2577:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 280
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2578, A, 0
	jmp .L282
	.L2578:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 302
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2579, A, 0
	jmp .L283
	.L2579:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 304
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2580, A, 0
	jmp .L284
	.L2580:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 307
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2581, A, 0
	jmp .L285
	.L2581:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 284
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2582, A, 0
	jmp .L286
	.L2582:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 285
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2583, A, 0
	jmp .L287
	.L2583:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 286
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2584, A, 0
	jmp .L288
	.L2584:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 287
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2585, A, 0
	jmp .L289
	.L2585:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 305
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2586, A, 0
	jmp .L290
	.L2586:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 306
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2587, A, 0
	jmp .L291
	.L2587:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 290
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2588, A, 0
	jmp .L292
	.L2588:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 298
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2589, A, 0
	jmp .L293
	.L2589:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 294
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2590, A, 0
	jmp .L294
	.L2590:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 292
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2591, A, 0
	jmp .L295
	.L2591:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 293
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2592, A, 0
	jmp .L296
	.L2592:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 291
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2593, A, 0
	jmp .L297
	.L2593:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 295
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2594, A, 0
	jmp .L298
	.L2594:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 299
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2595, A, 0
	jmp .L299
	.L2595:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 296
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2596, A, 0
	jmp .L300
	.L2596:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 297
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2597, A, 0
	jmp .L301
	.L2597:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 282
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2598, A, 0
	jmp .L302
	.L2598:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 33
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2599, A, 0
	jmp .L303
	.L2599:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 38
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2600, A, 0
	jmp .L304
	.L2600:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 124
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2601, A, 0
	jmp .L305
	.L2601:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 279
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2602, A, 0
	jmp .L306
	.L2602:
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 288
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2603, A, 0
	jmp .L307
	.L2603:
	jmp .L308
	.loc 7 1318 0
	#             error("internal error");
	.loc 7 1293 0
	#         switch (node->ty->kind) {
	.L242:
	.loc 7 1318 0
	#             error("internal error");
	.loc 7 1293 0
	#         switch (node->ty->kind) {
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1318 0
	#             error("internal error");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2604, A, 0
	jmp .L244
	.L2604:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2605, A, 0
	jmp .L245
	.L2605:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2606, A, 0
	jmp .L246
	.L2606:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2607, A, 0
	jmp .L247
	.L2607:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2608, A, 0
	jmp .L248
	.L2608:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2609, A, 0
	jmp .L249
	.L2609:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2610, A, 0
	jmp .L250
	.L2610:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2611, A, 0
	jmp .L251
	.L2611:
	jmp .L252
	.loc 7 1295 0
	#             if (node->ival == '\n')      buf_printf(b, "'\n'");
	.L244:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1295 0
	#             if (node->ival == '\n')      buf_printf(b, "'\n'");
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2612, A, 0
.data
	.L2613:
	.string "'\n'"
.text
	mov A, .L2613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2614
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2614:
	mov A, B
	add SP, 2
	jmp .L2615
	.L2612:
	.loc 7 1295 0
	#             if (node->ival == '\n')      buf_printf(b, "'\n'");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1295 0
	#             if (node->ival == '\n')      buf_printf(b, "'\n'");
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2616, A, 0
.data
	.L2617:
	.string "'\\\\'"
.text
	mov A, .L2617
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2618
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2618:
	mov A, B
	add SP, 2
	jmp .L2619
	.L2616:
	.loc 7 1295 0
	#             if (node->ival == '\n')      buf_printf(b, "'\n'");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1295 0
	#             if (node->ival == '\n')      buf_printf(b, "'\n'");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2620, A, 0
.data
	.L2621:
	.string "'\\0'"
.text
	mov A, .L2621
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2622
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2622:
	mov A, B
	add SP, 2
	jmp .L2623
	.L2620:
	.loc 7 1295 0
	#             if (node->ival == '\n')      buf_printf(b, "'\n'");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1295 0
	#             if (node->ival == '\n')      buf_printf(b, "'\n'");
.data
	.L2624:
	.string "'%c'"
.text
	mov A, .L2624
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2625
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2625:
	mov A, B
	add SP, 3
	.L2623:
	.L2619:
	.L2615:
	.loc 7 1300 0
	#         case KIND_INT:
	jmp .L243
	.loc 7 1301 0
	#             buf_printf(b, "%d", node->ival);
	.L245:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1301 0
	#             buf_printf(b, "%d", node->ival);
.data
	.L2626:
	.string "%d"
.text
	mov A, .L2626
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2627
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2627:
	mov A, B
	add SP, 3
	.loc 7 1303 0
	#         case KIND_LONG:
	jmp .L243
	.loc 7 1304 0
	#             buf_printf(b, "%ldL", node->ival);
	.L246:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1304 0
	#             buf_printf(b, "%ldL", node->ival);
.data
	.L2628:
	.string "%ldL"
.text
	mov A, .L2628
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2629
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2629:
	mov A, B
	add SP, 3
	.loc 7 1306 0
	#         case KIND_LLONG:
	jmp .L243
	.loc 7 1307 0
	#             buf_printf(b, "%lldL", node->ival);
	.L247:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1307 0
	#             buf_printf(b, "%lldL", node->ival);
.data
	.L2630:
	.string "%lldL"
.text
	mov A, .L2630
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2631:
	mov A, B
	add SP, 3
	.loc 7 1309 0
	#         case KIND_FLOAT:
	jmp .L243
	.loc 7 1310 0
	#         case KIND_DOUBLE:
	.L248:
	.L249:
	.L250:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1310 0
	#         case KIND_DOUBLE:
.data
	.L2632:
	.string "%f"
.text
	mov A, .L2632
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2633
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2633:
	mov A, B
	add SP, 3
	.loc 7 1314 0
	#         case KIND_ARRAY:
	jmp .L243
	.loc 7 1315 0
	#             buf_printf(b, "\"%s\"", quote_cstring(node->sval));
	.L251:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2634
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp quote_cstring
	.L2634:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1315 0
	#             buf_printf(b, "\"%s\"", quote_cstring(node->sval));
.data
	.L2635:
	.string "\"%s\""
.text
	mov A, .L2635
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2636:
	mov A, B
	add SP, 3
	.loc 7 1317 0
	#         default:
	jmp .L243
	.loc 7 1318 0
	#             error("internal error");
	.L252:
.data
	.L2637:
	.string "internal error"
.text
	mov A, .L2637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2638:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2639
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2639:
	mov A, B
	add SP, 3
	.L243:
	.loc 7 1321 0
	#     case AST_LABEL:
	jmp .L241
	.loc 7 1322 0
	#         buf_printf(b, "%s:", node->label);
	.L253:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1322 0
	#         buf_printf(b, "%s:", node->label);
.data
	.L2640:
	.string "%s:"
.text
	mov A, .L2640
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2641:
	mov A, B
	add SP, 3
	.loc 7 1324 0
	#     case AST_LVAR:
	jmp .L241
	.loc 7 1325 0
	#         buf_printf(b, "lv=%s", node->varname);
	.L254:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1325 0
	#         buf_printf(b, "lv=%s", node->varname);
.data
	.L2642:
	.string "lv=%s"
.text
	mov A, .L2642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2643:
	mov A, B
	add SP, 3
	.loc 7 1330 0
	#         }
	.loc 7 1327 0
	#             buf_printf(b, "(");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L2644, A, 0
	.loc 7 1330 0
	#         }
	.loc 7 1328 0
	#             a2s_declinit(b, node->lvarinit);
.data
	.L2645:
	.string "("
.text
	mov A, .L2645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2646:
	mov A, B
	add SP, 2
	.loc 7 1329 0
	#             buf_printf(b, ")");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp a2s_declinit
	.L2647:
	mov A, B
	add SP, 2
	.loc 7 1330 0
	#         }
.data
	.L2648:
	.string ")"
.text
	mov A, .L2648
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2649:
	mov A, B
	add SP, 2
	.L2644:
	.loc 7 1332 0
	#     case AST_GVAR:
	jmp .L241
	.loc 7 1333 0
	#         buf_printf(b, "gv=%s", node->varname);
	.L255:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1333 0
	#         buf_printf(b, "gv=%s", node->varname);
.data
	.L2650:
	.string "gv=%s"
.text
	mov A, .L2650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2651:
	mov A, B
	add SP, 3
	.loc 7 1335 0
	#     case AST_FUNCALL:
	jmp .L241
	.loc 7 1346 0
	#     }
	.loc 7 1336 0
	#     case AST_FUNCPTR_CALL: {
	.L256:
	.loc 7 1346 0
	#     }
	.loc 7 1336 0
	#     case AST_FUNCPTR_CALL: {
	.L257:
	.loc 7 1346 0
	#     }
	.loc 7 1338 0
	#                    node->kind == AST_FUNCALL ? node->fname : node2s(node));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 260
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2652, A, 0
	.loc 7 1338 0
	#                    node->kind == AST_FUNCALL ? node->fname : node2s(node));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	jmp .L2653
	.L2652:
	.loc 7 1338 0
	#                    node->kind == AST_FUNCALL ? node->fname : node2s(node));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2654:
	mov A, B
	add SP, 1
	.L2653:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1338 0
	#                    node->kind == AST_FUNCALL ? node->fname : node2s(node));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L2655:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1338 0
	#                    node->kind == AST_FUNCALL ? node->fname : node2s(node));
.data
	.L2656:
	.string "(%s)%s("
.text
	mov A, .L2656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2657
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2657:
	mov A, B
	add SP, 4
	.loc 7 1343 0
	#         }
	.loc 7 1340 0
	#             if (i > 0)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 1343 0
	#         }
	.L258:
	.loc 7 1340 0
	#             if (i > 0)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L2658:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2659, A, 0
	jmp .L2660
	.L2659:
	.loc 7 1343 0
	#         }
	jmp .L260
	.L2660:
	.loc 7 1341 0
	#                 buf_printf(b, ",");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1340 0
	#             if (i > 0)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2661, A, 0
	.loc 7 1341 0
	#                 buf_printf(b, ",");
.data
	.L2662:
	.string ","
.text
	mov A, .L2662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2663:
	mov A, B
	add SP, 2
	.L2661:
	.loc 7 1343 0
	#         }
	.loc 7 1340 0
	#             if (i > 0)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1343 0
	#         }
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L2664:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2665:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1343 0
	#         }
.data
	.L2666:
	.string "%s"
.text
	mov A, .L2666
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2667:
	mov A, B
	add SP, 3
	.loc 7 1343 0
	#         }
	.L259:
	.loc 7 1340 0
	#             if (i > 0)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1343 0
	#         }
	jmp .L258
	.L260:
	.loc 7 1345 0
	#         break;
.data
	.L2668:
	.string ")"
.text
	mov A, .L2668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2669:
	mov A, B
	add SP, 2
	.loc 7 1346 0
	#     }
	jmp .L241
	.loc 7 1350 0
	#     }
	.loc 7 1348 0
	#         buf_printf(b, "(funcdesg %s)", node->fname);
	.L261:
	.loc 7 1350 0
	#     }
	.loc 7 1349 0
	#         break;
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1349 0
	#         break;
.data
	.L2670:
	.string "(funcdesg %s)"
.text
	mov A, .L2670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2671:
	mov A, B
	add SP, 3
	.loc 7 1350 0
	#     }
	jmp .L241
	.loc 7 1362 0
	#     }
	.loc 7 1352 0
	#         buf_printf(b, "(%s)%s(", ty2s(node->ty), node->fname);
	.L262:
	.loc 7 1362 0
	#     }
	.loc 7 1353 0
	#         for (int i = 0; i < vec_len(node->params); i++) {
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1353 0
	#         for (int i = 0; i < vec_len(node->params); i++) {
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L2672:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1353 0
	#         for (int i = 0; i < vec_len(node->params); i++) {
.data
	.L2673:
	.string "(%s)%s("
.text
	mov A, .L2673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2674:
	mov A, B
	add SP, 4
	.loc 7 1358 0
	#         }
	.loc 7 1354 0
	#             if (i > 0)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 1358 0
	#         }
	.L263:
	.loc 7 1354 0
	#             if (i > 0)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L2675:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2676, A, 0
	jmp .L2677
	.L2676:
	.loc 7 1358 0
	#         }
	jmp .L265
	.L2677:
	.loc 7 1355 0
	#                 buf_printf(b, ",");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1354 0
	#             if (i > 0)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2678, A, 0
	.loc 7 1355 0
	#                 buf_printf(b, ",");
.data
	.L2679:
	.string ","
.text
	mov A, .L2679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2680:
	mov A, B
	add SP, 2
	.L2678:
	.loc 7 1357 0
	#             buf_printf(b, "%s %s", ty2s(param->ty), node2s(param));
	mov A, 0
	mov B, SP
	.loc 7 1354 0
	#             if (i > 0)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1357 0
	#             buf_printf(b, "%s %s", ty2s(param->ty), node2s(param));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L2681:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 1358 0
	#         }
	.loc 7 1357 0
	#             buf_printf(b, "%s %s", ty2s(param->ty), node2s(param));
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2682:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1358 0
	#         }
	.loc 7 1357 0
	#             buf_printf(b, "%s %s", ty2s(param->ty), node2s(param));
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L2683:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1358 0
	#         }
.data
	.L2684:
	.string "%s %s"
.text
	mov A, .L2684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2685:
	mov A, B
	add SP, 4
	.loc 7 1358 0
	#         }
	.L264:
	.loc 7 1354 0
	#             if (i > 0)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1358 0
	#         }
	jmp .L263
	.L265:
	.loc 7 1360 0
	#         do_node2s(b, node->body);
.data
	.L2686:
	.string ")"
.text
	mov A, .L2686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2687:
	mov A, B
	add SP, 2
	.loc 7 1361 0
	#         break;
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_node2s
	.L2688:
	mov A, B
	add SP, 2
	.loc 7 1362 0
	#     }
	jmp .L241
	.loc 7 1364 0
	#         buf_printf(b, "goto(%s)", node->label);
	.L266:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1364 0
	#         buf_printf(b, "goto(%s)", node->label);
.data
	.L2689:
	.string "goto(%s)"
.text
	mov A, .L2689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2690:
	mov A, B
	add SP, 3
	.loc 7 1366 0
	#     case AST_DECL:
	jmp .L241
	.loc 7 1367 0
	#         buf_printf(b, "(decl %s %s",
	.L267:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1367 0
	#         buf_printf(b, "(decl %s %s",
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L2691:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1367 0
	#         buf_printf(b, "(decl %s %s",
.data
	.L2692:
	.string "(decl %s %s"
.text
	mov A, .L2692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2693:
	mov A, B
	add SP, 4
	.loc 7 1373 0
	#         }
	.loc 7 1371 0
	#             buf_printf(b, " ");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	jeq .L2694, A, 0
	.loc 7 1373 0
	#         }
	.loc 7 1372 0
	#             a2s_declinit(b, node->declinit);
.data
	.L2695:
	.string " "
.text
	mov A, .L2695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2696:
	mov A, B
	add SP, 2
	.loc 7 1373 0
	#         }
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp a2s_declinit
	.L2697:
	mov A, B
	add SP, 2
	.L2694:
	.loc 7 1375 0
	#         break;
.data
	.L2698:
	.string ")"
.text
	mov A, .L2698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2699:
	mov A, B
	add SP, 2
	.loc 7 1376 0
	#     case AST_INIT:
	jmp .L241
	.loc 7 1377 0
	#         buf_printf(b, "%s@%d", node2s(node->initval), node->initoff, ty2s(node->totype));
	.L268:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L2700:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1377 0
	#         buf_printf(b, "%s@%d", node2s(node->initval), node->initoff, ty2s(node->totype));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1377 0
	#         buf_printf(b, "%s@%d", node2s(node->initval), node->initoff, ty2s(node->totype));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2701:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1377 0
	#         buf_printf(b, "%s@%d", node2s(node->initval), node->initoff, ty2s(node->totype));
.data
	.L2702:
	.string "%s@%d"
.text
	mov A, .L2702
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2703:
	mov A, B
	add SP, 5
	.loc 7 1379 0
	#     case AST_CONV:
	jmp .L241
	.loc 7 1380 0
	#         buf_printf(b, "(conv %s=>%s)", node2s(node->operand), ty2s(node->ty));
	.L269:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L2704:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1380 0
	#         buf_printf(b, "(conv %s=>%s)", node2s(node->operand), ty2s(node->ty));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2705:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1380 0
	#         buf_printf(b, "(conv %s=>%s)", node2s(node->operand), ty2s(node->ty));
.data
	.L2706:
	.string "(conv %s=>%s)"
.text
	mov A, .L2706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2707:
	mov A, B
	add SP, 4
	.loc 7 1382 0
	#     case AST_IF:
	jmp .L241
	.loc 7 1383 0
	#         buf_printf(b, "(if %s %s",
	.L270:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2708:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1383 0
	#         buf_printf(b, "(if %s %s",
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2709:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1383 0
	#         buf_printf(b, "(if %s %s",
.data
	.L2710:
	.string "(if %s %s"
.text
	mov A, .L2710
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2711:
	mov A, B
	add SP, 4
	.loc 7 1387 0
	#             buf_printf(b, " %s", node2s(node->els));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L2712, A, 0
	.loc 7 1387 0
	#             buf_printf(b, " %s", node2s(node->els));
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2713:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1387 0
	#             buf_printf(b, " %s", node2s(node->els));
.data
	.L2714:
	.string " %s"
.text
	mov A, .L2714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2715
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2715:
	mov A, B
	add SP, 3
	.L2712:
	.loc 7 1389 0
	#         break;
.data
	.L2716:
	.string ")"
.text
	mov A, .L2716
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2717:
	mov A, B
	add SP, 2
	.loc 7 1390 0
	#     case AST_TERNARY:
	jmp .L241
	.loc 7 1391 0
	#         buf_printf(b, "(? %s %s %s)",
	.L271:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2718:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1391 0
	#         buf_printf(b, "(? %s %s %s)",
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2719
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2719:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1391 0
	#         buf_printf(b, "(? %s %s %s)",
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2720
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2720:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1391 0
	#         buf_printf(b, "(? %s %s %s)",
.data
	.L2721:
	.string "(? %s %s %s)"
.text
	mov A, .L2721
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2722:
	mov A, B
	add SP, 5
	.loc 7 1396 0
	#     case AST_RETURN:
	jmp .L241
	.loc 7 1397 0
	#         buf_printf(b, "(return %s)", node2s(node->retval));
	.L272:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2723:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1397 0
	#         buf_printf(b, "(return %s)", node2s(node->retval));
.data
	.L2724:
	.string "(return %s)"
.text
	mov A, .L2724
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2725:
	mov A, B
	add SP, 3
	.loc 7 1399 0
	#     case AST_COMPOUND_STMT: {
	jmp .L241
	.loc 7 1407 0
	#     }
	.loc 7 1400 0
	#         buf_printf(b, "{");
	.L273:
	.loc 7 1407 0
	#     }
	.loc 7 1401 0
	#         for (int i = 0; i < vec_len(node->stmts); i++) {
.data
	.L2726:
	.string "{"
.text
	mov A, .L2726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2727:
	mov A, B
	add SP, 2
	.loc 7 1404 0
	#         }
	.loc 7 1402 0
	#             do_node2s(b, vec_get(node->stmts, i));
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 1404 0
	#         }
	.L274:
	.loc 7 1402 0
	#             do_node2s(b, vec_get(node->stmts, i));
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2728
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L2728:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2729, A, 0
	jmp .L2730
	.L2729:
	.loc 7 1404 0
	#         }
	jmp .L276
	.L2730:
	.loc 7 1403 0
	#             buf_printf(b, ";");
	.loc 7 1402 0
	#             do_node2s(b, vec_get(node->stmts, i));
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1403 0
	#             buf_printf(b, ";");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2731
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L2731:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2732
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_node2s
	.L2732:
	mov A, B
	add SP, 2
	.loc 7 1404 0
	#         }
.data
	.L2733:
	.string ";"
.text
	mov A, .L2733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2734:
	mov A, B
	add SP, 2
	.loc 7 1404 0
	#         }
	.L275:
	.loc 7 1402 0
	#             do_node2s(b, vec_get(node->stmts, i));
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1404 0
	#         }
	jmp .L274
	.L276:
	.loc 7 1406 0
	#         break;
.data
	.L2735:
	.string "}"
.text
	mov A, .L2735
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2736
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2736:
	mov A, B
	add SP, 2
	.loc 7 1407 0
	#     }
	jmp .L241
	.loc 7 1409 0
	#         do_node2s(b, node->struc);
	.L277:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_node2s
	.L2737:
	mov A, B
	add SP, 2
	.loc 7 1411 0
	#         buf_printf(b, node->field);
.data
	.L2738:
	.string "."
.text
	mov A, .L2738
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2739
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2739:
	mov A, B
	add SP, 2
	.loc 7 1412 0
	#         break;
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2740
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2740:
	mov A, B
	add SP, 2
	.loc 7 1413 0
	#     case AST_ADDR:  uop_to_string(b, "addr", node); break;
	jmp .L241
	.loc 7 1414 0
	#     case AST_DEREF: uop_to_string(b, "deref", node); break;
	.L278:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1414 0
	#     case AST_DEREF: uop_to_string(b, "deref", node); break;
.data
	.L2741:
	.string "addr"
.text
	mov A, .L2741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp uop_to_string
	.L2742:
	mov A, B
	add SP, 3
	.loc 7 1414 0
	#     case AST_DEREF: uop_to_string(b, "deref", node); break;
	jmp .L241
	.loc 7 1415 0
	#     case OP_SAL:  binop_to_string(b, "<<", node); break;
	.L279:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1415 0
	#     case OP_SAL:  binop_to_string(b, "<<", node); break;
.data
	.L2743:
	.string "deref"
.text
	mov A, .L2743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp uop_to_string
	.L2744:
	mov A, B
	add SP, 3
	.loc 7 1415 0
	#     case OP_SAL:  binop_to_string(b, "<<", node); break;
	jmp .L241
	.loc 7 1416 0
	#     case OP_SAR:
	.L280:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1416 0
	#     case OP_SAR:
.data
	.L2745:
	.string "<<"
.text
	mov A, .L2745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2746:
	mov A, B
	add SP, 3
	.loc 7 1416 0
	#     case OP_SAR:
	jmp .L241
	.loc 7 1417 0
	#     case OP_SHR:  binop_to_string(b, ">>", node); break;
	.L281:
	.L282:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1417 0
	#     case OP_SHR:  binop_to_string(b, ">>", node); break;
.data
	.L2747:
	.string ">>"
.text
	mov A, .L2747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2748:
	mov A, B
	add SP, 3
	.loc 7 1418 0
	#     case OP_GE:  binop_to_string(b, ">=", node); break;
	jmp .L241
	.loc 7 1419 0
	#     case OP_LE:  binop_to_string(b, "<=", node); break;
	.L283:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1419 0
	#     case OP_LE:  binop_to_string(b, "<=", node); break;
.data
	.L2749:
	.string ">="
.text
	mov A, .L2749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2750:
	mov A, B
	add SP, 3
	.loc 7 1419 0
	#     case OP_LE:  binop_to_string(b, "<=", node); break;
	jmp .L241
	.loc 7 1420 0
	#     case OP_NE:  binop_to_string(b, "!=", node); break;
	.L284:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1420 0
	#     case OP_NE:  binop_to_string(b, "!=", node); break;
.data
	.L2751:
	.string "<="
.text
	mov A, .L2751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2752:
	mov A, B
	add SP, 3
	.loc 7 1420 0
	#     case OP_NE:  binop_to_string(b, "!=", node); break;
	jmp .L241
	.loc 7 1421 0
	#     case OP_PRE_INC: uop_to_string(b, "pre++", node); break;
	.L285:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1421 0
	#     case OP_PRE_INC: uop_to_string(b, "pre++", node); break;
.data
	.L2753:
	.string "!="
.text
	mov A, .L2753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2754:
	mov A, B
	add SP, 3
	.loc 7 1421 0
	#     case OP_PRE_INC: uop_to_string(b, "pre++", node); break;
	jmp .L241
	.loc 7 1422 0
	#     case OP_PRE_DEC: uop_to_string(b, "pre--", node); break;
	.L286:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1422 0
	#     case OP_PRE_DEC: uop_to_string(b, "pre--", node); break;
.data
	.L2755:
	.string "pre++"
.text
	mov A, .L2755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp uop_to_string
	.L2756:
	mov A, B
	add SP, 3
	.loc 7 1422 0
	#     case OP_PRE_DEC: uop_to_string(b, "pre--", node); break;
	jmp .L241
	.loc 7 1423 0
	#     case OP_POST_INC: uop_to_string(b, "post++", node); break;
	.L287:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1423 0
	#     case OP_POST_INC: uop_to_string(b, "post++", node); break;
.data
	.L2757:
	.string "pre--"
.text
	mov A, .L2757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp uop_to_string
	.L2758:
	mov A, B
	add SP, 3
	.loc 7 1423 0
	#     case OP_POST_INC: uop_to_string(b, "post++", node); break;
	jmp .L241
	.loc 7 1424 0
	#     case OP_POST_DEC: uop_to_string(b, "post--", node); break;
	.L288:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1424 0
	#     case OP_POST_DEC: uop_to_string(b, "post--", node); break;
.data
	.L2759:
	.string "post++"
.text
	mov A, .L2759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp uop_to_string
	.L2760:
	mov A, B
	add SP, 3
	.loc 7 1424 0
	#     case OP_POST_DEC: uop_to_string(b, "post--", node); break;
	jmp .L241
	.loc 7 1425 0
	#     case OP_LOGAND: binop_to_string(b, "and", node); break;
	.L289:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1425 0
	#     case OP_LOGAND: binop_to_string(b, "and", node); break;
.data
	.L2761:
	.string "post--"
.text
	mov A, .L2761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp uop_to_string
	.L2762:
	mov A, B
	add SP, 3
	.loc 7 1425 0
	#     case OP_LOGAND: binop_to_string(b, "and", node); break;
	jmp .L241
	.loc 7 1426 0
	#     case OP_LOGOR:  binop_to_string(b, "or", node); break;
	.L290:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1426 0
	#     case OP_LOGOR:  binop_to_string(b, "or", node); break;
.data
	.L2763:
	.string "and"
.text
	mov A, .L2763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2764:
	mov A, B
	add SP, 3
	.loc 7 1426 0
	#     case OP_LOGOR:  binop_to_string(b, "or", node); break;
	jmp .L241
	.loc 7 1427 0
	#     case OP_A_ADD:  binop_to_string(b, "+=", node); break;
	.L291:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1427 0
	#     case OP_A_ADD:  binop_to_string(b, "+=", node); break;
.data
	.L2765:
	.string "or"
.text
	mov A, .L2765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2766:
	mov A, B
	add SP, 3
	.loc 7 1427 0
	#     case OP_A_ADD:  binop_to_string(b, "+=", node); break;
	jmp .L241
	.loc 7 1428 0
	#     case OP_A_SUB:  binop_to_string(b, "-=", node); break;
	.L292:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1428 0
	#     case OP_A_SUB:  binop_to_string(b, "-=", node); break;
.data
	.L2767:
	.string "+="
.text
	mov A, .L2767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2768:
	mov A, B
	add SP, 3
	.loc 7 1428 0
	#     case OP_A_SUB:  binop_to_string(b, "-=", node); break;
	jmp .L241
	.loc 7 1429 0
	#     case OP_A_MUL:  binop_to_string(b, "*=", node); break;
	.L293:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1429 0
	#     case OP_A_MUL:  binop_to_string(b, "*=", node); break;
.data
	.L2769:
	.string "-="
.text
	mov A, .L2769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2770:
	mov A, B
	add SP, 3
	.loc 7 1429 0
	#     case OP_A_MUL:  binop_to_string(b, "*=", node); break;
	jmp .L241
	.loc 7 1430 0
	#     case OP_A_DIV:  binop_to_string(b, "/=", node); break;
	.L294:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1430 0
	#     case OP_A_DIV:  binop_to_string(b, "/=", node); break;
.data
	.L2771:
	.string "*="
.text
	mov A, .L2771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2772:
	mov A, B
	add SP, 3
	.loc 7 1430 0
	#     case OP_A_DIV:  binop_to_string(b, "/=", node); break;
	jmp .L241
	.loc 7 1431 0
	#     case OP_A_MOD:  binop_to_string(b, "%=", node); break;
	.L295:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1431 0
	#     case OP_A_MOD:  binop_to_string(b, "%=", node); break;
.data
	.L2773:
	.string "/="
.text
	mov A, .L2773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2774:
	mov A, B
	add SP, 3
	.loc 7 1431 0
	#     case OP_A_MOD:  binop_to_string(b, "%=", node); break;
	jmp .L241
	.loc 7 1432 0
	#     case OP_A_AND:  binop_to_string(b, "&=", node); break;
	.L296:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1432 0
	#     case OP_A_AND:  binop_to_string(b, "&=", node); break;
.data
	.L2775:
	.string "%="
.text
	mov A, .L2775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2776:
	mov A, B
	add SP, 3
	.loc 7 1432 0
	#     case OP_A_AND:  binop_to_string(b, "&=", node); break;
	jmp .L241
	.loc 7 1433 0
	#     case OP_A_OR:   binop_to_string(b, "|=", node); break;
	.L297:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1433 0
	#     case OP_A_OR:   binop_to_string(b, "|=", node); break;
.data
	.L2777:
	.string "&="
.text
	mov A, .L2777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2778:
	mov A, B
	add SP, 3
	.loc 7 1433 0
	#     case OP_A_OR:   binop_to_string(b, "|=", node); break;
	jmp .L241
	.loc 7 1434 0
	#     case OP_A_XOR:  binop_to_string(b, "^=", node); break;
	.L298:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1434 0
	#     case OP_A_XOR:  binop_to_string(b, "^=", node); break;
.data
	.L2779:
	.string "|="
.text
	mov A, .L2779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2780:
	mov A, B
	add SP, 3
	.loc 7 1434 0
	#     case OP_A_XOR:  binop_to_string(b, "^=", node); break;
	jmp .L241
	.loc 7 1435 0
	#     case OP_A_SAL:  binop_to_string(b, "<<=", node); break;
	.L299:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1435 0
	#     case OP_A_SAL:  binop_to_string(b, "<<=", node); break;
.data
	.L2781:
	.string "^="
.text
	mov A, .L2781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2782:
	mov A, B
	add SP, 3
	.loc 7 1435 0
	#     case OP_A_SAL:  binop_to_string(b, "<<=", node); break;
	jmp .L241
	.loc 7 1436 0
	#     case OP_A_SAR:
	.L300:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1436 0
	#     case OP_A_SAR:
.data
	.L2783:
	.string "<<="
.text
	mov A, .L2783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2784:
	mov A, B
	add SP, 3
	.loc 7 1436 0
	#     case OP_A_SAR:
	jmp .L241
	.loc 7 1437 0
	#     case OP_A_SHR:  binop_to_string(b, ">>=", node); break;
	.L301:
	.L302:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1437 0
	#     case OP_A_SHR:  binop_to_string(b, ">>=", node); break;
.data
	.L2785:
	.string ">>="
.text
	mov A, .L2785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2786:
	mov A, B
	add SP, 3
	.loc 7 1438 0
	#     case '!': uop_to_string(b, "!", node); break;
	jmp .L241
	.loc 7 1439 0
	#     case '&': binop_to_string(b, "&", node); break;
	.L303:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1439 0
	#     case '&': binop_to_string(b, "&", node); break;
.data
	.L2787:
	.string "!"
.text
	mov A, .L2787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp uop_to_string
	.L2788:
	mov A, B
	add SP, 3
	.loc 7 1439 0
	#     case '&': binop_to_string(b, "&", node); break;
	jmp .L241
	.loc 7 1440 0
	#     case '|': binop_to_string(b, "|", node); break;
	.L304:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1440 0
	#     case '|': binop_to_string(b, "|", node); break;
.data
	.L2789:
	.string "&"
.text
	mov A, .L2789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2790:
	mov A, B
	add SP, 3
	.loc 7 1440 0
	#     case '|': binop_to_string(b, "|", node); break;
	jmp .L241
	.loc 7 1441 0
	#     case OP_CAST: {
	.L305:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1441 0
	#     case OP_CAST: {
.data
	.L2791:
	.string "|"
.text
	mov A, .L2791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop_to_string
	.L2792:
	mov A, B
	add SP, 3
	.loc 7 1441 0
	#     case OP_CAST: {
	jmp .L241
	.loc 7 1447 0
	#     }
	.loc 7 1442 0
	#         buf_printf(b, "((%s)=>(%s) %s)",
	.L306:
	.loc 7 1447 0
	#     }
	.loc 7 1443 0
	#                    ty2s(node->operand->ty),
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2793:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1443 0
	#                    ty2s(node->operand->ty),
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L2794:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1443 0
	#                    ty2s(node->operand->ty),
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L2795:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1443 0
	#                    ty2s(node->operand->ty),
.data
	.L2796:
	.string "((%s)=>(%s) %s)"
.text
	mov A, .L2796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2797:
	mov A, B
	add SP, 5
	.loc 7 1447 0
	#     }
	jmp .L241
	.loc 7 1449 0
	#         buf_printf(b, "&&%s", node->label);
	.L307:
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1449 0
	#         buf_printf(b, "&&%s", node->label);
.data
	.L2798:
	.string "&&%s"
.text
	mov A, .L2798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2799:
	mov A, B
	add SP, 3
	.loc 7 1451 0
	#     default: {
	jmp .L241
	.loc 7 1459 0
	#     }
	.loc 7 1452 0
	#         char *left = node2s(node->left);
	.L308:
	.loc 7 1459 0
	#     }
	.loc 7 1453 0
	#         char *right = node2s(node->right);
	mov A, 0
	mov B, SP
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2800:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 1454 0
	#         if (node->kind == OP_EQ)
	mov A, 0
	mov B, SP
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L2801:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 1455 0
	#             buf_printf(b, "(== ");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 301
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2802, A, 0
	.loc 7 1455 0
	#             buf_printf(b, "(== ");
.data
	.L2803:
	.string "(== "
.text
	mov A, .L2803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2804:
	mov A, B
	add SP, 2
	jmp .L2805
	.L2802:
	.loc 7 1455 0
	#             buf_printf(b, "(== ");
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1455 0
	#             buf_printf(b, "(== ");
.data
	.L2806:
	.string "(%c "
.text
	mov A, .L2806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2807:
	mov A, B
	add SP, 3
	.L2805:
	.loc 7 1459 0
	#     }
	.loc 7 1454 0
	#         if (node->kind == OP_EQ)
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1453 0
	#         char *right = node2s(node->right);
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1459 0
	#     }
.data
	.L2808:
	.string "%s %s)"
.text
	mov A, .L2808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1283 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L2809:
	mov A, B
	add SP, 4
	.loc 7 1459 0
	#     }
	.L241:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
node2s:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1467 0
	# }
	.loc 7 1465 0
	#     do_node2s(b, node);
	mov A, 0
	mov B, SP
	mov A, .L2810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L2810:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1466 0
	#     return buf_body(b);
	.loc 7 1459 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1465 0
	#     do_node2s(b, node);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_node2s
	.L2811:
	mov A, B
	add SP, 2
	.loc 7 1467 0
	# }
	.loc 7 1465 0
	#     do_node2s(b, node);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L2812:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
encoding_prefix:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1477 0
	# }
	.loc 7 1475 0
	#     }
	.loc 7 1467 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1475 0
	#     }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2813, A, 0
	jmp .L310
	.L2813:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2814, A, 0
	jmp .L311
	.L2814:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2815, A, 0
	jmp .L312
	.L2815:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2816, A, 0
	jmp .L313
	.L2816:
	jmp .L309
	.loc 7 1472 0
	#     case ENC_CHAR32: return "U";
	.L310:
.data
	.L2817:
	.string "u"
.text
	mov A, .L2817
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1473 0
	#     case ENC_UTF8:   return "u8";
	.L311:
.data
	.L2818:
	.string "U"
.text
	mov A, .L2818
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1474 0
	#     case ENC_WCHAR:  return "L";
	.L312:
.data
	.L2819:
	.string "u8"
.text
	mov A, .L2819
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1475 0
	#     }
	.L313:
.data
	.L2820:
	.string "L"
.text
	mov A, .L2820
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L309:
	.loc 7 1477 0
	# }
.data
	.L2821:
	.string ""
.text
	mov A, .L2821
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tok2s:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 1481 0
	#         return "(null)";
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	eq A, 0
	jeq .L2822, A, 0
	.loc 7 1481 0
	#         return "(null)";
.data
	.L2823:
	.string "(null)"
.text
	mov A, .L2823
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2822:
	.loc 7 1513 0
	#         return "(macro-param)";
	.loc 7 1483 0
	#     case TIDENT:
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1513 0
	#         return "(macro-param)";
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2824, A, 0
	jmp .L315
	.L2824:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2825, A, 0
	jmp .L316
	.L2825:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2826, A, 0
	jmp .L385
	.L2826:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2827, A, 0
	jmp .L386
	.L2827:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2828, A, 0
	jmp .L387
	.L2828:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2829, A, 0
	jmp .L388
	.L2829:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2830, A, 0
	jmp .L389
	.L2830:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2831, A, 0
	jmp .L390
	.L2831:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2832, A, 0
	jmp .L391
	.L2832:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2833, A, 0
	jmp .L392
	.L2833:
	jmp .L314
	.loc 7 1484 0
	#         return tok->sval;
	.L315:
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1493 0
	#         }
	.loc 7 1486 0
	#         switch (tok->id) {
	.L316:
	.loc 7 1493 0
	#         }
	.loc 7 1486 0
	#         switch (tok->id) {
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1493 0
	#         }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 289
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2834, A, 0
	jmp .L318
	.L2834:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 290
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2835, A, 0
	jmp .L319
	.L2835:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 291
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2836, A, 0
	jmp .L320
	.L2836:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 292
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2837, A, 0
	jmp .L321
	.L2837:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 293
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2838, A, 0
	jmp .L322
	.L2838:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 294
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2839, A, 0
	jmp .L323
	.L2839:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 295
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2840, A, 0
	jmp .L324
	.L2840:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 296
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2841, A, 0
	jmp .L325
	.L2841:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 297
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2842, A, 0
	jmp .L326
	.L2842:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 298
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2843, A, 0
	jmp .L327
	.L2843:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 299
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2844, A, 0
	jmp .L328
	.L2844:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 300
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2845, A, 0
	jmp .L329
	.L2845:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 301
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2846, A, 0
	jmp .L330
	.L2846:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 302
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2847, A, 0
	jmp .L331
	.L2847:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 303
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2848, A, 0
	jmp .L332
	.L2848:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 304
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2849, A, 0
	jmp .L333
	.L2849:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 305
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2850, A, 0
	jmp .L334
	.L2850:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 306
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2851, A, 0
	jmp .L335
	.L2851:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 307
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2852, A, 0
	jmp .L336
	.L2852:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 308
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2853, A, 0
	jmp .L337
	.L2853:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 309
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2854, A, 0
	jmp .L338
	.L2854:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 310
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2855, A, 0
	jmp .L339
	.L2855:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 311
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2856, A, 0
	jmp .L340
	.L2856:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 312
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2857, A, 0
	jmp .L341
	.L2857:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 313
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2858, A, 0
	jmp .L342
	.L2858:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 314
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2859, A, 0
	jmp .L343
	.L2859:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 315
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2860, A, 0
	jmp .L344
	.L2860:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 316
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2861, A, 0
	jmp .L345
	.L2861:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 317
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2862, A, 0
	jmp .L346
	.L2862:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 318
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2863, A, 0
	jmp .L347
	.L2863:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 319
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2864, A, 0
	jmp .L348
	.L2864:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 320
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2865, A, 0
	jmp .L349
	.L2865:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 321
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2866, A, 0
	jmp .L350
	.L2866:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 322
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2867, A, 0
	jmp .L351
	.L2867:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 323
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2868, A, 0
	jmp .L352
	.L2868:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 324
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2869, A, 0
	jmp .L353
	.L2869:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 325
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2870, A, 0
	jmp .L354
	.L2870:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 326
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2871, A, 0
	jmp .L355
	.L2871:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 327
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2872, A, 0
	jmp .L356
	.L2872:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 328
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2873, A, 0
	jmp .L357
	.L2873:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 329
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2874, A, 0
	jmp .L358
	.L2874:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 330
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2875, A, 0
	jmp .L359
	.L2875:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 331
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2876, A, 0
	jmp .L360
	.L2876:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 332
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2877, A, 0
	jmp .L361
	.L2877:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 333
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2878, A, 0
	jmp .L362
	.L2878:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 334
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2879, A, 0
	jmp .L363
	.L2879:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 335
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2880, A, 0
	jmp .L364
	.L2880:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 336
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2881, A, 0
	jmp .L365
	.L2881:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 337
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2882, A, 0
	jmp .L366
	.L2882:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 338
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2883, A, 0
	jmp .L367
	.L2883:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 339
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2884, A, 0
	jmp .L368
	.L2884:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 340
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2885, A, 0
	jmp .L369
	.L2885:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 341
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2886, A, 0
	jmp .L370
	.L2886:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 342
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2887, A, 0
	jmp .L371
	.L2887:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 343
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2888, A, 0
	jmp .L372
	.L2888:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 344
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2889, A, 0
	jmp .L373
	.L2889:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 345
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2890, A, 0
	jmp .L374
	.L2890:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 346
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2891, A, 0
	jmp .L375
	.L2891:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 347
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2892, A, 0
	jmp .L376
	.L2892:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 348
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2893, A, 0
	jmp .L377
	.L2893:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 349
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2894, A, 0
	jmp .L378
	.L2894:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 350
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2895, A, 0
	jmp .L379
	.L2895:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 351
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2896, A, 0
	jmp .L380
	.L2896:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 352
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2897, A, 0
	jmp .L381
	.L2897:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 353
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2898, A, 0
	jmp .L382
	.L2898:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 354
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2899, A, 0
	jmp .L383
	.L2899:
	jmp .L384
	.loc 7 1488 0
	# #define keyword(id, str, _) case id: return str;
	.L318:
.data
	.L2900:
	.string "->"
.text
	mov A, .L2900
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L319:
.data
	.L2901:
	.string "+="
.text
	mov A, .L2901
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L320:
.data
	.L2902:
	.string "&="
.text
	mov A, .L2902
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L321:
.data
	.L2903:
	.string "/="
.text
	mov A, .L2903
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L322:
.data
	.L2904:
	.string "%="
.text
	mov A, .L2904
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L323:
.data
	.L2905:
	.string "*="
.text
	mov A, .L2905
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L324:
.data
	.L2906:
	.string "|="
.text
	mov A, .L2906
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L325:
.data
	.L2907:
	.string "<<="
.text
	mov A, .L2907
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L326:
.data
	.L2908:
	.string ">>="
.text
	mov A, .L2908
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L327:
.data
	.L2909:
	.string "-="
.text
	mov A, .L2909
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L328:
.data
	.L2910:
	.string "^="
.text
	mov A, .L2910
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L329:
.data
	.L2911:
	.string "--"
.text
	mov A, .L2911
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L330:
.data
	.L2912:
	.string "=="
.text
	mov A, .L2912
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L331:
.data
	.L2913:
	.string ">="
.text
	mov A, .L2913
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L332:
.data
	.L2914:
	.string "++"
.text
	mov A, .L2914
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L333:
.data
	.L2915:
	.string "<="
.text
	mov A, .L2915
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L334:
.data
	.L2916:
	.string "&&"
.text
	mov A, .L2916
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L335:
.data
	.L2917:
	.string "||"
.text
	mov A, .L2917
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L336:
.data
	.L2918:
	.string "!="
.text
	mov A, .L2918
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L337:
.data
	.L2919:
	.string "<<"
.text
	mov A, .L2919
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L338:
.data
	.L2920:
	.string ">>"
.text
	mov A, .L2920
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1489 0
	# #include "keyword.inc"
	.L339:
.data
	.L2921:
	.string "_Alignas"
.text
	mov A, .L2921
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L340:
.data
	.L2922:
	.string "_Alignof"
.text
	mov A, .L2922
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L341:
.data
	.L2923:
	.string "auto"
.text
	mov A, .L2923
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L342:
.data
	.L2924:
	.string "_Bool"
.text
	mov A, .L2924
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L343:
.data
	.L2925:
	.string "break"
.text
	mov A, .L2925
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L344:
.data
	.L2926:
	.string "case"
.text
	mov A, .L2926
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L345:
.data
	.L2927:
	.string "char"
.text
	mov A, .L2927
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L346:
.data
	.L2928:
	.string "_Complex"
.text
	mov A, .L2928
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L347:
.data
	.L2929:
	.string "const"
.text
	mov A, .L2929
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L348:
.data
	.L2930:
	.string "continue"
.text
	mov A, .L2930
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L349:
.data
	.L2931:
	.string "default"
.text
	mov A, .L2931
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L350:
.data
	.L2932:
	.string "do"
.text
	mov A, .L2932
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L351:
.data
	.L2933:
	.string "double"
.text
	mov A, .L2933
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L352:
.data
	.L2934:
	.string "else"
.text
	mov A, .L2934
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L353:
.data
	.L2935:
	.string "enum"
.text
	mov A, .L2935
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L354:
.data
	.L2936:
	.string "extern"
.text
	mov A, .L2936
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L355:
.data
	.L2937:
	.string "float"
.text
	mov A, .L2937
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L356:
.data
	.L2938:
	.string "for"
.text
	mov A, .L2938
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L357:
.data
	.L2939:
	.string "_Generic"
.text
	mov A, .L2939
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L358:
.data
	.L2940:
	.string "goto"
.text
	mov A, .L2940
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L359:
.data
	.L2941:
	.string "if"
.text
	mov A, .L2941
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L360:
.data
	.L2942:
	.string "_Imaginary"
.text
	mov A, .L2942
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L361:
.data
	.L2943:
	.string "inline"
.text
	mov A, .L2943
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L362:
.data
	.L2944:
	.string "int"
.text
	mov A, .L2944
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L363:
.data
	.L2945:
	.string "long"
.text
	mov A, .L2945
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L364:
.data
	.L2946:
	.string "_Noreturn"
.text
	mov A, .L2946
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L365:
.data
	.L2947:
	.string "register"
.text
	mov A, .L2947
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L366:
.data
	.L2948:
	.string "restrict"
.text
	mov A, .L2948
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L367:
.data
	.L2949:
	.string "return"
.text
	mov A, .L2949
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L368:
.data
	.L2950:
	.string "##"
.text
	mov A, .L2950
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L369:
.data
	.L2951:
	.string "short"
.text
	mov A, .L2951
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L370:
.data
	.L2952:
	.string "signed"
.text
	mov A, .L2952
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L371:
.data
	.L2953:
	.string "sizeof"
.text
	mov A, .L2953
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L372:
.data
	.L2954:
	.string "static"
.text
	mov A, .L2954
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L373:
.data
	.L2955:
	.string "_Static_assert"
.text
	mov A, .L2955
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L374:
.data
	.L2956:
	.string "struct"
.text
	mov A, .L2956
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L375:
.data
	.L2957:
	.string "switch"
.text
	mov A, .L2957
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L376:
.data
	.L2958:
	.string "..."
.text
	mov A, .L2958
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L377:
.data
	.L2959:
	.string "typedef"
.text
	mov A, .L2959
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L378:
.data
	.L2960:
	.string "typeof"
.text
	mov A, .L2960
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L379:
.data
	.L2961:
	.string "union"
.text
	mov A, .L2961
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L380:
.data
	.L2962:
	.string "unsigned"
.text
	mov A, .L2962
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L381:
.data
	.L2963:
	.string "void"
.text
	mov A, .L2963
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L382:
.data
	.L2964:
	.string "volatile"
.text
	mov A, .L2964
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L383:
.data
	.L2965:
	.string "while"
.text
	mov A, .L2965
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1493 0
	#         }
	.L384:
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1493 0
	#         }
.data
	.L2966:
	.string "%c"
.text
	mov A, .L2966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2967:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L317:
	.loc 7 1495 0
	#         return format("%s'%s'",
	.L385:
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp quote_char
	.L2968:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1495 0
	#         return format("%s'%s'",
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp encoding_prefix
	.L2969:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1495 0
	#         return format("%s'%s'",
.data
	.L2970:
	.string "%s'%s'"
.text
	mov A, .L2970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2971:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1499 0
	#         return tok->sval;
	.L386:
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1501 0
	#         return format("%s\"%s\"",
	.L387:
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp quote_cstring
	.L2972:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1501 0
	#         return format("%s\"%s\"",
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp encoding_prefix
	.L2973:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1501 0
	#         return format("%s\"%s\"",
.data
	.L2974:
	.string "%s\"%s\""
.text
	mov A, .L2974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2975:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1505 0
	#         return "(eof)";
	.L388:
.data
	.L2976:
	.string "(eof)"
.text
	mov A, .L2976
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1507 0
	#         return format("%c", tok->c);
	.L389:
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1507 0
	#         return format("%c", tok->c);
.data
	.L2977:
	.string "%c"
.text
	mov A, .L2977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2978:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1509 0
	#         return "(newline)";
	.L390:
.data
	.L2979:
	.string "(newline)"
.text
	mov A, .L2979
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1511 0
	#         return "(space)";
	.L391:
.data
	.L2980:
	.string "(space)"
.text
	mov A, .L2980
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1513 0
	#         return "(macro-param)";
	.L392:
.data
	.L2981:
	.string "(macro-param)"
.text
	mov A, .L2981
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L314:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 1477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L2982:
	.string "internal error: unknown token kind: %d"
.text
	mov A, .L2982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2983:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L2983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L2984:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_dict:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1527 0
	# }
	.loc 7 1524 0
	#     r->map = make_map();
	mov A, 0
	mov B, SP
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L2985:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1525 0
	#     r->key = make_vector();
	mov A, .L2986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_map
	.L2986:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1524 0
	#     r->map = make_map();
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1526 0
	#     return r;
	mov A, .L2987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L2987:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1524 0
	#     r->map = make_map();
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1527 0
	# }
	.loc 7 1524 0
	#     r->map = make_map();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
dict_get:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1531 0
	# }
	.loc 7 1527 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1531 0
	# }
	.loc 7 1527 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L2988:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
dict_put:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1536 0
	# }
	.loc 7 1535 0
	#     vec_push(dict->key, key);
	.loc 7 1531 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1535 0
	#     vec_push(dict->key, key);
	.loc 7 1531 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L2989:
	mov A, B
	add SP, 3
	.loc 7 1536 0
	# }
	.loc 7 1531 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1536 0
	# }
	.loc 7 1531 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L2990:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
dict_keys:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1540 0
	# }
	.loc 7 1536 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
count_leading_ones:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1558 0
	# }
	.loc 7 1555 0
	#         if ((c & (1 << i)) == 0)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 7
	store A, B
	.L393:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L2991, A, 0
	jmp .L2992
	.L2991:
	jmp .L395
	.L2992:
	.loc 7 1540 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1555 0
	#         if ((c & (1 << i)) == 0)
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L2993:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L2994:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2995, A, 0
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2995:
	.L394:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L393
	.L395:
	.loc 7 1558 0
	# }
	mov A, 8
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_rune:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 1562 0
	#     if (len == 0) {
	mov A, 0
	mov B, SP
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1562 0
	#     if (len == 0) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2996
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp count_leading_ones
	.L2996:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1565 0
	#     }
	.loc 7 1563 0
	#         *r = s[0];
	.loc 7 1562 0
	#     if (len == 0) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1563 0
	#         *r = s[0];
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2997, A, 0
	.loc 7 1565 0
	#     }
	.loc 7 1564 0
	#         return 1;
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1564 0
	#         return 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1565 0
	#     }
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2997:
	.loc 7 1567 0
	#         error("invalid UTF-8 sequence");
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1567 0
	#         error("invalid UTF-8 sequence");
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1562 0
	#     if (len == 0) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2998, A, 0
	.loc 7 1567 0
	#         error("invalid UTF-8 sequence");
.data
	.L2999:
	.string "invalid UTF-8 sequence"
.text
	mov A, .L2999
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3000:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3001:
	mov A, B
	add SP, 3
	.L2998:
	.loc 7 1569 0
	#         if ((s[i] & 0xC0) != 0x80)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 1
	store A, B
	.L396:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1562 0
	#     if (len == 0) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3002, A, 0
	jmp .L3003
	.L3002:
	.loc 7 1569 0
	#         if ((s[i] & 0xC0) != 0x80)
	jmp .L398
	.L3003:
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1569 0
	#         if ((s[i] & 0xC0) != 0x80)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3004
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3004:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 128
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3005, A, 0
.data
	.L3006:
	.string "invalid UTF-8 continuation byte"
.text
	mov A, .L3006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3007:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3008:
	mov A, B
	add SP, 3
	.L3005:
	.L397:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	jmp .L396
	.L398:
	.loc 7 1581 0
	#     }
	.loc 7 1562 0
	#     if (len == 0) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 1581 0
	#     }
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3009, A, 0
	jmp .L400
	.L3009:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3010, A, 0
	jmp .L401
	.L3010:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3011, A, 0
	jmp .L402
	.L3011:
	jmp .L399
	.loc 7 1573 0
	#         *r = ((s[0] & 0x1F) << 6) | (s[1] & 0x3F);
	.L400:
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1573 0
	#         *r = ((s[0] & 0x1F) << 6) | (s[1] & 0x3F);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 31
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3012:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L3013:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1573 0
	#         *r = ((s[0] & 0x1F) << 6) | (s[1] & 0x3F);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3014:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3015:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1575 0
	#     case 3:
	mov A, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1576 0
	#         *r = ((s[0] & 0xF) << 12) | ((s[1] & 0x3F) << 6) | (s[2] & 0x3F);
	.L401:
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1576 0
	#         *r = ((s[0] & 0xF) << 12) | ((s[1] & 0x3F) << 6) | (s[2] & 0x3F);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3016:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L3017:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1576 0
	#         *r = ((s[0] & 0xF) << 12) | ((s[1] & 0x3F) << 6) | (s[2] & 0x3F);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3018:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L3019:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3020:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1576 0
	#         *r = ((s[0] & 0xF) << 12) | ((s[1] & 0x3F) << 6) | (s[2] & 0x3F);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3021:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3022:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1578 0
	#     case 4:
	mov A, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1579 0
	#         *r = ((s[0] & 0x7) << 18) | ((s[1] & 0x3F) << 12) | ((s[2] & 0x3F) << 6) | (s[3] & 0x3F);
	.L402:
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1579 0
	#         *r = ((s[0] & 0x7) << 18) | ((s[1] & 0x3F) << 12) | ((s[2] & 0x3F) << 6) | (s[3] & 0x3F);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3023:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L3024:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1579 0
	#         *r = ((s[0] & 0x7) << 18) | ((s[1] & 0x3F) << 12) | ((s[2] & 0x3F) << 6) | (s[3] & 0x3F);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3025:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L3026:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3027:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1579 0
	#         *r = ((s[0] & 0x7) << 18) | ((s[1] & 0x3F) << 12) | ((s[2] & 0x3F) << 6) | (s[3] & 0x3F);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3028:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L3029:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3030:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1579 0
	#         *r = ((s[0] & 0x7) << 18) | ((s[1] & 0x3F) << 12) | ((s[2] & 0x3F) << 6) | (s[3] & 0x3F);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3031:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3032
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3032:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1581 0
	#     }
	mov A, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L399:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L3033:
	.string "invalid UTF-8 sequence"
.text
	mov A, .L3033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3034:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3035:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
write16:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1588 0
	# }
	.loc 7 1587 0
	#     buf_write(b, x >> 8);
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1587 0
	#     buf_write(b, x >> 8);
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3036
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3036:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3037:
	mov A, B
	add SP, 2
	.loc 7 1588 0
	# }
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1588 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L3038:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3039
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3039:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
write32:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1593 0
	# }
	.loc 7 1592 0
	#     write16(b, x >> 16);
	.loc 7 1588 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1592 0
	#     write16(b, x >> 16);
	mov A, 65535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3040
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3040:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1588 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3041
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp write16
	.L3041:
	mov A, B
	add SP, 2
	.loc 7 1593 0
	# }
	.loc 7 1588 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1593 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L3042:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1588 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3043
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp write16
	.L3043:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
to_utf16:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 1609 0
	# }
	.loc 7 1597 0
	#     char *end = p + len;
	mov A, 0
	mov B, SP
	mov A, .L3044
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L3044:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1598 0
	#     while (p != end) {
	mov A, 0
	mov B, SP
	.loc 7 1593 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1606 0
	#         }
	.L403:
	.loc 7 1599 0
	#         uint32_t rune;
	.loc 7 1593 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1598 0
	#     while (p != end) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3045, A, 0
	.loc 7 1606 0
	#         }
	.loc 7 1600 0
	#         p += read_rune(&rune, p, end);
	.loc 7 1601 0
	#         if (rune < 0x10000) {
	.loc 7 1593 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1601 0
	#         if (rune < 0x10000) {
	.loc 7 1598 0
	#     while (p != end) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1593 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1601 0
	#         if (rune < 0x10000) {
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rune
	.L3046:
	mov A, B
	add SP, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 2
	store A, B
	.loc 7 1606 0
	#         }
	.loc 7 1602 0
	#             write16(b, rune);
	.loc 7 1600 0
	#         p += read_rune(&rune, p, end);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1602 0
	#             write16(b, rune);
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3047, A, 0
	.loc 7 1603 0
	#         } else {
	.loc 7 1600 0
	#         p += read_rune(&rune, p, end);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1597 0
	#     char *end = p + len;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3048
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp write16
	.L3048:
	mov A, B
	add SP, 2
	jmp .L3049
	.L3047:
	.loc 7 1606 0
	#         }
	.loc 7 1605 0
	#             write16(b, (rune & 0x3FF) + 0xDC00);
	.loc 7 1600 0
	#         p += read_rune(&rune, p, end);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1605 0
	#             write16(b, (rune & 0x3FF) + 0xDC00);
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L3050:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 55232
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1597 0
	#     char *end = p + len;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp write16
	.L3051:
	mov A, B
	add SP, 2
	.loc 7 1606 0
	#         }
	.loc 7 1600 0
	#         p += read_rune(&rune, p, end);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1606 0
	#         }
	mov A, 1023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3052:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 56320
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1597 0
	#     char *end = p + len;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp write16
	.L3053:
	mov A, B
	add SP, 2
	.L3049:
	jmp .L3054
	.L3045:
	.loc 7 1606 0
	#         }
	jmp .L404
	.L3054:
	jmp .L403
	.L404:
	.loc 7 1609 0
	# }
	.loc 7 1597 0
	#     char *end = p + len;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
to_utf32:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 1620 0
	# }
	.loc 7 1613 0
	#     char *end = p + len;
	mov A, 0
	mov B, SP
	mov A, .L3055
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L3055:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1614 0
	#     while (p != end) {
	mov A, 0
	mov B, SP
	.loc 7 1609 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1618 0
	#     }
	.L405:
	.loc 7 1615 0
	#         uint32_t rune;
	.loc 7 1609 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1614 0
	#     while (p != end) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3056, A, 0
	.loc 7 1618 0
	#     }
	.loc 7 1616 0
	#         p += read_rune(&rune, p, end);
	.loc 7 1617 0
	#         write32(b, rune);
	.loc 7 1609 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1617 0
	#         write32(b, rune);
	.loc 7 1614 0
	#     while (p != end) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1609 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1617 0
	#         write32(b, rune);
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rune
	.L3057:
	mov A, B
	add SP, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 2
	store A, B
	.loc 7 1618 0
	#     }
	.loc 7 1616 0
	#         p += read_rune(&rune, p, end);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1613 0
	#     char *end = p + len;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3058
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp write32
	.L3058:
	mov A, B
	add SP, 2
	jmp .L3059
	.L3056:
	.loc 7 1618 0
	#     }
	jmp .L406
	.L3059:
	jmp .L405
	.L406:
	.loc 7 1620 0
	# }
	.loc 7 1613 0
	#     char *end = p + len;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
write_utf8:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 1626 0
	#     }
	.loc 7 1624 0
	#         buf_write(b, rune);
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1624 0
	#         buf_write(b, rune);
	mov A, 128
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3060, A, 0
	.loc 7 1626 0
	#     }
	.loc 7 1625 0
	#         return;
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3061:
	mov A, B
	add SP, 2
	.loc 7 1626 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3060:
	.loc 7 1631 0
	#     }
	.loc 7 1628 0
	#         buf_write(b, 0xC0 | (rune >> 6));
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1628 0
	#         buf_write(b, 0xC0 | (rune >> 6));
	mov A, 2048
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3062, A, 0
	.loc 7 1631 0
	#     }
	.loc 7 1629 0
	#         buf_write(b, 0x80 | (rune & 0x3F));
	mov A, 192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1629 0
	#         buf_write(b, 0x80 | (rune & 0x3F));
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L3063:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3064:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3065:
	mov A, B
	add SP, 2
	.loc 7 1630 0
	#         return;
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1630 0
	#         return;
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3066:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3067:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3068:
	mov A, B
	add SP, 2
	.loc 7 1631 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3062:
	.loc 7 1637 0
	#     }
	.loc 7 1633 0
	#         buf_write(b, 0xE0 | (rune >> 12));
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1633 0
	#         buf_write(b, 0xE0 | (rune >> 12));
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3069, A, 0
	.loc 7 1637 0
	#     }
	.loc 7 1634 0
	#         buf_write(b, 0x80 | ((rune >> 6) & 0x3F));
	mov A, 224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1634 0
	#         buf_write(b, 0x80 | ((rune >> 6) & 0x3F));
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3070
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L3070:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3071
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3071:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3072:
	mov A, B
	add SP, 2
	.loc 7 1635 0
	#         buf_write(b, 0x80 | (rune & 0x3F));
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1635 0
	#         buf_write(b, 0x80 | (rune & 0x3F));
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L3073:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3074:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3075
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3075:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3076:
	mov A, B
	add SP, 2
	.loc 7 1636 0
	#         return;
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1636 0
	#         return;
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3077
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3077:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3078
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3078:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3079:
	mov A, B
	add SP, 2
	.loc 7 1637 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3069:
	.loc 7 1644 0
	#     }
	.loc 7 1639 0
	#         buf_write(b, 0xF0 | (rune >> 18));
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1639 0
	#         buf_write(b, 0xF0 | (rune >> 18));
	mov A, 2097152
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3080, A, 0
	.loc 7 1644 0
	#     }
	.loc 7 1640 0
	#         buf_write(b, 0x80 | ((rune >> 12) & 0x3F));
	mov A, 240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1640 0
	#         buf_write(b, 0x80 | ((rune >> 12) & 0x3F));
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L3081:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3082:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3083:
	mov A, B
	add SP, 2
	.loc 7 1641 0
	#         buf_write(b, 0x80 | ((rune >> 6) & 0x3F));
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1641 0
	#         buf_write(b, 0x80 | ((rune >> 6) & 0x3F));
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L3084:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3085:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3086:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3087:
	mov A, B
	add SP, 2
	.loc 7 1642 0
	#         buf_write(b, 0x80 | (rune & 0x3F));
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1642 0
	#         buf_write(b, 0x80 | (rune & 0x3F));
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L3088:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3089:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3090:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3091:
	mov A, B
	add SP, 2
	.loc 7 1643 0
	#         return;
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1643 0
	#         return;
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L3092:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L3093:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3094
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3094:
	mov A, B
	add SP, 2
	.loc 7 1644 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3080:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 1620 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L3095:
	.string "invalid UCS character: \\U%08x"
.text
	mov A, .L3095
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3096:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3097
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3097:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
enable_warning:
	.long 1
	.data 0
warning_is_error:
	.long 0
	.text
print_error:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1662 0
	# }
	.loc 7 1659 0
	#     fprintf(stderr, "%s: %s: ", line, pos);
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1659 0
	#     fprintf(stderr, "%s: %s: ", line, pos);
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3098
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fileno
	.L3098:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isatty
	.L3099:
	mov A, B
	add SP, 1
	jeq .L3100, A, 0
	.loc 7 1659 0
	#     fprintf(stderr, "%s: %s: ", line, pos);
.data
	.L3101:
	.string "\x1b[1;31m[%s]\x1b[0m "
.text
	mov A, .L3101
	jmp .L3102
	.L3100:
.data
	.L3103:
	.string "[%s] "
.text
	mov A, .L3103
	.L3102:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L3104:
	mov A, B
	add SP, 3
	.loc 7 1660 0
	#     vfprintf(stderr, fmt, args);
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1660 0
	#     vfprintf(stderr, fmt, args);
.data
	.L3105:
	.string "%s: %s: "
.text
	mov A, .L3105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L3106:
	mov A, B
	add SP, 4
	.loc 7 1661 0
	#     fprintf(stderr, "\n");
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vfprintf
	.L3107:
	mov A, B
	add SP, 3
	.loc 7 1662 0
	# }
.data
	.L3108:
	.string "\n"
.text
	mov A, .L3108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3109
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L3109:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
errorf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1670 0
	# }
	.loc 7 1666 0
	#     va_start(args, fmt);
	.loc 7 1667 0
	#     print_error(line, pos, "ERROR", fmt, args);
	mov A, BP
	add A, 4
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1668 0
	#     va_end(args);
	.loc 7 1666 0
	#     va_start(args, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1662 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1668 0
	#     va_end(args);
.data
	.L3110:
	.string "ERROR"
.text
	mov A, .L3110
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1662 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_error
	.L3111:
	mov A, B
	add SP, 5
	.loc 7 1670 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
warnf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1681 0
	#         exit(1);
	.loc 7 1674 0
	#         return;
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, enable_warning
	load A, B
	eq A, 0
	jeq .L3112, A, 0
	.loc 7 1674 0
	#         return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3112:
	.loc 7 1676 0
	#     va_list args;
	mov A, 0
	mov B, SP
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, warning_is_error
	load A, B
	jeq .L3113, A, 0
	.loc 7 1676 0
	#     va_list args;
.data
	.L3114:
	.string "ERROR"
.text
	mov A, .L3114
	jmp .L3115
	.L3113:
.data
	.L3116:
	.string "WARN"
.text
	mov A, .L3116
	.L3115:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1677 0
	#     va_start(args, fmt);
	.loc 7 1678 0
	#     print_error(line, pos, label, fmt, args);
	mov A, BP
	add A, 4
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1679 0
	#     va_end(args);
	.loc 7 1677 0
	#     va_start(args, fmt);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1670 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1676 0
	#     va_list args;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1670 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_error
	.L3117:
	mov A, B
	add SP, 5
	.loc 7 1681 0
	#         exit(1);
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, warning_is_error
	load A, B
	jeq .L3118, A, 0
	.loc 7 1681 0
	#         exit(1);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3118:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
token_pos:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1690 0
	# }
	.loc 7 1686 0
	#     if (!f)
	mov A, 0
	mov B, SP
	.loc 7 1681 0
	#         exit(1);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1687 0
	#         return "(unknown)";
	.loc 7 1686 0
	#     if (!f)
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L3119, A, 0
	.loc 7 1687 0
	#         return "(unknown)";
.data
	.L3120:
	.string "(unknown)"
.text
	mov A, .L3120
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3119:
	.loc 7 1689 0
	#     return format("%s:%d:%d", name, tok->line, tok->column);
	mov A, 0
	mov B, SP
	.loc 7 1686 0
	#     if (!f)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	jeq .L3121, A, 0
	.loc 7 1689 0
	#     return format("%s:%d:%d", name, tok->line, tok->column);
	.loc 7 1686 0
	#     if (!f)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	jmp .L3122
	.L3121:
	.loc 7 1689 0
	#     return format("%s:%d:%d", name, tok->line, tok->column);
.data
	.L3123:
	.string "(unknown)"
.text
	mov A, .L3123
	.L3122:
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1690 0
	# }
	.loc 7 1681 0
	#         exit(1);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1690 0
	# }
	.loc 7 1681 0
	#         exit(1);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1689 0
	#     return format("%s:%d:%d", name, tok->line, tok->column);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1690 0
	# }
.data
	.L3124:
	.string "%s:%d:%d"
.text
	mov A, .L3124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L3125:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	errno:

	.long 0
	.data 0
files:
	.data 1
	.L3126:
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L3126
	.data 0
stashed:
	.data 1
	.L3127:
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L3127
	.text
make_file:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1735 0
	# }
	.loc 7 1722 0
	#     r->file = file;
	mov A, 0
	mov B, SP
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L3128:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1723 0
	#     r->name = name;
	.loc 7 1690 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1722 0
	#     r->file = file;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1724 0
	#     r->line = 1;
	.loc 7 1690 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1722 0
	#     r->file = file;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1725 0
	#     r->column = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1722 0
	#     r->file = file;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1726 0
	# #ifdef __eir__
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1722 0
	#     r->file = file;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1728 0
	# #else
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1722 0
	#     r->file = file;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 11
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1735 0
	# }
	.loc 7 1722 0
	#     r->file = file;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_file_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1743 0
	# }
	.loc 7 1739 0
	#     r->line = 1;
	mov A, 0
	mov B, SP
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L3129:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1740 0
	#     r->column = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1739 0
	#     r->line = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1741 0
	#     r->p = s;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1739 0
	#     r->line = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1742 0
	#     return r;
	.loc 7 1735 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1739 0
	#     r->line = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1743 0
	# }
	.loc 7 1739 0
	#     r->line = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
close_file:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1747 0
	#         fclose(f->file);
	.loc 7 1743 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L3130, A, 0
	.loc 7 1747 0
	#         fclose(f->file);
	.loc 7 1743 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fclose
	.L3131:
	mov A, B
	add SP, 1
	.L3130:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
readc_file:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1762 0
	# }
	.loc 7 1752 0
	#     if (c == EOF) {
	mov A, 0
	mov B, SP
	.loc 7 1747 0
	#         fclose(f->file);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getc
	.L3132:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1759 0
	#     }
	.loc 7 1753 0
	#         c = (f->last == '\n' || f->last == EOF) ? EOF : '\n';
	.loc 7 1752 0
	#     if (c == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1753 0
	#         c = (f->last == '\n' || f->last == EOF) ? EOF : '\n';
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3133, A, 0
	.loc 7 1754 0
	#     } else if (c == '\r') {
	.loc 7 1747 0
	#         fclose(f->file);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1754 0
	#     } else if (c == '\r') {
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3134, A, 0
	.loc 7 1747 0
	#         fclose(f->file);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1754 0
	#     } else if (c == '\r') {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3134:
	mov A, B
	jeq .L3135, A, 0
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L3136
	.L3135:
	mov A, 10
	.L3136:
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L3137
	.L3133:
	.loc 7 1759 0
	#     }
	.loc 7 1754 0
	#     } else if (c == '\r') {
	.loc 7 1752 0
	#     if (c == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1754 0
	#     } else if (c == '\r') {
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3138, A, 0
	.loc 7 1759 0
	#     }
	.loc 7 1756 0
	#         if (c2 != '\n')
	mov A, 0
	mov B, SP
	.loc 7 1747 0
	#         fclose(f->file);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getc
	.L3139:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1757 0
	#             ungetc(c2, f->file);
	.loc 7 1756 0
	#         if (c2 != '\n')
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1757 0
	#             ungetc(c2, f->file);
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3140, A, 0
	.loc 7 1747 0
	#         fclose(f->file);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1756 0
	#         if (c2 != '\n')
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ungetc
	.L3141:
	mov A, B
	add SP, 2
	.L3140:
	.loc 7 1759 0
	#     }
	mov A, 10
	mov B, BP
	add B, 16777215
	store A, B
	.L3138:
	.L3137:
	.loc 7 1761 0
	#     return c;
	.loc 7 1752 0
	#     if (c == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1747 0
	#         fclose(f->file);
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1762 0
	# }
	.loc 7 1752 0
	#     if (c == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
readc_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1778 0
	# }
	.loc 7 1766 0
	#     if (*f->p == '\0') {
	.loc 7 1775 0
	#     }
	.loc 7 1767 0
	#         c = (f->last == '\n' || f->last == EOF) ? EOF : '\n';
	.loc 7 1762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1767 0
	#         c = (f->last == '\n' || f->last == EOF) ? EOF : '\n';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3142, A, 0
	.loc 7 1768 0
	#     } else if (*f->p == '\r') {
	.loc 7 1762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1768 0
	#     } else if (*f->p == '\r') {
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3143, A, 0
	.loc 7 1762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1768 0
	#     } else if (*f->p == '\r') {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3143:
	mov A, B
	jeq .L3144, A, 0
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L3145
	.L3144:
	mov A, 10
	.L3145:
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L3146
	.L3142:
	.loc 7 1775 0
	#     }
	.loc 7 1768 0
	#     } else if (*f->p == '\r') {
	.loc 7 1762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1768 0
	#     } else if (*f->p == '\r') {
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3147, A, 0
	.loc 7 1773 0
	#     } else {
	.loc 7 1770 0
	#         if (*f->p == '\n')
	.loc 7 1762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.loc 7 1771 0
	#             f->p++;
	.loc 7 1762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1771 0
	#             f->p++;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3148, A, 0
	.loc 7 1762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.L3148:
	.loc 7 1773 0
	#     } else {
	mov A, 10
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L3149
	.L3147:
	.loc 7 1775 0
	#     }
	.loc 7 1762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L3149:
	.L3146:
	.loc 7 1777 0
	#     return c;
	.loc 7 1766 0
	#     if (*f->p == '\0') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1778 0
	# }
	.loc 7 1766 0
	#     if (*f->p == '\0') {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
file_get:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1797 0
	# }
	.loc 7 1782 0
	#     int c;
	mov A, 0
	mov B, SP
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3150
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L3150:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1783 0
	#     if (f->buflen > 0) {
	.loc 7 1789 0
	#     }
	.loc 7 1784 0
	#         c = f->buf[--f->buflen];
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1782 0
	#     int c;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3151, A, 0
	.loc 7 1785 0
	#     } else if (f->file) {
	.loc 7 1782 0
	#     int c;
	mov B, BP
	add B, 16777215
	load A, B
	mov A, A
	add A, 7
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1785 0
	#     } else if (f->file) {
	.loc 7 1782 0
	#     int c;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 10
	load A, B
	sub A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L3152
	.L3151:
	.loc 7 1789 0
	#     }
	.loc 7 1785 0
	#     } else if (f->file) {
	.loc 7 1782 0
	#     int c;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	jeq .L3153, A, 0
	.loc 7 1787 0
	#     } else {
	.loc 7 1782 0
	#     int c;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc_file
	.L3154:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L3155
	.L3153:
	.loc 7 1789 0
	#     }
	.loc 7 1782 0
	#     int c;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc_string
	.L3156:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.L3155:
	.L3152:
	.loc 7 1795 0
	#     }
	.loc 7 1791 0
	#         f->line++;
	.loc 7 1783 0
	#     if (f->buflen > 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1791 0
	#         f->line++;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3157, A, 0
	.loc 7 1793 0
	#     } else if (c != EOF) {
	.loc 7 1792 0
	#         f->column = 1;
	.loc 7 1782 0
	#     int c;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.loc 7 1793 0
	#     } else if (c != EOF) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1782 0
	#     int c;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	jmp .L3158
	.L3157:
	.loc 7 1795 0
	#     }
	.loc 7 1793 0
	#     } else if (c != EOF) {
	.loc 7 1783 0
	#     if (f->buflen > 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1793 0
	#     } else if (c != EOF) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3159, A, 0
	.loc 7 1795 0
	#     }
	.loc 7 1782 0
	#     int c;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.L3159:
	.L3158:
	.loc 7 1797 0
	# }
	.loc 7 1783 0
	#     if (f->buflen > 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
readc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1815 0
	#     }
	.L409:
	.loc 7 1802 0
	#         if (c == EOF) {
	mov A, 0
	mov B, SP
	mov A, .L3160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp file_get
	.L3160:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1807 0
	#         }
	.loc 7 1803 0
	#             if (vec_len(files) == 1)
	.loc 7 1802 0
	#         if (c == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1803 0
	#             if (vec_len(files) == 1)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3161, A, 0
	.loc 7 1807 0
	#         }
	.loc 7 1804 0
	#                 return c;
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3162:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1804 0
	#                 return c;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3163, A, 0
	.loc 7 1802 0
	#         if (c == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3163:
	.loc 7 1806 0
	#             continue;
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_pop
	.L3164:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp close_file
	.L3165:
	mov A, B
	add SP, 1
	.loc 7 1807 0
	#         }
	jmp .L410
	.L3161:
	.loc 7 1809 0
	#             return c;
	.loc 7 1802 0
	#         if (c == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1809 0
	#             return c;
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3166, A, 0
	.loc 7 1802 0
	#         if (c == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3166:
	.loc 7 1811 0
	#         if (c2 == '\n')
	mov A, 0
	mov B, SP
	mov A, .L3167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp file_get
	.L3167:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1812 0
	#             continue;
	.loc 7 1811 0
	#         if (c2 == '\n')
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1812 0
	#             continue;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3168, A, 0
	jmp .L410
	.L3168:
	.loc 7 1814 0
	#         return c;
	.loc 7 1811 0
	#         if (c2 == '\n')
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L3169:
	mov A, B
	add SP, 1
	.loc 7 1815 0
	#     }
	.loc 7 1802 0
	#         if (c == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1815 0
	#     }
	.L410:
	jmp .L409
	.L411:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unreadc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1829 0
	#     }
	.loc 7 1820 0
	#         return;
	.loc 7 1815 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1820 0
	#         return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3170, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3170:
	.loc 7 1822 0
	#     assert(f->buflen < sizeof(f->buf) / sizeof(f->buf[0]));
	mov A, 0
	mov B, SP
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L3171:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L412:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 1822 0
	#     assert(f->buflen < sizeof(f->buf) / sizeof(f->buf[0]));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L3172:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L3173, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3174:
	.string "assertion failed: f->buflen < sizeof(f->buf) / sizeof(f->buf[0])\n"
.text
	mov A, .L3174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3175
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3175:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3173:
	mov A, 0
	jeq .L3176, A, 0
	jmp .L412
	.L3176:
	.L413:
	.loc 7 1824 0
	#     if (c == '\n') {
	.loc 7 1815 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1824 0
	#     if (c == '\n') {
	.loc 7 1822 0
	#     assert(f->buflen < sizeof(f->buf) / sizeof(f->buf[0]));
	mov B, BP
	add B, 16777215
	load A, B
	mov A, A
	add A, 7
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1824 0
	#     if (c == '\n') {
	.loc 7 1822 0
	#     assert(f->buflen < sizeof(f->buf) / sizeof(f->buf[0]));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1829 0
	#     }
	.loc 7 1825 0
	#         f->column = 1;
	.loc 7 1815 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1825 0
	#         f->column = 1;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3177, A, 0
	.loc 7 1827 0
	#     } else {
	.loc 7 1826 0
	#         f->line--;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1822 0
	#     assert(f->buflen < sizeof(f->buf) / sizeof(f->buf[0]));
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1827 0
	#     } else {
	.loc 7 1822 0
	#     assert(f->buflen < sizeof(f->buf) / sizeof(f->buf[0]));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	jmp .L3178
	.L3177:
	.loc 7 1829 0
	#     }
	.loc 7 1822 0
	#     assert(f->buflen < sizeof(f->buf) / sizeof(f->buf[0]));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.L3178:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
current_file:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1834 0
	# }
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L3179:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stream_push:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1838 0
	# }
	.loc 7 1834 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L3180:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stream_depth:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1842 0
	# }
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3181:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
input_position:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1849 0
	# }
	.loc 7 1846 0
	#         return "(unknown)";
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3182:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1846 0
	#         return "(unknown)";
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3183, A, 0
.data
	.L3184:
	.string "(unknown)"
.text
	mov A, .L3184
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3183:
	.loc 7 1848 0
	#     return format("%s:%d:%d", f->name, f->line, f->column);
	mov A, 0
	mov B, SP
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L3185:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1849 0
	# }
	.loc 7 1848 0
	#     return format("%s:%d:%d", f->name, f->line, f->column);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1849 0
	# }
	.loc 7 1848 0
	#     return format("%s:%d:%d", f->name, f->line, f->column);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1849 0
	# }
	.loc 7 1848 0
	#     return format("%s:%d:%d", f->name, f->line, f->column);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1849 0
	# }
.data
	.L3186:
	.string "%s:%d:%d"
.text
	mov A, .L3186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L3187:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stream_stash:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1854 0
	# }
	.loc 7 1853 0
	#     files = make_vector1(f);
	.loc 7 1690 0
	# }
	mov B, files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, stashed
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L3188:
	mov A, B
	add SP, 2
	.loc 7 1854 0
	# }
	.loc 7 1849 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector1
	.L3189:
	mov A, B
	add SP, 1
	mov B, files
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stream_unstash:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1858 0
	# }
	.loc 7 1690 0
	# }
	mov B, stashed
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3190
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_pop
	.L3190:
	mov A, B
	add SP, 1
	mov B, files
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
dumpstack:
	.long 0
	.data 0
dumpsource:
	.long 1
	.data 0
TAB:
	.long 8
	.data 0
functions:
	.data 1
	.L3191:
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L3191
	.data
	stackpos:

	.long 0
	.data
	outputfp:

	.long 0
	.data
	is_main:

	.long 0
	.data 0
source_files:
	.data 1
	.L3192:
	.long 0
	.long 0
	.data 0
	.long .L3192
	.data 0
source_lines:
	.data 1
	.L3193:
	.long 0
	.long 0
	.data 0
	.long .L3193
	.data 0
last_loc:
	.data 1
	.L3194:
	.string ""
	.data 0
	.long .L3194
	.text
get_caller_list:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1928 0
	# }
	.loc 7 1921 0
	#     for (int i = 0; i < vec_len(functions); i++) {
	mov A, 0
	mov B, SP
	mov A, .L3195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L3195:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1925 0
	#     }
	.loc 7 1922 0
	#         if (i > 0)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 1925 0
	#     }
	.L417:
	.loc 7 1922 0
	#         if (i > 0)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, functions
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3196:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3197, A, 0
	jmp .L3198
	.L3197:
	.loc 7 1925 0
	#     }
	jmp .L419
	.L3198:
	.loc 7 1923 0
	#             buf_printf(b, " -> ");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1922 0
	#         if (i > 0)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3199, A, 0
	.loc 7 1923 0
	#             buf_printf(b, " -> ");
.data
	.L3200:
	.string " -> "
.text
	mov A, .L3200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1921 0
	#     for (int i = 0; i < vec_len(functions); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L3201:
	mov A, B
	add SP, 2
	.L3199:
	.loc 7 1925 0
	#     }
	.loc 7 1922 0
	#         if (i > 0)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, functions
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L3202:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1925 0
	#     }
.data
	.L3203:
	.string "%s"
.text
	mov A, .L3203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1921 0
	#     for (int i = 0; i < vec_len(functions); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_printf
	.L3204:
	mov A, B
	add SP, 3
	.loc 7 1925 0
	#     }
	.L418:
	.loc 7 1922 0
	#         if (i > 0)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1925 0
	#     }
	jmp .L417
	.L419:
	.loc 7 1927 0
	#     return buf_body(b);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1921 0
	#     for (int i = 0; i < vec_len(functions); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L3205:
	mov A, B
	add SP, 2
	.loc 7 1928 0
	# }
	.loc 7 1921 0
	#     for (int i = 0; i < vec_len(functions); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L3206:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
set_output_file:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1932 0
	# }
	.loc 7 1928 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, outputfp
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
close_output_file:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1936 0
	# }
	.loc 7 1858 0
	# }
	mov B, outputfp
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fclose
	.L3207:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emitf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 262
	.loc 7 1966 0
	# }
	.loc 7 1941 0
	#     int i = 0;
	.loc 7 1942 0
	#     for (char *p = fmt; *p; p++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16776959
	mov A, 0
	store A, B
	.loc 7 1949 0
	#         }
	.loc 7 1943 0
	#         assert(i < sizeof(buf) - 3);
	mov A, 0
	mov B, SP
	.loc 7 1936 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16776958
	store A, B
	.loc 7 1949 0
	#         }
	.L420:
	.loc 7 1943 0
	#         assert(i < sizeof(buf) - 3);
	mov B, BP
	add B, 16776958
	load A, B
	mov B, A
	load A, B
	jeq .L3208, A, 0
	jmp .L3209
	.L3208:
	.loc 7 1949 0
	#         }
	jmp .L422
	.L3209:
	.loc 12 12 0
	#     }                                           \
	.L423:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 1942 0
	#     for (char *p = fmt; *p; p++) {
	mov B, BP
	add B, 16776959
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L3210, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3211:
	.string "assertion failed: i < sizeof(buf) - 3\n"
.text
	mov A, .L3211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3212:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3210:
	mov A, 0
	jeq .L3213, A, 0
	jmp .L423
	.L3213:
	.L424:
	.loc 7 1949 0
	#         }
	.loc 7 1945 0
	#             buf[i++] = '%';
	.loc 7 1943 0
	#         assert(i < sizeof(buf) - 3);
	mov B, BP
	add B, 16776958
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1945 0
	#             buf[i++] = '%';
	mov A, 35
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3214, A, 0
	.loc 7 1947 0
	#         } else {
	.loc 7 1946 0
	#             buf[i++] = '%';
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1941 0
	#     int i = 0;
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1946 0
	#             buf[i++] = '%';
	.loc 7 1942 0
	#     for (char *p = fmt; *p; p++) {
	mov B, BP
	add B, 16776959
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16776959
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1947 0
	#         } else {
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1941 0
	#     int i = 0;
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1947 0
	#         } else {
	.loc 7 1942 0
	#     for (char *p = fmt; *p; p++) {
	mov B, BP
	add B, 16776959
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16776959
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L3215
	.L3214:
	.loc 7 1949 0
	#         }
	.loc 7 1943 0
	#         assert(i < sizeof(buf) - 3);
	mov B, BP
	add B, 16776958
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1949 0
	#         }
	.loc 7 1941 0
	#     int i = 0;
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1949 0
	#         }
	.loc 7 1942 0
	#     for (char *p = fmt; *p; p++) {
	mov B, BP
	add B, 16776959
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16776959
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L3215:
	.loc 7 1949 0
	#         }
	.L421:
	.loc 7 1943 0
	#         assert(i < sizeof(buf) - 3);
	mov B, BP
	add B, 16776958
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16776958
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1949 0
	#         }
	jmp .L420
	.L422:
	.loc 7 1952 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1941 0
	#     int i = 0;
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1942 0
	#     for (char *p = fmt; *p; p++) {
	mov B, BP
	add B, 16776959
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1954 0
	#     va_start(args, fmt);
	.loc 7 1955 0
	#     int col = vfprintf(outputfp, buf, args);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16776957
	store A, B
	.loc 7 1956 0
	#     va_end(args);
	mov A, 0
	mov B, SP
	.loc 7 1954 0
	#     va_start(args, fmt);
	mov B, BP
	add B, 16776957
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1956 0
	#     va_end(args);
	.loc 7 1941 0
	#     int i = 0;
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, outputfp
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vfprintf
	.L3216:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16776956
	store A, B
	.loc 7 1964 0
	#     }
	.loc 7 1858 0
	# }
	mov B, dumpstack
	load A, B
	jeq .L3217, A, 0
	.loc 7 1964 0
	#     }
	.loc 7 1960 0
	#             if (*p == '\t')
	mov A, 0
	mov B, SP
	.loc 7 1936 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16776955
	store A, B
	.loc 7 1960 0
	#             if (*p == '\t')
	.L425:
	mov B, BP
	add B, 16776955
	load A, B
	mov B, A
	load A, B
	jeq .L3218, A, 0
	jmp .L3219
	.L3218:
	jmp .L427
	.L3219:
	mov B, BP
	add B, 16776955
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3220, A, 0
	.loc 7 1956 0
	#     va_end(args);
	mov B, BP
	add B, 16776956
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1960 0
	#             if (*p == '\t')
	.loc 7 1858 0
	# }
	mov B, TAB
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1960 0
	#             if (*p == '\t')
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16776956
	store A, B
	.L3220:
	.L426:
	mov B, BP
	add B, 16776955
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16776955
	store A, B
	load A, SP
	add SP, 1
	jmp .L425
	.L427:
	.loc 7 1963 0
	#         fprintf(outputfp, "%*c %s:%d", space, '#', get_caller_list(), line);
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 28
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1956 0
	#     va_end(args);
	mov B, BP
	add B, 16776956
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3221, A, 0
	.loc 7 1963 0
	#         fprintf(outputfp, "%*c %s:%d", space, '#', get_caller_list(), line);
	mov A, 30
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1956 0
	#     va_end(args);
	mov B, BP
	add B, 16776956
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L3222
	.L3221:
	.loc 7 1963 0
	#         fprintf(outputfp, "%*c %s:%d", space, '#', get_caller_list(), line);
	mov A, 2
	.L3222:
	mov B, BP
	add B, 16776954
	store A, B
	.loc 7 1964 0
	#     }
	.loc 7 1936 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1964 0
	#     }
	mov A, .L3223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_caller_list
	.L3223:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 35
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1963 0
	#         fprintf(outputfp, "%*c %s:%d", space, '#', get_caller_list(), line);
	mov B, BP
	add B, 16776954
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1964 0
	#     }
.data
	.L3224:
	.string "%*c %s:%d"
.text
	mov A, .L3224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, outputfp
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L3225:
	mov A, B
	add SP, 6
	.L3217:
	.loc 7 1966 0
	# }
.data
	.L3226:
	.string "\n"
.text
	mov A, .L3226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, outputfp
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L3227:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_nostack:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1975 0
	# }
	.loc 7 1970 0
	#     va_list args;
.data
	.L3228:
	.string "\t"
.text
	mov A, .L3228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, outputfp
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L3229:
	mov A, B
	add SP, 2
	.loc 7 1971 0
	#     va_start(args, fmt);
	.loc 7 1972 0
	#     vfprintf(outputfp, fmt, args);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1973 0
	#     va_end(args);
	.loc 7 1971 0
	#     va_start(args, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1966 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, outputfp
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3230
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vfprintf
	.L3230:
	mov A, B
	add SP, 3
	.loc 7 1975 0
	# }
.data
	.L3231:
	.string "\n"
.text
	mov A, .L3231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, outputfp
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L3232:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
push:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1985 0
	# }
	.loc 12 12 0
	#     }                                           \
	.L428:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
.data
	.L3233:
	.string "D"
.text
	mov A, .L3233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1975 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L3234:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L3235, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3236:
	.string "assertion failed: strcmp(reg, \"D\")\n"
.text
	mov A, .L3236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3237:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3235:
	mov A, 0
	jeq .L3238, A, 0
	jmp .L428
	.L3238:
	.L429:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3239:
	.string "\tmov D, SP"
.text
	mov A, .L3239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3240:
	mov A, B
	add SP, 2
.data
	.L3241:
	.string "\tadd D, -1"
.text
	mov A, .L3241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3242:
	mov A, B
	add SP, 2
	.loc 7 1975 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3243:
	.string "\tstore %s, D"
.text
	mov A, .L3243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3244:
	mov A, B
	add SP, 3
.data
	.L3245:
	.string "\tmov SP, D"
.text
	mov A, .L3245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3246:
	mov A, B
	add SP, 2
	.loc 7 1985 0
	# }
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1985 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, stackpos
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 12 12 0
	#     }                                           \
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 1985 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3247:
	.string "\tload %s, SP"
.text
	mov A, .L3247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3248:
	mov A, B
	add SP, 3
	.loc 7 1985 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3249:
	.string "\tadd SP, 1"
.text
	mov A, .L3249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3250:
	mov A, B
	add SP, 3
	.loc 7 1992 0
	#     assert(stackpos >= 0);
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1992 0
	#     assert(stackpos >= 0);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, stackpos
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L430:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	eq A, 0
	jeq .L3251, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3252:
	.string "assertion failed: stackpos >= 0\n"
.text
	mov A, .L3252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3253:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3251:
	mov A, 0
	jeq .L3254, A, 0
	jmp .L430
	.L3254:
	.L431:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_gload:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2032 0
	#     }
	.loc 7 2028 0
	#         emit("mov A, %s", label);
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3255, A, 0
	.loc 7 2032 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3256:
	.string "\tmov A, %s"
.text
	mov A, .L3256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3257:
	mov A, B
	add SP, 3
	.loc 7 2030 0
	#             emit("add A, %d", MOD24(off));
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 4
	load A, B
	jeq .L3258, A, 0
	.loc 7 2030 0
	#             emit("add A, %d", MOD24(off));
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2030 0
	#             emit("add A, %d", MOD24(off));
.data
	.L3259:
	.string "\tadd A, %d"
.text
	mov A, .L3259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3260
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3260:
	mov A, B
	add SP, 3
	.L3258:
	.loc 7 2032 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3255:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3261:
	.string "\tmov B, %s"
.text
	mov A, .L3261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3262:
	mov A, B
	add SP, 3
	.loc 7 2035 0
	#         emit("add B, %d", MOD24(off));
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 4
	load A, B
	jeq .L3263, A, 0
	.loc 7 2035 0
	#         emit("add B, %d", MOD24(off));
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2035 0
	#         emit("add B, %d", MOD24(off));
.data
	.L3264:
	.string "\tadd B, %d"
.text
	mov A, .L3264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2036
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3265
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3265:
	mov A, B
	add SP, 3
	.L3263:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3266:
	.string "\tload A, B"
.text
	mov A, .L3266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3267:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_intcast:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_toint:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3268, A, 0
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
.data
	.L3269:
	.string "\tcvttss2si #xmm0, #eax"
.text
	mov A, .L3269
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3270:
	mov A, B
	add SP, 2
	jmp .L3271
	.L3268:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3272, A, 0
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
.data
	.L3273:
	.string "\tcvttsd2si #xmm0, #eax"
.text
	mov A, .L3273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3274:
	mov A, B
	add SP, 2
	.L3272:
	.L3271:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_lload:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2056 0
	#         emit("mov A, %s", base);
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3275, A, 0
	.loc 7 2058 0
	#             emit("add A, %d", MOD24(off));
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3276:
	.string "\tmov A, %s"
.text
	mov A, .L3276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3277:
	mov A, B
	add SP, 3
	.loc 7 2058 0
	#             emit("add A, %d", MOD24(off));
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 4
	load A, B
	jeq .L3278, A, 0
	.loc 7 2058 0
	#             emit("add A, %d", MOD24(off));
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2058 0
	#             emit("add A, %d", MOD24(off));
.data
	.L3279:
	.string "\tadd A, %d"
.text
	mov A, .L3279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3280:
	mov A, B
	add SP, 3
	.L3278:
	jmp .L3281
	.L3275:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2058 0
	#             emit("add A, %d", MOD24(off));
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3282, A, 0
	.loc 12 12 0
	#     }                                           \
	.L432:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L3283, A, 0
.data
	.L3284:
	.string "float"
.text
	mov A, .L3284
	mov B, A
	ne B, 0
	.L3283:
	mov A, B
	eq A, 0
	jeq .L3285, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3286:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L3286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3287:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3285:
	mov A, 0
	jeq .L3288, A, 0
	jmp .L432
	.L3288:
	.L433:
	jmp .L3289
	.L3282:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 12 12 0
	#     }                                           \
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3290, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3290:
	mov A, B
	jeq .L3291, A, 0
	.loc 12 12 0
	#     }                                           \
	.L434:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L3292, A, 0
.data
	.L3293:
	.string "float"
.text
	mov A, .L3293
	mov B, A
	ne B, 0
	.L3292:
	mov A, B
	eq A, 0
	jeq .L3294, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3295:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L3295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3296:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3294:
	mov A, 0
	jeq .L3297, A, 0
	jmp .L434
	.L3297:
	.L435:
	jmp .L3298
	.L3291:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3299:
	.string "\tmov B, %s"
.text
	mov A, .L3299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3300:
	mov A, B
	add SP, 3
	.loc 7 2066 0
	#             emit("add B, %d", MOD24(off));
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 4
	load A, B
	jeq .L3301, A, 0
	.loc 7 2066 0
	#             emit("add B, %d", MOD24(off));
	.loc 7 2048 0
	#         emit("cvttss2si #xmm0, #eax");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2066 0
	#             emit("add B, %d", MOD24(off));
.data
	.L3302:
	.string "\tadd B, %d"
.text
	mov A, .L3302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3303:
	mov A, B
	add SP, 3
	.L3301:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3304:
	.string "\tload A, B"
.text
	mov A, .L3304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3305:
	mov A, B
	add SP, 2
	.L3298:
	.L3289:
	.L3281:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
maybe_convert_bool:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2073 0
	#         emit("ne A, 0");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3306, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3307:
	.string "\tne A, 0"
.text
	mov A, .L3307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3308:
	mov A, B
	add SP, 2
	.L3306:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_gsave:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 12 12 0
	#     }                                           \
	.L436:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	eq A, 0
	jeq .L3309, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3310:
	.string "assertion failed: ty->kind != KIND_ARRAY\n"
.text
	mov A, .L3310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3311:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3309:
	mov A, 0
	jeq .L3312, A, 0
	jmp .L436
	.L3312:
	.L437:
	.loc 7 2081 0
	# #if 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_convert_bool
	.L3313:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3314:
	.string "\tmov B, %s"
.text
	mov A, .L3314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3315:
	mov A, B
	add SP, 3
	.loc 7 2088 0
	#         emit("add B, %d", MOD24(off));
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 4
	load A, B
	jeq .L3316, A, 0
	.loc 7 2088 0
	#         emit("add B, %d", MOD24(off));
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2088 0
	#         emit("add B, %d", MOD24(off));
.data
	.L3317:
	.string "\tadd B, %d"
.text
	mov A, .L3317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3318:
	mov A, B
	add SP, 3
	.L3316:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3319:
	.string "\tstore A, B"
.text
	mov A, .L3319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3320:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_lsave:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2095 0
	#         assert_float();
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3321, A, 0
	.loc 12 12 0
	#     }                                           \
	.L438:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L3322, A, 0
.data
	.L3323:
	.string "float"
.text
	mov A, .L3323
	mov B, A
	ne B, 0
	.L3322:
	mov A, B
	eq A, 0
	jeq .L3324, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3325:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L3325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3326:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3324:
	mov A, 0
	jeq .L3327, A, 0
	jmp .L438
	.L3327:
	.L439:
	jmp .L3328
	.L3321:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 12 12 0
	#     }                                           \
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3329, A, 0
	.loc 12 12 0
	#     }                                           \
	.L440:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L3330, A, 0
.data
	.L3331:
	.string "float"
.text
	mov A, .L3331
	mov B, A
	ne B, 0
	.L3330:
	mov A, B
	eq A, 0
	jeq .L3332, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3333:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L3333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3334:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3332:
	mov A, 0
	jeq .L3335, A, 0
	jmp .L440
	.L3335:
	.L441:
	jmp .L3336
	.L3329:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3337:
	.string "\tmov B, BP"
.text
	mov A, .L3337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3338:
	mov A, B
	add SP, 2
	.loc 7 2101 0
	#             emit("add B, %d", MOD24(off));
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	jeq .L3339, A, 0
	.loc 7 2101 0
	#             emit("add B, %d", MOD24(off));
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2101 0
	#             emit("add B, %d", MOD24(off));
.data
	.L3340:
	.string "\tadd B, %d"
.text
	mov A, .L3340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3341:
	mov A, B
	add SP, 3
	.L3339:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3342:
	.string "\tstore A, B"
.text
	mov A, .L3342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3343:
	mov A, B
	add SP, 2
	.L3336:
	.L3328:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_emit_assign_deref:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2116 0
	# }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3344:
	.string "\tmov C, A"
.text
	mov A, .L3344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2109
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3345:
	mov A, B
	add SP, 2
.data
	.L3346:
	.string "\tload A, SP"
.text
	mov A, .L3346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2110
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3347:
	mov A, B
	add SP, 2
.data
	.L3348:
	.string "\tmov B, A"
.text
	mov A, .L3348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3349:
	mov A, B
	add SP, 2
.data
	.L3350:
	.string "\tmov A, C"
.text
	mov A, .L3350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3351:
	mov A, B
	add SP, 2
	.loc 7 2113 0
	#         emit("add A, %d", MOD24(off));
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	jeq .L3352, A, 0
	.loc 7 2113 0
	#         emit("add A, %d", MOD24(off));
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2113 0
	#         emit("add A, %d", MOD24(off));
.data
	.L3353:
	.string "\tadd A, %d"
.text
	mov A, .L3353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2114
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3354:
	mov A, B
	add SP, 3
	.L3352:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3355:
	.string "\tstore B, A"
.text
	mov A, .L3355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2115
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3356:
	mov A, B
	add SP, 2
	.loc 7 2116 0
	# }
.data
	.L3357:
	.string "A"
.text
	mov A, .L3357
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3358:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_assign_deref:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2123 0
	# }
	.loc 7 2121 0
	#     emit_expr(var->operand);
.data
	.L3359:
	.string "A"
.text
	mov A, .L3359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3360:
	mov A, B
	add SP, 1
	.loc 7 2122 0
	#     do_emit_assign_deref(var->operand->ty->ptr, 0);
	.loc 7 2116 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3361:
	mov A, B
	add SP, 1
	.loc 7 2123 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2116 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_emit_assign_deref
	.L3362:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_pointer_arith:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2130 0
	#     push("B");
	.loc 7 2123 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3363:
	mov A, B
	add SP, 1
	.loc 7 2131 0
	#     push("A");
.data
	.L3364:
	.string "B"
.text
	mov A, .L3364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3365:
	mov A, B
	add SP, 1
	.loc 7 2132 0
	#     emit_expr(right);
.data
	.L3366:
	.string "A"
.text
	mov A, .L3366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3367:
	mov A, B
	add SP, 1
	.loc 7 2133 0
	# 
	.loc 7 2123 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3368:
	mov A, B
	add SP, 1
	.loc 7 2135 0
	#         emit("add A, A");
	.loc 7 2123 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2135 0
	#         emit("add A, A");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3369, A, 0
.data
	.L3370:
	.string "\tadd A, A"
.text
	mov A, .L3370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3371:
	mov A, B
	add SP, 2
	.L3369:
	.loc 7 2143 0
	#     }
	.loc 7 2137 0
	#         push("A");
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2123 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3372, A, 0
	.loc 7 2143 0
	#     }
	.loc 7 2138 0
	#         emit("mov A, %d", left->ty->ptr->size);
.data
	.L3373:
	.string "A"
.text
	mov A, .L3373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3374:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2123 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3375:
	.string "\tmov A, %d"
.text
	mov A, .L3375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3376:
	mov A, B
	add SP, 3
	.loc 7 2140 0
	#         emit_call_builtin("__builtin_mul");
.data
	.L3377:
	.string "A"
.text
	mov A, .L3377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3378:
	mov A, B
	add SP, 1
	.loc 7 2141 0
	#         emit("add SP, 2");
.data
	.L3379:
	.string "__builtin_mul"
.text
	mov A, .L3379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L3380:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3381:
	.string "\tadd SP, 2"
.text
	mov A, .L3381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3382:
	mov A, B
	add SP, 2
	.loc 7 2143 0
	#     }
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2143 0
	#     }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, stackpos
	store A, B
	.L3372:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3383:
	.string "\tmov B, A"
.text
	mov A, .L3383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3384:
	mov A, B
	add SP, 2
	.loc 7 2147 0
	#     switch (kind) {
.data
	.L3385:
	.string "A"
.text
	mov A, .L3385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3386:
	mov A, B
	add SP, 1
	.loc 7 2151 0
	#     }
	.loc 7 2148 0
	#     case '+': emit("add A, B"); break;
	.loc 7 2123 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2151 0
	#     }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3387, A, 0
	jmp .L443
	.L3387:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3388, A, 0
	jmp .L444
	.L3388:
	jmp .L445
	.loc 7 2149 0
	#     case '-': emit("sub A, B"); break;
	.L443:
.data
	.L3389:
	.string "\tadd A, B"
.text
	mov A, .L3389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3390
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3390:
	mov A, B
	add SP, 2
	jmp .L442
	.loc 7 2150 0
	#     default: error("invalid operator '%d'", kind);
	.L444:
.data
	.L3391:
	.string "\tsub A, B"
.text
	mov A, .L3391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2150
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3392:
	mov A, B
	add SP, 2
	jmp .L442
	.loc 7 2151 0
	#     }
	.L445:
	.loc 7 2123 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2151 0
	#     }
.data
	.L3393:
	.string "invalid operator '%d'"
.text
	mov A, .L3393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3394:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3395:
	mov A, B
	add SP, 4
	.L442:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3396:
	.string "\tmov C, A"
.text
	mov A, .L3396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3397:
	mov A, B
	add SP, 2
	.loc 7 2154 0
	#     emit("mov B, A");
.data
	.L3398:
	.string "A"
.text
	mov A, .L3398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3399:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3400:
	.string "\tmov B, A"
.text
	mov A, .L3400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3401:
	mov A, B
	add SP, 2
.data
	.L3402:
	.string "\tmov A, C"
.text
	mov A, .L3402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3403:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_zero_filler:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
.data
	.L3404:
	.string "\tmov A, 0"
.text
	mov A, .L3404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3405:
	mov A, B
	add SP, 2
.data
	.L3406:
	.string "\tmov B, SP"
.text
	mov A, .L3406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3407:
	mov A, B
	add SP, 2
	.L446:
	.loc 7 2163 0
	#         emit("store A, B");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3408, A, 0
	jmp .L3409
	.L3408:
	jmp .L448
	.L3409:
.data
	.L3410:
	.string "\tstore A, B"
.text
	mov A, .L3410
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3411:
	mov A, B
	add SP, 2
.data
	.L3412:
	.string "\tadd B, 1"
.text
	mov A, .L3412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3413:
	mov A, B
	add SP, 2
	.L447:
	.loc 7 2163 0
	#         emit("store A, B");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	jmp .L446
	.L448:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ensure_lvar_init:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2174 0
	# }
	.loc 12 12 0
	#     }                                           \
	.L449:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L3414, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3415:
	.string "assertion failed: node->kind == AST_LVAR\n"
.text
	mov A, .L3415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3416
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3416:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3414:
	mov A, 0
	jeq .L3417, A, 0
	jmp .L449
	.L3417:
	.L450:
	.loc 7 2172 0
	#         emit_decl_init(node->lvarinit, node->loff, node->ty->size);
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L3418, A, 0
	.loc 7 2172 0
	#         emit_decl_init(node->lvarinit, node->loff, node->ty->size);
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2172 0
	#         emit_decl_init(node->lvarinit, node->loff, node->ty->size);
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2172 0
	#         emit_decl_init(node->lvarinit, node->loff, node->ty->size);
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_decl_init
	.L3419:
	mov A, B
	add SP, 3
	.L3418:
	.loc 7 2174 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_assign_struct_ref:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	.loc 7 2179 0
	#     case AST_LVAR:
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3420, A, 0
	jmp .L452
	.L3420:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3421, A, 0
	jmp .L453
	.L3421:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 274
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3422, A, 0
	jmp .L454
	.L3422:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 268
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3423, A, 0
	jmp .L455
	.L3423:
	jmp .L456
	.loc 7 2180 0
	#         ensure_lvar_init(struc);
	.L452:
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_lvar_init
	.L3424:
	mov A, B
	add SP, 1
	.loc 7 2182 0
	#         break;
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2182 0
	#         break;
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_lsave
	.L3425:
	mov A, B
	add SP, 2
	.loc 7 2183 0
	#     case AST_GVAR:
	jmp .L451
	.loc 7 2184 0
	#         emit_gsave(struc->glabel, field, field->offset + off);
	.L453:
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2184 0
	#         emit_gsave(struc->glabel, field, field->offset + off);
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_gsave
	.L3426:
	mov A, B
	add SP, 3
	.loc 7 2186 0
	#     case AST_STRUCT_REF:
	jmp .L451
	.loc 7 2187 0
	#         emit_assign_struct_ref(struc->struc, field, off + struc->ty->offset);
	.L454:
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2187 0
	#         emit_assign_struct_ref(struc->struc, field, off + struc->ty->offset);
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2187 0
	#         emit_assign_struct_ref(struc->struc, field, off + struc->ty->offset);
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3427
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_assign_struct_ref
	.L3427:
	mov A, B
	add SP, 3
	.loc 7 2189 0
	#     case AST_DEREF:
	jmp .L451
	.loc 7 2190 0
	#         push("A");
	.L455:
.data
	.L3428:
	.string "A"
.text
	mov A, .L3428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3429:
	mov A, B
	add SP, 1
	.loc 7 2192 0
	#         do_emit_assign_deref(field, field->offset + off);
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3430:
	mov A, B
	add SP, 1
	.loc 7 2193 0
	#         break;
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_emit_assign_deref
	.L3431:
	mov A, B
	add SP, 2
	.loc 7 2194 0
	#     default:
	jmp .L451
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	.L456:
	.loc 7 2174 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L3432:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
.data
	.L3433:
	.string "internal error: %s"
.text
	mov A, .L3433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3434:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3435:
	mov A, B
	add SP, 4
	.L451:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_load_struct_ref:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	.loc 7 2202 0
	#     case AST_LVAR:
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3436, A, 0
	jmp .L458
	.L3436:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3437, A, 0
	jmp .L459
	.L3437:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 274
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3438, A, 0
	jmp .L460
	.L3438:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 268
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3439, A, 0
	jmp .L461
	.L3439:
	jmp .L462
	.loc 7 2203 0
	#         ensure_lvar_init(struc);
	.L458:
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_lvar_init
	.L3440:
	mov A, B
	add SP, 1
	.loc 7 2205 0
	#         break;
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2205 0
	#         break;
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2205 0
	#         break;
.data
	.L3441:
	.string "BP"
.text
	mov A, .L3441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_lload
	.L3442:
	mov A, B
	add SP, 3
	.loc 7 2206 0
	#     case AST_GVAR:
	jmp .L457
	.loc 7 2207 0
	#         emit_gload(field, struc->glabel, field->offset + off);
	.L459:
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2207 0
	#         emit_gload(field, struc->glabel, field->offset + off);
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_gload
	.L3443:
	mov A, B
	add SP, 3
	.loc 7 2209 0
	#     case AST_STRUCT_REF:
	jmp .L457
	.loc 7 2210 0
	#         emit_load_struct_ref(struc->struc, field, struc->ty->offset + off);
	.L460:
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2210 0
	#         emit_load_struct_ref(struc->struc, field, struc->ty->offset + off);
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_load_struct_ref
	.L3444:
	mov A, B
	add SP, 3
	.loc 7 2212 0
	#     case AST_DEREF:
	jmp .L457
	.loc 7 2213 0
	#         emit_expr(struc->operand);
	.L461:
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3445:
	mov A, B
	add SP, 1
	.loc 7 2215 0
	#         break;
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2215 0
	#         break;
.data
	.L3446:
	.string "A"
.text
	mov A, .L3446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_lload
	.L3447:
	mov A, B
	add SP, 3
	.loc 7 2216 0
	#     default:
	jmp .L457
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	.L462:
	.loc 7 2195 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L3448:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
.data
	.L3449:
	.string "internal error: %s"
.text
	mov A, .L3449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3450:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3451:
	mov A, B
	add SP, 4
	.L457:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_store:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2232 0
	#     }
	.loc 7 2224 0
	#     case AST_DEREF: emit_assign_deref(var); break;
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2232 0
	#     }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 268
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3452, A, 0
	jmp .L464
	.L3452:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 274
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3453, A, 0
	jmp .L465
	.L3453:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3454, A, 0
	jmp .L466
	.L3454:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3455, A, 0
	jmp .L467
	.L3455:
	jmp .L468
	.loc 7 2225 0
	#     case AST_STRUCT_REF: emit_assign_struct_ref(var->struc, var->ty, 0); break;
	.L464:
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3456
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_assign_deref
	.L3456:
	mov A, B
	add SP, 1
	.loc 7 2225 0
	#     case AST_STRUCT_REF: emit_assign_struct_ref(var->struc, var->ty, 0); break;
	jmp .L463
	.loc 7 2226 0
	#     case AST_LVAR:
	.L465:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2226 0
	#     case AST_LVAR:
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_assign_struct_ref
	.L3457:
	mov A, B
	add SP, 3
	.loc 7 2226 0
	#     case AST_LVAR:
	jmp .L463
	.loc 7 2227 0
	#         ensure_lvar_init(var);
	.L466:
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_lvar_init
	.L3458:
	mov A, B
	add SP, 1
	.loc 7 2229 0
	#         break;
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2229 0
	#         break;
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3459
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_lsave
	.L3459:
	mov A, B
	add SP, 2
	.loc 7 2230 0
	#     case AST_GVAR: emit_gsave(var->glabel, var->ty, 0); break;
	jmp .L463
	.loc 7 2231 0
	#     default: error("internal error");
	.L467:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2231 0
	#     default: error("internal error");
	.loc 7 2217 0
	#         error("internal error: %s", node2s(struc));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3460
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_gsave
	.L3460:
	mov A, B
	add SP, 3
	.loc 7 2231 0
	#     default: error("internal error");
	jmp .L463
	.loc 7 2232 0
	#     }
	.L468:
.data
	.L3461:
	.string "internal error"
.text
	mov A, .L3461
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3462:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3463:
	mov A, B
	add SP, 3
	.L463:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_to_bool:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2238 0
	#         assert_float();
	.loc 7 2232 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3464
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L3464:
	mov A, B
	add SP, 1
	jeq .L3465, A, 0
	.loc 12 12 0
	#     }                                           \
	.L469:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L3466, A, 0
.data
	.L3467:
	.string "float"
.text
	mov A, .L3467
	mov B, A
	ne B, 0
	.L3466:
	mov A, B
	eq A, 0
	jeq .L3468, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3469:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L3469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3470:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3468:
	mov A, 0
	jeq .L3471, A, 0
	jmp .L469
	.L3471:
	.L470:
	jmp .L3472
	.L3465:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3473:
	.string "\tne A, 0"
.text
	mov A, .L3473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3474
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3474:
	mov A, B
	add SP, 2
	.L3472:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_comp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2254 0
	#     }
	.loc 7 2247 0
	#         assert_float();
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3475
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L3475:
	mov A, B
	add SP, 1
	jeq .L3476, A, 0
	.loc 12 12 0
	#     }                                           \
	.L471:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L3477, A, 0
.data
	.L3478:
	.string "float"
.text
	mov A, .L3478
	mov B, A
	ne B, 0
	.L3477:
	mov A, B
	eq A, 0
	jeq .L3479, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3480:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L3480
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3481:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3479:
	mov A, 0
	jeq .L3482, A, 0
	jmp .L471
	.L3482:
	.L472:
	jmp .L3483
	.L3476:
	.loc 7 2254 0
	#     }
	.loc 7 2250 0
	#         push("A");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3484:
	mov A, B
	add SP, 1
	.loc 7 2251 0
	#         emit_expr(node->right);
.data
	.L3485:
	.string "A"
.text
	mov A, .L3485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3486:
	mov A, B
	add SP, 1
	.loc 7 2252 0
	#         emit("mov B, A");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3487:
	mov A, B
	add SP, 1
.data
	.L3488:
	.string "\tmov B, A"
.text
	mov A, .L3488
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3489
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3489:
	mov A, B
	add SP, 2
	.loc 7 2254 0
	#     }
.data
	.L3490:
	.string "A"
.text
	mov A, .L3490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3491:
	mov A, B
	add SP, 1
	.L3483:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3492:
	.string "\t%s A, B"
.text
	mov A, .L3492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3493
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3493:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_binop_int_arith:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2297 0
	#     }
	.loc 7 2261 0
	#     push("A");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3494
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3494:
	mov A, B
	add SP, 1
	.loc 7 2262 0
	#     emit_expr(node->right);
.data
	.L3495:
	.string "A"
.text
	mov A, .L3495
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3496
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3496:
	mov A, B
	add SP, 1
	.loc 7 2263 0
	#     emit("mov B, A");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3497:
	mov A, B
	add SP, 1
.data
	.L3498:
	.string "\tmov B, A"
.text
	mov A, .L3498
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3499
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3499:
	mov A, B
	add SP, 2
	.loc 7 2265 0
	#     switch (node->kind) {
.data
	.L3500:
	.string "A"
.text
	mov A, .L3500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3501:
	mov A, B
	add SP, 1
	.loc 7 2297 0
	#     }
	.loc 7 2266 0
	#         case '+':
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2297 0
	#     }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3502, A, 0
	jmp .L474
	.L3502:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3503, A, 0
	jmp .L475
	.L3503:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 42
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3504, A, 0
	jmp .L476
	.L3504:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3505, A, 0
	jmp .L477
	.L3505:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3506, A, 0
	jmp .L478
	.L3506:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 94
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3507, A, 0
	jmp .L479
	.L3507:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 308
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3508, A, 0
	jmp .L480
	.L3508:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 309
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3509, A, 0
	jmp .L481
	.L3509:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 280
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3510, A, 0
	jmp .L482
	.L3510:
	jmp .L483
	.loc 7 2267 0
	#             emit("add A, B");
	.L474:
.data
	.L3511:
	.string "\tadd A, B"
.text
	mov A, .L3511
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3512:
	mov A, B
	add SP, 2
	.loc 7 2269 0
	#         case '-':
	jmp .L473
	.loc 7 2270 0
	#             emit("sub A, B");
	.L475:
.data
	.L3513:
	.string "\tsub A, B"
.text
	mov A, .L3513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2271
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3514:
	mov A, B
	add SP, 2
	.loc 7 2272 0
	#         case '*':
	jmp .L473
	.loc 7 2273 0
	#         case '/':
	.L476:
	.L477:
	.L478:
	.L479:
	.L480:
	.L481:
	.L482:
.data
	.L3515:
	.string "B"
.text
	mov A, .L3515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3516:
	mov A, B
	add SP, 1
	.loc 7 2281 0
	#             if (node->kind == '*')
.data
	.L3517:
	.string "A"
.text
	mov A, .L3517
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3518
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3518:
	mov A, B
	add SP, 1
	.loc 7 2282 0
	#                 emit_call_builtin("__builtin_mul");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2282 0
	#                 emit_call_builtin("__builtin_mul");
	mov A, 42
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3519, A, 0
.data
	.L3520:
	.string "__builtin_mul"
.text
	mov A, .L3520
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L3521:
	mov A, B
	add SP, 1
	jmp .L3522
	.L3519:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2282 0
	#                 emit_call_builtin("__builtin_mul");
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3523, A, 0
.data
	.L3524:
	.string "__builtin_div"
.text
	mov A, .L3524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L3525:
	mov A, B
	add SP, 1
	jmp .L3526
	.L3523:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2282 0
	#                 emit_call_builtin("__builtin_mul");
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3527, A, 0
.data
	.L3528:
	.string "__builtin_mod"
.text
	mov A, .L3528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L3529:
	mov A, B
	add SP, 1
	jmp .L3530
	.L3527:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2282 0
	#                 emit_call_builtin("__builtin_mul");
	mov A, 94
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3531, A, 0
.data
	.L3532:
	.string "__builtin_xor"
.text
	mov A, .L3532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L3533:
	mov A, B
	add SP, 1
	jmp .L3534
	.L3531:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 308
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3535, A, 0
	.loc 7 2282 0
	#                 emit_call_builtin("__builtin_mul");
.data
	.L3536:
	.string "__builtin_shl"
.text
	mov A, .L3536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L3537:
	mov A, B
	add SP, 1
	jmp .L3538
	.L3535:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 309
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3539, A, 0
	.loc 7 2282 0
	#                 emit_call_builtin("__builtin_mul");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 280
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3539:
	mov A, B
	jeq .L3540, A, 0
	.loc 7 2282 0
	#                 emit_call_builtin("__builtin_mul");
.data
	.L3541:
	.string "__builtin_shr"
.text
	mov A, .L3541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L3542:
	mov A, B
	add SP, 1
	.L3540:
	.L3538:
	.L3534:
	.L3530:
	.L3526:
	.L3522:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3543:
	.string "\tadd SP, 2"
.text
	mov A, .L3543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3544:
	mov A, B
	add SP, 2
	.loc 7 2295 0
	#             break;
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2295 0
	#             break;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, stackpos
	store A, B
	.loc 7 2296 0
	#         default: error("invalid operator '%d'", node->kind);
	jmp .L473
	.loc 7 2297 0
	#     }
	.L483:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2297 0
	#     }
.data
	.L3545:
	.string "invalid operator '%d'"
.text
	mov A, .L3545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3546:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3547:
	mov A, B
	add SP, 4
	.L473:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_binop_float_arith:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 12 12 0
	#     }                                           \
	.L484:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L3548, A, 0
.data
	.L3549:
	.string "float"
.text
	mov A, .L3549
	mov B, A
	ne B, 0
	.L3548:
	mov A, B
	eq A, 0
	jeq .L3550, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3551:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L3551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3552:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3550:
	mov A, 0
	jeq .L3553, A, 0
	jmp .L484
	.L3553:
	.L485:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_load_convert:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L3555:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L3554, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3554:
	mov A, B
	jeq .L3556, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
.data
	.L3557:
	.string "\tcvtsi2ss #eax, #xmm0"
.text
	mov A, .L3557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3558:
	mov A, B
	add SP, 2
	jmp .L3559
	.L3556:
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L3561:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L3560, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3560:
	mov A, B
	jeq .L3562, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
.data
	.L3563:
	.string "\tcvtsi2sd #eax, #xmm0"
.text
	mov A, .L3563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3564:
	mov A, B
	add SP, 2
	jmp .L3565
	.L3562:
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L3566, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3566:
	mov A, B
	jeq .L3567, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
.data
	.L3568:
	.string "\tcvtps2pd #xmm0, #xmm0"
.text
	mov A, .L3568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3569:
	mov A, B
	add SP, 2
	jmp .L3570
	.L3567:
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3572, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3572:
	mov A, B
	mov B, 0
	jeq .L3571, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3571:
	mov A, B
	jeq .L3573, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
.data
	.L3574:
	.string "\tcvtpd2ps #xmm0, #xmm0"
.text
	mov A, .L3574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3575:
	mov A, B
	add SP, 2
	jmp .L3576
	.L3573:
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3577, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_to_bool
	.L3578:
	mov A, B
	add SP, 1
	jmp .L3579
	.L3577:
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L3581:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L3580, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L3582:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L3580:
	mov A, B
	jeq .L3583, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_intcast
	.L3584:
	mov A, B
	add SP, 1
	jmp .L3585
	.L3583:
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L3586:
	mov A, B
	add SP, 1
	jeq .L3587, A, 0
	.loc 7 2308 0
	#         emit("cvtsi2ss #eax, #xmm0");
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_toint
	.L3588:
	mov A, B
	add SP, 1
	.L3587:
	.L3585:
	.L3579:
	.L3576:
	.L3570:
	.L3565:
	.L3559:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_ret:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2334 0
	#     }
	.loc 7 1858 0
	# }
	mov B, is_main
	load A, B
	jeq .L3589, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3590:
	.string "\texit"
.text
	mov A, .L3590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3591:
	mov A, B
	add SP, 2
	jmp .L3592
	.L3589:
	.loc 7 2334 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3593:
	.string "\tmov SP, BP"
.text
	mov A, .L3593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3594:
	mov A, B
	add SP, 2
	.loc 7 2330 0
	#         emit("mov BP, A");
.data
	.L3595:
	.string "A"
.text
	mov A, .L3595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3596:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3597:
	.string "\tmov BP, A"
.text
	mov A, .L3597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3598:
	mov A, B
	add SP, 2
	.loc 7 2332 0
	#         emit("jmp A");
.data
	.L3599:
	.string "A"
.text
	mov A, .L3599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3600:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3601:
	.string "\tjmp A"
.text
	mov A, .L3601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3602
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3602:
	mov A, B
	add SP, 2
	.loc 7 2334 0
	#     }
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2334 0
	#     }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, stackpos
	store A, B
	.L3592:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_binop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	.loc 7 2342 0
	#     }
	.loc 7 2340 0
	#         emit_pointer_arith(node->kind, node->left, node->right);
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3603, A, 0
	.loc 7 2342 0
	#     }
	.loc 7 2341 0
	#         return;
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2341 0
	#         return;
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2341 0
	#         return;
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_pointer_arith
	.L3604:
	mov A, B
	add SP, 3
	.loc 7 2342 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3603:
	.loc 7 2348 0
	#     }
	.loc 7 2344 0
	#     case '<': emit_comp("lt", node); return;
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2348 0
	#     }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 60
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3605, A, 0
	jmp .L487
	.L3605:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 301
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3606, A, 0
	jmp .L488
	.L3606:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 304
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3607, A, 0
	jmp .L489
	.L3607:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 307
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3608, A, 0
	jmp .L490
	.L3608:
	jmp .L486
	.loc 7 2345 0
	#     case OP_EQ: emit_comp("eq", node); return;
	.L487:
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2345 0
	#     case OP_EQ: emit_comp("eq", node); return;
.data
	.L3609:
	.string "lt"
.text
	mov A, .L3609
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_comp
	.L3610:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2346 0
	#     case OP_LE: emit_comp("le", node); return;
	.L488:
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2346 0
	#     case OP_LE: emit_comp("le", node); return;
.data
	.L3611:
	.string "eq"
.text
	mov A, .L3611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_comp
	.L3612:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2347 0
	#     case OP_NE: emit_comp("ne", node); return;
	.L489:
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2347 0
	#     case OP_NE: emit_comp("ne", node); return;
.data
	.L3613:
	.string "le"
.text
	mov A, .L3613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3614
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_comp
	.L3614:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2348 0
	#     }
	.L490:
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2348 0
	#     }
.data
	.L3615:
	.string "ne"
.text
	mov A, .L3615
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3616
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_comp
	.L3616:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L486:
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3617
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L3617:
	mov A, B
	add SP, 1
	jeq .L3618, A, 0
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3619
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_binop_int_arith
	.L3619:
	mov A, B
	add SP, 1
	jmp .L3620
	.L3618:
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3621
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L3621:
	mov A, B
	add SP, 1
	jeq .L3622, A, 0
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3623
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_binop_float_arith
	.L3623:
	mov A, B
	add SP, 1
	jmp .L3624
	.L3622:
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	.loc 7 2334 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3625
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L3625:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
.data
	.L3626:
	.string "internal error: %s"
.text
	mov A, .L3626
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3627:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3627
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3628
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3628:
	mov A, B
	add SP, 4
	.L3624:
	.L3620:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_save_literal:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	.loc 7 2359 0
	#     switch (totype->kind) {
	mov A, 0
	mov B, SP
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	.loc 7 2360 0
	#     case KIND_BOOL:
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3629, A, 0
	jmp .L492
	.L3629:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3630, A, 0
	jmp .L493
	.L3630:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3631, A, 0
	jmp .L494
	.L3631:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3632, A, 0
	jmp .L495
	.L3632:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3633, A, 0
	jmp .L496
	.L3633:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3634, A, 0
	jmp .L497
	.L3634:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3635, A, 0
	jmp .L498
	.L3635:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3636, A, 0
	jmp .L499
	.L3636:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3637, A, 0
	jmp .L500
	.L3637:
	jmp .L503
	.loc 7 2361 0
	#         v = !!v;
	.L492:
	.loc 7 2359 0
	#     switch (totype->kind) {
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	eq A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2374 0
	#     }
	.loc 7 2363 0
	#     case KIND_SHORT:
	.L493:
	.loc 7 2374 0
	#     }
	.loc 7 2363 0
	#     case KIND_SHORT:
	.L494:
	.loc 7 2374 0
	#     }
	.loc 7 2363 0
	#     case KIND_SHORT:
	.L495:
	.loc 7 2374 0
	#     }
	.loc 7 2363 0
	#     case KIND_SHORT:
	.L496:
	.loc 7 2374 0
	#     }
	.loc 7 2363 0
	#     case KIND_SHORT:
	.L497:
	.loc 7 2374 0
	#     }
	.loc 7 2363 0
	#     case KIND_SHORT:
	.L498:
	.loc 7 2374 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3638:
	.string "\tmov B, BP"
.text
	mov A, .L3638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3639
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3639:
	mov A, B
	add SP, 2
	.loc 7 2370 0
	#             emit("add B, %d", MOD24(off));
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	mov B, BP
	add B, 4
	load A, B
	jeq .L3640, A, 0
	.loc 7 2370 0
	#             emit("add B, %d", MOD24(off));
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2370 0
	#             emit("add B, %d", MOD24(off));
.data
	.L3641:
	.string "\tadd B, %d"
.text
	mov A, .L3641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3642:
	mov A, B
	add SP, 3
	.L3640:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2359 0
	#     switch (totype->kind) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3643:
	.string "\tmov A, %d"
.text
	mov A, .L3643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3644
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3644:
	mov A, B
	add SP, 3
.data
	.L3645:
	.string "\tstore A, B"
.text
	mov A, .L3645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3646:
	mov A, B
	add SP, 2
	.loc 7 2374 0
	#     }
	jmp .L491
	.loc 12 12 0
	#     }                                           \
	.loc 7 2376 0
	#     case KIND_DOUBLE:
	.L499:
	.loc 12 12 0
	#     }                                           \
	.loc 7 2376 0
	#     case KIND_DOUBLE:
	.L500:
	.loc 12 12 0
	#     }                                           \
	.L501:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L3647, A, 0
.data
	.L3648:
	.string "float"
.text
	mov A, .L3648
	mov B, A
	ne B, 0
	.L3647:
	mov A, B
	eq A, 0
	jeq .L3649, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3650:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L3650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3651:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3649:
	mov A, 0
	jeq .L3652, A, 0
	jmp .L501
	.L3652:
	.L502:
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	.L503:
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3653
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L3653:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	.loc 7 2350 0
	#         emit_binop_int_arith(node);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L3654:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
.data
	.L3655:
	.string "internal error: <%s> <%s> <%d>"
.text
	mov A, .L3655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3656:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3657
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3657:
	mov A, B
	add SP, 6
	.L491:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_addr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2404 0
	#         error("internal error: %s", node2s(node));
	.loc 7 2385 0
	#     case AST_LVAR:
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2404 0
	#         error("internal error: %s", node2s(node));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3658, A, 0
	jmp .L505
	.L3658:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3659, A, 0
	jmp .L506
	.L3659:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 268
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3660, A, 0
	jmp .L507
	.L3660:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 274
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3661, A, 0
	jmp .L508
	.L3661:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 262
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3662, A, 0
	jmp .L509
	.L3662:
	jmp .L510
	.loc 7 2386 0
	#         ensure_lvar_init(node);
	.L505:
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_lvar_init
	.L3663:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3664:
	.string "\tmov A, BP"
.text
	mov A, .L3664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2388
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3665:
	mov A, B
	add SP, 2
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3666:
	.string "\tadd A, %d"
.text
	mov A, .L3666
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3667:
	mov A, B
	add SP, 3
	.loc 7 2390 0
	#     case AST_GVAR:
	jmp .L504
	.loc 7 2391 0
	#         emit("mov A, %s", node->glabel);
	.L506:
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2391 0
	#         emit("mov A, %s", node->glabel);
.data
	.L3668:
	.string "\tmov A, %s"
.text
	mov A, .L3668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3669:
	mov A, B
	add SP, 3
	.loc 7 2393 0
	#     case AST_DEREF:
	jmp .L504
	.loc 7 2394 0
	#         emit_expr(node->operand);
	.L507:
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3670:
	mov A, B
	add SP, 1
	.loc 7 2396 0
	#     case AST_STRUCT_REF:
	jmp .L504
	.loc 7 2397 0
	#         emit_addr(node->struc);
	.L508:
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_addr
	.L3671:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3672:
	.string "\tadd A, %d"
.text
	mov A, .L3672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3673:
	mov A, B
	add SP, 3
	.loc 7 2400 0
	#     case AST_FUNCDESG:
	jmp .L504
	.loc 7 2401 0
	#         emit("mov A, %s", node->fname);
	.L509:
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2401 0
	#         emit("mov A, %s", node->fname);
.data
	.L3674:
	.string "\tmov A, %s"
.text
	mov A, .L3674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3675:
	mov A, B
	add SP, 3
	.loc 7 2403 0
	#     default:
	jmp .L504
	.loc 7 2404 0
	#         error("internal error: %s", node2s(node));
	.L510:
	.loc 7 2379 0
	#         error("internal error: <%s> <%s> <%d>", node2s(node), ty2s(totype), off);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L3676:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2404 0
	#         error("internal error: %s", node2s(node));
.data
	.L3677:
	.string "internal error: %s"
.text
	mov A, .L3677
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3678:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3679:
	mov A, B
	add SP, 4
	.L504:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_copy_struct:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2410 0
	#     push("C");
.data
	.L3680:
	.string "B"
.text
	mov A, .L3680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3681:
	mov A, B
	add SP, 1
	.loc 7 2411 0
	#     emit_addr(right);
.data
	.L3682:
	.string "C"
.text
	mov A, .L3682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3683:
	mov A, B
	add SP, 1
	.loc 7 2412 0
	#     push("A");
	.loc 7 2404 0
	#         error("internal error: %s", node2s(node));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_addr
	.L3684:
	mov A, B
	add SP, 1
	.loc 7 2413 0
	#     emit_addr(left);
.data
	.L3685:
	.string "A"
.text
	mov A, .L3685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3686:
	mov A, B
	add SP, 1
	.loc 7 2414 0
	#     emit("mov C, A");
	.loc 7 2404 0
	#         error("internal error: %s", node2s(node));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_addr
	.L3687:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3688:
	.string "\tmov C, A"
.text
	mov A, .L3688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3689:
	mov A, B
	add SP, 2
	.loc 7 2416 0
	#     emit("mov B, A");
.data
	.L3690:
	.string "A"
.text
	mov A, .L3690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3691:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3692:
	.string "\tmov B, A"
.text
	mov A, .L3692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3693:
	mov A, B
	add SP, 2
	.loc 7 2418 0
	#     for (; i < left->ty->size; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.L511:
	.loc 7 2419 0
	#         emit("load A, B");
	.loc 7 2418 0
	#     for (; i < left->ty->size; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2419 0
	#         emit("load A, B");
	.loc 7 2404 0
	#         error("internal error: %s", node2s(node));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3694, A, 0
	jmp .L3695
	.L3694:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	jmp .L513
	.L3695:
.data
	.L3696:
	.string "\tload A, B"
.text
	mov A, .L3696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3697:
	mov A, B
	add SP, 2
.data
	.L3698:
	.string "\tstore A, C"
.text
	mov A, .L3698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3699:
	mov A, B
	add SP, 2
.data
	.L3700:
	.string "\tadd B, 1"
.text
	mov A, .L3700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3701:
	mov A, B
	add SP, 2
.data
	.L3702:
	.string "\tadd C, 1"
.text
	mov A, .L3702
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3703:
	mov A, B
	add SP, 2
	.L512:
	.loc 7 2419 0
	#         emit("load A, B");
	.loc 7 2418 0
	#     for (; i < left->ty->size; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	jmp .L511
	.L513:
	.loc 7 2425 0
	#     emit("mov C, A");
.data
	.L3704:
	.string "A"
.text
	mov A, .L3704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3705:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3706:
	.string "\tmov C, A"
.text
	mov A, .L3706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3707:
	mov A, B
	add SP, 2
	.loc 7 2427 0
	#     emit("mov B, A");
.data
	.L3708:
	.string "A"
.text
	mov A, .L3708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3709:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3710:
	.string "\tmov B, A"
.text
	mov A, .L3710
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3711:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cmpinit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 2434 0
	# }
	.loc 7 2432 0
	#     Node *b = *(Node **)y;
	mov A, 0
	mov B, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2433 0
	#     return a->initoff - b->initoff;
	mov A, 0
	mov B, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 2434 0
	# }
	.loc 7 2432 0
	#     Node *b = *(Node **)y;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2434 0
	# }
	.loc 7 2433 0
	#     return a->initoff - b->initoff;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_fill_holes:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 7 2453 0
	# }
	.loc 7 2440 0
	#     Node **buf = malloc(len * sizeof(Node *));
	mov A, 0
	mov B, SP
	.loc 7 2434 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3712:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2441 0
	#     for (int i = 0; i < len; i++)
	mov A, 0
	mov B, SP
	.loc 7 2440 0
	#     Node **buf = malloc(len * sizeof(Node *));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2441 0
	#     for (int i = 0; i < len; i++)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3713:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L3714:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 2442 0
	#         buf[i] = vec_get(inits, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.L514:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2440 0
	#     Node **buf = malloc(len * sizeof(Node *));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3715, A, 0
	jmp .L3716
	.L3715:
	.loc 7 2442 0
	#         buf[i] = vec_get(inits, i);
	jmp .L516
	.L3716:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2434 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L3717:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2442 0
	#         buf[i] = vec_get(inits, i);
	.loc 7 2441 0
	#     for (int i = 0; i < len; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2442 0
	#         buf[i] = vec_get(inits, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L515:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	jmp .L514
	.L516:
	.loc 7 2444 0
	# 
	mov A, cmpinit
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2440 0
	#     Node **buf = malloc(len * sizeof(Node *));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2441 0
	#     for (int i = 0; i < len; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L3718:
	mov A, B
	add SP, 4
	.loc 7 2446 0
	#     for (int i = 0; i < len; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 2451 0
	#     }
	.loc 7 2447 0
	#         Node *node = buf[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 2451 0
	#     }
	.L517:
	.loc 7 2447 0
	#         Node *node = buf[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2440 0
	#     Node **buf = malloc(len * sizeof(Node *));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3719, A, 0
	jmp .L3720
	.L3719:
	.loc 7 2451 0
	#     }
	jmp .L519
	.L3720:
	.loc 7 2448 0
	#         if (lastend < node->initoff)
	mov A, 0
	mov B, SP
	.loc 7 2441 0
	#     for (int i = 0; i < len; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2447 0
	#         Node *node = buf[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 2449 0
	#             emit_zero_filler(lastend + off, node->initoff + off);
	.loc 7 2446 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2449 0
	#             emit_zero_filler(lastend + off, node->initoff + off);
	.loc 7 2448 0
	#         if (lastend < node->initoff)
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3721, A, 0
	.loc 7 2449 0
	#             emit_zero_filler(lastend + off, node->initoff + off);
	.loc 7 2448 0
	#         if (lastend < node->initoff)
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2434 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2449 0
	#             emit_zero_filler(lastend + off, node->initoff + off);
	.loc 7 2446 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2434 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_zero_filler
	.L3722:
	mov A, B
	add SP, 2
	.L3721:
	.loc 7 2451 0
	#     }
	.loc 7 2448 0
	#         if (lastend < node->initoff)
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2451 0
	#     }
	.loc 7 2448 0
	#         if (lastend < node->initoff)
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 2451 0
	#     }
	.L518:
	.loc 7 2447 0
	#         Node *node = buf[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2451 0
	#     }
	jmp .L517
	.L519:
	.loc 7 2453 0
	# }
	.loc 7 2434 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2453 0
	# }
	.loc 7 2446 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2434 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_zero_filler
	.L3723:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_decl_init:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 2466 0
	#         }
	.loc 7 2457 0
	#     for (int i = 0; i < vec_len(inits); i++) {
	.loc 7 2453 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3724
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_fill_holes
	.L3724:
	mov A, B
	add SP, 3
	.loc 7 2466 0
	#         }
	.loc 7 2458 0
	#         Node *node = vec_get(inits, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 2466 0
	#         }
	.L520:
	.loc 7 2458 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2453 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3725:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3726, A, 0
	jmp .L3727
	.L3726:
	.loc 7 2466 0
	#         }
	jmp .L522
	.L3727:
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov A, 0
	mov B, SP
	.loc 7 2458 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2453 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3728
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L3728:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L523:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 265
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L3729, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3730:
	.string "assertion failed: node->kind == AST_INIT\n"
.text
	mov A, .L3730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3731
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3731:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3729:
	mov A, 0
	jeq .L3732, A, 0
	jmp .L523
	.L3732:
	.L524:
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	ne A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 2466 0
	#         }
	.loc 7 2462 0
	#             emit_save_literal(node->initval, node->totype, node->initoff + off);
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L3733, A, 0
	.loc 7 2462 0
	#             emit_save_literal(node->initval, node->totype, node->initoff + off);
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L3733:
	mov A, B
	jeq .L3734, A, 0
	.loc 7 2463 0
	#         } else {
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2453 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2463 0
	#         } else {
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2463 0
	#         } else {
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3735
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_save_literal
	.L3735:
	mov A, B
	add SP, 3
	jmp .L3736
	.L3734:
	.loc 7 2466 0
	#         }
	.loc 7 2465 0
	#             emit_lsave(node->totype, node->initoff + off);
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3737:
	mov A, B
	add SP, 1
	.loc 7 2466 0
	#         }
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2453 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2466 0
	#         }
	.loc 7 2459 0
	#         assert(node->kind == AST_INIT);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3738
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_lsave
	.L3738:
	mov A, B
	add SP, 2
	.L3736:
	.loc 7 2466 0
	#         }
	.L521:
	.loc 7 2458 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2466 0
	#         }
	jmp .L520
	.L522:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_pre_inc_dec:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2474 0
	# }
	.loc 7 2472 0
	#     emit("%s A, 1", op);
	.loc 7 2466 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3739
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3739:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2466 0
	#         }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3740:
	.string "\t%s A, 1"
.text
	mov A, .L3740
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3741:
	mov A, B
	add SP, 3
	.loc 7 2474 0
	# }
	.loc 7 2466 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_store
	.L3742:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_post_inc_dec:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2483 0
	# }
	.loc 7 2479 0
	#     push("A");
	.loc 7 2474 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3743:
	mov A, B
	add SP, 1
	.loc 7 2480 0
	#     emit("%s A, 1", op);
.data
	.L3744:
	.string "A"
.text
	mov A, .L3744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3745:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2474 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3746:
	.string "\t%s A, 1"
.text
	mov A, .L3746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3747:
	mov A, B
	add SP, 3
	.loc 7 2482 0
	#     pop("A");
	.loc 7 2474 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_store
	.L3748:
	mov A, B
	add SP, 1
	.loc 7 2483 0
	# }
.data
	.L3749:
	.string "A"
.text
	mov A, .L3749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pop
	.L3750:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_je:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2483 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3751:
	.string "\tjeq %s, A, 0"
.text
	mov A, .L3751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3752:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_label:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3753:
	.string "\t%s:"
.text
	mov A, .L3753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3754:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_jmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3755:
	.string "\tjmp %s"
.text
	mov A, .L3755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2495
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3756:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_call_builtin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2499 0
	#     emit("mov A, %s", end);
	mov A, 0
	mov B, SP
	mov A, .L3757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L3757:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2499 0
	#     emit("mov A, %s", end);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3758:
	.string "\tmov A, %s"
.text
	mov A, .L3758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3759:
	mov A, B
	add SP, 3
	.loc 7 2501 0
	#     emit("jmp %s", fname);
.data
	.L3760:
	.string "A"
.text
	mov A, .L3760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3761:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3762:
	.string "\tjmp %s"
.text
	mov A, .L3762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3763:
	mov A, B
	add SP, 3
	.loc 7 2503 0
	#     emit("mov A, B");
	.loc 7 2499 0
	#     emit("mov A, %s", end);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L3764:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3765:
	.string "\tmov A, B"
.text
	mov A, .L3765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3766:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_literal:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2538 0
	#         error("internal error");
	.loc 7 2509 0
	#     case KIND_BOOL:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2538 0
	#         error("internal error");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3767, A, 0
	jmp .L526
	.L3767:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3768, A, 0
	jmp .L527
	.L3768:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3769, A, 0
	jmp .L528
	.L3769:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3770, A, 0
	jmp .L529
	.L3770:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3771, A, 0
	jmp .L530
	.L3771:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3772, A, 0
	jmp .L531
	.L3772:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3773, A, 0
	jmp .L532
	.L3773:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3774, A, 0
	jmp .L533
	.L3774:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3775, A, 0
	jmp .L534
	.L3775:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3776, A, 0
	jmp .L537
	.L3776:
	jmp .L538
	.loc 7 2510 0
	#     case KIND_CHAR:
	.L526:
	.L527:
	.L528:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2510 0
	#     case KIND_CHAR:
.data
	.L3777:
	.string "\tmov A, %d"
.text
	mov A, .L3777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3778:
	mov A, B
	add SP, 3
	.loc 7 2514 0
	#     case KIND_INT:
	jmp .L525
	.loc 7 2519 0
	#     }
	.loc 7 2515 0
	#     case KIND_LONG:
	.L529:
	.loc 7 2519 0
	#     }
	.loc 7 2515 0
	#     case KIND_LONG:
	.L530:
	.loc 7 2519 0
	#     }
	.loc 7 2515 0
	#     case KIND_LONG:
	.L531:
	.loc 7 2519 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3779:
	.string "\tmov A, %d"
.text
	mov A, .L3779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2518
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3780:
	mov A, B
	add SP, 3
	.loc 7 2519 0
	#     }
	jmp .L525
	.loc 7 2525 0
	#     }
	.loc 7 2521 0
	#     case KIND_DOUBLE:
	.L532:
	.loc 7 2525 0
	#     }
	.loc 7 2521 0
	#     case KIND_DOUBLE:
	.L533:
	.loc 7 2525 0
	#     }
	.loc 7 2521 0
	#     case KIND_DOUBLE:
	.L534:
	.loc 7 2525 0
	#     }
	.loc 12 12 0
	#     }                                           \
	.L535:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L3781, A, 0
.data
	.L3782:
	.string "float"
.text
	mov A, .L3782
	mov B, A
	ne B, 0
	.L3781:
	mov A, B
	eq A, 0
	jeq .L3783, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3784:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L3784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3785:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3783:
	mov A, 0
	jeq .L3786, A, 0
	jmp .L535
	.L3786:
	.L536:
	.loc 7 2525 0
	#     }
	jmp .L525
	.loc 7 2536 0
	#     }
	.loc 7 2527 0
	#         if (!node->slabel) {
	.L537:
	.loc 7 2536 0
	#     }
	.loc 7 1896 0
	# 
	.loc 7 2528 0
	#             node->slabel = make_label();
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	eq A, 0
	jeq .L3787, A, 0
	.loc 7 1896 0
	# 
	.loc 7 2529 0
	#             emit_noindent(".data");
	mov A, .L3788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L3788:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1896 0
	# 
.data
	.L3789:
	.string ".data"
.text
	mov A, .L3789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3790:
	mov A, B
	add SP, 2
	.loc 7 2531 0
	#             emit(".string \"%s\"", quote_cstring_len(node->sval, node->ty->size - 1));
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L3791:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp quote_cstring_len
	.L3792:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3793:
	.string "\t.string \"%s\""
.text
	mov A, .L3793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3794:
	mov A, B
	add SP, 3
	.loc 7 1896 0
	# 
.data
	.L3795:
	.string ".text"
.text
	mov A, .L3795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3796:
	mov A, B
	add SP, 2
	.L3787:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3797:
	.string "\tmov A, %s"
.text
	mov A, .L3797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3798:
	mov A, B
	add SP, 3
	.loc 7 2536 0
	#     }
	jmp .L525
	.loc 7 2538 0
	#         error("internal error");
	.L538:
.data
	.L3799:
	.string "internal error"
.text
	mov A, .L3799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3800:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L3800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L3801:
	mov A, B
	add SP, 3
	.L525:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
split:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 2573 0
	# }
	.loc 7 2544 0
	#     int len = 1;
	mov A, 0
	mov B, SP
	.loc 7 2538 0
	#         error("internal error");
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2545 0
	#     while (*p) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 1
	store A, B
	.loc 7 2554 0
	#     }
	.L539:
	.loc 7 2546 0
	#         if (p[0] == '\r' && p[1] == '\n') {
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	jeq .L3802, A, 0
	.loc 7 2554 0
	#     }
	.loc 7 2550 0
	#         }
	.loc 7 2547 0
	#             len++;
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2547 0
	#             len++;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L3803, A, 0
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2547 0
	#             len++;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3803:
	mov A, B
	jeq .L3804, A, 0
	.loc 7 2550 0
	#         }
	.loc 7 2548 0
	#             p += 2;
	.loc 7 2545 0
	#     while (*p) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2549 0
	#             continue;
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2549 0
	#             continue;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2550 0
	#         }
	jmp .L539
	.L3804:
	.loc 7 2552 0
	#             len++;
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2552 0
	#             len++;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3805, A, 0
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2552 0
	#             len++;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3805:
	mov A, B
	jeq .L3806, A, 0
	.loc 7 2545 0
	#     while (*p) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.L3806:
	.loc 7 2554 0
	#     }
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L3807
	.L3802:
	.loc 7 2554 0
	#     }
	jmp .L540
	.L3807:
	jmp .L539
	.L540:
	.loc 7 2556 0
	#     char **r = malloc(sizeof(char *) * len + 1);
	.loc 7 2538 0
	#         error("internal error");
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2557 0
	#     int i = 0;
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2545 0
	#     while (*p) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3808:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2557 0
	#     int i = 0;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L3809:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 2558 0
	#     while (*p) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 2570 0
	#     }
	.L541:
	.loc 7 2559 0
	#         if (p[0] == '\r' && p[1] == '\n') {
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	jeq .L3810, A, 0
	.loc 7 2570 0
	#     }
	.loc 7 2564 0
	#         }
	.loc 7 2560 0
	#             p[0] = '\0';
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2560 0
	#             p[0] = '\0';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L3811, A, 0
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2560 0
	#             p[0] = '\0';
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3811:
	mov A, B
	jeq .L3812, A, 0
	.loc 7 2564 0
	#         }
	.loc 7 2561 0
	#             p += 2;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2561 0
	#             p += 2;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 2562 0
	#             r[i++] = p;
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2562 0
	#             r[i++] = p;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2563 0
	#             continue;
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2563 0
	#             continue;
	.loc 7 2557 0
	#     int i = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2563 0
	#             continue;
	.loc 7 2558 0
	#     while (*p) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 2564 0
	#         }
	jmp .L541
	.L3812:
	.loc 7 2568 0
	#         }
	.loc 7 2566 0
	#             p[0] = '\0';
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2566 0
	#             p[0] = '\0';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3813, A, 0
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2566 0
	#             p[0] = '\0';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3813:
	mov A, B
	jeq .L3814, A, 0
	.loc 7 2568 0
	#         }
	.loc 7 2567 0
	#             r[i++] = p + 1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2567 0
	#             r[i++] = p + 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 2568 0
	#         }
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2568 0
	#         }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2557 0
	#     int i = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2568 0
	#         }
	.loc 7 2558 0
	#     while (*p) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L3814:
	.loc 7 2570 0
	#     }
	.loc 7 2544 0
	#     int len = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L3815
	.L3810:
	.loc 7 2570 0
	#     }
	jmp .L542
	.L3815:
	jmp .L541
	.L542:
	.loc 7 2572 0
	#     return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2557 0
	#     int i = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2558 0
	#     while (*p) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 2573 0
	# }
	.loc 7 2557 0
	#     int i = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
maybe_print_source_line:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 2609 0
	# }
	.loc 7 2593 0
	#         return;
	.loc 7 1858 0
	# }
	mov B, dumpsource
	load A, B
	eq A, 0
	jeq .L3816, A, 0
	.loc 7 2593 0
	#         return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3816:
	.loc 7 2595 0
	#     if (!lines) {
	mov A, 0
	mov B, SP
	.loc 7 2573 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, source_lines
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L3817:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2598 0
	# #else
	.loc 7 2596 0
	# #ifdef __eir__
	.loc 7 2595 0
	#     if (!lines) {
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L3818, A, 0
	.loc 7 2598 0
	# #else
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3818:
	.loc 7 2606 0
	#     for (char **p = lines; *p; p++)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 2607 0
	#         len++;
	mov A, 0
	mov B, SP
	.loc 7 2595 0
	#     if (!lines) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 2607 0
	#         len++;
	.L543:
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	jeq .L3819, A, 0
	jmp .L3820
	.L3819:
	jmp .L545
	.L3820:
	.loc 7 2606 0
	#     for (char **p = lines; *p; p++)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2607 0
	#         len++;
	.L544:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	jmp .L543
	.L545:
	.loc 7 2609 0
	# }
	.loc 7 2595 0
	#     if (!lines) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2609 0
	# }
	.loc 7 2573 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2609 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3821:
	.string "# %s"
.text
	mov A, .L3821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_nostack
	.L3822:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
maybe_print_source_loc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 2627 0
	# }
	.loc 7 2613 0
	#         return;
	.loc 7 2609 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	eq A, 0
	jeq .L3823, A, 0
	.loc 7 2613 0
	#         return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3823:
	.loc 7 2615 0
	#     long fileno = (long)map_get(source_files, file);
	mov A, 0
	mov B, SP
	.loc 7 2609 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2616 0
	#     if (!fileno) {
	mov A, 0
	mov B, SP
	.loc 7 2615 0
	#     long fileno = (long)map_get(source_files, file);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, source_files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3824
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L3824:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2617 0
	#         fileno = map_len(source_files) + 1;
	.loc 7 2616 0
	#     if (!fileno) {
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	jeq .L3825, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2618 0
	#         map_put(source_files, file, (void *)fileno);
	.loc 7 1858 0
	# }
	mov B, source_files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3826
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_len
	.L3826:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2618 0
	#         map_put(source_files, file, (void *)fileno);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 2619 0
	#         emit(".file %ld \"%s\"", fileno, quote_cstring(file));
	.loc 7 2616 0
	#     if (!fileno) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2615 0
	#     long fileno = (long)map_get(source_files, file);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, source_files
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3827
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L3827:
	mov A, B
	add SP, 3
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2615 0
	#     long fileno = (long)map_get(source_files, file);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3828
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp quote_cstring
	.L3828:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2616 0
	#     if (!fileno) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3829:
	.string "\t.file %ld \"%s\""
.text
	mov A, .L3829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2620
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3830:
	mov A, B
	add SP, 4
	.L3825:
	.loc 7 2622 0
	#     if (strcmp(loc, last_loc)) {
	mov A, 0
	mov B, SP
	.loc 7 2609 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2622 0
	#     if (strcmp(loc, last_loc)) {
	.loc 7 2616 0
	#     if (!fileno) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2622 0
	#     if (strcmp(loc, last_loc)) {
.data
	.L3831:
	.string ".loc %ld %d 0"
.text
	mov A, .L3831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L3832:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 2625 0
	#     }
	.loc 7 2623 0
	#         emit("%s", loc);
	.loc 7 1858 0
	# }
	mov B, last_loc
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2622 0
	#     if (strcmp(loc, last_loc)) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L3833:
	mov A, B
	add SP, 2
	jeq .L3834, A, 0
	.loc 7 2625 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2622 0
	#     if (strcmp(loc, last_loc)) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3835:
	.string "\t%s"
.text
	mov A, .L3835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2624
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3836:
	mov A, B
	add SP, 3
	.loc 7 2625 0
	#     }
	.loc 7 2609 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2615 0
	#     long fileno = (long)map_get(source_files, file);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_print_source_line
	.L3837:
	mov A, B
	add SP, 2
	.L3834:
	.loc 7 2627 0
	# }
	.loc 7 2622 0
	#     if (strcmp(loc, last_loc)) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, last_loc
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_lvar:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2633 0
	# }
	.loc 7 2632 0
	#     emit_lload(node->ty, "BP", node->loff);
	.loc 7 2627 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_lvar_init
	.L3838:
	mov A, B
	add SP, 1
	.loc 7 2633 0
	# }
	.loc 7 2627 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2633 0
	# }
.data
	.L3839:
	.string "BP"
.text
	mov A, .L3839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2627 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_lload
	.L3840:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_gvar:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2638 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2633 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2638 0
	# }
	.loc 7 2633 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_gload
	.L3841:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
maybe_emit_builtin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2706 0
	# #endif
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
classify_args:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 2715 0
	#     }
	.loc 7 2712 0
	#         Node *v = vec_get(args, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 2715 0
	#     }
	.L546:
	.loc 7 2712 0
	#         Node *v = vec_get(args, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2706 0
	# #endif
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3842:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3843, A, 0
	jmp .L3844
	.L3843:
	.loc 7 2715 0
	#     }
	jmp .L548
	.L3844:
	.loc 7 2713 0
	#         assert(!is_flotype(v->ty));
	mov A, 0
	mov B, SP
	.loc 7 2712 0
	#         Node *v = vec_get(args, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2706 0
	# #endif
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L3845:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L549:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 2713 0
	#         assert(!is_flotype(v->ty));
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L3846:
	mov A, B
	add SP, 1
	eq A, 0
	eq A, 0
	jeq .L3847, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3848:
	.string "assertion failed: !is_flotype(v->ty)\n"
.text
	mov A, .L3848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3849
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3849:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3847:
	mov A, 0
	jeq .L3850, A, 0
	jmp .L549
	.L3850:
	.L550:
	.loc 7 2715 0
	#     }
	.loc 7 2713 0
	#         assert(!is_flotype(v->ty));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2706 0
	# #endif
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L3851:
	mov A, B
	add SP, 2
	.loc 7 2715 0
	#     }
	.L547:
	.loc 7 2712 0
	#         Node *v = vec_get(args, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2715 0
	#     }
	jmp .L546
	.L548:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_args:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 2728 0
	# }
	.loc 7 2721 0
	#     for (int i = 0; i < vec_len(vals); i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 2726 0
	#     }
	.loc 7 2722 0
	#         Node *v = vec_get(vals, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 2726 0
	#     }
	.L551:
	.loc 7 2722 0
	#         Node *v = vec_get(vals, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2715 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3852:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3853, A, 0
	jmp .L3854
	.L3853:
	.loc 7 2726 0
	#     }
	jmp .L553
	.L3854:
	.loc 7 2723 0
	#         emit_expr(v);
	mov A, 0
	mov B, SP
	.loc 7 2722 0
	#         Node *v = vec_get(vals, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2715 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L3855:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 2724 0
	#         push("A");
	.loc 7 2723 0
	#         emit_expr(v);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3856:
	mov A, B
	add SP, 1
	.loc 7 2725 0
	#         r += 1;
.data
	.L3857:
	.string "A"
.text
	mov A, .L3857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3858
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3858:
	mov A, B
	add SP, 1
	.loc 7 2726 0
	#     }
	.loc 7 2721 0
	#     for (int i = 0; i < vec_len(vals); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2726 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L552:
	.loc 7 2722 0
	#         Node *v = vec_get(vals, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2726 0
	#     }
	jmp .L551
	.L553:
	.loc 7 2728 0
	# }
	.loc 7 2721 0
	#     for (int i = 0; i < vec_len(vals); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
maybe_booleanize_retval:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2732 0
	#         emit("ne A, 0");
	.loc 7 2728 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3859, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3860:
	.string "\tne A, 0"
.text
	mov A, .L3860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3861
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3861:
	mov A, B
	add SP, 2
	.L3859:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_call:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 2752 0
	# }
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 261
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2739 0
	#     if (isptr) {
	mov A, 0
	mov B, SP
	mov A, .L3862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L3862:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L3863, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2741 0
	#         emit("mov C, A");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3864:
	mov A, B
	add SP, 1
.data
	.L3865:
	.string "\tmov C, A"
.text
	mov A, .L3865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3866:
	mov A, B
	add SP, 2
	.L3863:
	.loc 7 2739 0
	#     if (isptr) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3867:
	.string "\tmov A, %s"
.text
	mov A, .L3867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3868:
	mov A, B
	add SP, 3
	.loc 7 2745 0
	#     if (isptr)
.data
	.L3869:
	.string "A"
.text
	mov A, .L3869
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3870:
	mov A, B
	add SP, 1
	.loc 7 2746 0
	#         emit("jmp C");
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L3871, A, 0
	.loc 7 2746 0
	#         emit("jmp C");
.data
	.L3872:
	.string "\tjmp C"
.text
	mov A, .L3872
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3873
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3873:
	mov A, B
	add SP, 2
	jmp .L3874
	.L3871:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2746 0
	#         emit("jmp C");
.data
	.L3875:
	.string "\tjmp %s"
.text
	mov A, .L3875
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3876:
	mov A, B
	add SP, 3
	.L3874:
	.loc 7 2750 0
	#     emit("mov A, B");
	.loc 7 2739 0
	#     if (isptr) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L3877:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3878:
	.string "\tmov A, B"
.text
	mov A, .L3878
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3879:
	mov A, B
	add SP, 2
	.loc 7 2752 0
	# }
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2752 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, stackpos
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_func_call:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 12 12 0
	#     }                                           \
	.loc 7 2757 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2759 0
	#     classify_args(ints, node->args);
	mov A, 0
	mov B, SP
	mov A, .L3880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L3880:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 2760 0
	# 
	.loc 7 2752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2759 0
	#     classify_args(ints, node->args);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3881
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp classify_args
	.L3881:
	mov A, B
	add SP, 2
	.loc 7 2762 0
	# 
	.loc 7 2759 0
	#     classify_args(ints, node->args);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_reverse
	.L3882:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3883
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_args
	.L3883:
	mov A, B
	add SP, 1
	.loc 7 2779 0
	#     }
	.loc 7 2764 0
	#         emit_call(node);
	.loc 7 2752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	eq A, 0
	jeq .L3884, A, 0
	.loc 7 2765 0
	#     } else if (!strcmp(node->fname, "__builtin_dump")) {
	.loc 7 2752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call
	.L3885:
	mov A, B
	add SP, 1
	jmp .L3886
	.L3884:
	.loc 7 2779 0
	#     }
	.loc 7 2765 0
	#     } else if (!strcmp(node->fname, "__builtin_dump")) {
.data
	.L3887:
	.string "__builtin_dump"
.text
	mov A, .L3887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L3888:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L3889, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3890:
	.string "\tdump"
.text
	mov A, .L3890
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3891
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3891:
	mov A, B
	add SP, 2
	jmp .L3892
	.L3889:
	.loc 7 2779 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3893:
	.string "exit"
.text
	mov A, .L3893
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3894
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L3894:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L3895, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3896:
	.string "\texit"
.text
	mov A, .L3896
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3897:
	mov A, B
	add SP, 2
	jmp .L3898
	.L3895:
	.loc 7 2779 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3899:
	.string "putchar"
.text
	mov A, .L3899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L3900:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L3901, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3902:
	.string "\tputc A"
.text
	mov A, .L3902
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3903
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3903:
	mov A, B
	add SP, 2
	jmp .L3904
	.L3901:
	.loc 7 2779 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3905:
	.string "getchar"
.text
	mov A, .L3905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L3906:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L3907, A, 0
	.loc 7 2777 0
	#     } else {
	.loc 7 2773 0
	#         emit("getc A");
	mov A, 0
	mov B, SP
	mov A, .L3908
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L3908:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3909:
	.string "\tgetc A"
.text
	mov A, .L3909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3910:
	mov A, B
	add SP, 2
	.loc 7 2773 0
	#         emit("getc A");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3911:
	.string "\tjne %s, A, 0"
.text
	mov A, .L3911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3912:
	mov A, B
	add SP, 3
.data
	.L3913:
	.string "\tmov A, -1"
.text
	mov A, .L3913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3914
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3914:
	mov A, B
	add SP, 2
	.loc 7 2777 0
	#     } else {
	.loc 7 2773 0
	#         emit("getc A");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L3915:
	mov A, B
	add SP, 1
	jmp .L3916
	.L3907:
	.loc 7 2779 0
	#     }
	.loc 7 2752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call
	.L3917:
	mov A, B
	add SP, 1
	.L3916:
	.L3904:
	.L3898:
	.L3892:
	.L3886:
	.loc 7 2781 0
	#         emit("add SP, %d", vec_len(ints));
	.loc 7 2759 0
	#     classify_args(ints, node->args);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3918:
	mov A, B
	add SP, 1
	jeq .L3919, A, 0
	.loc 7 2781 0
	#         emit("add SP, %d", vec_len(ints));
	.loc 7 2759 0
	#     classify_args(ints, node->args);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3920:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2781 0
	#         emit("add SP, %d", vec_len(ints));
.data
	.L3921:
	.string "\tadd SP, %d"
.text
	mov A, .L3921
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3922
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3922:
	mov A, B
	add SP, 3
	.L3919:
	.loc 7 2783 0
	#     assert(opos == stackpos);
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2783 0
	#     assert(opos == stackpos);
	.loc 7 2759 0
	#     classify_args(ints, node->args);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3923:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, stackpos
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L554:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 2757 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L3924, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3925:
	.string "assertion failed: opos == stackpos\n"
.text
	mov A, .L3925
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3926:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3924:
	mov A, 0
	jeq .L3927, A, 0
	jmp .L554
	.L3927:
	.L555:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_decl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2791 0
	# }
	.loc 7 2789 0
	#         return;
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	eq A, 0
	jeq .L3928, A, 0
	.loc 7 2789 0
	#         return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3928:
	.loc 7 2791 0
	# }
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2791 0
	# }
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2791 0
	# }
	.loc 12 12 0
	#     }                                           \
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3929
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_decl_init
	.L3929:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_conv:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2797 0
	# }
	.loc 7 2796 0
	#     emit_load_convert(node->ty, node->operand->ty);
	.loc 7 2791 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3930
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3930:
	mov A, B
	add SP, 1
	.loc 7 2797 0
	# }
	.loc 7 2791 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2797 0
	# }
	.loc 7 2791 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_load_convert
	.L3931:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_deref:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2804 0
	# }
	.loc 7 2802 0
	#     emit_lload(node->operand->ty->ptr, "A", 0);
	.loc 7 2797 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3932
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3932:
	mov A, B
	add SP, 1
	.loc 7 2803 0
	#     emit_load_convert(node->ty, node->operand->ty->ptr);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L3933:
	.string "A"
.text
	mov A, .L3933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2797 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3934
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_lload
	.L3934:
	mov A, B
	add SP, 3
	.loc 7 2804 0
	# }
	.loc 7 2797 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2804 0
	# }
	.loc 7 2797 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3935
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_load_convert
	.L3935:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_ternary:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 2821 0
	#     }
	.loc 7 2809 0
	#     char *ne = make_label();
	.loc 7 2804 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3936:
	mov A, B
	add SP, 1
	.loc 7 2810 0
	#     emit_je(ne);
	mov A, 0
	mov B, SP
	mov A, .L3937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L3937:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2811 0
	#     if (node->then)
	.loc 7 2810 0
	#     emit_je(ne);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_je
	.L3938:
	mov A, B
	add SP, 1
	.loc 7 2812 0
	#         emit_expr(node->then);
	.loc 7 2804 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	jeq .L3939, A, 0
	.loc 7 2812 0
	#         emit_expr(node->then);
	.loc 7 2804 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3940:
	mov A, B
	add SP, 1
	.L3939:
	.loc 7 2821 0
	#     }
	.loc 7 2814 0
	#         char *end = make_label();
	.loc 7 2804 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L3941, A, 0
	.loc 7 2819 0
	#     } else {
	.loc 7 2815 0
	#         emit_jmp(end);
	mov A, 0
	mov B, SP
	mov A, .L3942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L3942:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 2816 0
	#         emit_label(ne);
	.loc 7 2815 0
	#         emit_jmp(end);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jmp
	.L3943:
	mov A, B
	add SP, 1
	.loc 7 2817 0
	#         emit_expr(node->els);
	.loc 7 2810 0
	#     emit_je(ne);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L3944:
	mov A, B
	add SP, 1
	.loc 7 2818 0
	#         emit_label(end);
	.loc 7 2804 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3945:
	mov A, B
	add SP, 1
	.loc 7 2819 0
	#     } else {
	.loc 7 2815 0
	#         emit_jmp(end);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L3946:
	mov A, B
	add SP, 1
	jmp .L3947
	.L3941:
	.loc 7 2821 0
	#     }
	.loc 7 2810 0
	#     emit_je(ne);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L3948:
	mov A, B
	add SP, 1
	.L3947:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_goto:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2828 0
	# }
	.loc 12 12 0
	#     }                                           \
	.L556:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 2821 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	eq A, 0
	jeq .L3949, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L3950:
	.string "assertion failed: node->newlabel\n"
.text
	mov A, .L3950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3951
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L3951:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L3949:
	mov A, 0
	jeq .L3952, A, 0
	jmp .L556
	.L3952:
	.L557:
	.loc 7 2828 0
	# }
	.loc 7 2821 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jmp
	.L3953:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_return:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2838 0
	# }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2833 0
	#         emit_expr(node->retval);
	.loc 7 2828 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	jeq .L3954, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2834 0
	#         maybe_booleanize_retval(node->retval->ty);
	.loc 7 2828 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3955:
	mov A, B
	add SP, 1
	.loc 7 2835 0
	#         emit("mov B, A");
	.loc 7 2828 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3956
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_booleanize_retval
	.L3956:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3957:
	.string "\tmov B, A"
.text
	mov A, .L3957
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3958
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3958:
	mov A, B
	add SP, 2
	.L3954:
	.loc 7 2838 0
	# }
	mov A, .L3959
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_ret
	.L3959:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_compound_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2843 0
	#         emit_expr(vec_get(node->stmts, i));
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L558:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2838 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L3960:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3961, A, 0
	jmp .L3962
	.L3961:
	.loc 7 2843 0
	#         emit_expr(vec_get(node->stmts, i));
	jmp .L560
	.L3962:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2838 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3963
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L3963:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3964
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3964:
	mov A, B
	add SP, 1
	.loc 7 2843 0
	#         emit_expr(vec_get(node->stmts, i));
	.L559:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L558
	.L560:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_logand:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2849 0
	#     emit_expr(node->left);
	mov A, 0
	mov B, SP
	mov A, .L3965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L3965:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2850 0
	#     emit("mov B, 0");
	.loc 7 2843 0
	#         emit_expr(vec_get(node->stmts, i));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3966:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3967:
	.string "\tmov B, 0"
.text
	mov A, .L3967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3968:
	mov A, B
	add SP, 2
	.loc 7 2849 0
	#     emit_expr(node->left);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3969:
	.string "\tjeq %s, A, 0"
.text
	mov A, .L3969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3970:
	mov A, B
	add SP, 3
	.loc 7 2853 0
	#     emit("mov B, A");
	.loc 7 2843 0
	#         emit_expr(vec_get(node->stmts, i));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3971:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3972:
	.string "\tmov B, A"
.text
	mov A, .L3972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3973:
	mov A, B
	add SP, 2
.data
	.L3974:
	.string "\tne B, 0"
.text
	mov A, .L3974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3975:
	mov A, B
	add SP, 2
	.loc 7 2856 0
	#     emit("mov A, B");
	.loc 7 2849 0
	#     emit_expr(node->left);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L3976:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3977:
	.string "\tmov A, B"
.text
	mov A, .L3977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3978:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_logor:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2862 0
	#     emit_expr(node->left);
	mov A, 0
	mov B, SP
	mov A, .L3979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L3979:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2863 0
	#     emit("mov B, 1");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3980:
	mov A, B
	add SP, 1
.data
	.L3981:
	.string "\tmov B, 1"
.text
	mov A, .L3981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3982:
	mov A, B
	add SP, 2
	.loc 7 2862 0
	#     emit_expr(node->left);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3983:
	.string "\tjne %s, A, 0"
.text
	mov A, .L3983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3984:
	mov A, B
	add SP, 3
	.loc 7 2866 0
	#     emit("mov B, A");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3985:
	mov A, B
	add SP, 1
.data
	.L3986:
	.string "\tmov B, A"
.text
	mov A, .L3986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3987:
	mov A, B
	add SP, 2
.data
	.L3988:
	.string "\tne B, 0"
.text
	mov A, .L3988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3989:
	mov A, B
	add SP, 2
	.loc 7 2869 0
	#     emit("mov A, B");
	.loc 7 2862 0
	#     emit_expr(node->left);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L3990:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L3991:
	.string "\tmov A, B"
.text
	mov A, .L3991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3992:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_lognot:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2875 0
	#     emit("eq A, 0");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3993:
	mov A, B
	add SP, 1
.data
	.L3994:
	.string "\teq A, 0"
.text
	mov A, .L3994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L3995:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_bitand:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2887 0
	# }
	.loc 7 2881 0
	#     push("A");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3996
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3996:
	mov A, B
	add SP, 1
	.loc 7 2882 0
	#     emit_expr(node->right);
.data
	.L3997:
	.string "A"
.text
	mov A, .L3997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L3998:
	mov A, B
	add SP, 1
	.loc 7 2883 0
	#     push("A");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3999
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L3999:
	mov A, B
	add SP, 1
	.loc 7 2884 0
	#     emit_call_builtin("__builtin_and");
.data
	.L4000:
	.string "A"
.text
	mov A, .L4000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L4001:
	mov A, B
	add SP, 1
	.loc 7 2885 0
	#     emit("add SP, 2");
.data
	.L4002:
	.string "__builtin_and"
.text
	mov A, .L4002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L4003:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4004:
	.string "\tadd SP, 2"
.text
	mov A, .L4004
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2886
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4005:
	mov A, B
	add SP, 2
	.loc 7 2887 0
	# }
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2887 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, stackpos
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_bitor:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2898 0
	# }
	.loc 7 2892 0
	#     push("A");
	.loc 7 2887 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L4006:
	mov A, B
	add SP, 1
	.loc 7 2893 0
	#     emit_expr(node->right);
.data
	.L4007:
	.string "A"
.text
	mov A, .L4007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L4008:
	mov A, B
	add SP, 1
	.loc 7 2894 0
	#     push("A");
	.loc 7 2887 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4009
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L4009:
	mov A, B
	add SP, 1
	.loc 7 2895 0
	#     emit_call_builtin("__builtin_or");
.data
	.L4010:
	.string "A"
.text
	mov A, .L4010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L4011:
	mov A, B
	add SP, 1
	.loc 7 2896 0
	#     emit("add SP, 2");
.data
	.L4012:
	.string "__builtin_or"
.text
	mov A, .L4012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L4013:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4014:
	.string "\tadd SP, 2"
.text
	mov A, .L4014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4015:
	mov A, B
	add SP, 2
	.loc 7 2898 0
	# }
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2898 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, stackpos
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_bitnot:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2907 0
	# }
	.loc 7 2903 0
	#     push("A");
	.loc 7 2898 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L4016:
	mov A, B
	add SP, 1
	.loc 7 2904 0
	#     emit_call_builtin("__builtin_not");
.data
	.L4017:
	.string "A"
.text
	mov A, .L4017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L4018:
	mov A, B
	add SP, 1
	.loc 7 2905 0
	#     emit("add SP, 1");
.data
	.L4019:
	.string "__builtin_not"
.text
	mov A, .L4019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_call_builtin
	.L4020:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4021:
	.string "\tadd SP, 1"
.text
	mov A, .L4021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4022:
	mov A, B
	add SP, 2
	.loc 7 2907 0
	# }
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2907 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, stackpos
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_cast:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2914 0
	# }
	.loc 7 2912 0
	#     emit_load_convert(node->ty, node->operand->ty);
	.loc 7 2907 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L4023:
	mov A, B
	add SP, 1
	.loc 7 2913 0
	#     return;
	.loc 7 2907 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2913 0
	#     return;
	.loc 7 2907 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_load_convert
	.L4024:
	mov A, B
	add SP, 2
	.loc 7 2914 0
	# }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_comma:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2920 0
	# }
	.loc 7 2919 0
	#     emit_expr(node->right);
	.loc 7 2914 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L4025:
	mov A, B
	add SP, 1
	.loc 7 2920 0
	# }
	.loc 7 2914 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L4026:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_assign:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2930 0
	#     }
	.loc 7 2925 0
	#         emit_copy_struct(node->left, node->right);
	.loc 7 2920 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4027, A, 0
	.loc 7 2926 0
	#     } else {
	.loc 7 2920 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2926 0
	#     } else {
	.loc 7 2920 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_copy_struct
	.L4028:
	mov A, B
	add SP, 2
	jmp .L4029
	.L4027:
	.loc 7 2930 0
	#     }
	.loc 7 2928 0
	#         emit_load_convert(node->ty, node->right->ty);
	.loc 7 2920 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L4030:
	mov A, B
	add SP, 1
	.loc 7 2929 0
	#         emit_store(node->left);
	.loc 7 2920 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2929 0
	#         emit_store(node->left);
	.loc 7 2920 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_load_convert
	.L4031:
	mov A, B
	add SP, 2
	.loc 7 2930 0
	#     }
	.loc 7 2920 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4032
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_store
	.L4032:
	mov A, B
	add SP, 1
	.L4029:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_label_addr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 2930 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4033:
	.string "\tmov $%s, #rax"
.text
	mov A, .L4033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4034:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_computed_goto:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2941 0
	#     emit("jmp *#rax");
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L4035:
	mov A, B
	add SP, 1
.data
	.L4036:
	.string "\tjmp *#rax"
.text
	mov A, .L4036
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4037:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2993 0
	#         emit_binop(node);
	.loc 7 2947 0
	#     switch (node->kind) {
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_print_source_loc
	.L4038:
	mov A, B
	add SP, 1
	.loc 7 2993 0
	#         emit_binop(node);
	.loc 7 2948 0
	#     case AST_LITERAL: emit_literal(node); return;
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2993 0
	#         emit_binop(node);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4039, A, 0
	jmp .L562
	.L4039:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4040, A, 0
	jmp .L563
	.L4040:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4041, A, 0
	jmp .L564
	.L4041:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 262
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4042, A, 0
	jmp .L565
	.L4042:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 260
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4043, A, 0
	jmp .L566
	.L4043:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 261
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4044, A, 0
	jmp .L567
	.L4044:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 264
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4045, A, 0
	jmp .L568
	.L4045:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 266
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4046, A, 0
	jmp .L569
	.L4046:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 267
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4047, A, 0
	jmp .L570
	.L4047:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 268
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4048, A, 0
	jmp .L571
	.L4048:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 269
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4049, A, 0
	jmp .L572
	.L4049:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 270
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4050, A, 0
	jmp .L573
	.L4050:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 275
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4051, A, 0
	jmp .L574
	.L4051:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 277
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4052, A, 0
	jmp .L575
	.L4052:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 272
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4053, A, 0
	jmp .L576
	.L4053:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 273
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4054, A, 0
	jmp .L577
	.L4054:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 274
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4055, A, 0
	jmp .L578
	.L4055:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 284
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4056, A, 0
	jmp .L579
	.L4056:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 285
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4057, A, 0
	jmp .L580
	.L4057:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 286
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4058, A, 0
	jmp .L581
	.L4058:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 287
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4059, A, 0
	jmp .L582
	.L4059:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 33
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4060, A, 0
	jmp .L583
	.L4060:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 38
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4061, A, 0
	jmp .L584
	.L4061:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 124
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4062, A, 0
	jmp .L585
	.L4062:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 126
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4063, A, 0
	jmp .L586
	.L4063:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 305
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4064, A, 0
	jmp .L587
	.L4064:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 306
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4065, A, 0
	jmp .L588
	.L4065:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 279
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4066, A, 0
	jmp .L589
	.L4066:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 44
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4067, A, 0
	jmp .L590
	.L4067:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 61
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4068, A, 0
	jmp .L591
	.L4068:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 288
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4069, A, 0
	jmp .L592
	.L4069:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 276
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4070, A, 0
	jmp .L593
	.L4070:
	jmp .L594
	.loc 7 2949 0
	#     case AST_LVAR:    emit_lvar(node); return;
	.L562:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4071
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_literal
	.L4071:
	mov A, B
	add SP, 1
	.loc 7 2949 0
	#     case AST_LVAR:    emit_lvar(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2950 0
	#     case AST_GVAR:    emit_gvar(node); return;
	.L563:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_lvar
	.L4072:
	mov A, B
	add SP, 1
	.loc 7 2950 0
	#     case AST_GVAR:    emit_gvar(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2951 0
	#     case AST_FUNCDESG: emit_addr(node); return;
	.L564:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_gvar
	.L4073:
	mov A, B
	add SP, 1
	.loc 7 2951 0
	#     case AST_FUNCDESG: emit_addr(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2952 0
	#     case AST_FUNCALL:
	.L565:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_addr
	.L4074:
	mov A, B
	add SP, 1
	.loc 7 2952 0
	#     case AST_FUNCALL:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2953 0
	#         if (maybe_emit_builtin(node))
	.L566:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4075
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_emit_builtin
	.L4075:
	mov A, B
	add SP, 1
	jeq .L4076, A, 0
	.loc 7 2953 0
	#         if (maybe_emit_builtin(node))
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4076:
	.loc 7 2957 0
	#         emit_func_call(node);
	.L567:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4077
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_func_call
	.L4077:
	mov A, B
	add SP, 1
	.loc 7 2959 0
	#     case AST_DECL:    emit_decl(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2960 0
	#     case AST_CONV:    emit_conv(node); return;
	.L568:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4078
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_decl
	.L4078:
	mov A, B
	add SP, 1
	.loc 7 2960 0
	#     case AST_CONV:    emit_conv(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2961 0
	#     case AST_ADDR:    emit_addr(node->operand); return;
	.L569:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_conv
	.L4079:
	mov A, B
	add SP, 1
	.loc 7 2961 0
	#     case AST_ADDR:    emit_addr(node->operand); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2962 0
	#     case AST_DEREF:   emit_deref(node); return;
	.L570:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_addr
	.L4080:
	mov A, B
	add SP, 1
	.loc 7 2962 0
	#     case AST_DEREF:   emit_deref(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2963 0
	#     case AST_IF:
	.L571:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_deref
	.L4081:
	mov A, B
	add SP, 1
	.loc 7 2963 0
	#     case AST_IF:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2964 0
	#     case AST_TERNARY:
	.L572:
	.L573:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_ternary
	.L4082:
	mov A, B
	add SP, 1
	.loc 7 2967 0
	#     case AST_GOTO:    emit_goto(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2968 0
	#     case AST_LABEL:
	.L574:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_goto
	.L4083:
	mov A, B
	add SP, 1
	.loc 7 2968 0
	#     case AST_LABEL:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2969 0
	#         if (node->newlabel)
	.L575:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	jeq .L4084, A, 0
	.loc 7 2969 0
	#         if (node->newlabel)
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L4085:
	mov A, B
	add SP, 1
	.L4084:
	.loc 7 2972 0
	#     case AST_RETURN:  emit_return(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2973 0
	#     case AST_COMPOUND_STMT: emit_compound_stmt(node); return;
	.L576:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_return
	.L4086:
	mov A, B
	add SP, 1
	.loc 7 2973 0
	#     case AST_COMPOUND_STMT: emit_compound_stmt(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2974 0
	#     case AST_STRUCT_REF:
	.L577:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_compound_stmt
	.L4087:
	mov A, B
	add SP, 1
	.loc 7 2974 0
	#     case AST_STRUCT_REF:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2975 0
	#         emit_load_struct_ref(node->struc, node->ty, 0);
	.L578:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2975 0
	#         emit_load_struct_ref(node->struc, node->ty, 0);
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_load_struct_ref
	.L4088:
	mov A, B
	add SP, 3
	.loc 7 2977 0
	#     case OP_PRE_INC:   emit_pre_inc_dec(node, "add"); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2978 0
	#     case OP_PRE_DEC:   emit_pre_inc_dec(node, "sub"); return;
	.L579:
.data
	.L4089:
	.string "add"
.text
	mov A, .L4089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_pre_inc_dec
	.L4090:
	mov A, B
	add SP, 2
	.loc 7 2978 0
	#     case OP_PRE_DEC:   emit_pre_inc_dec(node, "sub"); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2979 0
	#     case OP_POST_INC:  emit_post_inc_dec(node, "add"); return;
	.L580:
.data
	.L4091:
	.string "sub"
.text
	mov A, .L4091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_pre_inc_dec
	.L4092:
	mov A, B
	add SP, 2
	.loc 7 2979 0
	#     case OP_POST_INC:  emit_post_inc_dec(node, "add"); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2980 0
	#     case OP_POST_DEC:  emit_post_inc_dec(node, "sub"); return;
	.L581:
.data
	.L4093:
	.string "add"
.text
	mov A, .L4093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4094
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_post_inc_dec
	.L4094:
	mov A, B
	add SP, 2
	.loc 7 2980 0
	#     case OP_POST_DEC:  emit_post_inc_dec(node, "sub"); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2981 0
	#     case '!': emit_lognot(node); return;
	.L582:
.data
	.L4095:
	.string "sub"
.text
	mov A, .L4095
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_post_inc_dec
	.L4096:
	mov A, B
	add SP, 2
	.loc 7 2981 0
	#     case '!': emit_lognot(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2982 0
	#     case '&': emit_bitand(node); return;
	.L583:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4097
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_lognot
	.L4097:
	mov A, B
	add SP, 1
	.loc 7 2982 0
	#     case '&': emit_bitand(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2983 0
	#     case '|': emit_bitor(node); return;
	.L584:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4098
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_bitand
	.L4098:
	mov A, B
	add SP, 1
	.loc 7 2983 0
	#     case '|': emit_bitor(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2984 0
	#     case '~': emit_bitnot(node); return;
	.L585:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_bitor
	.L4099:
	mov A, B
	add SP, 1
	.loc 7 2984 0
	#     case '~': emit_bitnot(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2985 0
	#     case OP_LOGAND: emit_logand(node); return;
	.L586:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_bitnot
	.L4100:
	mov A, B
	add SP, 1
	.loc 7 2985 0
	#     case OP_LOGAND: emit_logand(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2986 0
	#     case OP_LOGOR:  emit_logor(node); return;
	.L587:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_logand
	.L4101:
	mov A, B
	add SP, 1
	.loc 7 2986 0
	#     case OP_LOGOR:  emit_logor(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2987 0
	#     case OP_CAST:   emit_cast(node); return;
	.L588:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_logor
	.L4102:
	mov A, B
	add SP, 1
	.loc 7 2987 0
	#     case OP_CAST:   emit_cast(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2988 0
	#     case ',': emit_comma(node); return;
	.L589:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cast
	.L4103:
	mov A, B
	add SP, 1
	.loc 7 2988 0
	#     case ',': emit_comma(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2989 0
	#     case '=': emit_assign(node); return;
	.L590:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_comma
	.L4104:
	mov A, B
	add SP, 1
	.loc 7 2989 0
	#     case '=': emit_assign(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2990 0
	#     case OP_LABEL_ADDR: emit_label_addr(node); return;
	.L591:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_assign
	.L4105:
	mov A, B
	add SP, 1
	.loc 7 2990 0
	#     case OP_LABEL_ADDR: emit_label_addr(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2991 0
	#     case AST_COMPUTED_GOTO: emit_computed_goto(node); return;
	.L592:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label_addr
	.L4106:
	mov A, B
	add SP, 1
	.loc 7 2991 0
	#     case AST_COMPUTED_GOTO: emit_computed_goto(node); return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2992 0
	#     default:
	.L593:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_computed_goto
	.L4107:
	mov A, B
	add SP, 1
	.loc 7 2992 0
	#     default:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2993 0
	#         emit_binop(node);
	.L594:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_binop
	.L4108:
	mov A, B
	add SP, 1
	.loc 7 2993 0
	#         emit_binop(node);
	.L561:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_zero:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3002 0
	# }
	.loc 7 3000 0
	#         return;
	.loc 7 2993 0
	#         emit_binop(node);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3000 0
	#         return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4109, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4109:
	.loc 7 3002 0
	# }
	.L595:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2993 0
	#         emit_binop(node);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4110, A, 0
	jmp .L4111
	.L4110:
	.loc 7 3002 0
	# }
	jmp .L597
	.L4111:
.data
	.L4112:
	.string "\t.long 0"
.text
	mov A, .L4112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4113
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4113:
	mov A, B
	add SP, 2
	.L596:
	.loc 7 2993 0
	#         emit_binop(node);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3002 0
	# }
	jmp .L595
	.L597:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_padding:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3009 0
	# }
	.loc 7 3007 0
	#     assert(diff >= 0);
	mov A, 0
	mov B, SP
	.loc 7 3002 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L598:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3007 0
	#     assert(diff >= 0);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	eq A, 0
	jeq .L4114, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L4115:
	.string "assertion failed: diff >= 0\n"
.text
	mov A, .L4115
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L4116:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L4114:
	mov A, 0
	jeq .L4117, A, 0
	jmp .L598
	.L4117:
	.L599:
	.loc 7 3009 0
	# }
	.loc 7 3007 0
	#     assert(diff >= 0);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_zero
	.L4118:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_data_addr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3026 0
	#         error("internal error");
	.loc 7 3013 0
	#     case AST_LVAR: {
	.loc 7 3009 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3026 0
	#         error("internal error");
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4119, A, 0
	jmp .L601
	.L4119:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4120, A, 0
	jmp .L602
	.L4120:
	jmp .L603
	.loc 7 3021 0
	#     }
	.loc 7 3014 0
	#         char *label = make_label();
	.L601:
	.loc 7 3021 0
	#     }
	.loc 7 3015 0
	#         emit(".data %d", depth + 1);
	mov A, 0
	mov B, SP
	mov A, .L4121
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L4121:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3009 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4122:
	.string "\t.data %d"
.text
	mov A, .L4122
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4123:
	mov A, B
	add SP, 3
	.loc 7 3017 0
	#         do_emit_data(operand->lvarinit, operand->ty->size, 0, depth + 1);
	.loc 7 3015 0
	#         emit(".data %d", depth + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L4124:
	mov A, B
	add SP, 1
	.loc 7 3018 0
	#         emit(".data %d", depth);
	.loc 7 3009 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3018 0
	#         emit(".data %d", depth);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3009 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3018 0
	#         emit(".data %d", depth);
	.loc 7 3009 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_emit_data
	.L4125:
	mov A, B
	add SP, 4
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3009 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4126:
	.string "\t.data %d"
.text
	mov A, .L4126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4127:
	mov A, B
	add SP, 3
	.loc 7 3015 0
	#         emit(".data %d", depth + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4128:
	.string "\t.long %s"
.text
	mov A, .L4128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4129:
	mov A, B
	add SP, 3
	.loc 7 3021 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3023 0
	#         emit(".long %s", operand->glabel);
	.L602:
	.loc 7 3009 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3023 0
	#         emit(".long %s", operand->glabel);
.data
	.L4130:
	.string "\t.long %s"
.text
	mov A, .L4130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4131:
	mov A, B
	add SP, 3
	.loc 7 3025 0
	#     default:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3026 0
	#         error("internal error");
	.L603:
.data
	.L4132:
	.string "internal error"
.text
	mov A, .L4132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4133:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L4133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4134:
	mov A, B
	add SP, 3
	.L600:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_data_charptr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3032 0
	#     emit(".data %d", depth + 1);
	mov A, 0
	mov B, SP
	mov A, .L4135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L4135:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3026 0
	#         error("internal error");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4136:
	.string "\t.data %d"
.text
	mov A, .L4136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4137:
	mov A, B
	add SP, 3
	.loc 7 3034 0
	#     emit(".string \"%s\"", quote_cstring(s));
	.loc 7 3032 0
	#     emit(".data %d", depth + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_label
	.L4138:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3026 0
	#         error("internal error");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp quote_cstring
	.L4139:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4140:
	.string "\t.string \"%s\""
.text
	mov A, .L4140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4141:
	mov A, B
	add SP, 3
	.loc 7 3026 0
	#         error("internal error");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4142:
	.string "\t.data %d"
.text
	mov A, .L4142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3036
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4143
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4143:
	mov A, B
	add SP, 3
	.loc 7 3032 0
	#     emit(".data %d", depth + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4144:
	.string "\t.long %s"
.text
	mov A, .L4144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4145
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4145:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_data_primtype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	.loc 7 3041 0
	#     case KIND_FLOAT: {
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4146, A, 0
	jmp .L605
	.L4146:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4147, A, 0
	jmp .L608
	.L4147:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4148, A, 0
	jmp .L611
	.L4148:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4149, A, 0
	jmp .L612
	.L4149:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4150, A, 0
	jmp .L613
	.L4150:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4151, A, 0
	jmp .L614
	.L4151:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4152, A, 0
	jmp .L615
	.L4152:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4153, A, 0
	jmp .L616
	.L4153:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4154, A, 0
	jmp .L617
	.L4154:
	jmp .L620
	.loc 7 3044 0
	#     }
	.loc 7 3042 0
	#         assert_float();
	.L605:
	.loc 7 3044 0
	#     }
	.loc 12 12 0
	#     }                                           \
	.L606:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L4155, A, 0
.data
	.L4156:
	.string "float"
.text
	mov A, .L4156
	mov B, A
	ne B, 0
	.L4155:
	mov A, B
	eq A, 0
	jeq .L4157, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L4158:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L4158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L4159:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L4157:
	mov A, 0
	jeq .L4160, A, 0
	jmp .L606
	.L4160:
	.L607:
	.loc 7 3044 0
	#     }
	jmp .L604
	.loc 12 12 0
	#     }                                           \
	.loc 7 3046 0
	#         assert_float();
	.L608:
	.loc 12 12 0
	#     }                                           \
	.L609:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L4161, A, 0
.data
	.L4162:
	.string "float"
.text
	mov A, .L4162
	mov B, A
	ne B, 0
	.L4161:
	mov A, B
	eq A, 0
	jeq .L4163, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L4164:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L4164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L4165:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L4163:
	mov A, 0
	jeq .L4166, A, 0
	jmp .L609
	.L4166:
	.L610:
	.loc 7 3048 0
	#     case KIND_BOOL:
	jmp .L604
	.loc 7 3049 0
	#         emit(".long %d", !!eval_intexpr(val, NULL));
	.L611:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L4167:
	mov A, B
	add SP, 2
	eq A, 0
	eq A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3049 0
	#         emit(".long %d", !!eval_intexpr(val, NULL));
.data
	.L4168:
	.string "\t.long %d"
.text
	mov A, .L4168
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4169:
	mov A, B
	add SP, 3
	.loc 7 3051 0
	#     case KIND_CHAR:
	jmp .L604
	.loc 7 3052 0
	#     case KIND_SHORT:
	.L612:
	.L613:
	.L614:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L4170:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3052 0
	#     case KIND_SHORT:
.data
	.L4171:
	.string "\t.long %d"
.text
	mov A, .L4171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3055
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4172:
	mov A, B
	add SP, 3
	.loc 7 3056 0
	#     case KIND_LONG:
	jmp .L604
	.loc 7 3062 0
	#         }
	.loc 7 3057 0
	#     case KIND_LLONG:
	.L615:
	.loc 7 3062 0
	#         }
	.loc 7 3057 0
	#     case KIND_LLONG:
	.L616:
	.loc 7 3062 0
	#         }
	.loc 7 3057 0
	#     case KIND_LLONG:
	.L617:
	.loc 7 3062 0
	#         }
	.loc 7 3057 0
	#     case KIND_LLONG:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 288
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4173, A, 0
	.loc 7 3062 0
	#         }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4174:
	.string "\t.long %s"
.text
	mov A, .L4174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4175
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4175:
	mov A, B
	add SP, 3
	.loc 7 3062 0
	#         }
	jmp .L604
	.L4173:
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L4176, A, 0
	.loc 10 4 0
	# #define true 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4176:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L4177, A, 0
	.loc 7 3066 0
	#         } else if (val->kind == AST_GVAR) {
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3066 0
	#         } else if (val->kind == AST_GVAR) {
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_data_charptr
	.L4178:
	mov A, B
	add SP, 2
	jmp .L4179
	.L4177:
	.loc 7 3066 0
	#         } else if (val->kind == AST_GVAR) {
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4180, A, 0
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4181:
	.string "\t.long %s"
.text
	mov A, .L4181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4182:
	mov A, B
	add SP, 3
	jmp .L4183
	.L4180:
	.loc 7 3070 0
	#             int v = eval_intexpr(val, &base);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3071 0
	#             if (base == NULL) {
	mov A, 0
	mov B, SP
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L4184:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3074 0
	#             }
	.loc 7 3072 0
	#                 emit(".long %u", v);
	.loc 7 3070 0
	#             int v = eval_intexpr(val, &base);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3072 0
	#                 emit(".long %u", v);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4185, A, 0
	.loc 7 3074 0
	#             }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3071 0
	#             if (base == NULL) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4186:
	.string "\t.long %u"
.text
	mov A, .L4186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4187:
	mov A, B
	add SP, 3
	.loc 7 3074 0
	#             }
	jmp .L604
	.L4185:
	.loc 7 3076 0
	#             if (base->kind == AST_CONV || base->kind == AST_ADDR)
	mov A, 0
	mov B, SP
	.loc 7 3070 0
	#             int v = eval_intexpr(val, &base);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3077 0
	#                 base = base->operand;
	.loc 7 3070 0
	#             int v = eval_intexpr(val, &base);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 266
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L4188, A, 0
	.loc 7 3077 0
	#                 base = base->operand;
	.loc 7 3070 0
	#             int v = eval_intexpr(val, &base);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 267
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4188:
	mov A, B
	jeq .L4189, A, 0
	.loc 7 3077 0
	#                 base = base->operand;
	.loc 7 3070 0
	#             int v = eval_intexpr(val, &base);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L4189:
	.loc 7 3079 0
	#                 error("global variable expected, but got %s", node2s(base));
	.loc 7 3070 0
	#             int v = eval_intexpr(val, &base);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4190, A, 0
	.loc 7 3079 0
	#                 error("global variable expected, but got %s", node2s(base));
	.loc 7 3070 0
	#             int v = eval_intexpr(val, &base);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4191
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L4191:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3079 0
	#                 error("global variable expected, but got %s", node2s(base));
.data
	.L4192:
	.string "global variable expected, but got %s"
.text
	mov A, .L4192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4193:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L4193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4194:
	mov A, B
	add SP, 4
	.L4190:
	.loc 12 12 0
	#     }                                           \
	.L618:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 3076 0
	#             if (base->kind == AST_CONV || base->kind == AST_ADDR)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 5
	load A, B
	eq A, 0
	jeq .L4195, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L4196:
	.string "assertion failed: ty->ptr\n"
.text
	mov A, .L4196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L4197:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L4195:
	mov A, 0
	jeq .L4198, A, 0
	jmp .L618
	.L4198:
	.L619:
	.loc 7 3083 0
	#                 error("TODO: fix! %d %d", v, ty->ptr->size);
	.loc 7 3071 0
	#             if (base == NULL) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3083 0
	#                 error("TODO: fix! %d %d", v, ty->ptr->size);
	.loc 7 3076 0
	#             if (base->kind == AST_CONV || base->kind == AST_ADDR)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4199:
	mov A, B
	add SP, 2
	jeq .L4200, A, 0
	.loc 7 3083 0
	#                 error("TODO: fix! %d %d", v, ty->ptr->size);
	.loc 7 3076 0
	#             if (base->kind == AST_CONV || base->kind == AST_ADDR)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3071 0
	#             if (base == NULL) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3083 0
	#                 error("TODO: fix! %d %d", v, ty->ptr->size);
.data
	.L4201:
	.string "TODO: fix! %d %d"
.text
	mov A, .L4201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4202:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L4202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4203:
	mov A, B
	add SP, 5
	.L4200:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3070 0
	#             int v = eval_intexpr(val, &base);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4204:
	.string "\t.long %s"
.text
	mov A, .L4204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4205:
	mov A, B
	add SP, 3
	.L4183:
	.L4179:
	.loc 7 3090 0
	#     default:
	jmp .L604
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	.L620:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L4206:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L4207:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
.data
	.L4208:
	.string "don't know how to handle\n  <%s>\n  <%s>"
.text
	mov A, .L4208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4209:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L4209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4210:
	mov A, B
	add SP, 5
	.L604:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_emit_data:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 15
	.loc 7 3136 0
	# }
	.loc 7 3134 0
	#     }
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3134 0
	#     }
	.L621:
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4213
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4213:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 0
	jeq .L4212, A, 0
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L4212:
	mov A, B
	mov B, 0
	jeq .L4211, A, 0
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L4211:
	mov A, B
	jeq .L4214, A, 0
	jmp .L4215
	.L4214:
	.loc 7 3134 0
	#     }
	jmp .L623
	.L4215:
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov A, 0
	mov B, SP
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L4216:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3100 0
	#         emit_padding(node, off);
	mov A, 0
	mov B, SP
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3101 0
	#         // TODO: Fix!
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_padding
	.L4217:
	mov A, B
	add SP, 2
	.loc 7 3124 0
	#         }
	.loc 7 3104 0
	#             assert(node->totype->bitoff == 0);
	mov A, 0
	jeq .L4218, A, 0
	.loc 7 3120 0
	#                 break;
	.loc 12 12 0
	#     }                                           \
	.L624:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L4219, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L4220:
	.string "assertion failed: node->totype->bitoff == 0\n"
.text
	mov A, .L4220
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L4221:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L4219:
	mov A, 0
	jeq .L4222, A, 0
	jmp .L624
	.L4222:
	.L625:
	.loc 7 3106 0
	#             Type *totype = node->totype;
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3100 0
	#         emit_padding(node, off);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L4223:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3107 0
	#             for (i++ ; i < vec_len(inits); i++) {
	mov A, 0
	mov B, SP
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 3115 0
	#             }
	.loc 7 3108 0
	#                 node = vec_get(inits, i);
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3115 0
	#             }
	.L626:
	.loc 7 3108 0
	#                 node = vec_get(inits, i);
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3108 0
	#                 node = vec_get(inits, i);
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4224:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4225, A, 0
	jmp .L4226
	.L4225:
	.loc 7 3115 0
	#             }
	jmp .L628
	.L4226:
	.loc 7 3109 0
	#                 if (node->totype->bitsize <= 0) {
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L4227:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3111 0
	#                 }
	.loc 7 3110 0
	#                     break;
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3110 0
	#                     break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L4228, A, 0
	.loc 7 3111 0
	#                 }
	jmp .L628
	.L4228:
	.loc 7 3113 0
	#                 totype = node->totype;
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3114 0
	#                 data |= ((((long)1 << totype->bitsize) - 1) & eval_intexpr(v, NULL)) << totype->bitoff;
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 3115 0
	#             }
	.loc 7 3106 0
	#             Type *totype = node->totype;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3115 0
	#             }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3107 0
	#             for (i++ ; i < vec_len(inits); i++) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4229:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3115 0
	#             }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3100 0
	#         emit_padding(node, off);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4230
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L4230:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L4231:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3115 0
	#             }
	.loc 7 3107 0
	#             for (i++ ; i < vec_len(inits); i++) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4232:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L4233:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3115 0
	#             }
	.L627:
	.loc 7 3108 0
	#                 node = vec_get(inits, i);
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3115 0
	#             }
	jmp .L626
	.L628:
	.loc 7 3117 0
	#             off += totype->size;
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3117 0
	#             off += totype->size;
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777201
	mov A, 256
	store A, B
	.loc 7 3107 0
	#             for (i++ ; i < vec_len(inits); i++) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, BP
	add B, 16777202
	store A, B
	.loc 7 3106 0
	#             Type *totype = node->totype;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777204
	store A, B
	mov A, BP
	add A, -15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3107 0
	#             for (i++ ; i < vec_len(inits); i++) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_data_primtype
	.L4234:
	mov A, B
	add SP, 3
	.loc 7 3118 0
	#             size -= totype->size;
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3118 0
	#             size -= totype->size;
	.loc 7 3107 0
	#             for (i++ ; i < vec_len(inits); i++) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 4
	store A, B
	.loc 7 3119 0
	#             if (i == vec_len(inits))
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3119 0
	#             if (i == vec_len(inits))
	.loc 7 3107 0
	#             for (i++ ; i < vec_len(inits); i++) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 7 3120 0
	#                 break;
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3120 0
	#                 break;
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4235
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4235:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4236, A, 0
	.loc 7 3120 0
	#                 break;
	jmp .L623
	.L4236:
	jmp .L4237
	.L4218:
	.loc 7 3124 0
	#         }
	.loc 7 3123 0
	#             size -= node->totype->size;
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3123 0
	#             size -= node->totype->size;
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 4
	store A, B
	.loc 7 3124 0
	#         }
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3124 0
	#         }
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.L4237:
	.loc 7 3128 0
	#         }
	.loc 7 3126 0
	#             emit_data_addr(v->operand, depth);
	.loc 7 3100 0
	#         emit_padding(node, off);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 267
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4238, A, 0
	.loc 7 3128 0
	#         }
	.loc 7 3127 0
	#             continue;
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3127 0
	#             continue;
	.loc 7 3100 0
	#         emit_padding(node, off);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_data_addr
	.L4239:
	mov A, B
	add SP, 2
	.loc 7 3128 0
	#         }
	jmp .L622
	.L4238:
	.loc 7 3132 0
	#         }
	.loc 7 3130 0
	#             do_emit_data(v->lvarinit, v->ty->size, 0, depth);
	.loc 7 3100 0
	#         emit_padding(node, off);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L4240, A, 0
	.loc 7 3130 0
	#             do_emit_data(v->lvarinit, v->ty->size, 0, depth);
	.loc 7 3100 0
	#         emit_padding(node, off);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	ne B, 0
	.L4240:
	mov A, B
	jeq .L4241, A, 0
	.loc 7 3132 0
	#         }
	.loc 7 3131 0
	#             continue;
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3131 0
	#             continue;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3100 0
	#         emit_padding(node, off);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3131 0
	#             continue;
	.loc 7 3100 0
	#         emit_padding(node, off);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_emit_data
	.L4242:
	mov A, B
	add SP, 4
	.loc 7 3132 0
	#         }
	jmp .L622
	.L4241:
	.loc 7 3134 0
	#     }
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3134 0
	#     }
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3134 0
	#     }
	.loc 7 3099 0
	#         Node *v = node->initval;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_data_primtype
	.L4243:
	mov A, B
	add SP, 3
	.loc 7 3134 0
	#     }
	.L622:
	.loc 7 3098 0
	#         Node *node = vec_get(inits, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3134 0
	#     }
	jmp .L621
	.L623:
	.loc 7 3136 0
	# }
	.loc 7 3091 0
	#         error("don't know how to handle\n  <%s>\n  <%s>", ty2s(ty), node2s(val));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_zero
	.L4244:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_data:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3147 0
	# }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3136 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4245:
	.string "\t.data %d"
.text
	mov A, .L4245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4246:
	mov A, B
	add SP, 3
	.loc 7 1896 0
	# 
	.loc 7 3136 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1896 0
	# 
.data
	.L4247:
	.string "%s:"
.text
	mov A, .L4247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4248:
	mov A, B
	add SP, 3
	.loc 7 3147 0
	# }
	.loc 7 3136 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3147 0
	# }
	.loc 7 3136 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3147 0
	# }
	.loc 7 3136 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_emit_data
	.L4249:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_bss:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4250:
	.string "\t.data"
.text
	mov A, .L4250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4251:
	mov A, B
	add SP, 2
	.loc 7 3158 0
	#     emit("%s:\n", v->declvar->glabel);
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3147 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4252:
	.string "\t%s:\n"
.text
	mov A, .L4252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4253:
	mov A, B
	add SP, 3
	.loc 7 3160 0
	#       emit(".long 0");
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.L630:
	.loc 7 3160 0
	#       emit(".long 0");
	.loc 7 3158 0
	#     emit("%s:\n", v->declvar->glabel);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3160 0
	#       emit(".long 0");
	.loc 7 3147 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 0
	jeq .L4254, A, 0
	.loc 7 3160 0
	#       emit(".long 0");
	.loc 7 3147 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3160 0
	#       emit(".long 0");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L4254:
	mov A, B
	jeq .L4255, A, 0
	jmp .L4256
	.L4255:
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	jmp .L632
	.L4256:
.data
	.L4257:
	.string "\t.long 0"
.text
	mov A, .L4257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4258:
	mov A, B
	add SP, 2
	.L631:
	.loc 7 3160 0
	#       emit(".long 0");
	.loc 7 3158 0
	#     emit("%s:\n", v->declvar->glabel);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	jmp .L630
	.L632:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_global_var:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3168 0
	#         emit_data(v, 0, 0);
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	jeq .L4259, A, 0
	.loc 7 3168 0
	#         emit_data(v, 0, 0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4260
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_data
	.L4260:
	mov A, B
	add SP, 3
	jmp .L4261
	.L4259:
	.loc 7 3168 0
	#         emit_data(v, 0, 0);
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_bss
	.L4262:
	mov A, B
	add SP, 1
	.L4261:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
assign_func_param_offsets:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 3180 0
	#     }
	.loc 7 3175 0
	#     for (int i = 0; i < vec_len(params); i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 2
	store A, B
	.loc 7 3180 0
	#     }
	.loc 7 3176 0
	#         Node *v = vec_get(params, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 3180 0
	#     }
	.L633:
	.loc 7 3176 0
	#         Node *v = vec_get(params, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3168 0
	#         emit_data(v, 0, 0);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4263:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4264, A, 0
	jmp .L4265
	.L4264:
	.loc 7 3180 0
	#     }
	jmp .L635
	.L4265:
	.loc 7 3177 0
	#         if (is_flotype(v->ty))
	mov A, 0
	mov B, SP
	.loc 7 3176 0
	#         Node *v = vec_get(params, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3168 0
	#         emit_data(v, 0, 0);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L4266:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 12 12 0
	#     }                                           \
	.loc 7 3178 0
	#             assert_float();
	.loc 7 3177 0
	#         if (is_flotype(v->ty))
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L4267:
	mov A, B
	add SP, 1
	jeq .L4268, A, 0
	.loc 12 12 0
	#     }                                           \
	.L636:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov B, 0
	jeq .L4269, A, 0
.data
	.L4270:
	.string "float"
.text
	mov A, .L4270
	mov B, A
	ne B, 0
	.L4269:
	mov A, B
	eq A, 0
	jeq .L4271, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L4272:
	.string "assertion failed: 0 && \"float\"\n"
.text
	mov A, .L4272
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L4273:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L4271:
	mov A, 0
	jeq .L4274, A, 0
	jmp .L636
	.L4274:
	.L637:
	.L4268:
	.loc 7 3180 0
	#     }
	.loc 7 3175 0
	#     for (int i = 0; i < vec_len(params); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3177 0
	#         if (is_flotype(v->ty))
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3180 0
	#     }
	.L634:
	.loc 7 3176 0
	#         Node *v = vec_get(params, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3180 0
	#     }
	jmp .L633
	.L635:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 3204 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4275:
	.string "\t.text"
.text
	mov A, .L4275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4276:
	mov A, B
	add SP, 2
	.loc 7 1896 0
	# 
	.loc 7 3180 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1896 0
	# 
.data
	.L4277:
	.string "%s:"
.text
	mov A, .L4277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4278:
	mov A, B
	add SP, 3
	.loc 7 3189 0
	#     emit("mov BP, SP");
.data
	.L4279:
	.string "BP"
.text
	mov A, .L4279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp push
	.L4280:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4281:
	.string "\tmov BP, SP"
.text
	mov A, .L4281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3190
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4282:
	mov A, B
	add SP, 2
	.loc 7 3191 0
	#     assign_func_param_offsets(func->params, off);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3192 0
	# 
	.loc 7 3191 0
	#     assign_func_param_offsets(func->params, off);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3192 0
	# 
	.loc 7 3180 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp assign_func_param_offsets
	.L4283:
	mov A, B
	add SP, 2
	.loc 7 3194 0
	#     for (int i = 0; i < vec_len(func->localvars); i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 3200 0
	#     }
	.loc 7 3195 0
	#         Node *v = vec_get(func->localvars, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 3200 0
	#     }
	.L638:
	.loc 7 3195 0
	#         Node *v = vec_get(func->localvars, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3180 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4284:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4285, A, 0
	jmp .L4286
	.L4285:
	.loc 7 3200 0
	#     }
	jmp .L640
	.L4286:
	.loc 7 3196 0
	#         int size = v->ty->size;
	mov A, 0
	mov B, SP
	.loc 7 3195 0
	#         Node *v = vec_get(func->localvars, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3196 0
	#         int size = v->ty->size;
	.loc 7 3180 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L4287:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3197 0
	#         off -= size;
	mov A, 0
	mov B, SP
	.loc 7 3196 0
	#         int size = v->ty->size;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 3198 0
	#         v->loff = off;
	.loc 7 3191 0
	#     assign_func_param_offsets(func->params, off);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3197 0
	#         off -= size;
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3199 0
	#         localarea += size;
	.loc 7 3191 0
	#     assign_func_param_offsets(func->params, off);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3196 0
	#         int size = v->ty->size;
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3200 0
	#     }
	.loc 7 3194 0
	#     for (int i = 0; i < vec_len(func->localvars); i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3197 0
	#         off -= size;
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3200 0
	#     }
	.L639:
	.loc 7 3195 0
	#         Node *v = vec_get(func->localvars, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3200 0
	#     }
	jmp .L638
	.L640:
	.loc 7 3204 0
	#     }
	.loc 7 3194 0
	#     for (int i = 0; i < vec_len(func->localvars); i++) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L4288, A, 0
	.loc 7 3204 0
	#     }
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
	.loc 7 3194 0
	#     for (int i = 0; i < vec_len(func->localvars); i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1895 0
	# #define emit_noindent(...)  emitf(__LINE__, __VA_ARGS__)
.data
	.L4289:
	.string "\tsub SP, %d"
.text
	mov A, .L4289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emitf
	.L4290:
	mov A, B
	add SP, 3
	.loc 7 3204 0
	#     }
	.loc 7 1858 0
	# }
	mov B, stackpos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3194 0
	#     for (int i = 0; i < vec_len(func->localvars); i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, stackpos
	store A, B
	.L4288:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_toplevel:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 3209 0
	#     if (v->kind == AST_FUNC) {
	mov A, 1
	mov B, stackpos
	store A, B
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 3210 0
	#         is_main = !strcmp(v->fname, "main");
	.loc 7 3204 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 263
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4291, A, 0
	.loc 7 3215 0
	#     } else if (v->kind == AST_DECL) {
	.loc 7 3211 0
	#         emit_func_prologue(v);
.data
	.L4292:
	.string "main"
.text
	mov A, .L4292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3204 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L4293:
	mov A, B
	add SP, 2
	eq A, 0
	mov B, is_main
	store A, B
	.loc 7 3212 0
	#         emit_expr(v->body);
	.loc 7 3204 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_func_prologue
	.L4294:
	mov A, B
	add SP, 1
	.loc 7 3213 0
	#         emit_ret();
	.loc 7 3204 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_expr
	.L4295:
	mov A, B
	add SP, 1
	.loc 7 3214 0
	#         is_main = 0;
	mov A, .L4296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_ret
	.L4296:
	mov A, B
	.loc 7 3215 0
	#     } else if (v->kind == AST_DECL) {
	mov A, 0
	mov B, is_main
	store A, B
	jmp .L4297
	.L4291:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 3215 0
	#     } else if (v->kind == AST_DECL) {
	.loc 7 3204 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 264
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4298, A, 0
	.loc 7 3217 0
	#     } else {
	.loc 7 3204 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_global_var
	.L4299:
	mov A, B
	add SP, 1
	jmp .L4300
	.L4298:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L4301:
	.string "internal error"
.text
	mov A, .L4301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4302:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L4302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4303:
	mov A, B
	add SP, 3
	.L4300:
	.L4297:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
buffers:
	.data 1
	.L4304:
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4304
	.data 0
space_token:
	.data 1
	.L4305:
	.long 9
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4305
	.data 0
newline_token:
	.data 1
	.L4306:
	.long 8
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4306
	.data 0
eof_token:
	.data 1
	.L4307:
	.long 5
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4307
	.data
	pos:

	.long 0
	.long 0
	.text
pos_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3265 0
	# }
	.loc 7 3264 0
	#     return format("%s:%d:%d", f ? f->name : "(unknown)", p->line, p->column);
	mov A, 0
	mov B, SP
	mov A, .L4308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp current_file
	.L4308:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3265 0
	# }
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3265 0
	# }
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3265 0
	# }
	.loc 7 3264 0
	#     return format("%s:%d:%d", f ? f->name : "(unknown)", p->line, p->column);
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L4309, A, 0
	.loc 7 3265 0
	# }
	.loc 7 3264 0
	#     return format("%s:%d:%d", f ? f->name : "(unknown)", p->line, p->column);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	jmp .L4310
	.L4309:
	.loc 7 3265 0
	# }
.data
	.L4311:
	.string "(unknown)"
.text
	mov A, .L4311
	.L4310:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4312:
	.string "%s:%d:%d"
.text
	mov A, .L4312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L4313:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lex_init:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3277 0
	#     }
	.loc 7 3274 0
	#     if (!strcmp(filename, "-")) {
	mov A, .L4314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L4314:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, buffers
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L4315:
	mov A, B
	add SP, 2
	.loc 7 3277 0
	#     }
	.loc 7 3275 0
	#         stream_push(make_file(stdin, "-"));
.data
	.L4316:
	.string "-"
.text
	mov A, .L4316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3265 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L4317:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L4318, A, 0
	.loc 7 3277 0
	#     }
	.loc 7 3276 0
	#         return;
.data
	.L4319:
	.string "-"
.text
	mov A, .L4319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stdin
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_file
	.L4320:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stream_push
	.L4321:
	mov A, B
	add SP, 1
	.loc 7 3277 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4318:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
get_pos:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3290 0
	# }
	.loc 7 3288 0
	#     pos->line = f->line;
	mov A, 0
	mov B, SP
	mov A, .L4322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp current_file
	.L4322:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3289 0
	#     pos->column = f->column + delta;
	.loc 7 3288 0
	#     pos->line = f->line;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3277 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3290 0
	# }
	.loc 7 3288 0
	#     pos->line = f->line;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3277 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
mark:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3294 0
	# }
	mov A, pos
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_pos
	.L4323:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_token:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3306 0
	# }
	.loc 7 3298 0
	#     *r = *tmpl;
	mov A, 0
	mov B, SP
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L4324:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3299 0
	#     r->hideset = NULL;
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 3294 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3298 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 3300 0
	#     File *f = current_file();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3298 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3301 0
	#     r->file = f;
	mov A, 0
	mov B, SP
	mov A, .L4325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp current_file
	.L4325:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3302 0
	#     r->line = pos.line;
	.loc 7 3301 0
	#     r->file = f;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3298 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3303 0
	#     r->column = pos.column;
	mov B, pos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3298 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3304 0
	#     r->count = f->ntok++;
	mov B, pos
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3298 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3305 0
	#     return r;
	.loc 7 3301 0
	#     r->file = f;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3298 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3306 0
	# }
	.loc 7 3298 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_ident:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 12
	.loc 7 3310 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777204
	mov A, 0
	store A, B
	.loc 7 3306 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	mov A, BP
	add A, -12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token
	.L4326:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_strtok:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 12
	.loc 7 3314 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777204
	mov A, 4
	store A, B
	.loc 7 3310 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	mov A, BP
	add A, -12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token
	.L4327:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_keyword:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 12
	.loc 7 3318 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777204
	mov A, 1
	store A, B
	.loc 7 3314 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	mov A, BP
	add A, -12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token
	.L4328:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_number:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 12
	.loc 7 3322 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777204
	mov A, 2
	store A, B
	.loc 7 3318 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	mov A, BP
	add A, -12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token
	.L4329:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_invalid:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 12
	.loc 7 3326 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov B, BP
	add B, 16777204
	mov A, 6
	store A, B
	.loc 7 3322 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov A, BP
	add A, -12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token
	.L4330:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_char:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 12
	.loc 7 3330 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777204
	mov A, 3
	store A, B
	.loc 7 3326 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	mov A, BP
	add A, -12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_token
	.L4331:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
iswhitespace:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3334 0
	# }
	.loc 7 3330 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3334 0
	# }
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L4334, A, 0
	.loc 7 3330 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3334 0
	# }
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4334:
	mov A, B
	mov B, 1
	jne .L4333, A, 0
	.loc 7 3330 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3334 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4333:
	mov A, B
	mov B, 1
	jne .L4332, A, 0
	.loc 7 3330 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3334 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4332:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lex_peek:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3340 0
	# }
	.loc 7 3338 0
	#     unreadc(r);
	mov A, 0
	mov B, SP
	mov A, .L4335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4335:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3339 0
	#     return r;
	.loc 7 3338 0
	#     unreadc(r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L4336:
	mov A, B
	add SP, 1
	.loc 7 3340 0
	# }
	.loc 7 3338 0
	#     unreadc(r);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
next:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3348 0
	# }
	.loc 7 3344 0
	#     if (c == expect)
	mov A, 0
	mov B, SP
	mov A, .L4337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4337:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3345 0
	#         return true;
	.loc 7 3344 0
	#     if (c == expect)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3340 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4338, A, 0
	.loc 7 3345 0
	#         return true;
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4338:
	.loc 7 3347 0
	#     return false;
	.loc 7 3344 0
	#     if (c == expect)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L4339:
	mov A, B
	add SP, 1
	.loc 7 3348 0
	# }
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_line:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3358 0
	#         }
	.L651:
	.loc 7 3353 0
	#         if (c == EOF)
	mov A, 0
	mov B, SP
	mov A, .L4340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4340:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3354 0
	#             return;
	.loc 7 3353 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3354 0
	#             return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4341, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4341:
	.loc 7 3358 0
	#         }
	.loc 7 3356 0
	#             unreadc(c);
	.loc 7 3353 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3356 0
	#             unreadc(c);
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4342, A, 0
	.loc 7 3358 0
	#         }
	.loc 7 3357 0
	#             return;
	.loc 7 3353 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L4343:
	mov A, B
	add SP, 1
	.loc 7 3358 0
	#         }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4342:
	.L652:
	jmp .L651
	.L653:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_skip_space:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3380 0
	# }
	.loc 7 3364 0
	#     if (c == EOF)
	mov A, 0
	mov B, SP
	mov A, .L4344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4344:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3365 0
	#         return false;
	.loc 7 3364 0
	#     if (c == EOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3365 0
	#         return false;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4345, A, 0
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4345:
	.loc 7 3367 0
	#         return true;
	.loc 7 3364 0
	#     if (c == EOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp iswhitespace
	.L4346:
	mov A, B
	add SP, 1
	jeq .L4347, A, 0
	.loc 7 3367 0
	#         return true;
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4347:
	.loc 7 3376 0
	#         }
	.loc 7 3369 0
	#         if (next('*')) {
	.loc 7 3364 0
	#     if (c == EOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3369 0
	#         if (next('*')) {
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4348, A, 0
	.loc 7 3376 0
	#         }
	.loc 7 3372 0
	#         }
	.loc 7 3370 0
	#             skip_block_comment();
	mov A, 42
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4349:
	mov A, B
	add SP, 1
	jeq .L4350, A, 0
	.loc 7 3372 0
	#         }
	.loc 7 3371 0
	#             return true;
	mov A, .L4351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_block_comment
	.L4351:
	mov A, B
	.loc 7 3372 0
	#         }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4350:
	.loc 7 3376 0
	#         }
	.loc 7 3374 0
	#             skip_line();
	mov A, 47
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4352:
	mov A, B
	add SP, 1
	jeq .L4353, A, 0
	.loc 7 3376 0
	#         }
	.loc 7 3375 0
	#             return true;
	mov A, .L4354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_line
	.L4354:
	mov A, B
	.loc 7 3376 0
	#         }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4353:
	.L4348:
	.loc 7 3379 0
	#     return false;
	.loc 7 3364 0
	#     if (c == EOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L4355:
	mov A, B
	add SP, 1
	.loc 7 3380 0
	# }
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_space:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3389 0
	# }
	.loc 7 3386 0
	#         return false;
	mov A, .L4356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_skip_space
	.L4356:
	mov A, B
	eq A, 0
	jeq .L4357, A, 0
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4357:
	.loc 7 3388 0
	#     return true;
	.L654:
	mov A, .L4358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_skip_space
	.L4358:
	mov A, B
	jeq .L4359, A, 0
	jmp .L4360
	.L4359:
	jmp .L655
	.L4360:
	jmp .L654
	.L655:
	.loc 7 3389 0
	# }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_char:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3396 0
	#         c = readc();
	.loc 7 3393 0
	#         readc();
	mov A, .L4361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4361:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4362, A, 0
	mov A, .L4363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4363:
	mov A, B
	.L4362:
	.loc 7 3395 0
	#     while (c != EOF && c != '\'')
	mov A, 0
	mov B, SP
	mov A, .L4364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4364:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3396 0
	#         c = readc();
	.L656:
	.loc 7 3395 0
	#     while (c != EOF && c != '\'')
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3396 0
	#         c = readc();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L4365, A, 0
	.loc 7 3395 0
	#     while (c != EOF && c != '\'')
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3396 0
	#         c = readc();
	mov A, 39
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L4365:
	mov A, B
	jeq .L4366, A, 0
	mov A, .L4367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4367:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L4368
	.L4366:
	jmp .L657
	.L4368:
	jmp .L656
	.L657:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3401 0
	#         if (c == '\\')
	mov A, 0
	mov B, SP
	mov A, .L4369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4369:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L658:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L4370, A, 0
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L4370:
	mov A, B
	jeq .L4371, A, 0
	jmp .L4372
	.L4371:
	jmp .L660
	.L4372:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4373, A, 0
	mov A, .L4374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4374:
	mov A, B
	.L4373:
	.L659:
	mov A, .L4375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4375:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L658
	.L660:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_cond_incl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 7 3445 0
	#     }
	.loc 7 3412 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3445 0
	#     }
	.L661:
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, .L4376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp current_file
	.L4376:
	mov A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3415 0
	#         int c = readc();
	mov A, .L4377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_space
	.L4377:
	mov A, B
	.loc 7 3416 0
	#         if (c == EOF)
	mov A, 0
	mov B, SP
	mov A, .L4378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4378:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3417 0
	#             return;
	.loc 7 3416 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3417 0
	#             return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4379, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4379:
	.loc 7 3421 0
	#         }
	.loc 7 3419 0
	#             skip_char();
	.loc 7 3416 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3419 0
	#             skip_char();
	mov A, 39
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4380, A, 0
	.loc 7 3421 0
	#         }
	.loc 7 3420 0
	#             continue;
	mov A, .L4381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_char
	.L4381:
	mov A, B
	.loc 7 3421 0
	#         }
	jmp .L662
	.L4380:
	.loc 7 3425 0
	#         }
	.loc 7 3423 0
	#             skip_string();
	.loc 7 3416 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3423 0
	#             skip_string();
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4382, A, 0
	.loc 7 3425 0
	#         }
	.loc 7 3424 0
	#             continue;
	mov A, .L4383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_string
	.L4383:
	mov A, B
	.loc 7 3425 0
	#         }
	jmp .L662
	.L4382:
	.loc 7 3427 0
	#             continue;
	.loc 7 3416 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3427 0
	#             continue;
	mov A, 35
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 1
	jne .L4384, A, 0
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L4384:
	mov A, B
	jeq .L4385, A, 0
	.loc 7 3427 0
	#             continue;
	jmp .L662
	.L4385:
	.loc 7 3429 0
	#         Token *tok = lex();
	mov A, 0
	mov B, SP
	mov A, .L4386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp current_file
	.L4386:
	mov A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L4387
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex
	.L4387:
	mov A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 3431 0
	#             continue;
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4388, A, 0
	.loc 7 3431 0
	#             continue;
	jmp .L662
	.L4388:
	.loc 7 3439 0
	#         }
	.loc 7 3433 0
	#             unget_token(tok);
	.loc 7 3412 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	mov B, 0
	jeq .L4389, A, 0
	.loc 7 3433 0
	#             unget_token(tok);
.data
	.L4392:
	.string "else"
.text
	mov A, .L4392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_ident
	.L4393:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L4391, A, 0
	.loc 7 3433 0
	#             unget_token(tok);
.data
	.L4394:
	.string "elif"
.text
	mov A, .L4394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_ident
	.L4395:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L4391:
	mov A, B
	mov B, 1
	jne .L4390, A, 0
	.loc 7 3433 0
	#             unget_token(tok);
.data
	.L4396:
	.string "endif"
.text
	mov A, .L4396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_ident
	.L4397:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L4390:
	mov A, B
	mov B, A
	ne B, 0
	.L4389:
	mov A, B
	jeq .L4398, A, 0
	.loc 7 3439 0
	#         }
	.loc 7 3434 0
	#             Token *hash = make_keyword('#');
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L4399:
	mov A, B
	add SP, 1
	.loc 7 3435 0
	#             hash->bol = true;
	mov A, 0
	mov B, SP
	mov A, 35
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4400:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 3436 0
	#             hash->column = column;
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3435 0
	#             hash->bol = true;
	mov B, BP
	add B, 16777210
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3437 0
	#             unget_token(hash);
	.loc 7 3429 0
	#         Token *tok = lex();
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3435 0
	#             hash->bol = true;
	mov B, BP
	add B, 16777210
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3438 0
	#             return;
	.loc 7 3435 0
	#             hash->bol = true;
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L4401:
	mov A, B
	add SP, 1
	.loc 7 3439 0
	#         }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4398:
	.loc 7 3441 0
	#             nest++;
.data
	.L4404:
	.string "if"
.text
	mov A, .L4404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_ident
	.L4405:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L4403, A, 0
	.loc 7 3441 0
	#             nest++;
.data
	.L4406:
	.string "ifdef"
.text
	mov A, .L4406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_ident
	.L4407:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L4403:
	mov A, B
	mov B, 1
	jne .L4402, A, 0
	.loc 7 3441 0
	#             nest++;
.data
	.L4408:
	.string "ifndef"
.text
	mov A, .L4408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_ident
	.L4409:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L4402:
	mov A, B
	jeq .L4410, A, 0
	.loc 7 3441 0
	#             nest++;
	.loc 7 3412 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L4411
	.L4410:
	.loc 7 3441 0
	#             nest++;
	.loc 7 3412 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, 0
	jeq .L4412, A, 0
	.loc 7 3441 0
	#             nest++;
.data
	.L4413:
	.string "endif"
.text
	mov A, .L4413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3430 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_ident
	.L4414:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L4412:
	mov A, B
	jeq .L4415, A, 0
	.loc 7 3441 0
	#             nest++;
	.loc 7 3412 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.L4415:
	.L4411:
	.loc 7 3445 0
	#     }
	mov A, .L4416
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_line
	.L4416:
	mov A, B
	.L662:
	jmp .L661
	.L663:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lex_read_number:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 3464 0
	#     }
	.loc 7 3452 0
	#     buf_write(b, c);
	mov A, 0
	mov B, SP
	mov A, .L4417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L4417:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3453 0
	#     char last = c;
	.loc 7 3445 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3452 0
	#     buf_write(b, c);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4418:
	mov A, B
	add SP, 2
	.loc 7 3454 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	.loc 7 3445 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3464 0
	#     }
	.L664:
	.loc 7 3456 0
	#         bool flonum = strchr("eEpP", last) && strchr("+-", c);
	mov A, 0
	mov B, SP
	mov A, .L4419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4419:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 3454 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 10 4 0
	# #define true 1
.data
	.L4421:
	.string "eEpP"
.text
	mov A, .L4421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strchr
	.L4422:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L4420, A, 0
	.loc 7 3456 0
	#         bool flonum = strchr("eEpP", last) && strchr("+-", c);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 10 4 0
	# #define true 1
.data
	.L4423:
	.string "+-"
.text
	mov A, .L4423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strchr
	.L4424:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L4420:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3461 0
	#         }
	.loc 7 3458 0
	#             unreadc(c);
	.loc 7 3456 0
	#         bool flonum = strchr("eEpP", last) && strchr("+-", c);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L4428:
	mov A, B
	add SP, 1
	eq A, 0
	mov B, 0
	jeq .L4427, A, 0
	.loc 7 3458 0
	#             unreadc(c);
	.loc 7 3456 0
	#         bool flonum = strchr("eEpP", last) && strchr("+-", c);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L4429:
	mov A, B
	add SP, 1
	eq A, 0
	mov B, A
	ne B, 0
	.L4427:
	mov A, B
	mov B, 0
	jeq .L4426, A, 0
	.loc 7 3458 0
	#             unreadc(c);
	.loc 7 3456 0
	#         bool flonum = strchr("eEpP", last) && strchr("+-", c);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3458 0
	#             unreadc(c);
	mov A, 46
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L4426:
	mov A, B
	mov B, 0
	jeq .L4425, A, 0
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777212
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L4425:
	mov A, B
	jeq .L4430, A, 0
	.loc 7 3461 0
	#         }
	.loc 7 3459 0
	#             buf_write(b, '\0');
	.loc 7 3456 0
	#         bool flonum = strchr("eEpP", last) && strchr("+-", c);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L4431:
	mov A, B
	add SP, 1
	.loc 7 3460 0
	#             return make_number(buf_body(b));
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3452 0
	#     buf_write(b, c);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4432:
	mov A, B
	add SP, 2
	.loc 7 3461 0
	#         }
	.loc 7 3452 0
	#     buf_write(b, c);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L4433:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_number
	.L4434:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4430:
	.loc 7 3463 0
	#         last = c;
	.loc 7 3456 0
	#         bool flonum = strchr("eEpP", last) && strchr("+-", c);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3452 0
	#     buf_write(b, c);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4435:
	mov A, B
	add SP, 2
	.loc 7 3464 0
	#     }
	.loc 7 3456 0
	#         bool flonum = strchr("eEpP", last) && strchr("+-", c);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3464 0
	#     }
	.L665:
	jmp .L664
	.L666:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
nextoct:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3470 0
	# }
	.loc 7 3469 0
	#     return '0' <= c && c <= '7';
	mov A, 0
	mov B, SP
	mov A, .L4436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_peek
	.L4436:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3470 0
	# }
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3469 0
	#     return '0' <= c && c <= '7';
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4437, A, 0
	.loc 7 3470 0
	# }
	.loc 7 3469 0
	#     return '0' <= c && c <= '7';
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3470 0
	# }
	mov A, 55
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4437:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_octal_char:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3481 0
	# }
	.loc 7 3475 0
	#     if (!nextoct())
	mov A, 0
	mov B, SP
	.loc 7 3470 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3475 0
	#     if (!nextoct())
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3476 0
	#         return r;
	mov A, .L4438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp nextoct
	.L4438:
	mov A, B
	eq A, 0
	jeq .L4439, A, 0
	.loc 7 3475 0
	#     if (!nextoct())
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4439:
	.loc 7 3478 0
	#     if (!nextoct())
	.loc 7 3475 0
	#     if (!nextoct())
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3478 0
	#     if (!nextoct())
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4440:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4441:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L4442:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3479 0
	#         return r;
	mov A, .L4443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp nextoct
	.L4443:
	mov A, B
	eq A, 0
	jeq .L4444, A, 0
	.loc 7 3475 0
	#     if (!nextoct())
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4444:
	.loc 7 3481 0
	# }
	.loc 7 3475 0
	#     if (!nextoct())
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3481 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4445:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4446:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L4447:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_hex_char:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 3497 0
	#         }
	.loc 7 3486 0
	#     get_pos(-2, &p);
	.loc 7 3487 0
	#     int c = readc();
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_pos
	.L4448:
	mov A, B
	add SP, 2
	.loc 7 3488 0
	#     if (!isxdigit(c))
	mov A, 0
	mov B, SP
	mov A, .L4449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4449:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3489 0
	#         errorp(p, "\\x is not followed by a hexadecimal character: %c", c);
	.loc 7 3488 0
	#     if (!isxdigit(c))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isxdigit
	.L4450:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L4451, A, 0
	.loc 7 3489 0
	#         errorp(p, "\\x is not followed by a hexadecimal character: %c", c);
	.loc 7 3488 0
	#     if (!isxdigit(c))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3489 0
	#         errorp(p, "\\x is not followed by a hexadecimal character: %c", c);
.data
	.L4452:
	.string "\\x is not followed by a hexadecimal character: %c"
.text
	mov A, .L4452
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4453
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4453:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4454:
	.string "out/8cc.c:3490"
.text
	mov A, .L4454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4455
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4455:
	mov A, B
	add SP, 4
	.L4451:
	.loc 7 3491 0
	#     for (;; c = readc()) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 3497 0
	#         }
	.L667:
	.loc 7 3488 0
	#     if (!isxdigit(c))
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 3497 0
	#         }
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4456, A, 0
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4456:
	mov A, B
	jeq .L4457, A, 0
	jmp .L671
	.L4457:
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4458, A, 0
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4458:
	mov A, B
	jeq .L4459, A, 0
	jmp .L672
	.L4459:
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4460, A, 0
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 70
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4460:
	mov A, B
	jeq .L4461, A, 0
	jmp .L673
	.L4461:
	jmp .L674
	.loc 7 3494 0
	#         case 'a' ... 'f': r = (r << 4) | (c - 'a' + 10); continue;
	.L671:
	.loc 7 3491 0
	#     for (;; c = readc()) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3494 0
	#         case 'a' ... 'f': r = (r << 4) | (c - 'a' + 10); continue;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4462:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3488 0
	#     if (!isxdigit(c))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3494 0
	#         case 'a' ... 'f': r = (r << 4) | (c - 'a' + 10); continue;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L4463:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L668
	.loc 7 3495 0
	#         case 'A' ... 'F': r = (r << 4) | (c - 'A' + 10); continue;
	.L672:
	.loc 7 3491 0
	#     for (;; c = readc()) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3495 0
	#         case 'A' ... 'F': r = (r << 4) | (c - 'A' + 10); continue;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4464
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4464:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3488 0
	#     if (!isxdigit(c))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3495 0
	#         case 'A' ... 'F': r = (r << 4) | (c - 'A' + 10); continue;
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4465
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L4465:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L668
	.loc 7 3496 0
	#         default: unreadc(c); return r;
	.L673:
	.loc 7 3491 0
	#     for (;; c = readc()) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3496 0
	#         default: unreadc(c); return r;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4466
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4466:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3488 0
	#     if (!isxdigit(c))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3496 0
	#         default: unreadc(c); return r;
	mov A, 65
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4467
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L4467:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L668
	.loc 7 3497 0
	#         }
	.L674:
	.loc 7 3488 0
	#     if (!isxdigit(c))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4468
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L4468:
	mov A, B
	add SP, 1
	.loc 7 3497 0
	#         }
	.loc 7 3491 0
	#     for (;; c = readc()) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3497 0
	#         }
	.L670:
	.L668:
	.loc 7 3492 0
	#         switch (c) {
	mov A, .L4469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4469:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3497 0
	#         }
	jmp .L667
	.L669:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_valid_ucn:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3510 0
	# }
	.loc 7 3505 0
	#         return false;
	mov A, 55296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3497 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4470, A, 0
	.loc 7 3505 0
	#         return false;
	.loc 7 3497 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3505 0
	#         return false;
	mov A, 57343
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4470:
	mov A, B
	jeq .L4471, A, 0
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4471:
	.loc 7 3510 0
	# }
	mov A, 160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3497 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 1
	jne .L4474, A, 0
	.loc 7 3510 0
	# }
	.loc 7 3497 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3510 0
	# }
	mov A, 36
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4474:
	mov A, B
	mov B, 1
	jne .L4473, A, 0
	.loc 7 3497 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3510 0
	# }
	mov A, 64
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4473:
	mov A, B
	mov B, 1
	jne .L4472, A, 0
	.loc 7 3497 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3510 0
	# }
	mov A, 96
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4472:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_universal_char:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 7 3529 0
	# }
	.loc 7 3515 0
	#     get_pos(-2, &p);
	.loc 7 3516 0
	#     unsigned int r = 0;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4475
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_pos
	.L4475:
	mov A, B
	add SP, 2
	.loc 7 3517 0
	#     for (int i = 0; i < len; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 3524 0
	#         }
	.loc 7 3518 0
	#         char c = readc();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 3524 0
	#         }
	.L675:
	.loc 7 3518 0
	#         char c = readc();
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3510 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4476, A, 0
	jmp .L4477
	.L4476:
	.loc 7 3524 0
	#         }
	jmp .L677
	.L4477:
	.loc 7 3519 0
	#         switch (c) {
	mov A, 0
	mov B, SP
	mov A, .L4478
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4478:
	mov A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 3524 0
	#         }
	.loc 7 3520 0
	#         case '0' ... '9': r = (r << 4) | (c - '0'); continue;
	.loc 7 3519 0
	#         switch (c) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 3524 0
	#         }
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4479, A, 0
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4479:
	mov A, B
	jeq .L4480, A, 0
	jmp .L679
	.L4480:
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4481, A, 0
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4481:
	mov A, B
	jeq .L4482, A, 0
	jmp .L680
	.L4482:
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4483, A, 0
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 70
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4483:
	mov A, B
	jeq .L4484, A, 0
	jmp .L681
	.L4484:
	jmp .L682
	.loc 7 3521 0
	#         case 'a' ... 'f': r = (r << 4) | (c - 'a' + 10); continue;
	.L679:
	.loc 7 3517 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3521 0
	#         case 'a' ... 'f': r = (r << 4) | (c - 'a' + 10); continue;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4485:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3519 0
	#         switch (c) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3521 0
	#         case 'a' ... 'f': r = (r << 4) | (c - 'a' + 10); continue;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L4486:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L676
	.loc 7 3522 0
	#         case 'A' ... 'F': r = (r << 4) | (c - 'A' + 10); continue;
	.L680:
	.loc 7 3517 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3522 0
	#         case 'A' ... 'F': r = (r << 4) | (c - 'A' + 10); continue;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4487:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3519 0
	#         switch (c) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3522 0
	#         case 'A' ... 'F': r = (r << 4) | (c - 'A' + 10); continue;
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4488
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L4488:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L676
	.loc 7 3523 0
	#         default: errorp(p, "invalid universal character: %c", c);
	.L681:
	.loc 7 3517 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3523 0
	#         default: errorp(p, "invalid universal character: %c", c);
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4489
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L4489:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3519 0
	#         switch (c) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3523 0
	#         default: errorp(p, "invalid universal character: %c", c);
	mov A, 65
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L4490:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L676
	.loc 7 3524 0
	#         }
	.L682:
	.loc 7 3519 0
	#         switch (c) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3524 0
	#         }
.data
	.L4491:
	.string "invalid universal character: %c"
.text
	mov A, .L4491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4492:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4493:
	.string "out/8cc.c:3524"
.text
	mov A, .L4493
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4494
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4494:
	mov A, B
	add SP, 4
	.L678:
	.L676:
	.loc 7 3518 0
	#         char c = readc();
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3524 0
	#         }
	jmp .L675
	.L677:
	.loc 7 3527 0
	#         errorp(p, "invalid universal character: \\%c%0*x", (len == 4) ? 'u' : 'U', len, r);
	.loc 7 3517 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4495
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_valid_ucn
	.L4495:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L4496, A, 0
	.loc 7 3527 0
	#         errorp(p, "invalid universal character: \\%c%0*x", (len == 4) ? 'u' : 'U', len, r);
	.loc 7 3517 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3510 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3527 0
	#         errorp(p, "invalid universal character: \\%c%0*x", (len == 4) ? 'u' : 'U', len, r);
	.loc 7 3510 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3527 0
	#         errorp(p, "invalid universal character: \\%c%0*x", (len == 4) ? 'u' : 'U', len, r);
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4497, A, 0
	mov A, 117
	jmp .L4498
	.L4497:
	mov A, 85
	.L4498:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4499:
	.string "invalid universal character: \\%c%0*x"
.text
	mov A, .L4499
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4500:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4501:
	.string "out/8cc.c:3528"
.text
	mov A, .L4501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4502:
	mov A, B
	add SP, 6
	.L4496:
	.loc 7 3529 0
	# }
	.loc 7 3517 0
	#     for (int i = 0; i < len; i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_escaped_char:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 3561 0
	# }
	.loc 7 3533 0
	#     get_pos(-1, &p);
	.loc 7 3534 0
	#     int c = readc();
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4503
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_pos
	.L4503:
	mov A, B
	add SP, 2
	.loc 7 3535 0
	#     // This switch-cases is an interesting example of magical aspects
	mov A, 0
	mov B, SP
	mov A, .L4504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4504:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3558 0
	#     }
	.loc 7 3535 0
	#     // This switch-cases is an interesting example of magical aspects
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3558 0
	#     }
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 39
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4505, A, 0
	jmp .L684
	.L4505:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4506, A, 0
	jmp .L685
	.L4506:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4507, A, 0
	jmp .L686
	.L4507:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4508, A, 0
	jmp .L687
	.L4508:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4509, A, 0
	jmp .L688
	.L4509:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 98
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4510, A, 0
	jmp .L689
	.L4510:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4511, A, 0
	jmp .L690
	.L4511:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 110
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4512, A, 0
	jmp .L691
	.L4512:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 114
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4513, A, 0
	jmp .L692
	.L4513:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 116
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4514, A, 0
	jmp .L693
	.L4514:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 118
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4515, A, 0
	jmp .L694
	.L4515:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 101
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4516, A, 0
	jmp .L695
	.L4516:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4517, A, 0
	jmp .L696
	.L4517:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4518, A, 0
	jmp .L697
	.L4518:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 85
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4519, A, 0
	jmp .L698
	.L4519:
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4520, A, 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 55
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4520:
	mov A, B
	jeq .L4521, A, 0
	jmp .L699
	.L4521:
	jmp .L683
	.loc 7 3545 0
	#         return c;
	.L684:
	.L685:
	.L686:
	.L687:
	.loc 7 3535 0
	#     // This switch-cases is an interesting example of magical aspects
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3547 0
	#     case 'b': return '\b';
	.L688:
	mov A, 7
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3548 0
	#     case 'f': return '\f';
	.L689:
	mov A, 8
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3549 0
	#     case 'n': return '\n';
	.L690:
	mov A, 12
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3550 0
	#     case 'r': return '\r';
	.L691:
	mov A, 10
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3551 0
	#     case 't': return '\t';
	.L692:
	mov A, 13
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3552 0
	#     case 'v': return '\v';
	.L693:
	mov A, 9
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3553 0
	#     case 'e': return '\033';  // '\e' is GNU extension
	.L694:
	mov A, 11
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3554 0
	#     case 'x': return read_hex_char();
	.L695:
	mov A, 27
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3555 0
	#     case 'u': return read_universal_char(4);
	.L696:
	mov A, .L4522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_hex_char
	.L4522:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3556 0
	#     case 'U': return read_universal_char(8);
	.L697:
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_universal_char
	.L4523:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3557 0
	#     case '0' ... '7': return read_octal_char(c);
	.L698:
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_universal_char
	.L4524:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3558 0
	#     }
	.L699:
	.loc 7 3535 0
	#     // This switch-cases is an interesting example of magical aspects
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_octal_char
	.L4525:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3558 0
	#     }
	.L683:
	.loc 7 3269 0
	# 
	.loc 7 3535 0
	#     // This switch-cases is an interesting example of magical aspects
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3269 0
	# 
.data
	.L4526:
	.string "unknown escape character: \\%c"
.text
	mov A, .L4526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4527:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4528:
	.string "out/8cc.c:3560"
.text
	mov A, .L4528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp warnf
	.L4529:
	mov A, B
	add SP, 4
	.loc 7 3561 0
	# }
	.loc 7 3535 0
	#     // This switch-cases is an interesting example of magical aspects
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_char:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3572 0
	# }
	.loc 7 3565 0
	#     int r = (c == '\\') ? read_escaped_char() : c;
	mov A, 0
	mov B, SP
	mov A, .L4530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4530:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3566 0
	#     c = readc();
	mov A, 0
	mov B, SP
	.loc 7 3565 0
	#     int r = (c == '\\') ? read_escaped_char() : c;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3566 0
	#     c = readc();
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4531, A, 0
	mov A, .L4532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_escaped_char
	.L4532:
	mov A, B
	jmp .L4533
	.L4531:
	.loc 7 3565 0
	#     int r = (c == '\\') ? read_escaped_char() : c;
	mov B, BP
	add B, 16777215
	load A, B
	.L4533:
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3567 0
	#     if (c != '\'')
	mov A, .L4534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4534:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3568 0
	#         errorp(pos, "unterminated char");
	.loc 7 3565 0
	#     int r = (c == '\\') ? read_escaped_char() : c;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3568 0
	#         errorp(pos, "unterminated char");
	mov A, 39
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4535, A, 0
.data
	.L4536:
	.string "unterminated char"
.text
	mov A, .L4536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, pos
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4537:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4538:
	.string "out/8cc.c:3569"
.text
	mov A, .L4538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4539:
	mov A, B
	add SP, 3
	.L4535:
	.loc 7 3570 0
	#         return make_char((char)r, enc);
	.loc 7 3561 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4540, A, 0
	.loc 7 3570 0
	#         return make_char((char)r, enc);
	.loc 7 3561 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3570 0
	#         return make_char((char)r, enc);
	.loc 7 3566 0
	#     c = readc();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_char
	.L4541:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4540:
	.loc 7 3572 0
	# }
	.loc 7 3561 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3566 0
	#     c = readc();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_char
	.L4542:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 3597 0
	# }
	.loc 7 3577 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L4543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L4543:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3594 0
	#     }
	.L700:
	.loc 7 3579 0
	#         if (c == EOF)
	mov A, 0
	mov B, SP
	mov A, .L4544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4544:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3580 0
	#             errorp(pos, "unterminated string");
	.loc 7 3579 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3580 0
	#             errorp(pos, "unterminated string");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4545, A, 0
.data
	.L4546:
	.string "unterminated string"
.text
	mov A, .L4546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, pos
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4547:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4548:
	.string "out/8cc.c:3581"
.text
	mov A, .L4548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4549:
	mov A, B
	add SP, 3
	.L4545:
	.loc 7 3582 0
	#             break;
	.loc 7 3579 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3582 0
	#             break;
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4550, A, 0
	jmp .L702
	.L4550:
	.loc 7 3586 0
	#         }
	.loc 7 3584 0
	#             buf_write(b, c);
	.loc 7 3579 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3584 0
	#             buf_write(b, c);
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4551, A, 0
	.loc 7 3586 0
	#         }
	.loc 7 3585 0
	#             continue;
	.loc 7 3579 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3577 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4552:
	mov A, B
	add SP, 2
	.loc 7 3586 0
	#         }
	jmp .L701
	.L4551:
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, .L4554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_peek
	.L4554:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L4553, A, 0
	mov A, .L4555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_peek
	.L4555:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 85
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4553:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3589 0
	#         if (isucs) {
	mov A, .L4556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_escaped_char
	.L4556:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3592 0
	#         }
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L4557, A, 0
	.loc 7 3592 0
	#         }
	.loc 7 3591 0
	#             continue;
	.loc 7 3579 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3577 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp write_utf8
	.L4558:
	mov A, B
	add SP, 2
	.loc 7 3592 0
	#         }
	jmp .L701
	.L4557:
	.loc 7 3594 0
	#     }
	.loc 7 3579 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3577 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4559:
	mov A, B
	add SP, 2
	.loc 7 3594 0
	#     }
	.L701:
	jmp .L700
	.L702:
	.loc 7 3596 0
	#     return make_strtok(buf_body(b), buf_len(b), enc);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3577 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4560:
	mov A, B
	add SP, 2
	.loc 7 3597 0
	# }
	.loc 7 3572 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3597 0
	# }
	.loc 7 3577 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_len
	.L4561:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3597 0
	# }
	.loc 7 3577 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L4562:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_strtok
	.L4563:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_ident:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3617 0
	#     }
	.loc 7 3601 0
	#     buf_write(b, c);
	mov A, 0
	mov B, SP
	mov A, .L4564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L4564:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3602 0
	#     for (;;) {
	.loc 7 3597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3601 0
	#     buf_write(b, c);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4565:
	mov A, B
	add SP, 2
	.loc 7 3617 0
	#     }
	.L703:
	.loc 7 3604 0
	#         if (isalnum(c) || (c & 0x80) || c == '_' || c == '$') {
	mov A, .L4566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4566:
	mov A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 3607 0
	#         }
	.loc 7 3605 0
	#             buf_write(b, c);
	.loc 7 3597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalnum
	.L4570:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L4569, A, 0
	.loc 7 3605 0
	#             buf_write(b, c);
	.loc 7 3597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3605 0
	#             buf_write(b, c);
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L4571:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L4569:
	mov A, B
	mov B, 1
	jne .L4568, A, 0
	.loc 7 3597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3605 0
	#             buf_write(b, c);
	mov A, 95
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4568:
	mov A, B
	mov B, 1
	jne .L4567, A, 0
	.loc 7 3597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3605 0
	#             buf_write(b, c);
	mov A, 36
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4567:
	mov A, B
	jeq .L4572, A, 0
	.loc 7 3607 0
	#         }
	.loc 7 3606 0
	#             continue;
	.loc 7 3597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3601 0
	#     buf_write(b, c);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4573:
	mov A, B
	add SP, 2
	.loc 7 3607 0
	#         }
	jmp .L704
	.L4572:
	.loc 7 3613 0
	#         }
	.loc 7 3611 0
	#             write_utf8(b, read_escaped_char());
	.loc 7 3597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3611 0
	#             write_utf8(b, read_escaped_char());
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L4574, A, 0
	mov A, .L4576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_peek
	.L4576:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L4575, A, 0
	mov A, .L4577
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_peek
	.L4577:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 85
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4575:
	mov A, B
	mov B, A
	ne B, 0
	.L4574:
	mov A, B
	jeq .L4578, A, 0
	.loc 7 3613 0
	#         }
	.loc 7 3612 0
	#             continue;
	mov A, .L4579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_escaped_char
	.L4579:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3601 0
	#     buf_write(b, c);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp write_utf8
	.L4580:
	mov A, B
	add SP, 2
	.loc 7 3613 0
	#         }
	jmp .L704
	.L4578:
	.loc 7 3615 0
	#         buf_write(b, '\0');
	.loc 7 3597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L4581:
	mov A, B
	add SP, 1
	.loc 7 3616 0
	#         return make_ident(buf_body(b));
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3601 0
	#     buf_write(b, c);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4582:
	mov A, B
	add SP, 2
	.loc 7 3617 0
	#     }
	.loc 7 3601 0
	#     buf_write(b, c);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L4583:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ident
	.L4584:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3617 0
	#     }
	.L704:
	jmp .L703
	.L705:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_block_comment:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 3631 0
	#     }
	.loc 7 3622 0
	#     get_pos(-2, &p);
	.loc 7 3623 0
	#     bool maybe_end = false;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_pos
	.L4585:
	mov A, B
	add SP, 2
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3631 0
	#     }
	.L706:
	.loc 7 3626 0
	#         if (c == EOF)
	mov A, 0
	mov B, SP
	mov A, .L4586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4586:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3627 0
	#             errorp(p, "premature end of block comment");
	.loc 7 3626 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3627 0
	#             errorp(p, "premature end of block comment");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4587, A, 0
.data
	.L4588:
	.string "premature end of block comment"
.text
	mov A, .L4588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4589:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4590:
	.string "out/8cc.c:3628"
.text
	mov A, .L4590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4591:
	mov A, B
	add SP, 3
	.L4587:
	.loc 7 3629 0
	#             return;
	.loc 7 3626 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3629 0
	#             return;
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L4592, A, 0
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	ne B, 0
	.L4592:
	mov A, B
	jeq .L4593, A, 0
	.loc 7 3629 0
	#             return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4593:
	.loc 7 3631 0
	#     }
	.loc 7 3626 0
	#         if (c == EOF)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3631 0
	#     }
	mov A, 42
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.L707:
	jmp .L706
	.L708:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_hash_digraph:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3650 0
	# }
	.loc 7 3640 0
	#         return make_keyword('}');
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4594:
	mov A, B
	add SP, 1
	jeq .L4595, A, 0
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4596:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4595:
	.loc 7 3648 0
	#     }
	.loc 7 3642 0
	#         if (next('%')) {
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4597:
	mov A, B
	add SP, 1
	jeq .L4598, A, 0
	.loc 7 3648 0
	#     }
	.loc 7 3646 0
	#         }
	.loc 7 3643 0
	#             if (next(':'))
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4599:
	mov A, B
	add SP, 1
	jeq .L4600, A, 0
	.loc 7 3646 0
	#         }
	.loc 7 3644 0
	#                 return make_keyword(KHASHHASH);
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4601:
	mov A, B
	add SP, 1
	jeq .L4602, A, 0
	.loc 6 205 0
	# }
	mov A, 339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4603:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4602:
	.loc 7 3646 0
	#         }
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L4604:
	mov A, B
	add SP, 1
	.L4600:
	.loc 7 3648 0
	#     }
	mov A, 35
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4605:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4598:
	.loc 7 3650 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_rep:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3654 0
	# }
	.loc 7 3650 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4606:
	mov A, B
	add SP, 1
	jeq .L4607, A, 0
	mov B, BP
	add B, 3
	load A, B
	jmp .L4608
	.L4607:
	mov B, BP
	add B, 4
	load A, B
	.L4608:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4609
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4609:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_rep2:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3660 0
	# }
	.loc 7 3658 0
	#         return make_keyword(t1);
	.loc 7 3654 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4610:
	mov A, B
	add SP, 1
	jeq .L4611, A, 0
	.loc 7 3658 0
	#         return make_keyword(t1);
	.loc 7 3654 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4612:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4611:
	.loc 7 3660 0
	# }
	.loc 7 3654 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4613:
	mov A, B
	add SP, 1
	jeq .L4614, A, 0
	mov B, BP
	add B, 5
	load A, B
	jmp .L4615
	.L4614:
	.loc 7 3660 0
	# }
	.loc 7 3654 0
	# }
	mov B, BP
	add B, 6
	load A, B
	.L4615:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4616
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4616:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_read_token:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 3740 0
	#     }
	.loc 7 3664 0
	#         return space_token;
	mov A, .L4617
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_space
	.L4617:
	mov A, B
	jeq .L4618, A, 0
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, space_token
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4618:
	.loc 7 3666 0
	#     int c = readc();
	mov A, .L4619
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp mark
	.L4619:
	mov A, B
	.loc 7 3667 0
	#     switch (c) {
	mov A, 0
	mov B, SP
	mov A, .L4620
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4620:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3740 0
	#     }
	.loc 7 3667 0
	#     switch (c) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3740 0
	#     }
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4621, A, 0
	jmp .L710
	.L4621:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 58
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4622, A, 0
	jmp .L711
	.L4622:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 35
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4623, A, 0
	jmp .L712
	.L4623:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4624, A, 0
	jmp .L713
	.L4624:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 42
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4625, A, 0
	jmp .L714
	.L4625:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 61
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4626, A, 0
	jmp .L715
	.L4626:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 33
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4627, A, 0
	jmp .L716
	.L4627:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 38
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4628, A, 0
	jmp .L717
	.L4628:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 124
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4629, A, 0
	jmp .L718
	.L4629:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 94
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4630, A, 0
	jmp .L719
	.L4630:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4631, A, 0
	jmp .L720
	.L4631:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 39
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4632, A, 0
	jmp .L721
	.L4632:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4633, A, 0
	jmp .L722
	.L4633:
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4634, A, 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 116
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4634:
	mov A, B
	jeq .L4635, A, 0
	jmp .L723
	.L4635:
	mov A, 118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4636, A, 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 122
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4636:
	mov A, B
	jeq .L4637, A, 0
	jmp .L724
	.L4637:
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4638, A, 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 75
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4638:
	mov A, B
	jeq .L4639, A, 0
	jmp .L725
	.L4639:
	mov A, 77
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4640, A, 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 84
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4640:
	mov A, B
	jeq .L4641, A, 0
	jmp .L726
	.L4641:
	mov A, 86
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4642, A, 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 90
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4642:
	mov A, B
	jeq .L4643, A, 0
	jmp .L727
	.L4643:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 95
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4644, A, 0
	jmp .L728
	.L4644:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 36
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4645, A, 0
	jmp .L729
	.L4645:
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4646, A, 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 253
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4646:
	mov A, B
	jeq .L4647, A, 0
	jmp .L730
	.L4647:
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L4648, A, 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L4648:
	mov A, B
	jeq .L4649, A, 0
	jmp .L731
	.L4649:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 76
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4650, A, 0
	jmp .L732
	.L4650:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 85
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4651, A, 0
	jmp .L733
	.L4651:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4652, A, 0
	jmp .L734
	.L4652:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 46
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4653, A, 0
	jmp .L735
	.L4653:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 40
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4654, A, 0
	jmp .L736
	.L4654:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 41
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4655, A, 0
	jmp .L737
	.L4655:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 44
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4656, A, 0
	jmp .L738
	.L4656:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 59
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4657, A, 0
	jmp .L739
	.L4657:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 91
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4658, A, 0
	jmp .L740
	.L4658:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 93
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4659, A, 0
	jmp .L741
	.L4659:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 123
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4660, A, 0
	jmp .L742
	.L4660:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 125
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4661, A, 0
	jmp .L743
	.L4661:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4662, A, 0
	jmp .L744
	.L4662:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 126
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4663, A, 0
	jmp .L745
	.L4663:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4664, A, 0
	jmp .L746
	.L4664:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 60
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4665, A, 0
	jmp .L747
	.L4665:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 62
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4666, A, 0
	jmp .L748
	.L4666:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4667, A, 0
	jmp .L749
	.L4667:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16777215
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4668, A, 0
	jmp .L750
	.L4668:
	jmp .L751
	.loc 7 3669 0
	#     case ':': return make_keyword(next('>') ? ']' : ':');
	.L710:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, newline_token
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3670 0
	#     case '#': return make_keyword(next('#') ? KHASHHASH : '#');
	.L711:
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4669:
	mov A, B
	add SP, 1
	jeq .L4670, A, 0
	mov A, 93
	jmp .L4671
	.L4670:
	mov A, 58
	.L4671:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4672:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3671 0
	#     case '+': return read_rep2('+', OP_INC, '=', OP_A_ADD, '+');
	.L712:
	mov A, 35
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4673:
	mov A, B
	add SP, 1
	jeq .L4674, A, 0
	.loc 6 205 0
	# }
	mov A, 339
	jmp .L4675
	.L4674:
	.loc 7 3671 0
	#     case '+': return read_rep2('+', OP_INC, '=', OP_A_ADD, '+');
	mov A, 35
	.L4675:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4676:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3672 0
	#     case '*': return read_rep('=', OP_A_MUL, '*');
	.L713:
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3672 0
	#     case '*': return read_rep('=', OP_A_MUL, '*');
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3672 0
	#     case '*': return read_rep('=', OP_A_MUL, '*');
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4677
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep2
	.L4677:
	mov A, B
	add SP, 5
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3673 0
	#     case '=': return read_rep('=', OP_EQ, '=');
	.L714:
	mov A, 42
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3673 0
	#     case '=': return read_rep('=', OP_EQ, '=');
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep
	.L4678:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3674 0
	#     case '!': return read_rep('=', OP_NE, '!');
	.L715:
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3674 0
	#     case '!': return read_rep('=', OP_NE, '!');
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep
	.L4679:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3675 0
	#     case '&': return read_rep2('&', OP_LOGAND, '=', OP_A_AND, '&');
	.L716:
	mov A, 33
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3675 0
	#     case '&': return read_rep2('&', OP_LOGAND, '=', OP_A_AND, '&');
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep
	.L4680:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3676 0
	#     case '|': return read_rep2('|', OP_LOGOR, '=', OP_A_OR, '|');
	.L717:
	mov A, 38
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3676 0
	#     case '|': return read_rep2('|', OP_LOGOR, '=', OP_A_OR, '|');
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3676 0
	#     case '|': return read_rep2('|', OP_LOGOR, '=', OP_A_OR, '|');
	mov A, 38
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep2
	.L4681:
	mov A, B
	add SP, 5
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3677 0
	#     case '^': return read_rep('=', OP_A_XOR, '^');
	.L718:
	mov A, 124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3677 0
	#     case '^': return read_rep('=', OP_A_XOR, '^');
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3677 0
	#     case '^': return read_rep('=', OP_A_XOR, '^');
	mov A, 124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep2
	.L4682:
	mov A, B
	add SP, 5
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3678 0
	#     case '"': return read_string(ENC_NONE);
	.L719:
	mov A, 94
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3678 0
	#     case '"': return read_string(ENC_NONE);
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep
	.L4683:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3679 0
	#     case '\'': return read_char(ENC_NONE);
	.L720:
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_string
	.L4684:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3680 0
	#     case '/': return make_keyword(next('=') ? OP_A_DIV : '/');
	.L721:
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_char
	.L4685:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3681 0
	#     case 'a' ... 't': case 'v' ... 'z': case 'A' ... 'K':
	.L722:
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4686:
	mov A, B
	add SP, 1
	jeq .L4687, A, 0
	.loc 6 205 0
	# }
	mov A, 292
	jmp .L4688
	.L4687:
	.loc 7 3681 0
	#     case 'a' ... 't': case 'v' ... 'z': case 'A' ... 'K':
	mov A, 47
	.L4688:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4689:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3682 0
	#     case 'M' ... 'T': case 'V' ... 'Z': case '_': case '$':
	.L723:
	.L724:
	.L725:
	.L726:
	.L727:
	.L728:
	.L729:
	.L730:
	.loc 7 3667 0
	#     switch (c) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_ident
	.L4690:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3686 0
	#         return lex_read_number(c);
	.L731:
	.loc 7 3667 0
	#     switch (c) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_read_number
	.L4691:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3693 0
	#     }
	.loc 7 3688 0
	#         // Wide/char32_t character/string literal
	.L732:
	.loc 7 3693 0
	#     }
	.loc 7 3688 0
	#         // Wide/char32_t character/string literal
	.L733:
	.loc 7 3693 0
	#     }
	.loc 7 3690 0
	#         if (next('"'))  return read_string(enc);
	mov A, 0
	mov B, SP
	.loc 7 3667 0
	#     switch (c) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3690 0
	#         if (next('"'))  return read_string(enc);
	mov A, 76
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4692, A, 0
	.loc 6 205 0
	# }
	mov A, 4
	jmp .L4693
	.L4692:
	mov A, 2
	.L4693:
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3691 0
	#         if (next('\'')) return read_char(enc);
	mov A, 34
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4694:
	mov A, B
	add SP, 1
	jeq .L4695, A, 0
	.loc 7 3690 0
	#         if (next('"'))  return read_string(enc);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_string
	.L4696:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4695:
	.loc 7 3692 0
	#         return read_ident(c);
	mov A, 39
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4697:
	mov A, B
	add SP, 1
	jeq .L4698, A, 0
	.loc 7 3690 0
	#         if (next('"'))  return read_string(enc);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_char
	.L4699:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4698:
	.loc 7 3693 0
	#     }
	.loc 7 3667 0
	#     switch (c) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_ident
	.L4700:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3695 0
	#         if (next('"')) return read_string(ENC_CHAR16);
	.L734:
	mov A, 34
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4701:
	mov A, B
	add SP, 1
	jeq .L4702, A, 0
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_string
	.L4703:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4702:
	.loc 7 3697 0
	#         // C11 6.4.5: UTF-8 string literal
	mov A, 39
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4704:
	mov A, B
	add SP, 1
	jeq .L4705, A, 0
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_char
	.L4706:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4705:
	.loc 7 3702 0
	#         }
	.loc 7 3699 0
	#             if (next('"'))
	mov A, 56
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4707:
	mov A, B
	add SP, 1
	jeq .L4708, A, 0
	.loc 7 3702 0
	#         }
	.loc 7 3700 0
	#                 return read_string(ENC_UTF8);
	mov A, 34
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4709:
	mov A, B
	add SP, 1
	jeq .L4710, A, 0
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_string
	.L4711:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4710:
	.loc 7 3702 0
	#         }
	mov A, 56
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unreadc
	.L4712:
	mov A, B
	add SP, 1
	.L4708:
	.loc 7 3704 0
	#     case '.':
	.loc 7 3667 0
	#     switch (c) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_ident
	.L4713:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3705 0
	#         if (isdigit(lex_peek()))
	.L735:
	mov A, .L4714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_peek
	.L4714:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4715
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L4715:
	mov A, B
	add SP, 1
	jeq .L4716, A, 0
	.loc 7 3667 0
	#     switch (c) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_read_number
	.L4717:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4716:
	.loc 7 3711 0
	#         }
	.loc 7 3708 0
	#             if (next('.'))
	mov A, 46
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4718:
	mov A, B
	add SP, 1
	jeq .L4719, A, 0
	.loc 7 3711 0
	#         }
	.loc 7 3709 0
	#                 return make_keyword(KELLIPSIS);
	mov A, 46
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4720
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4720:
	mov A, B
	add SP, 1
	jeq .L4721, A, 0
	.loc 6 205 0
	# }
	mov A, 347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4722:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4721:
	.loc 7 3711 0
	#         }
.data
	.L4723:
	.string ".."
.text
	mov A, .L4723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4724
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ident
	.L4724:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4719:
	.loc 7 3713 0
	#     case '(': case ')': case ',': case ';': case '[': case ']': case '{':
	mov A, 46
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4725:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3714 0
	#     case '}': case '?': case '~':
	.L736:
	.L737:
	.L738:
	.L739:
	.L740:
	.L741:
	.L742:
	.L743:
	.L744:
	.L745:
	.loc 7 3667 0
	#     switch (c) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4726:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3717 0
	#         if (next('-')) return make_keyword(OP_DEC);
	.L746:
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4727:
	mov A, B
	add SP, 1
	jeq .L4728, A, 0
	.loc 6 205 0
	# }
	mov A, 300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4729
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4729:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4728:
	.loc 7 3719 0
	#         if (next('=')) return make_keyword(OP_A_SUB);
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4730:
	mov A, B
	add SP, 1
	jeq .L4731, A, 0
	.loc 6 205 0
	# }
	mov A, 289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4732
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4732:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4731:
	.loc 7 3720 0
	#         return make_keyword('-');
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4733:
	mov A, B
	add SP, 1
	jeq .L4734, A, 0
	.loc 6 205 0
	# }
	mov A, 298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4735
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4735:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4734:
	.loc 7 3721 0
	#     case '<':
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4736
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4736:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3722 0
	#         if (next('<')) return read_rep('=', OP_A_SAL, OP_SAL);
	.L747:
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4737:
	mov A, B
	add SP, 1
	jeq .L4738, A, 0
	.loc 6 205 0
	# }
	mov A, 308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3722 0
	#         if (next('<')) return read_rep('=', OP_A_SAL, OP_SAL);
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4739
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep
	.L4739:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4738:
	.loc 7 3724 0
	#         if (next(':')) return make_keyword('[');
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4740
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4740:
	mov A, B
	add SP, 1
	jeq .L4741, A, 0
	.loc 6 205 0
	# }
	mov A, 304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4742:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4741:
	.loc 7 3725 0
	#         if (next('%')) return make_keyword('{');
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4743:
	mov A, B
	add SP, 1
	jeq .L4744, A, 0
	mov A, 91
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4745:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4744:
	.loc 7 3726 0
	#         return make_keyword('<');
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4746:
	mov A, B
	add SP, 1
	jeq .L4747, A, 0
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4748:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4747:
	.loc 7 3727 0
	#     case '>':
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4749:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3728 0
	#         if (next('=')) return make_keyword(OP_GE);
	.L748:
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4750:
	mov A, B
	add SP, 1
	jeq .L4751, A, 0
	.loc 6 205 0
	# }
	mov A, 302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4752:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4751:
	.loc 7 3730 0
	#         return make_keyword('>');
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4753:
	mov A, B
	add SP, 1
	jeq .L4754, A, 0
	.loc 6 205 0
	# }
	mov A, 309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3730 0
	#         return make_keyword('>');
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep
	.L4755:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4754:
	.loc 7 3731 0
	#     case '%': {
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_keyword
	.L4756:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3736 0
	#     }
	.loc 7 3732 0
	#         Token *tok = read_hash_digraph();
	.L749:
	.loc 7 3736 0
	#     }
	.loc 7 3733 0
	#         if (tok)
	mov A, 0
	mov B, SP
	mov A, .L4757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_hash_digraph
	.L4757:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3734 0
	#             return tok;
	.loc 7 3733 0
	#         if (tok)
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L4758, A, 0
	.loc 7 3734 0
	#             return tok;
	.loc 7 3733 0
	#         if (tok)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4758:
	.loc 7 3736 0
	#     }
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3736 0
	#     }
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rep
	.L4759:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3738 0
	#         return eof_token;
	.L750:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, eof_token
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3740 0
	#     }
	.L751:
	.loc 7 3667 0
	#     switch (c) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_invalid
	.L4760:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3740 0
	#     }
	.L709:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
buffer_empty:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3745 0
	# }
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, buffers
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4762:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3745 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L4761, A, 0
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, buffers
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_head
	.L4763:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4764:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3745 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4761:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_header_file_name:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 3785 0
	# }
	.loc 7 3760 0
	#         return NULL;
	mov A, .L4765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buffer_empty
	.L4765:
	mov A, B
	eq A, 0
	jeq .L4766, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4766:
	.loc 7 3762 0
	#     Pos p;
	mov A, .L4767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_space
	.L4767:
	mov A, B
	.loc 7 3763 0
	#     get_pos(0, &p);
	.loc 7 3764 0
	#     char close;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_pos
	.L4768:
	mov A, B
	add SP, 2
	.loc 7 3765 0
	#     if (next('"')) {
	.loc 7 3773 0
	#     }
	.loc 7 3766 0
	#         *std = false;
	mov A, 34
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4769:
	mov A, B
	add SP, 1
	jeq .L4770, A, 0
	.loc 7 3768 0
	#     } else if (next('<')) {
	.loc 7 3767 0
	#         close = '"';
	mov A, 0
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3745 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3768 0
	#     } else if (next('<')) {
	mov A, 34
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L4771
	.L4770:
	.loc 7 3773 0
	#     }
	.loc 7 3768 0
	#     } else if (next('<')) {
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4772:
	mov A, B
	add SP, 1
	jeq .L4773, A, 0
	.loc 7 3771 0
	#     } else {
	.loc 7 3770 0
	#         close = '>';
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3745 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3771 0
	#     } else {
	mov A, 62
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L4774
	.L4773:
	.loc 7 3773 0
	#     }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4774:
	.L4771:
	.loc 7 3775 0
	#     while (!next(close)) {
	mov A, 0
	mov B, SP
	mov A, .L4775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L4775:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 3780 0
	#     }
	.L752:
	.loc 7 3776 0
	#         int c = readc();
	.loc 7 3765 0
	#     if (next('"')) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4776:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L4777, A, 0
	.loc 7 3780 0
	#     }
	.loc 7 3777 0
	#         if (c == EOF || c == '\n')
	mov A, 0
	mov B, SP
	mov A, .L4778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp readc
	.L4778:
	mov A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 3778 0
	#             errorp(p, "premature end of header name");
	.loc 7 3777 0
	#         if (c == EOF || c == '\n')
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3778 0
	#             errorp(p, "premature end of header name");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L4779, A, 0
	.loc 7 3777 0
	#         if (c == EOF || c == '\n')
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3778 0
	#             errorp(p, "premature end of header name");
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4779:
	mov A, B
	jeq .L4780, A, 0
.data
	.L4781:
	.string "premature end of header name"
.text
	mov A, .L4781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4782:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4783:
	.string "out/8cc.c:3779"
.text
	mov A, .L4783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4784:
	mov A, B
	add SP, 3
	.L4780:
	.loc 7 3780 0
	#     }
	.loc 7 3777 0
	#         if (c == EOF || c == '\n')
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3775 0
	#     while (!next(close)) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4785:
	mov A, B
	add SP, 2
	jmp .L4786
	.L4777:
	.loc 7 3780 0
	#     }
	jmp .L753
	.L4786:
	jmp .L752
	.L753:
	.loc 7 3782 0
	#         errorp(p, "header name should not be empty");
	.loc 7 3775 0
	#     while (!next(close)) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_len
	.L4787:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3782 0
	#         errorp(p, "header name should not be empty");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4788, A, 0
.data
	.L4789:
	.string "header name should not be empty"
.text
	mov A, .L4789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4790:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4791:
	.string "out/8cc.c:3783"
.text
	mov A, .L4791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4792:
	mov A, B
	add SP, 3
	.L4788:
	.loc 7 3784 0
	#     return buf_body(b);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3775 0
	#     while (!next(close)) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L4793:
	mov A, B
	add SP, 2
	.loc 7 3785 0
	# }
	.loc 7 3775 0
	#     while (!next(close)) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L4794:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_keyword:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3789 0
	# }
	.loc 7 3785 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L4795, A, 0
	.loc 7 3789 0
	# }
	.loc 7 3785 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L4795:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
token_buffer_stash:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3797 0
	# }
	.loc 7 3789 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, buffers
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L4796:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
token_buffer_unstash:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3801 0
	# }
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, buffers
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_pop
	.L4797:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unget_token:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3808 0
	# }
	.loc 7 3805 0
	#         return;
	.loc 7 3801 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4798, A, 0
	.loc 7 3805 0
	#         return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4798:
	.loc 7 3807 0
	#     vec_push(buf, tok);
	mov A, 0
	mov B, SP
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, buffers
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L4799:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3808 0
	# }
	.loc 7 3801 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3807 0
	#     vec_push(buf, tok);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L4800:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lex_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 3823 0
	# }
	.loc 7 3815 0
	#     Token *r = do_read_token();
	.loc 7 3808 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_file_string
	.L4801:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4802
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stream_stash
	.L4802:
	mov A, B
	add SP, 1
	.loc 7 3816 0
	#     next('\n');
	mov A, 0
	mov B, SP
	mov A, .L4803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_read_token
	.L4803:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3817 0
	#     Pos p;
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next
	.L4804:
	mov A, B
	add SP, 1
	.loc 7 3818 0
	#     get_pos(0, &p);
	.loc 7 3819 0
	#     if (lex_peek() != EOF)
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_pos
	.L4805:
	mov A, B
	add SP, 2
	.loc 7 3820 0
	#         errorp(p, "unconsumed input: %s", s);
	mov A, .L4806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_peek
	.L4806:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4807, A, 0
	.loc 7 3808 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3820 0
	#         errorp(p, "unconsumed input: %s", s);
.data
	.L4808:
	.string "unconsumed input: %s"
.text
	mov A, .L4808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pos_string
	.L4809:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4810:
	.string "out/8cc.c:3821"
.text
	mov A, .L4810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L4811:
	mov A, B
	add SP, 4
	.L4807:
	.loc 7 3822 0
	#     return r;
	mov A, .L4812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stream_unstash
	.L4812:
	mov A, B
	.loc 7 3823 0
	# }
	.loc 7 3816 0
	#     next('\n');
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lex:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 3839 0
	# }
	.loc 7 3827 0
	#     if (vec_len(buf) > 0)
	mov A, 0
	mov B, SP
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, buffers
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L4813:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3828 0
	#         return vec_pop(buf);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3827 0
	#     if (vec_len(buf) > 0)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4814:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4815, A, 0
	.loc 7 3828 0
	#         return vec_pop(buf);
	.loc 7 3827 0
	#     if (vec_len(buf) > 0)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_pop
	.L4816:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4815:
	.loc 7 3830 0
	#         return eof_token;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, buffers
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4817:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4818, A, 0
	.loc 7 3830 0
	#         return eof_token;
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, eof_token
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4818:
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, .L4819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp current_file
	.L4819:
	mov A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3833 0
	#     while (tok->kind == TSPACE) {
	mov A, 0
	mov B, SP
	mov A, .L4820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_read_token
	.L4820:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3836 0
	#     }
	.L754:
	.loc 7 3834 0
	#         tok = do_read_token();
	.loc 7 3833 0
	#     while (tok->kind == TSPACE) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4821, A, 0
	.loc 7 3836 0
	#     }
	.loc 7 3835 0
	#         tok->space = true;
	mov A, .L4822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_read_token
	.L4822:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3836 0
	#     }
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3833 0
	#     while (tok->kind == TSPACE) {
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	jmp .L4823
	.L4821:
	.loc 7 3836 0
	#     }
	jmp .L755
	.L4823:
	jmp .L754
	.L755:
	.loc 7 3838 0
	#     return tok;
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3833 0
	#     while (tok->kind == TSPACE) {
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 3839 0
	# }
	.loc 7 3833 0
	#     while (tok->kind == TSPACE) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	infile:

	.long 0
	.data
	outfile:

	.long 0
	.data
	asmfile:

	.long 0
	.data
	dumpast:

	.long 0
	.data
	cpponly:

	.long 0
	.data
	dumpasm:

	.long 0
	.data
	dontlink:

	.long 0
	.data
	cppdefs:

	.long 0
	.data 0
tmpfiles:
	.data 1
	.L4824:
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4824
	.text
get_base_file:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3991 0
	# }
	.loc 7 3839 0
	# }
	mov B, infile
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
preprocess:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4006 0
	# }
	.loc 7 4003 0
	#     }
	.L757:
	.loc 7 3996 0
	#         if (tok->kind == TEOF)
	mov A, 0
	mov B, SP
	mov A, .L4825
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_token
	.L4825:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3997 0
	#             break;
	.loc 7 3996 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4826, A, 0
	.loc 7 3997 0
	#             break;
	jmp .L759
	.L4826:
	.loc 7 3999 0
	#             printf("\n");
	.loc 7 3996 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L4827, A, 0
	.loc 7 3999 0
	#             printf("\n");
.data
	.L4828:
	.string "\n"
.text
	mov A, .L4828
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L4829:
	mov A, B
	add SP, 1
	.L4827:
	.loc 7 4001 0
	#             printf(" ");
	.loc 7 3996 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 4
	load A, B
	jeq .L4830, A, 0
	.loc 7 4001 0
	#             printf(" ");
.data
	.L4831:
	.string " "
.text
	mov A, .L4831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L4832:
	mov A, B
	add SP, 1
	.L4830:
	.loc 7 4003 0
	#     }
	.loc 7 3996 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L4833:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4003 0
	#     }
.data
	.L4834:
	.string "%s"
.text
	mov A, .L4834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L4835:
	mov A, B
	add SP, 2
	.L758:
	jmp .L757
	.L759:
	.loc 7 4005 0
	#     exit(0);
.data
	.L4836:
	.string "\n"
.text
	mov A, .L4836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L4837:
	mov A, B
	add SP, 1
	.loc 7 4006 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
main:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 4057 0
	# }
	.loc 7 4011 0
	# #else
.data
	.L4838:
	.string "-"
.text
	mov A, .L4838
	mov B, infile
	store A, B
	.loc 7 4018 0
	#     cpp_init();
	.loc 7 3839 0
	# }
	mov B, infile
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lex_init
	.L4839:
	mov A, B
	add SP, 1
	.loc 7 4019 0
	#     parse_init();
	mov A, .L4840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_init
	.L4840:
	mov A, B
	.loc 7 4020 0
	# #ifndef __eir__
	mov A, .L4841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse_init
	.L4841:
	mov A, B
	.loc 7 4027 0
	#         preprocess();
	.loc 7 3839 0
	# }
	mov B, cpponly
	load A, B
	jeq .L4842, A, 0
	.loc 7 4027 0
	#         preprocess();
	mov A, .L4843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp preprocess
	.L4843:
	mov A, B
	.L4842:
	.loc 7 4030 0
	#     for (int i = 0; i < vec_len(toplevels); i++) {
	mov A, 0
	mov B, SP
	mov A, .L4844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_toplevels
	.L4844:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4033 0
	#             printf("%s", node2s(v));
	.loc 7 4031 0
	#         Node *v = vec_get(toplevels, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 4033 0
	#             printf("%s", node2s(v));
	.L760:
	.loc 7 4031 0
	#         Node *v = vec_get(toplevels, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4030 0
	#     for (int i = 0; i < vec_len(toplevels); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4845:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4846, A, 0
	jmp .L4847
	.L4846:
	.loc 7 4033 0
	#             printf("%s", node2s(v));
	jmp .L762
	.L4847:
	.loc 7 4032 0
	#         if (dumpast)
	mov A, 0
	mov B, SP
	.loc 7 4031 0
	#         Node *v = vec_get(toplevels, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4030 0
	#     for (int i = 0; i < vec_len(toplevels); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L4848:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4033 0
	#             printf("%s", node2s(v));
	.loc 7 3839 0
	# }
	mov B, dumpast
	load A, B
	jeq .L4849, A, 0
	.loc 7 4033 0
	#             printf("%s", node2s(v));
	.loc 7 4032 0
	#         if (dumpast)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L4850:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4033 0
	#             printf("%s", node2s(v));
.data
	.L4851:
	.string "%s"
.text
	mov A, .L4851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L4852:
	mov A, B
	add SP, 2
	jmp .L4853
	.L4849:
	.loc 7 4032 0
	#         if (dumpast)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_toplevel
	.L4854:
	mov A, B
	add SP, 1
	.L4853:
	.loc 7 4033 0
	#             printf("%s", node2s(v));
	.L761:
	.loc 7 4031 0
	#         Node *v = vec_get(toplevels, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4033 0
	#             printf("%s", node2s(v));
	jmp .L760
	.L762:
	.loc 7 4039 0
	# 
	mov A, .L4855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp close_output_file
	.L4855:
	mov A, B
	.loc 7 4057 0
	# }
	mov A, 0
	mov B, A
	exit
	exit
	.text
make_map:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4073 0
	# }
	.loc 7 4070 0
	#     r->parent = NULL;
	mov A, 0
	mov B, SP
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L4856:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4071 0
	#     r->v = make_vector();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4070 0
	#     r->parent = NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4072 0
	#     return r;
	mov A, .L4857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L4857:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4070 0
	#     r->parent = NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4073 0
	# }
	.loc 7 4070 0
	#     r->parent = NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_map_parent:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4080 0
	# }
	.loc 7 4077 0
	#     r->parent = parent;
	mov A, 0
	mov B, SP
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4858
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L4858:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4078 0
	#     r->v = make_vector();
	.loc 7 4073 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4077 0
	#     r->parent = parent;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4079 0
	#     return r;
	mov A, .L4859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L4859:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4077 0
	#     r->parent = parent;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4080 0
	# }
	.loc 7 4077 0
	#     r->parent = parent;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
map_find:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4092 0
	# }
	.loc 7 4086 0
	#     }
	.loc 7 4084 0
	#         m->v = make_vector();
	.loc 7 4080 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	eq A, 0
	jeq .L4860, A, 0
	.loc 7 4086 0
	#     }
	.loc 7 4085 0
	#         return -1;
	mov A, .L4861
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L4861:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4080 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4086 0
	#     }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4860:
	.loc 7 4089 0
	#             return i;
	.loc 7 4088 0
	#         if (!strcmp(vec_get(m->v, i), key))
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 4089 0
	#             return i;
	.L763:
	.loc 7 4088 0
	#         if (!strcmp(vec_get(m->v, i), key))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4080 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4862:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4863, A, 0
	jmp .L4864
	.L4863:
	.loc 7 4089 0
	#             return i;
	jmp .L765
	.L4864:
	.loc 7 4080 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4089 0
	#             return i;
	.loc 7 4088 0
	#         if (!strcmp(vec_get(m->v, i), key))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4089 0
	#             return i;
	.loc 7 4080 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L4865:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L4866:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L4867, A, 0
	.loc 7 4089 0
	#             return i;
	.loc 7 4088 0
	#         if (!strcmp(vec_get(m->v, i), key))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4867:
	.loc 7 4089 0
	#             return i;
	.L764:
	.loc 7 4088 0
	#         if (!strcmp(vec_get(m->v, i), key))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4089 0
	#             return i;
	jmp .L763
	.L765:
	.loc 7 4092 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
map_get:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4101 0
	# }
	.loc 7 4096 0
	#     if (i != -1)
	mov A, 0
	mov B, SP
	.loc 7 4092 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_find
	.L4868:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4097 0
	#         return vec_get(m->v, i + 1);
	.loc 7 4096 0
	#     if (i != -1)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4097 0
	#         return vec_get(m->v, i + 1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4869, A, 0
	.loc 7 4096 0
	#     if (i != -1)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4097 0
	#         return vec_get(m->v, i + 1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4092 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L4870:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4869:
	.loc 7 4099 0
	#         return map_get(m->parent, key);
	.loc 7 4092 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L4871, A, 0
	.loc 7 4099 0
	#         return map_get(m->parent, key);
	.loc 7 4092 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4099 0
	#         return map_get(m->parent, key);
	.loc 7 4092 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4872
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L4872:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4871:
	.loc 7 4101 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
map_put:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4110 0
	#     }
	.loc 7 4105 0
	#     if (i != -1) {
	mov A, 0
	mov B, SP
	.loc 7 4101 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4873
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_find
	.L4873:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4110 0
	#     }
	.loc 7 4106 0
	#         vec_set(m->v, i + 1, val);
	.loc 7 4105 0
	#     if (i != -1) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4106 0
	#         vec_set(m->v, i + 1, val);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4874, A, 0
	.loc 7 4107 0
	#     } else {
	.loc 7 4101 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4107 0
	#     } else {
	.loc 7 4105 0
	#     if (i != -1) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4107 0
	#     } else {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4101 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4875
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_set
	.L4875:
	mov A, B
	add SP, 3
	jmp .L4876
	.L4874:
	.loc 7 4110 0
	#     }
	.loc 7 4109 0
	#         vec_push(m->v, val);
	.loc 7 4101 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4109 0
	#         vec_push(m->v, val);
	.loc 7 4101 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L4877:
	mov A, B
	add SP, 2
	.loc 7 4110 0
	#     }
	.loc 7 4101 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4110 0
	#     }
	.loc 7 4101 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4878
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L4878:
	mov A, B
	add SP, 2
	.L4876:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
map_remove:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4117 0
	#     }
	.loc 7 4115 0
	#     if (i != -1) {
	mov A, 0
	mov B, SP
	.loc 7 4110 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_find
	.L4879:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4117 0
	#     }
	.loc 7 4116 0
	#         vec_set(m->v, i, "");
	.loc 7 4115 0
	#     if (i != -1) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4116 0
	#         vec_set(m->v, i, "");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4880, A, 0
	.loc 7 4117 0
	#     }
.data
	.L4881:
	.string ""
.text
	mov A, .L4881
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4115 0
	#     if (i != -1) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4117 0
	#     }
	.loc 7 4110 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_set
	.L4882:
	mov A, B
	add SP, 3
	.L4880:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
map_len:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4124 0
	# }
	.loc 7 4122 0
	#         return 0;
	.loc 7 4117 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	eq A, 0
	jeq .L4883, A, 0
	.loc 7 4122 0
	#         return 0;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L4883:
	.loc 7 4124 0
	# }
	.loc 7 4117 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4884
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L4884:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L4885:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	source_loc:

	.long 0
	.data 0
globalenv:
	.data 1
	.L4886:
	.long 0
	.long 0
	.data 0
	.long .L4886
	.data
	localenv:

	.long 0
	.data 0
tags:
	.data 1
	.L4887:
	.long 0
	.long 0
	.data 0
	.long .L4887
	.data
	labels:

	.long 0
	.data
	toplevels:

	.long 0
	.data
	localvars:

	.long 0
	.data
	gotos:

	.long 0
	.data
	cases:

	.long 0
	.data
	current_func_type:

	.long 0
	.data
	defaultcase:

	.long 0
	.data
	lbreak:

	.long 0
	.data
	lcontinue:

	.long 0
	.data 0
type_void:
	.data 1
	.L4888:
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4888
	.data 0
type_bool:
	.data 1
	.L4889:
	.long 1
	.long 1
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4889
	.data 0
type_char:
	.data 1
	.L4890:
	.long 2
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4890
	.data 0
type_short:
	.data 1
	.L4891:
	.long 3
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4891
	.data 0
type_int:
	.data 1
	.L4892:
	.long 4
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4892
	.data 0
type_long:
	.data 1
	.L4893:
	.long 5
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4893
	.data 0
type_llong:
	.data 1
	.L4894:
	.long 6
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4894
	.data 0
type_uchar:
	.data 1
	.L4895:
	.long 2
	.long 1
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4895
	.data 0
type_ushort:
	.data 1
	.L4896:
	.long 3
	.long 1
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4896
	.data 0
type_uint:
	.data 1
	.L4897:
	.long 4
	.long 1
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4897
	.data 0
type_ulong:
	.data 1
	.L4898:
	.long 5
	.long 1
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4898
	.data 0
type_ullong:
	.data 1
	.L4899:
	.long 6
	.long 1
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4899
	.data 0
type_float:
	.data 1
	.L4900:
	.long 4
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4900
	.data 0
type_double:
	.data 1
	.L4901:
	.long 4
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4901
	.data 0
type_ldouble:
	.data 1
	.L4902:
	.long 4
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4902
	.data 0
type_enum:
	.data 1
	.L4903:
	.long 11
	.long 1
	.long 1
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
	.long .L4903
	.text
mark_location:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4374 0
	# }
	.loc 7 4371 0
	#     source_loc = malloc(sizeof(SourceLoc));
	mov A, 0
	mov B, SP
	mov A, .L4904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L4904:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4372 0
	#     source_loc->file = tok->file->name;
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L4905:
	mov A, B
	add SP, 1
	mov B, source_loc
	store A, B
	.loc 7 4373 0
	#     source_loc->line = tok->line;
	.loc 7 4371 0
	#     source_loc = malloc(sizeof(SourceLoc));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, source_loc
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4374 0
	# }
	.loc 7 4371 0
	#     source_loc = malloc(sizeof(SourceLoc));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, source_loc
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S1.c:
	.long 0
	.text
make_tempname:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4384 0
	# }
	.loc 7 4383 0
	#     return format(".T%d", c++);
	mov B, .S1.c
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, .S1.c
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4384 0
	# }
.data
	.L4906:
	.string ".T%d"
.text
	mov A, .L4906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L4907:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S2.c:
	.long 0
	.text
make_label:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4389 0
	# }
	.loc 7 4388 0
	#     return format(".L%d", c++);
	mov B, .S2.c
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, .S2.c
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4389 0
	# }
.data
	.L4908:
	.string ".L%d"
.text
	mov A, .L4908
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L4909:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S3.c:
	.long 0
	.text
make_static_label:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4394 0
	# }
	.loc 7 4389 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4394 0
	# }
	.loc 7 4393 0
	#     return format(".S%d.%s", c++, name);
	mov B, .S3.c
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, .S3.c
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4394 0
	# }
.data
	.L4910:
	.string ".S%d.%s"
.text
	mov A, .L4910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L4911:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_case:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4402 0
	# }
	.loc 7 4398 0
	#     r->beg = beg;
	mov A, 0
	mov B, SP
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L4912:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4399 0
	#     r->end = end;
	.loc 7 4394 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4398 0
	#     r->beg = beg;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4400 0
	#     r->label = label;
	.loc 7 4394 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4398 0
	#     r->beg = beg;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4401 0
	#     return r;
	.loc 7 4394 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4398 0
	#     r->beg = beg;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4402 0
	# }
	.loc 7 4398 0
	#     r->beg = beg;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
env:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4406 0
	# }
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	jeq .L4913, A, 0
	mov B, localenv
	load A, B
	jmp .L4914
	.L4913:
	mov B, globalenv
	load A, B
	.L4914:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_ast:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4413 0
	# }
	.loc 7 4410 0
	#     *r = *tmpl;
	mov A, 0
	mov B, SP
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L4915:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4411 0
	#     r->sourceLoc = source_loc;
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 4406 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4410 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 4412 0
	#     return r;
	.loc 7 4124 0
	# }
	mov B, source_loc
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4410 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4413 0
	# }
	.loc 7 4410 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_uop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4417 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 4413 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4916:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_binop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 11
	.loc 7 4424 0
	# }
	.loc 7 4421 0
	#     r->left = left;
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 4417 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777205
	store A, B
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	mov A, BP
	add A, -11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4917:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4422 0
	#     r->right = right;
	.loc 7 4417 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4421 0
	#     r->left = left;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4423 0
	#     return r;
	.loc 7 4417 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4421 0
	#     r->left = left;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4424 0
	# }
	.loc 7 4421 0
	#     r->left = left;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_inttype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4428 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 256
	store A, B
	.loc 7 4424 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4918:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_floattype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4432 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 256
	store A, B
	.loc 7 4428 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4919:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_lvar:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 11
	.loc 7 4441 0
	# }
	.loc 7 4436 0
	#     if (localenv)
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777205
	mov A, 257
	store A, B
	.loc 7 4432 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	mov A, BP
	add A, -11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4920:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4437 0
	#         map_put(localenv, name, r);
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	jeq .L4921, A, 0
	.loc 7 4437 0
	#         map_put(localenv, name, r);
	.loc 7 4436 0
	#     if (localenv)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4432 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4922
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L4922:
	mov A, B
	add SP, 3
	.L4921:
	.loc 7 4439 0
	#         vec_push(localvars, r);
	.loc 7 4124 0
	# }
	mov B, localvars
	load A, B
	jeq .L4923, A, 0
	.loc 7 4439 0
	#         vec_push(localvars, r);
	.loc 7 4436 0
	#     if (localenv)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, localvars
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L4924:
	mov A, B
	add SP, 2
	.L4923:
	.loc 7 4441 0
	# }
	.loc 7 4436 0
	#     if (localenv)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_gvar:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 11
	.loc 7 4447 0
	# }
	.loc 7 4445 0
	#     map_put(globalenv, name, r);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777205
	mov A, 258
	store A, B
	.loc 7 4441 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	mov A, BP
	add A, -11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4925
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4925:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4446 0
	#     return r;
	.loc 7 4445 0
	#     map_put(globalenv, name, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4441 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, globalenv
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L4926:
	mov A, B
	add SP, 3
	.loc 7 4447 0
	# }
	.loc 7 4445 0
	#     map_put(globalenv, name, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_static_lvar:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 11
	.loc 7 4458 0
	# }
	.loc 7 4451 0
	#         .kind = AST_GVAR,
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777205
	mov A, 258
	store A, B
	.loc 7 4447 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 4451 0
	#         .kind = AST_GVAR,
	.loc 7 4447 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4927
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_static_label
	.L4927:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777211
	store A, B
	mov A, BP
	add A, -11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4928
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4928:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L791:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	eq A, 0
	jeq .L4929, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L4930:
	.string "assertion failed: localenv\n"
.text
	mov A, .L4930
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L4931:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L4929:
	mov A, 0
	jeq .L4932, A, 0
	jmp .L791
	.L4932:
	.L792:
	.loc 7 4457 0
	#     return r;
	.loc 7 4451 0
	#         .kind = AST_GVAR,
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4447 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L4933:
	mov A, B
	add SP, 3
	.loc 7 4458 0
	# }
	.loc 7 4451 0
	#         .kind = AST_GVAR,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_typedef:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 11
	.loc 7 4464 0
	# }
	.loc 7 4462 0
	#     map_put(env(), name, r);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777205
	mov A, 259
	store A, B
	.loc 7 4458 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	mov A, BP
	add A, -11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4934
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4934:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4463 0
	#     return r;
	.loc 7 4462 0
	#     map_put(env(), name, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4458 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4463 0
	#     return r;
	mov A, .L4935
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp env
	.L4935:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L4936:
	mov A, B
	add SP, 3
	.loc 7 4464 0
	# }
	.loc 7 4462 0
	#     map_put(env(), name, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 15
	.loc 7 4491 0
	# }
	.loc 7 4468 0
	#     char *body;
	.loc 7 4469 0
	# 
	.loc 7 4488 0
	#     }
	.loc 7 4464 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 4488 0
	#     }
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4937, A, 0
	jmp .L795
	.L4937:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4938, A, 0
	jmp .L796
	.L4938:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4939, A, 0
	jmp .L797
	.L4939:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4940, A, 0
	jmp .L798
	.L4940:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4941, A, 0
	jmp .L799
	.L4941:
	jmp .L794
	.loc 7 4472 0
	#     case ENC_UTF8:
	.L795:
	.L796:
	.loc 7 4464 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_char
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_array_type
	.L4942:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4475 0
	#         break;
	.loc 7 4464 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4476 0
	#     case ENC_CHAR16: {
	jmp .L794
	.loc 7 4481 0
	#     }
	.loc 7 4477 0
	#         Buffer *b = to_utf16(str, len);
	.L797:
	.loc 7 4481 0
	#     }
	.loc 7 4478 0
	#         ty = make_array_type(type_ushort, buf_len(b) / type_ushort->size);
	mov A, 0
	mov B, SP
	.loc 7 4464 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp to_utf16
	.L4943:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4479 0
	#         body = buf_body(b);
	.loc 7 4478 0
	#         ty = make_array_type(type_ushort, buf_len(b) / type_ushort->size);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_len
	.L4944:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4479 0
	#         body = buf_body(b);
	.loc 7 4124 0
	# }
	mov B, type_ushort
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L4945:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, type_ushort
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_array_type
	.L4946:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4480 0
	#         break;
	.loc 7 4478 0
	#         ty = make_array_type(type_ushort, buf_len(b) / type_ushort->size);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L4947:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4481 0
	#     }
	jmp .L794
	.loc 7 4488 0
	#     }
	.loc 7 4483 0
	#     case ENC_WCHAR: {
	.L798:
	.loc 7 4488 0
	#     }
	.loc 7 4483 0
	#     case ENC_WCHAR: {
	.L799:
	.loc 7 4488 0
	#     }
	.loc 7 4485 0
	#         ty = make_array_type(type_uint, buf_len(b) / type_uint->size);
	mov A, 0
	mov B, SP
	.loc 7 4464 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp to_utf32
	.L4948:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 4486 0
	#         body = buf_body(b);
	.loc 7 4485 0
	#         ty = make_array_type(type_uint, buf_len(b) / type_uint->size);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4949
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_len
	.L4949:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4486 0
	#         body = buf_body(b);
	.loc 7 4124 0
	# }
	mov B, type_uint
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L4950:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, type_uint
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4951
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_array_type
	.L4951:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4487 0
	#         break;
	.loc 7 4485 0
	#         ty = make_array_type(type_uint, buf_len(b) / type_uint->size);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L4952:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4488 0
	#     }
	jmp .L794
	.L794:
	.loc 7 4491 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777201
	mov A, 256
	store A, B
	.loc 7 4468 0
	#     char *body;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777202
	store A, B
	.loc 7 4469 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, BP
	add B, 16777204
	store A, B
	mov A, BP
	add A, -15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4953:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_funcall:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4495 0
	#         .kind = AST_FUNCALL,
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 260
	store A, B
	.loc 7 4491 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 12
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4954
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4954:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_funcdesg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4504 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 262
	store A, B
	.loc 7 4495 0
	#         .kind = AST_FUNCALL,
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4955:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_funcptr_call:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4510 0
	#         .kind = AST_FUNCPTR_CALL,
	.loc 12 12 0
	#     }                                           \
	.L803:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4504 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L4956, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L4957:
	.string "assertion failed: fptr->ty->kind == KIND_PTR\n"
.text
	mov A, .L4957
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4958
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L4958:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L4956:
	mov A, 0
	jeq .L4959, A, 0
	jmp .L803
	.L4959:
	.L804:
	.L805:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4504 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L4960, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L4961:
	.string "assertion failed: fptr->ty->ptr->kind == KIND_FUNC\n"
.text
	mov A, .L4961
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4962
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L4962:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L4960:
	mov A, 0
	jeq .L4963, A, 0
	jmp .L805
	.L4963:
	.L806:
	.loc 7 4510 0
	#         .kind = AST_FUNCPTR_CALL,
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 261
	store A, B
	.loc 7 4504 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 12
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4964
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4964:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_func:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4518 0
	#         .kind = AST_FUNC,
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777206
	mov A, 263
	store A, B
	.loc 7 4510 0
	#         .kind = AST_FUNCPTR_CALL,
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov B, BP
	add B, 6
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4965:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_decl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4528 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 264
	store A, B
	.loc 7 4518 0
	#         .kind = AST_FUNC,
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4966:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_init:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4532 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 265
	store A, B
	.loc 7 4528 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4967:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_conv:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4536 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 266
	store A, B
	.loc 7 4532 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4968:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_if:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4540 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 269
	store A, B
	.loc 7 4536 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4969:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_ternary:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4544 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 270
	store A, B
	.loc 7 4540 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4970:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_return:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4548 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 272
	store A, B
	.loc 7 4544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4971:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_compound_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4552 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 273
	store A, B
	.loc 7 4548 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4972:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_struct_ref:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4556 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 274
	store A, B
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4973:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_goto:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4560 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 275
	store A, B
	.loc 7 4556 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4974:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_jump:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4564 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 275
	store A, B
	.loc 7 4560 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4975:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_computed_goto:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4568 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 276
	store A, B
	.loc 7 4564 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4976:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_label:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4572 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 277
	store A, B
	.loc 7 4568 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4977:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_dest:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4576 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 277
	store A, B
	.loc 7 4572 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4978:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ast_label_addr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 10
	.loc 7 4580 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777206
	mov A, 288
	store A, B
	.loc 7 4124 0
	# }
	mov B, type_void
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L4979:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 4576 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ast
	.L4980:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4586 0
	# }
	.loc 7 4584 0
	#     *r = *tmpl;
	mov A, 0
	mov B, SP
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L4981:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4585 0
	#     return r;
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 4580 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4584 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 4586 0
	# }
	.loc 7 4584 0
	#     *r = *tmpl;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
copy_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4592 0
	# }
	.loc 7 4590 0
	#     memcpy(r, ty, sizeof(Type));
	mov A, 0
	mov B, SP
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L4982:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4591 0
	#     return r;
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4586 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4590 0
	#     memcpy(r, ty, sizeof(Type));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L4983:
	mov A, B
	add SP, 3
	.loc 7 4592 0
	# }
	.loc 7 4590 0
	#     memcpy(r, ty, sizeof(Type));
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_numtype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4610 0
	# }
	.loc 7 4596 0
	#     r->kind = kind;
	mov A, 0
	mov B, SP
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L4984:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4597 0
	#     r->usig = usig;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4598 0
	#     if (kind == KIND_VOID)         r->size = r->align = 0;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 3
	load A, B
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4985, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	jmp .L4986
	.L4985:
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4987, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	jmp .L4988
	.L4987:
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4989, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	jmp .L4990
	.L4989:
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4991, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	jmp .L4992
	.L4991:
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4993, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	jmp .L4994
	.L4993:
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4995, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	jmp .L4996
	.L4995:
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4997, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	jmp .L4998
	.L4997:
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4999, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
.data
	.L5000:
	.string "float"
.text
	mov A, .L5000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5001:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5002:
	mov A, B
	add SP, 3
	jmp .L5003
	.L4999:
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5004, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
.data
	.L5005:
	.string "float"
.text
	mov A, .L5005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5006:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5007:
	mov A, B
	add SP, 3
	jmp .L5008
	.L5004:
	.loc 7 4592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5009, A, 0
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4599 0
	#     else if (kind == KIND_BOOL)    r->size = r->align = 1;
.data
	.L5010:
	.string "float"
.text
	mov A, .L5010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5011:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5012:
	mov A, B
	add SP, 3
	jmp .L5013
	.L5009:
.data
	.L5014:
	.string "internal error"
.text
	mov A, .L5014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5015:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5016:
	mov A, B
	add SP, 3
	.L5013:
	.L5008:
	.L5003:
	.L4998:
	.L4996:
	.L4994:
	.L4992:
	.L4990:
	.L4988:
	.L4986:
	.loc 7 4610 0
	# }
	.loc 7 4596 0
	#     r->kind = kind;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_ptr_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 16
	.loc 7 4614 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777200
	mov A, 12
	store A, B
	mov B, BP
	add B, 16777201
	mov A, 1
	store A, B
	mov B, BP
	add B, 16777202
	mov A, 1
	store A, B
	.loc 7 4610 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777205
	store A, B
	mov A, BP
	add A, -16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_type
	.L5017:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_array_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 17
	.loc 7 4623 0
	#         KIND_ARRAY,
	.loc 7 4618 0
	#     if (len == -1)
	.loc 7 4619 0
	#         size = -1;
	.loc 7 4614 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4619 0
	#         size = -1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5018, A, 0
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5019
	.L5018:
	.loc 7 4614 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5020:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.L5019:
	.loc 7 4623 0
	#         KIND_ARRAY,
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777199
	mov A, 10
	store A, B
	.loc 7 4618 0
	#     if (len == -1)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777200
	store A, B
	.loc 7 4623 0
	#         KIND_ARRAY,
	.loc 7 4614 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777201
	store A, B
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777204
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777205
	store A, B
	mov A, BP
	add A, -17
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_type
	.L5021:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_rectype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 16
	.loc 7 4632 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777200
	mov A, 13
	store A, B
	.loc 7 4623 0
	#         KIND_ARRAY,
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, BP
	add A, -16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_type
	.L5022:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_func_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 16
	.loc 7 4636 0
	#         KIND_FUNC,
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777200
	mov A, 14
	store A, B
	.loc 7 4632 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4636 0
	#         KIND_FUNC,
	.loc 7 4632 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4636 0
	#         KIND_FUNC,
	.loc 7 4632 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	mov A, BP
	add A, -16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_type
	.L5023:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_stub_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 16
	.loc 7 4645 0
	# }
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov B, BP
	add B, 16777200
	mov A, 15
	store A, B
	mov A, BP
	add A, -16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_type
	.L5024:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_inttype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4657 0
	#         return false;
	.loc 7 4653 0
	#     case KIND_BOOL: case KIND_CHAR: case KIND_SHORT: case KIND_INT:
	.loc 7 4645 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4657 0
	#         return false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5025, A, 0
	jmp .L829
	.L5025:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5026, A, 0
	jmp .L830
	.L5026:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5027, A, 0
	jmp .L831
	.L5027:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5028, A, 0
	jmp .L832
	.L5028:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5029, A, 0
	jmp .L833
	.L5029:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5030, A, 0
	jmp .L834
	.L5030:
	jmp .L835
	.loc 7 4654 0
	#     case KIND_LONG: case KIND_LLONG:
	.L829:
	.L830:
	.L831:
	.L832:
	.L833:
	.L834:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4657 0
	#         return false;
	.L835:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L828:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_flotype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4666 0
	#         return false;
	.loc 7 4663 0
	#     case KIND_FLOAT: case KIND_DOUBLE: case KIND_LDOUBLE:
	.loc 7 4657 0
	#         return false;
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4666 0
	#         return false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5031, A, 0
	jmp .L837
	.L5031:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5032, A, 0
	jmp .L838
	.L5032:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5033, A, 0
	jmp .L839
	.L5033:
	jmp .L840
	.loc 7 4664 0
	#         return true;
	.L837:
	.L838:
	.L839:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4666 0
	#         return false;
	.L840:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L836:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_arithtype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4672 0
	# }
	.loc 7 4666 0
	#         return false;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L5035:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L5034, A, 0
	.loc 7 4672 0
	# }
	.loc 7 4666 0
	#         return false;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5036
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L5036:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L5034:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4676 0
	# }
	.loc 7 4672 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L5037, A, 0
	.loc 7 4676 0
	# }
	.loc 7 4672 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5037:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ensure_lvalue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4683 0
	#         error("lvalue expected, but got %s", node2s(node));
	.loc 7 4680 0
	#     case AST_LVAR: case AST_GVAR: case AST_DEREF: case AST_STRUCT_REF:
	.loc 7 4676 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4683 0
	#         error("lvalue expected, but got %s", node2s(node));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5038, A, 0
	jmp .L842
	.L5038:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5039, A, 0
	jmp .L843
	.L5039:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 268
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5040, A, 0
	jmp .L844
	.L5040:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 274
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5041, A, 0
	jmp .L845
	.L5041:
	jmp .L846
	.loc 7 4681 0
	#         return;
	.L842:
	.L843:
	.L844:
	.L845:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4683 0
	#         error("lvalue expected, but got %s", node2s(node));
	.L846:
	.loc 7 4676 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5042:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4683 0
	#         error("lvalue expected, but got %s", node2s(node));
.data
	.L5043:
	.string "lvalue expected, but got %s"
.text
	mov A, .L5043
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5044:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5044
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5045:
	mov A, B
	add SP, 4
	.L841:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ensure_inttype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4689 0
	#         error("integer type expected, but got %s", node2s(node));
	.loc 7 4683 0
	#         error("lvalue expected, but got %s", node2s(node));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L5046:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L5047, A, 0
	.loc 7 4689 0
	#         error("integer type expected, but got %s", node2s(node));
	.loc 7 4683 0
	#         error("lvalue expected, but got %s", node2s(node));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5048
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5048:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4689 0
	#         error("integer type expected, but got %s", node2s(node));
.data
	.L5049:
	.string "integer type expected, but got %s"
.text
	mov A, .L5049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5050:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5051:
	mov A, B
	add SP, 4
	.L5047:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ensure_arithtype:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4694 0
	#         error("arithmetic type expected, but got %s", node2s(node));
	.loc 7 4689 0
	#         error("integer type expected, but got %s", node2s(node));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5052:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L5053, A, 0
	.loc 7 4694 0
	#         error("arithmetic type expected, but got %s", node2s(node));
	.loc 7 4689 0
	#         error("integer type expected, but got %s", node2s(node));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5054:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4694 0
	#         error("arithmetic type expected, but got %s", node2s(node));
.data
	.L5055:
	.string "arithmetic type expected, but got %s"
.text
	mov A, .L5055
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5056:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5057:
	mov A, B
	add SP, 4
	.L5053:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ensure_not_void:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4699 0
	#         error("void is not allowed");
	.loc 7 4694 0
	#         error("arithmetic type expected, but got %s", node2s(node));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5058, A, 0
	.loc 7 4699 0
	#         error("void is not allowed");
.data
	.L5059:
	.string "void is not allowed"
.text
	mov A, .L5059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5060:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5060
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5061:
	mov A, B
	add SP, 3
	.L5058:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
expect:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4705 0
	#         errort(tok, "'%c' expected, but got %s", id, tok2s(tok));
	.loc 7 4704 0
	#     if (!is_keyword(tok, id))
	mov A, 0
	mov B, SP
	mov A, .L5062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5062:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4705 0
	#         errort(tok, "'%c' expected, but got %s", id, tok2s(tok));
	.loc 7 4699 0
	#         error("void is not allowed");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4704 0
	#     if (!is_keyword(tok, id))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5063:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5064, A, 0
	.loc 7 4705 0
	#         errort(tok, "'%c' expected, but got %s", id, tok2s(tok));
	.loc 7 4704 0
	#     if (!is_keyword(tok, id))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L5065:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4705 0
	#         errort(tok, "'%c' expected, but got %s", id, tok2s(tok));
	.loc 7 4699 0
	#         error("void is not allowed");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4705 0
	#         errort(tok, "'%c' expected, but got %s", id, tok2s(tok));
.data
	.L5066:
	.string "'%c' expected, but got %s"
.text
	mov A, .L5066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4704 0
	#     if (!is_keyword(tok, id))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5067:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4705 0
	#         errort(tok, "'%c' expected, but got %s", id, tok2s(tok));
.data
	.L5068:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5069
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5069:
	mov A, B
	add SP, 5
	.L5064:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
copy_incomplete_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4711 0
	# }
	.loc 7 4710 0
	#     return (ty->len == -1) ? copy_type(ty) : ty;
	.loc 7 4705 0
	#         errort(tok, "'%c' expected, but got %s", id, tok2s(tok));
	mov B, BP
	add B, 2
	load A, B
	eq A, 0
	jeq .L5070, A, 0
	.loc 7 4710 0
	#     return (ty->len == -1) ? copy_type(ty) : ty;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5070:
	.loc 7 4711 0
	# }
	.loc 7 4705 0
	#         errort(tok, "'%c' expected, but got %s", id, tok2s(tok));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4711 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5071, A, 0
	.loc 7 4705 0
	#         errort(tok, "'%c' expected, but got %s", id, tok2s(tok));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_type
	.L5072:
	mov A, B
	add SP, 1
	jmp .L5073
	.L5071:
	mov B, BP
	add B, 2
	load A, B
	.L5073:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
get_typedef:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4716 0
	# }
	.loc 7 4715 0
	#     return (node && node->kind == AST_TYPEDEF) ? node->ty : NULL;
	mov A, 0
	mov B, SP
	.loc 7 4711 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4715 0
	#     return (node && node->kind == AST_TYPEDEF) ? node->ty : NULL;
	mov A, .L5074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp env
	.L5074:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5075
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L5075:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4716 0
	# }
	.loc 7 4715 0
	#     return (node && node->kind == AST_TYPEDEF) ? node->ty : NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, 0
	jeq .L5076, A, 0
	.loc 7 4716 0
	# }
	.loc 7 4715 0
	#     return (node && node->kind == AST_TYPEDEF) ? node->ty : NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 259
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5076:
	mov A, B
	jeq .L5077, A, 0
	.loc 7 4716 0
	# }
	.loc 7 4715 0
	#     return (node && node->kind == AST_TYPEDEF) ? node->ty : NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	jmp .L5078
	.L5077:
	.loc 7 4716 0
	# }
	mov A, 0
	.L5078:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4730 0
	#         return false;
	.loc 7 4720 0
	#         return get_typedef(tok->sval);
	.loc 7 4716 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5079, A, 0
	.loc 7 4720 0
	#         return get_typedef(tok->sval);
	.loc 7 4716 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_typedef
	.L5080:
	mov A, B
	add SP, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5079:
	.loc 7 4722 0
	#         return false;
	.loc 7 4716 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5081, A, 0
	.loc 7 4722 0
	#         return false;
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5081:
	.loc 7 4730 0
	#         return false;
	.loc 7 4724 0
	# #define op(x, y)
	.loc 7 4716 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4730 0
	#         return false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 310
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5082, A, 0
	jmp .L848
	.L5082:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 311
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5083, A, 0
	jmp .L849
	.L5083:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 312
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5084, A, 0
	jmp .L850
	.L5084:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 313
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5085, A, 0
	jmp .L851
	.L5085:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 314
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5086, A, 0
	jmp .L852
	.L5086:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 315
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5087, A, 0
	jmp .L853
	.L5087:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 316
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5088, A, 0
	jmp .L854
	.L5088:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 317
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5089, A, 0
	jmp .L855
	.L5089:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 318
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5090, A, 0
	jmp .L856
	.L5090:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 319
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5091, A, 0
	jmp .L857
	.L5091:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 320
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5092, A, 0
	jmp .L858
	.L5092:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 321
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5093, A, 0
	jmp .L859
	.L5093:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 322
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5094, A, 0
	jmp .L860
	.L5094:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 323
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5095, A, 0
	jmp .L861
	.L5095:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 324
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5096, A, 0
	jmp .L862
	.L5096:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 325
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5097, A, 0
	jmp .L863
	.L5097:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 326
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5098, A, 0
	jmp .L864
	.L5098:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 327
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5099, A, 0
	jmp .L865
	.L5099:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 328
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5100, A, 0
	jmp .L866
	.L5100:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 329
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5101, A, 0
	jmp .L867
	.L5101:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 330
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5102, A, 0
	jmp .L868
	.L5102:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 331
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5103, A, 0
	jmp .L869
	.L5103:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 332
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5104, A, 0
	jmp .L870
	.L5104:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 333
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5105, A, 0
	jmp .L871
	.L5105:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 334
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5106, A, 0
	jmp .L872
	.L5106:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 335
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5107, A, 0
	jmp .L873
	.L5107:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 336
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5108, A, 0
	jmp .L874
	.L5108:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 337
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5109, A, 0
	jmp .L875
	.L5109:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 338
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5110, A, 0
	jmp .L876
	.L5110:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 339
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5111, A, 0
	jmp .L877
	.L5111:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 340
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5112, A, 0
	jmp .L878
	.L5112:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 341
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5113, A, 0
	jmp .L879
	.L5113:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 342
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5114, A, 0
	jmp .L880
	.L5114:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 343
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5115, A, 0
	jmp .L881
	.L5115:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 344
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5116, A, 0
	jmp .L882
	.L5116:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 345
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5117, A, 0
	jmp .L883
	.L5117:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 346
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5118, A, 0
	jmp .L884
	.L5118:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 347
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5119, A, 0
	jmp .L885
	.L5119:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 348
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5120, A, 0
	jmp .L886
	.L5120:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 349
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5121, A, 0
	jmp .L887
	.L5121:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 350
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5122, A, 0
	jmp .L888
	.L5122:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 351
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5123, A, 0
	jmp .L889
	.L5123:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 352
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5124, A, 0
	jmp .L890
	.L5124:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 353
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5125, A, 0
	jmp .L891
	.L5125:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 354
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5126, A, 0
	jmp .L892
	.L5126:
	jmp .L893
	.loc 7 4726 0
	# #include "keyword.inc"
	.L848:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L849:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L850:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L851:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L852:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L853:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L854:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L855:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L856:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L857:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L858:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L859:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L860:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L861:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L862:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L863:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L864:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L865:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L866:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L867:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L868:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L869:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L870:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L871:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L872:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L873:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L874:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L875:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L876:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L877:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L878:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L879:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L880:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L881:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L882:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L883:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L884:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L885:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L886:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L887:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L888:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L889:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L890:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L891:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L892:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4730 0
	#         return false;
	.L893:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L847:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
next_token:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4740 0
	# }
	.loc 7 4736 0
	#     if (is_keyword(tok, kind))
	mov A, 0
	mov B, SP
	mov A, .L5127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5127:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4737 0
	#         return true;
	.loc 7 4730 0
	#         return false;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4736 0
	#     if (is_keyword(tok, kind))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5128:
	mov A, B
	add SP, 2
	jeq .L5129, A, 0
	.loc 7 4737 0
	#         return true;
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5129:
	.loc 7 4739 0
	#     return false;
	.loc 7 4736 0
	#     if (is_keyword(tok, kind))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L5130:
	mov A, B
	add SP, 1
	.loc 7 4740 0
	# }
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_pair:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4747 0
	# }
	.loc 7 4744 0
	#     r[0] = first;
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5131:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L5132:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4745 0
	#     r[1] = second;
	.loc 7 4740 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4745 0
	#     r[1] = second;
	.loc 7 4744 0
	#     r[0] = first;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4745 0
	#     r[1] = second;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4746 0
	#     return r;
	.loc 7 4740 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4746 0
	#     return r;
	.loc 7 4744 0
	#     r[0] = first;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4746 0
	#     return r;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4747 0
	# }
	.loc 7 4744 0
	#     r[0] = first;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
conv:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 4772 0
	# }
	.loc 7 4755 0
	#         return NULL;
	.loc 7 4747 0
	# }
	mov B, BP
	add B, 2
	load A, B
	eq A, 0
	jeq .L5133, A, 0
	.loc 7 4755 0
	#         return NULL;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5133:
	.loc 7 4757 0
	#     switch (ty->kind) {
	mov A, 0
	mov B, SP
	.loc 7 4747 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4768 0
	#         if (ty->bitsize > 0 && ty->bitsize != -1)
	.loc 7 4758 0
	#     case KIND_ARRAY:
	.loc 7 4757 0
	#     switch (ty->kind) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4768 0
	#         if (ty->bitsize > 0 && ty->bitsize != -1)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5134, A, 0
	jmp .L895
	.L5134:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5135, A, 0
	jmp .L896
	.L5135:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5136, A, 0
	jmp .L897
	.L5136:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5137, A, 0
	jmp .L898
	.L5137:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5138, A, 0
	jmp .L899
	.L5138:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5139, A, 0
	jmp .L900
	.L5139:
	jmp .L894
	.loc 7 4759 0
	#         // C11 6.3.2.1p3: An array of T is converted to a pointer to T.
	.L895:
	.loc 7 4747 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4759 0
	#         // C11 6.3.2.1p3: An array of T is converted to a pointer to T.
	.loc 7 4757 0
	#     switch (ty->kind) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L5140:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5141:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4762 0
	#         // C11 6.3.2.1p4: A function designator is converted to a pointer to the function.
	.L896:
	.loc 7 4747 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4762 0
	#         // C11 6.3.2.1p4: A function designator is converted to a pointer to the function.
	.loc 7 4757 0
	#     switch (ty->kind) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L5142:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5143
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5143:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4765 0
	#         // C11 6.3.1.1p2: The integer promotions
	.L897:
	.L898:
	.L899:
	.loc 7 4747 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_conv
	.L5144:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4768 0
	#         if (ty->bitsize > 0 && ty->bitsize != -1)
	.L900:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4757 0
	#     switch (ty->kind) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 0
	jeq .L5145, A, 0
	.loc 7 4768 0
	#         if (ty->bitsize > 0 && ty->bitsize != -1)
	.loc 7 4757 0
	#     switch (ty->kind) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4768 0
	#         if (ty->bitsize > 0 && ty->bitsize != -1)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L5145:
	mov A, B
	jeq .L5146, A, 0
	.loc 7 4747 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_conv
	.L5147:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5146:
	.loc 7 4768 0
	#         if (ty->bitsize > 0 && ty->bitsize != -1)
	.L894:
	.loc 7 4772 0
	# }
	.loc 7 4747 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
same_arith_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4776 0
	# }
	.loc 7 4772 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4776 0
	# }
	.loc 7 4772 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L5148, A, 0
	.loc 7 4776 0
	# }
	.loc 7 4772 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4776 0
	# }
	.loc 7 4772 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5148:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
wrap:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4782 0
	# }
	.loc 7 4780 0
	#         return node;
	.loc 7 4776 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp same_arith_type
	.L5149:
	mov A, B
	add SP, 2
	jeq .L5150, A, 0
	.loc 7 4780 0
	#         return node;
	.loc 7 4776 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5150:
	.loc 7 4782 0
	# }
	.loc 7 4776 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5151
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5151:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
usual_arith_conv:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 4806 0
	# }
	.loc 12 12 0
	#     }                                           \
	.L901:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5152:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L5153, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L5154:
	.string "assertion failed: is_arithtype(t)\n"
.text
	mov A, .L5154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L5155:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L5153:
	mov A, 0
	jeq .L5156, A, 0
	jmp .L901
	.L5156:
	.L902:
	.L903:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5157:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L5158, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L5159:
	.string "assertion failed: is_arithtype(u)\n"
.text
	mov A, .L5159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L5160:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L5158:
	mov A, 0
	jeq .L5161, A, 0
	jmp .L903
	.L5161:
	.L904:
	.loc 7 4793 0
	#     }
	.loc 7 4789 0
	#         // Make t the larger type
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4789 0
	#         // Make t the larger type
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5162, A, 0
	.loc 7 4793 0
	#     }
	.loc 7 4791 0
	#         t = u;
	mov A, 0
	mov B, SP
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4792 0
	#         u = tmp;
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 4793 0
	#     }
	.loc 7 4791 0
	#         t = u;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.L5162:
	.loc 7 4795 0
	#         return t;
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L5163:
	mov A, B
	add SP, 1
	jeq .L5164, A, 0
	.loc 7 4795 0
	#         return t;
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5164:
	.loc 12 12 0
	#     }                                           \
	.L905:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5166
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L5166:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L5165, A, 0
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L5165:
	mov A, B
	eq A, 0
	jeq .L5167, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L5168:
	.string "assertion failed: is_inttype(t) && t->size >= type_int->size\n"
.text
	mov A, .L5168
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L5169:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L5167:
	mov A, 0
	jeq .L5170, A, 0
	jmp .L905
	.L5170:
	.L906:
	.L907:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L5172:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L5171, A, 0
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L5171:
	mov A, B
	eq A, 0
	jeq .L5173, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L5174:
	.string "assertion failed: is_inttype(u) && u->size >= type_int->size\n"
.text
	mov A, .L5174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5175
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L5175:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L5173:
	mov A, 0
	jeq .L5176, A, 0
	jmp .L907
	.L5176:
	.L908:
	.loc 7 4799 0
	#         return t;
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4799 0
	#         return t;
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5177, A, 0
	.loc 7 4799 0
	#         return t;
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5177:
	.loc 12 12 0
	#     }                                           \
	.L909:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L5178, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L5179:
	.string "assertion failed: t->size == u->size\n"
.text
	mov A, .L5179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L5180:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L5178:
	mov A, 0
	jeq .L5181, A, 0
	jmp .L909
	.L5181:
	.L910:
	.loc 7 4802 0
	#         return t;
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4802 0
	#         return t;
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5182, A, 0
	.loc 7 4802 0
	#         return t;
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5182:
	.loc 7 4804 0
	#     r->usig = true;
	mov A, 0
	mov B, SP
	.loc 7 4782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_type
	.L5183:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4805 0
	#     return r;
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4804 0
	#     r->usig = true;
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4806 0
	# }
	.loc 7 4804 0
	#     r->usig = true;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
valid_pointer_binop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4814 0
	#         return false;
	.loc 7 4806 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5184, A, 0
	jmp .L912
	.L5184:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 60
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5185, A, 0
	jmp .L913
	.L5185:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 62
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5186, A, 0
	jmp .L914
	.L5186:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 301
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5187, A, 0
	jmp .L915
	.L5187:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 307
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5188, A, 0
	jmp .L916
	.L5188:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 302
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5189, A, 0
	jmp .L917
	.L5189:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 304
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5190, A, 0
	jmp .L918
	.L5190:
	jmp .L919
	.loc 7 4811 0
	#     case OP_NE: case OP_GE: case OP_LE:
	.L912:
	.L913:
	.L914:
	.L915:
	.L916:
	.L917:
	.L918:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4814 0
	#         return false;
	.L919:
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L911:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
binop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4836 0
	# }
	.loc 7 4827 0
	#     }
	.loc 7 4820 0
	#         if (!valid_pointer_binop(op))
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L5191, A, 0
	.loc 7 4820 0
	#         if (!valid_pointer_binop(op))
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5191:
	mov A, B
	jeq .L5192, A, 0
	.loc 7 4827 0
	#     }
	.loc 7 4821 0
	#             error("invalid pointer arith");
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp valid_pointer_binop
	.L5193:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L5194, A, 0
	.loc 7 4821 0
	#             error("invalid pointer arith");
.data
	.L5195:
	.string "invalid pointer arith"
.text
	mov A, .L5195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5196:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5197:
	mov A, B
	add SP, 3
	.L5194:
	.loc 7 4824 0
	#             return ast_binop(type_long, op, lhs, rhs);
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4824 0
	#             return ast_binop(type_long, op, lhs, rhs);
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5198, A, 0
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_long
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5199:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5198:
	.loc 7 4827 0
	#     }
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5200:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5192:
	.loc 7 4829 0
	#         return ast_binop(lhs->ty, op, lhs, rhs);
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5201, A, 0
	.loc 7 4829 0
	#         return ast_binop(lhs->ty, op, lhs, rhs);
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4829 0
	#         return ast_binop(lhs->ty, op, lhs, rhs);
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5202:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5201:
	.loc 7 4831 0
	#         return ast_binop(rhs->ty, op, rhs, lhs);
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5203, A, 0
	.loc 7 4831 0
	#         return ast_binop(rhs->ty, op, rhs, lhs);
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4831 0
	#         return ast_binop(rhs->ty, op, rhs, lhs);
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5204:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5203:
	.loc 12 12 0
	#     }                                           \
	.L920:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5205:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L5206, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L5207:
	.string "assertion failed: is_arithtype(lhs->ty)\n"
.text
	mov A, .L5207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L5208:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L5206:
	mov A, 0
	jeq .L5209, A, 0
	jmp .L920
	.L5209:
	.L921:
	.L922:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5210:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L5211, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L5212:
	.string "assertion failed: is_arithtype(rhs->ty)\n"
.text
	mov A, .L5212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5213
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L5213:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L5211:
	mov A, 0
	jeq .L5214, A, 0
	jmp .L922
	.L5214:
	.L923:
	.loc 7 4835 0
	#     return ast_binop(r, op, wrap(r, lhs), wrap(r, rhs));
	mov A, 0
	mov B, SP
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4835 0
	#     return ast_binop(r, op, wrap(r, lhs), wrap(r, rhs));
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp usual_arith_conv
	.L5215:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4836 0
	# }
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4835 0
	#     return ast_binop(r, op, wrap(r, lhs), wrap(r, rhs));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp wrap
	.L5216:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4836 0
	# }
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4835 0
	#     return ast_binop(r, op, wrap(r, lhs), wrap(r, rhs));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp wrap
	.L5217:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4814 0
	#         return false;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4835 0
	#     return ast_binop(r, op, wrap(r, lhs), wrap(r, rhs));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5218:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_same_struct:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 4860 0
	#         return true;
	.loc 7 4840 0
	#         return false;
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4840 0
	#         return false;
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5219, A, 0
	.loc 7 4840 0
	#         return false;
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5219:
	.loc 7 4860 0
	#         return true;
	.loc 7 4842 0
	#     case KIND_ARRAY:
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 4860 0
	#         return true;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5220, A, 0
	jmp .L925
	.L5220:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5221, A, 0
	jmp .L926
	.L5221:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5222, A, 0
	jmp .L927
	.L5222:
	jmp .L931
	.loc 7 4843 0
	#         return a->len == b->len &&
	.L925:
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4843 0
	#         return a->len == b->len &&
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L5223, A, 0
	.loc 7 4843 0
	#         return a->len == b->len &&
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4843 0
	#         return a->len == b->len &&
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_same_struct
	.L5224:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L5223:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4846 0
	#         return is_same_struct(a->ptr, b->ptr);
	.L926:
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4846 0
	#         return is_same_struct(a->ptr, b->ptr);
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_same_struct
	.L5225:
	mov A, B
	add SP, 2
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4858 0
	#     }
	.loc 7 4848 0
	#         if (a->is_struct != b->is_struct)
	.L927:
	.loc 7 4858 0
	#     }
	.loc 7 4849 0
	#             return false;
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4849 0
	#             return false;
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5226, A, 0
	.loc 7 4849 0
	#             return false;
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5226:
	.loc 7 4851 0
	#         Vector *kb = dict_keys(b->fields);
	mov A, 0
	mov B, SP
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_keys
	.L5227:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4852 0
	#         if (vec_len(ka) != vec_len(kb))
	mov A, 0
	mov B, SP
	.loc 7 4836 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_keys
	.L5228:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4853 0
	#             return false;
	.loc 7 4851 0
	#         Vector *kb = dict_keys(b->fields);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L5229:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4853 0
	#             return false;
	.loc 7 4852 0
	#         if (vec_len(ka) != vec_len(kb))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5230
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L5230:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5231, A, 0
	.loc 7 4853 0
	#             return false;
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5231:
	.loc 7 4855 0
	#             if (!is_same_struct(vec_get(ka, i), vec_get(kb, i)))
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.L928:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4851 0
	#         Vector *kb = dict_keys(b->fields);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L5232:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5233, A, 0
	jmp .L5234
	.L5233:
	.loc 7 4855 0
	#             if (!is_same_struct(vec_get(ka, i), vec_get(kb, i)))
	jmp .L930
	.L5234:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4852 0
	#         if (vec_len(ka) != vec_len(kb))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5235
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L5235:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4855 0
	#             if (!is_same_struct(vec_get(ka, i), vec_get(kb, i)))
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4851 0
	#         Vector *kb = dict_keys(b->fields);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L5236:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_same_struct
	.L5237:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5238, A, 0
	.loc 7 4855 0
	#             if (!is_same_struct(vec_get(ka, i), vec_get(kb, i)))
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5238:
	.L929:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	jmp .L928
	.L930:
	.loc 7 4858 0
	#     }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4860 0
	#         return true;
	.L931:
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L924:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ensure_assignable:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 4866 0
	#         (is_arithtype(fromtype) || fromtype->kind == KIND_PTR))
	.loc 7 4860 0
	#         return true;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5241:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L5240, A, 0
	.loc 7 4866 0
	#         (is_arithtype(fromtype) || fromtype->kind == KIND_PTR))
	.loc 7 4860 0
	#         return true;
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5240:
	mov A, B
	mov B, 0
	jeq .L5239, A, 0
	.loc 7 4866 0
	#         (is_arithtype(fromtype) || fromtype->kind == KIND_PTR))
	.loc 7 4860 0
	#         return true;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5243:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L5242, A, 0
	.loc 7 4866 0
	#         (is_arithtype(fromtype) || fromtype->kind == KIND_PTR))
	.loc 7 4860 0
	#         return true;
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5242:
	mov A, B
	mov B, A
	ne B, 0
	.L5239:
	mov A, B
	jeq .L5244, A, 0
	.loc 7 4866 0
	#         (is_arithtype(fromtype) || fromtype->kind == KIND_PTR))
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5244:
	.loc 7 4869 0
	#         return;
	.loc 7 4860 0
	#         return true;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_same_struct
	.L5245:
	mov A, B
	add SP, 2
	jeq .L5246, A, 0
	.loc 7 4869 0
	#         return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5246:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 4860 0
	#         return true;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L5247:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 4860 0
	#         return true;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L5248:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L5249:
	.string "incompatible kind: <%s> <%s>"
.text
	mov A, .L5249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5250:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5251:
	mov A, B
	add SP, 5
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
eval_struct_ref:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4881 0
	# }
	.loc 7 4879 0
	#         return eval_struct_ref(node->struc, node->ty->offset + offset);
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 274
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5252, A, 0
	.loc 7 4879 0
	#         return eval_struct_ref(node->struc, node->ty->offset + offset);
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4879 0
	#         return eval_struct_ref(node->struc, node->ty->offset + offset);
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_struct_ref
	.L5253:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5252:
	.loc 7 4881 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5254:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
eval_intexpr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 4936 0
	#     error:
	.loc 7 4885 0
	#     case AST_LITERAL:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4936 0
	#     error:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5255, A, 0
	jmp .L933
	.L5255:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 33
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5256, A, 0
	jmp .L934
	.L5256:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 126
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5257, A, 0
	jmp .L935
	.L5257:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 279
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5258, A, 0
	jmp .L936
	.L5258:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 266
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5259, A, 0
	jmp .L937
	.L5259:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 267
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5260, A, 0
	jmp .L938
	.L5260:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 258
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5261, A, 0
	jmp .L939
	.L5261:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 268
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5262, A, 0
	jmp .L940
	.L5262:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 270
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5263, A, 0
	jmp .L941
	.L5263:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5264, A, 0
	jmp .L942
	.L5264:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5265, A, 0
	jmp .L943
	.L5265:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 42
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5266, A, 0
	jmp .L944
	.L5266:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5267, A, 0
	jmp .L945
	.L5267:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 60
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5268, A, 0
	jmp .L946
	.L5268:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 94
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5269, A, 0
	jmp .L947
	.L5269:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 38
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5270, A, 0
	jmp .L948
	.L5270:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 124
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5271, A, 0
	jmp .L949
	.L5271:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5272, A, 0
	jmp .L950
	.L5272:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 301
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5273, A, 0
	jmp .L951
	.L5273:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 304
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5274, A, 0
	jmp .L952
	.L5274:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 307
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5275, A, 0
	jmp .L953
	.L5275:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 308
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5276, A, 0
	jmp .L954
	.L5276:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 309
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5277, A, 0
	jmp .L955
	.L5277:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 280
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5278, A, 0
	jmp .L956
	.L5278:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 305
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5279, A, 0
	jmp .L957
	.L5279:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 306
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5280, A, 0
	jmp .L958
	.L5280:
	jmp .L959
	.loc 7 4886 0
	#         if (is_inttype(node->ty))
	.L933:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L5281:
	mov A, B
	add SP, 1
	jeq .L5282, A, 0
	.loc 7 4886 0
	#         if (is_inttype(node->ty))
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5282:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5283:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L5284:
	.string "Integer expression expected, but got %s"
.text
	mov A, .L5284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5285:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5286:
	mov A, B
	add SP, 4
	.loc 7 4890 0
	#     case '~': return ~eval_intexpr(node->operand, addr);
	.L934:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4890 0
	#     case '~': return ~eval_intexpr(node->operand, addr);
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5287:
	mov A, B
	add SP, 2
	eq A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4891 0
	#     case OP_CAST: return eval_intexpr(node->operand, addr);
	.L935:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4891 0
	#     case OP_CAST: return eval_intexpr(node->operand, addr);
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5288:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_not
	.L5289:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4892 0
	#     case AST_CONV: return eval_intexpr(node->operand, addr);
	.L936:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4892 0
	#     case AST_CONV: return eval_intexpr(node->operand, addr);
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5290:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4893 0
	#     case AST_ADDR:
	.L937:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4893 0
	#     case AST_ADDR:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5291:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4894 0
	#         if (node->operand->kind == AST_STRUCT_REF)
	.L938:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 274
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5292, A, 0
	.loc 7 4894 0
	#         if (node->operand->kind == AST_STRUCT_REF)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_struct_ref
	.L5293:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5292:
	.loc 7 4901 0
	#         }
	.loc 7 4898 0
	#         if (addr) {
	.L939:
	.loc 7 4901 0
	#         }
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L5294, A, 0
	.loc 7 4901 0
	#         }
	.loc 7 4900 0
	#             return 0;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5295:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4901 0
	#         }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5294:
	.loc 7 4903 0
	#         goto error;
	jmp .L960
	.loc 7 4904 0
	#     case AST_DEREF:
	jmp .L960
	.loc 7 4905 0
	#         if (node->operand->ty->kind == KIND_PTR)
	.L940:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5296, A, 0
	.loc 7 4905 0
	#         if (node->operand->ty->kind == KIND_PTR)
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4905 0
	#         if (node->operand->ty->kind == KIND_PTR)
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5297:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5296:
	.loc 7 4908 0
	#     case AST_TERNARY: {
	jmp .L960
	.loc 7 4913 0
	#     }
	.loc 7 4909 0
	#         long cond = eval_intexpr(node->cond, addr);
	.L941:
	.loc 7 4913 0
	#     }
	.loc 7 4910 0
	#         if (cond)
	mov A, 0
	mov B, SP
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4910 0
	#         if (cond)
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5298:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4911 0
	#             return node->then ? eval_intexpr(node->then, addr) : cond;
	.loc 7 4910 0
	#         if (cond)
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L5299, A, 0
	.loc 7 4911 0
	#             return node->then ? eval_intexpr(node->then, addr) : cond;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	jeq .L5300, A, 0
	.loc 7 4911 0
	#             return node->then ? eval_intexpr(node->then, addr) : cond;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4911 0
	#             return node->then ? eval_intexpr(node->then, addr) : cond;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5301:
	mov A, B
	add SP, 2
	jmp .L5302
	.L5300:
	.loc 7 4910 0
	#         if (cond)
	mov B, BP
	add B, 16777215
	load A, B
	.L5302:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5299:
	.loc 7 4913 0
	#     }
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4913 0
	#     }
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5303:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4917 0
	#     case '-': return L - R;
	.L942:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4917 0
	#     case '-': return L - R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5304:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4917 0
	#     case '-': return L - R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4917 0
	#     case '-': return L - R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5305:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4918 0
	#     case '*': return L * R;
	.L943:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4918 0
	#     case '*': return L * R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5306:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4918 0
	#     case '*': return L * R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4918 0
	#     case '*': return L * R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5307:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4919 0
	#     case '/': return L / R;
	.L944:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4919 0
	#     case '/': return L / R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5308:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4919 0
	#     case '/': return L / R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4919 0
	#     case '/': return L / R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5309:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5310:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4920 0
	#     case '<': return L < R;
	.L945:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4920 0
	#     case '<': return L < R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5311:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4920 0
	#     case '<': return L < R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4920 0
	#     case '<': return L < R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5312:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L5313:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4921 0
	#     case '^': return L ^ R;
	.L946:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4921 0
	#     case '^': return L ^ R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5314:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4921 0
	#     case '^': return L ^ R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4921 0
	#     case '^': return L ^ R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5315:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4922 0
	#     case '&': return L & R;
	.L947:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4922 0
	#     case '&': return L & R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5316:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4922 0
	#     case '&': return L & R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4922 0
	#     case '&': return L & R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5317:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_xor
	.L5318:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4923 0
	#     case '|': return L | R;
	.L948:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4923 0
	#     case '|': return L | R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5319:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4923 0
	#     case '|': return L | R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4923 0
	#     case '|': return L | R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5320:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L5321:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4924 0
	#     case '%': return L % R;
	.L949:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4924 0
	#     case '%': return L % R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5322:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4924 0
	#     case '%': return L % R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4924 0
	#     case '%': return L % R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5323:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L5324:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4925 0
	#     case OP_EQ: return L == R;
	.L950:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4925 0
	#     case OP_EQ: return L == R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5325:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4925 0
	#     case OP_EQ: return L == R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4925 0
	#     case OP_EQ: return L == R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5326:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L5327:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4926 0
	#     case OP_LE: return L <= R;
	.L951:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4926 0
	#     case OP_LE: return L <= R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5328:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4926 0
	#     case OP_LE: return L <= R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4926 0
	#     case OP_LE: return L <= R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5329:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4927 0
	#     case OP_NE: return L != R;
	.L952:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4927 0
	#     case OP_NE: return L != R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5330:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4927 0
	#     case OP_NE: return L != R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4927 0
	#     case OP_NE: return L != R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5331:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4928 0
	#     case OP_SAL: return L << R;
	.L953:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4928 0
	#     case OP_SAL: return L << R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5332
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5332:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4928 0
	#     case OP_SAL: return L << R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4928 0
	#     case OP_SAL: return L << R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5333:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4929 0
	#     case OP_SAR: return L >> R;
	.L954:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4929 0
	#     case OP_SAR: return L >> R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5334:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4929 0
	#     case OP_SAR: return L >> R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4929 0
	#     case OP_SAR: return L >> R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5335:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L5336:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4930 0
	#     case OP_SHR: return ((unsigned long)L) >> R;
	.L955:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4930 0
	#     case OP_SHR: return ((unsigned long)L) >> R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5337:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4930 0
	#     case OP_SHR: return ((unsigned long)L) >> R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4930 0
	#     case OP_SHR: return ((unsigned long)L) >> R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5338:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L5339:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4931 0
	#     case OP_LOGAND: return L && R;
	.L956:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4931 0
	#     case OP_LOGAND: return L && R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5340:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4931 0
	#     case OP_LOGAND: return L && R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4931 0
	#     case OP_LOGAND: return L && R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5341:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L5342:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4932 0
	#     case OP_LOGOR:  return L || R;
	.L957:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4932 0
	#     case OP_LOGOR:  return L || R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5344:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L5343, A, 0
	.loc 7 4932 0
	#     case OP_LOGOR:  return L || R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4932 0
	#     case OP_LOGOR:  return L || R;
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5345:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L5343:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4933 0
	# #undef L
	.L958:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4933 0
	# #undef L
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5347:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L5346, A, 0
	.loc 7 4933 0
	# #undef L
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4933 0
	# #undef L
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5348:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L5346:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4936 0
	#     error:
	.L959:
	.L960:
	.loc 7 4881 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5349:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4936 0
	#     error:
.data
	.L5350:
	.string "Integer expression expected, but got %s"
.text
	mov A, .L5350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5351:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5352:
	mov A, B
	add SP, 4
	.L932:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_intexpr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4943 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_conditional_expr
	.L5353:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval_intexpr
	.L5354:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_int_suffix:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4961 0
	# }
	.loc 7 4951 0
	#         return type_uint;
.data
	.L5355:
	.string "u"
.text
	mov A, .L5355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4943 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcasecmp
	.L5356:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5357, A, 0
	.loc 7 4951 0
	#         return type_uint;
	.loc 7 4124 0
	# }
	mov B, type_uint
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5357:
	.loc 7 4953 0
	#         return type_long;
.data
	.L5358:
	.string "l"
.text
	mov A, .L5358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4943 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcasecmp
	.L5359:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5360, A, 0
	.loc 7 4953 0
	#         return type_long;
	.loc 7 4124 0
	# }
	mov B, type_long
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5360:
	.loc 7 4955 0
	#         return type_ulong;
.data
	.L5362:
	.string "ul"
.text
	mov A, .L5362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4943 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcasecmp
	.L5363:
	mov A, B
	add SP, 2
	eq A, 0
	mov B, 1
	jne .L5361, A, 0
	.loc 7 4955 0
	#         return type_ulong;
.data
	.L5364:
	.string "lu"
.text
	mov A, .L5364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4943 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcasecmp
	.L5365:
	mov A, B
	add SP, 2
	eq A, 0
	mov B, A
	ne B, 0
	.L5361:
	mov A, B
	jeq .L5366, A, 0
	.loc 7 4955 0
	#         return type_ulong;
	.loc 7 4124 0
	# }
	mov B, type_ulong
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5366:
	.loc 7 4957 0
	#         return type_llong;
.data
	.L5367:
	.string "ll"
.text
	mov A, .L5367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4943 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcasecmp
	.L5368:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5369, A, 0
	.loc 7 4957 0
	#         return type_llong;
	.loc 7 4124 0
	# }
	mov B, type_llong
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5369:
	.loc 7 4959 0
	#         return type_ullong;
.data
	.L5371:
	.string "ull"
.text
	mov A, .L5371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4943 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcasecmp
	.L5372:
	mov A, B
	add SP, 2
	eq A, 0
	mov B, 1
	jne .L5370, A, 0
	.loc 7 4959 0
	#         return type_ullong;
.data
	.L5373:
	.string "llu"
.text
	mov A, .L5373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4943 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcasecmp
	.L5374:
	mov A, B
	add SP, 2
	eq A, 0
	mov B, A
	ne B, 0
	.L5370:
	mov A, B
	jeq .L5375, A, 0
	.loc 7 4959 0
	#         return type_ullong;
	.loc 7 4124 0
	# }
	mov B, type_ullong
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5375:
	.loc 7 4961 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 4987 0
	# }
	.loc 7 4965 0
	#     char *end;
	mov A, 0
	mov B, SP
	.loc 7 4961 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4966 0
	#     long v = !strncasecmp(s, "0b", 2)
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov A, 0
	mov B, SP
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5376:
	.string "0b"
.text
	mov A, .L5376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4965 0
	#     char *end;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strncasecmp
	.L5377:
	mov A, B
	add SP, 3
	eq A, 0
	jeq .L5378, A, 0
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4965 0
	#     char *end;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtoul
	.L5379:
	mov A, B
	add SP, 3
	jmp .L5380
	.L5378:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4965 0
	#     char *end;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtoul
	.L5381:
	mov A, B
	add SP, 3
	.L5380:
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4969 0
	#     if (ty)
	mov A, 0
	mov B, SP
	.loc 7 4966 0
	#     long v = !strncasecmp(s, "0b", 2)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_int_suffix
	.L5382:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 4970 0
	#         return ast_inttype(ty, v);
	.loc 7 4969 0
	#     if (ty)
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L5383, A, 0
	.loc 7 4970 0
	#         return ast_inttype(ty, v);
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4969 0
	#     if (ty)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L5384:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5383:
	.loc 7 4972 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
	.loc 7 4966 0
	#     long v = !strncasecmp(s, "0b", 2)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4972 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5385, A, 0
	.loc 7 4965 0
	#     char *end;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4972 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
	.loc 7 4966 0
	#     long v = !strncasecmp(s, "0b", 2)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4972 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
.data
	.L5386:
	.string "invalid character '%c': %s"
.text
	mov A, .L5386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4961 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5387
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5387:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4972 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
.data
	.L5388:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5388
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5389:
	mov A, B
	add SP, 5
	.L5385:
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 4965 0
	#     char *end;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 10 4 0
	# #define true 1
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	ne A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 4980 0
	#     }
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L5390, A, 0
	.loc 7 4980 0
	#     }
	.loc 7 4979 0
	#         return ast_inttype(ty, v);
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4979 0
	#         return ast_inttype(ty, v);
	mov A, 16777215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_not
	.L5391:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L5392:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5393, A, 0
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	jmp .L5394
	.L5393:
	mov B, type_long
	load A, B
	.L5394:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 4980 0
	#     }
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4969 0
	#     if (ty)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L5395:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5390:
	.loc 7 4983 0
	#         : !(v & ~(unsigned long)UINT_MAX) ? type_uint
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4983 0
	#         : !(v & ~(unsigned long)UINT_MAX) ? type_uint
	mov A, 16777215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_not
	.L5396:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L5397:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5398, A, 0
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	jmp .L5399
	.L5398:
	.loc 7 4983 0
	#         : !(v & ~(unsigned long)UINT_MAX) ? type_uint
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4983 0
	#         : !(v & ~(unsigned long)UINT_MAX) ? type_uint
	mov A, 16777215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_not
	.L5400:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L5401:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5402, A, 0
	.loc 7 4124 0
	# }
	mov B, type_uint
	load A, B
	jmp .L5403
	.L5402:
	.loc 7 4983 0
	#         : !(v & ~(unsigned long)UINT_MAX) ? type_uint
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4983 0
	#         : !(v & ~(unsigned long)UINT_MAX) ? type_uint
	mov A, 16777215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_not
	.L5404:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L5405:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5406, A, 0
	.loc 7 4124 0
	# }
	mov B, type_long
	load A, B
	jmp .L5407
	.L5406:
	mov B, type_ulong
	load A, B
	.L5407:
	.L5403:
	.L5399:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 4987 0
	# }
	.loc 7 4967 0
	#         ? strtoul(s + 2, &end, 2) : strtoul(s, &end, 0);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4969 0
	#     if (ty)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L5408:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_float:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5005 0
	# }
	.loc 7 4991 0
	#     char *end;
	mov A, 0
	mov B, SP
	.loc 7 4987 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4992 0
	# #ifdef __eir__
	.loc 7 4994 0
	# #else
	mov A, 0
	mov B, SP
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4991 0
	#     char *end;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L5409:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4999 0
	#         return ast_floattype(type_ldouble, v);
.data
	.L5410:
	.string "l"
.text
	mov A, .L5410
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4992 0
	# #ifdef __eir__
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcasecmp
	.L5411:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5412, A, 0
	.loc 7 4999 0
	#         return ast_floattype(type_ldouble, v);
	.loc 7 4994 0
	# #else
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_ldouble
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_floattype
	.L5413:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5412:
	.loc 7 5001 0
	#         return ast_floattype(type_float, v);
.data
	.L5414:
	.string "f"
.text
	mov A, .L5414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4992 0
	# #ifdef __eir__
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcasecmp
	.L5415:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5416, A, 0
	.loc 7 5001 0
	#         return ast_floattype(type_float, v);
	.loc 7 4994 0
	# #else
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_float
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_floattype
	.L5417:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5416:
	.loc 7 5003 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
	.loc 7 4992 0
	# #ifdef __eir__
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5003 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5418, A, 0
	.loc 7 4991 0
	#     char *end;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5003 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
	.loc 7 4992 0
	# #ifdef __eir__
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5003 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
.data
	.L5419:
	.string "invalid character '%c': %s"
.text
	mov A, .L5419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4987 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5420:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5003 0
	#         errort(tok, "invalid character '%c': %s", *end, s);
.data
	.L5421:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5422:
	mov A, B
	add SP, 5
	.L5418:
	.loc 7 5005 0
	# }
	.loc 7 4994 0
	# #else
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_double
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_floattype
	.L5423:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_number:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5011 0
	# }
	.loc 7 5009 0
	#     bool isfloat = strpbrk(s, ".pP") || (strncasecmp(s, "0x", 2) && strpbrk(s, "eE"));
	mov A, 0
	mov B, SP
	.loc 7 5005 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
.data
	.L5425:
	.string ".pP"
.text
	mov A, .L5425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5009 0
	#     bool isfloat = strpbrk(s, ".pP") || (strncasecmp(s, "0x", 2) && strpbrk(s, "eE"));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strpbrk
	.L5426:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L5424, A, 0
	.loc 10 4 0
	# #define true 1
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5428:
	.string "0x"
.text
	mov A, .L5428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5009 0
	#     bool isfloat = strpbrk(s, ".pP") || (strncasecmp(s, "0x", 2) && strpbrk(s, "eE"));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strncasecmp
	.L5429:
	mov A, B
	add SP, 3
	mov B, 0
	jeq .L5427, A, 0
	.loc 10 4 0
	# #define true 1
.data
	.L5430:
	.string "eE"
.text
	mov A, .L5430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5009 0
	#     bool isfloat = strpbrk(s, ".pP") || (strncasecmp(s, "0x", 2) && strpbrk(s, "eE"));
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strpbrk
	.L5431:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L5427:
	mov A, B
	mov B, A
	ne B, 0
	.L5424:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5011 0
	# }
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L5432, A, 0
	.loc 7 5011 0
	# }
	.loc 7 5005 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_float
	.L5433:
	mov A, B
	add SP, 1
	jmp .L5434
	.L5432:
	.loc 7 5011 0
	# }
	.loc 7 5005 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_int
	.L5435:
	mov A, B
	add SP, 1
	.L5434:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_sizeof_operand_sub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5026 0
	# }
	.loc 7 5019 0
	#     if (is_keyword(tok, '(') && is_type(peek())) {
	mov A, 0
	mov B, SP
	mov A, .L5436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5436:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5023 0
	#     }
	.loc 7 5020 0
	#         Type *r = read_cast_type();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5019 0
	#     if (is_keyword(tok, '(') && is_type(peek())) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5438:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L5437, A, 0
	.loc 7 5020 0
	#         Type *r = read_cast_type();
	mov A, .L5439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5439:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L5440:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L5437:
	mov A, B
	jeq .L5441, A, 0
	.loc 7 5023 0
	#     }
	.loc 7 5021 0
	#         expect(')');
	mov A, 0
	mov B, SP
	mov A, .L5442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_type
	.L5442:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5022 0
	#         return r;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5443:
	mov A, B
	add SP, 1
	.loc 7 5023 0
	#     }
	.loc 7 5021 0
	#         expect(')');
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5441:
	.loc 7 5025 0
	#     return read_unary_expr()->ty;
	.loc 7 5019 0
	#     if (is_keyword(tok, '(') && is_type(peek())) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L5444:
	mov A, B
	add SP, 1
	.loc 7 5026 0
	# }
	mov A, .L5445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_expr
	.L5445:
	mov A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_sizeof_operand:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5034 0
	# }
	.loc 7 5030 0
	#     // Sizeof on void or function type is GNU extension
	mov A, 0
	mov B, SP
	mov A, .L5446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_sizeof_operand_sub
	.L5446:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5032 0
	#     assert(0 <= size);
	mov A, 0
	mov B, SP
	.loc 7 5030 0
	#     // Sizeof on void or function type is GNU extension
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L5447, A, 0
	.loc 7 5032 0
	#     assert(0 <= size);
	.loc 7 5030 0
	#     // Sizeof on void or function type is GNU extension
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5447:
	mov A, B
	jeq .L5448, A, 0
	.loc 7 5032 0
	#     assert(0 <= size);
	mov A, 1
	jmp .L5449
	.L5448:
	.loc 7 5030 0
	#     // Sizeof on void or function type is GNU extension
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	.L5449:
	mov B, BP
	add B, 16777214
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L961:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5032 0
	#     assert(0 <= size);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	eq A, 0
	jeq .L5450, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L5451:
	.string "assertion failed: 0 <= size\n"
.text
	mov A, .L5451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5452
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L5452:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L5450:
	mov A, 0
	jeq .L5453, A, 0
	jmp .L961
	.L5453:
	.L962:
	.loc 7 5034 0
	# }
	.loc 7 5032 0
	#     assert(0 <= size);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_ulong
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L5454:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_alignof_operand:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5045 0
	# }
	.loc 7 5042 0
	#     Type *ty = read_cast_type();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5455
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5455:
	mov A, B
	add SP, 1
	.loc 7 5043 0
	#     expect(')');
	mov A, 0
	mov B, SP
	mov A, .L5456
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_type
	.L5456:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5044 0
	#     return ast_inttype(type_ulong, ty->align);
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5457:
	mov A, B
	add SP, 1
	.loc 7 5045 0
	# }
	.loc 7 5043 0
	#     expect(')');
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_ulong
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L5458:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_func_args:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 5075 0
	# }
	.loc 7 5053 0
	#     int i = 0;
	mov A, 0
	mov B, SP
	mov A, .L5459
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L5459:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5054 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 5072 0
	#             errort(tok, "unexpected token: '%s'", tok2s(tok));
	.L963:
	.loc 7 5056 0
	#         Node *arg = conv(read_assignment_expr());
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5460
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5460:
	mov A, B
	add SP, 1
	jeq .L5461, A, 0
	jmp .L965
	.L5461:
	.loc 7 5057 0
	#         Type *paramtype;
	mov A, 0
	mov B, SP
	mov A, .L5462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L5462:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5463:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5058 0
	#         if (i < vec_len(params)) {
	.loc 7 5062 0
	#                 is_inttype(arg->ty) ? type_int :
	.loc 7 5059 0
	#             paramtype = vec_get(params, i++);
	.loc 7 5054 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5059 0
	#             paramtype = vec_get(params, i++);
	.loc 7 5045 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5464
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L5464:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5465, A, 0
	.loc 7 5060 0
	#         } else {
	.loc 7 5054 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5045 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5466
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L5466:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L5467
	.L5465:
	.loc 7 5062 0
	#                 is_inttype(arg->ty) ? type_int :
	.loc 7 5057 0
	#         Type *paramtype;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5468
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L5468:
	mov A, B
	add SP, 1
	jeq .L5469, A, 0
	.loc 7 4124 0
	# }
	mov B, type_double
	load A, B
	jmp .L5470
	.L5469:
	.loc 7 5062 0
	#                 is_inttype(arg->ty) ? type_int :
	.loc 7 5057 0
	#         Type *paramtype;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L5471:
	mov A, B
	add SP, 1
	jeq .L5472, A, 0
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	jmp .L5473
	.L5472:
	.loc 7 5062 0
	#                 is_inttype(arg->ty) ? type_int :
	.loc 7 5057 0
	#         Type *paramtype;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	.L5473:
	.L5470:
	mov B, BP
	add B, 16777212
	store A, B
	.L5467:
	.loc 7 5066 0
	#         if (paramtype->kind != arg->ty->kind)
	.loc 7 5057 0
	#         Type *paramtype;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5058 0
	#         if (i < vec_len(params)) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5474
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_assignable
	.L5474:
	mov A, B
	add SP, 2
	.loc 7 5067 0
	#             arg = ast_conv(paramtype, arg);
	.loc 7 5058 0
	#         if (i < vec_len(params)) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5067 0
	#             arg = ast_conv(paramtype, arg);
	.loc 7 5057 0
	#         Type *paramtype;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5475, A, 0
	.loc 7 5067 0
	#             arg = ast_conv(paramtype, arg);
	.loc 7 5057 0
	#         Type *paramtype;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5058 0
	#         if (i < vec_len(params)) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5476
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_conv
	.L5476:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.L5475:
	.loc 7 5069 0
	#         Token *tok = get();
	.loc 7 5057 0
	#         Type *paramtype;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5053 0
	#     int i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5477
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L5477:
	mov A, B
	add SP, 2
	.loc 7 5070 0
	#         if (is_keyword(tok, ')')) break;
	mov A, 0
	mov B, SP
	mov A, .L5478
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5478:
	mov A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5071 0
	#         if (!is_keyword(tok, ','))
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5070 0
	#         if (is_keyword(tok, ')')) break;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5479
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5479:
	mov A, B
	add SP, 2
	jeq .L5480, A, 0
	.loc 7 5071 0
	#         if (!is_keyword(tok, ','))
	jmp .L965
	.L5480:
	.loc 7 5072 0
	#             errort(tok, "unexpected token: '%s'", tok2s(tok));
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5070 0
	#         if (is_keyword(tok, ')')) break;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5481:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5482, A, 0
	.loc 7 5072 0
	#             errort(tok, "unexpected token: '%s'", tok2s(tok));
	.loc 7 5070 0
	#         if (is_keyword(tok, ')')) break;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L5483:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5072 0
	#             errort(tok, "unexpected token: '%s'", tok2s(tok));
.data
	.L5484:
	.string "unexpected token: '%s'"
.text
	mov A, .L5484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5070 0
	#         if (is_keyword(tok, ')')) break;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5485:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5072 0
	#             errort(tok, "unexpected token: '%s'", tok2s(tok));
.data
	.L5486:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5487:
	mov A, B
	add SP, 4
	.L5482:
	.L964:
	jmp .L963
	.L965:
	.loc 7 5075 0
	# }
	.loc 7 5053 0
	#     int i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_funcall:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5085 0
	# }
	.loc 7 5082 0
	#     }
	.loc 7 5079 0
	#         Node *desg = fp->operand;
	.loc 7 5075 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 267
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L5488, A, 0
	.loc 7 5079 0
	#         Node *desg = fp->operand;
	.loc 7 5075 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 262
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5488:
	mov A, B
	jeq .L5489, A, 0
	.loc 7 5082 0
	#     }
	.loc 7 5080 0
	#         Vector *args = read_func_args(desg->ty->params);
	mov A, 0
	mov B, SP
	.loc 7 5075 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5081 0
	#         return ast_funcall(desg->ty, desg->fname, args);
	mov A, 0
	mov B, SP
	.loc 7 5080 0
	#         Vector *args = read_func_args(desg->ty->params);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 13
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_func_args
	.L5490:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5082 0
	#     }
	.loc 7 5081 0
	#         return ast_funcall(desg->ty, desg->fname, args);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5082 0
	#     }
	.loc 7 5080 0
	#         Vector *args = read_func_args(desg->ty->params);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5082 0
	#     }
	.loc 7 5080 0
	#         Vector *args = read_func_args(desg->ty->params);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_funcall
	.L5491:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5489:
	.loc 7 5084 0
	#     return ast_funcptr_call(fp, args);
	mov A, 0
	mov B, SP
	.loc 7 5075 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 13
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_func_args
	.L5492:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5085 0
	# }
	.loc 7 5084 0
	#     return ast_funcptr_call(fp, args);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5075 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5493
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_funcptr_call
	.L5493:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
type_compatible:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5101 0
	# }
	.loc 7 5093 0
	#         return is_same_struct(a, b);
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5494, A, 0
	.loc 7 5093 0
	#         return is_same_struct(a, b);
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5495
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_same_struct
	.L5495:
	mov A, B
	add SP, 2
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5494:
	.loc 7 5095 0
	#         return false;
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5095 0
	#         return false;
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5496, A, 0
	.loc 7 5095 0
	#         return false;
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5496:
	.loc 7 5097 0
	#         return type_compatible(a->ptr, b->ptr);
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, 0
	jeq .L5497, A, 0
	.loc 7 5097 0
	#         return type_compatible(a->ptr, b->ptr);
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	ne B, 0
	.L5497:
	mov A, B
	jeq .L5498, A, 0
	.loc 7 5097 0
	#         return type_compatible(a->ptr, b->ptr);
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5097 0
	#         return type_compatible(a->ptr, b->ptr);
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5499
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp type_compatible
	.L5499:
	mov A, B
	add SP, 2
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5498:
	.loc 7 5099 0
	#         return same_arith_type(a, b);
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5501:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L5500, A, 0
	.loc 7 5099 0
	#         return same_arith_type(a, b);
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5502:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L5500:
	mov A, B
	jeq .L5503, A, 0
	.loc 7 5099 0
	#         return same_arith_type(a, b);
	.loc 7 5085 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp same_arith_type
	.L5504:
	mov A, B
	add SP, 2
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5503:
	.loc 7 5101 0
	# }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_generic_list:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 5121 0
	#     }
	.loc 7 5105 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L5505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L5505:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5121 0
	#     }
	.L966:
	.loc 7 5107 0
	#             return r;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5506:
	mov A, B
	add SP, 1
	jeq .L5507, A, 0
	.loc 7 5105 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5507:
	.loc 7 5109 0
	#         if (next_token(KDEFAULT)) {
	mov A, 0
	mov B, SP
	mov A, .L5508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5508:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5119 0
	#         }
	.loc 7 5110 0
	#             if (*defaultexpr)
	.loc 6 205 0
	# }
	mov A, 320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5509:
	mov A, B
	add SP, 1
	jeq .L5510, A, 0
	.loc 7 5114 0
	#         } else {
	.loc 7 5111 0
	#                 errort(tok, "default expression specified twice");
	.loc 7 5101 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L5511, A, 0
	.loc 7 5111 0
	#                 errort(tok, "default expression specified twice");
.data
	.L5512:
	.string "default expression specified twice"
.text
	mov A, .L5512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5109 0
	#         if (next_token(KDEFAULT)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5513:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5111 0
	#                 errort(tok, "default expression specified twice");
.data
	.L5514:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5515:
	mov A, B
	add SP, 3
	.L5511:
	.loc 7 5113 0
	#             *defaultexpr = read_assignment_expr();
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5516:
	mov A, B
	add SP, 1
	.loc 7 5114 0
	#         } else {
	mov A, .L5517
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L5517:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5101 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L5518
	.L5510:
	.loc 7 5119 0
	#         }
	.loc 7 5116 0
	#             expect(':');
	mov A, 0
	mov B, SP
	mov A, .L5519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_type
	.L5519:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5117 0
	#             Node *expr = read_assignment_expr();
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5520
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5520:
	mov A, B
	add SP, 1
	.loc 7 5118 0
	#             vec_push(r, make_pair(ty, expr));
	mov A, 0
	mov B, SP
	mov A, .L5521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L5521:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5119 0
	#         }
	.loc 7 5118 0
	#             vec_push(r, make_pair(ty, expr));
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5116 0
	#             expect(':');
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_pair
	.L5522:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5105 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L5523:
	mov A, B
	add SP, 2
	.L5518:
	.loc 7 5121 0
	#     }
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5524:
	mov A, B
	add SP, 1
	.L967:
	jmp .L966
	.L968:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_generic:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 8
	.loc 7 5141 0
	# }
	.loc 7 5126 0
	#     Token *tok = peek();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5525:
	mov A, B
	add SP, 1
	.loc 7 5127 0
	#     Node *contexpr = read_assignment_expr();
	mov A, 0
	mov B, SP
	mov A, .L5526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5526:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5128 0
	#     expect(',');
	mov A, 0
	mov B, SP
	mov A, .L5527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L5527:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5129 0
	#     Node *defaultexpr = NULL;
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5528:
	mov A, B
	add SP, 1
	.loc 7 5130 0
	#     Vector *list = read_generic_list(&defaultexpr);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5131 0
	#     for (int i = 0; i < vec_len(list); i++) {
	mov A, 0
	mov B, SP
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_generic_list
	.L5529:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5136 0
	#             return expr;
	.loc 7 5132 0
	#         void **pair = vec_get(list, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 5136 0
	#             return expr;
	.L969:
	.loc 7 5132 0
	#         void **pair = vec_get(list, i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5131 0
	#     for (int i = 0; i < vec_len(list); i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L5530:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5531, A, 0
	jmp .L5532
	.L5531:
	.loc 7 5136 0
	#             return expr;
	jmp .L971
	.L5532:
	.loc 7 5133 0
	#         Type *ty = pair[0];
	mov A, 0
	mov B, SP
	.loc 7 5132 0
	#         void **pair = vec_get(list, i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5131 0
	#     for (int i = 0; i < vec_len(list); i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L5533:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 5134 0
	#         Node *expr = pair[1];
	mov A, 0
	mov B, SP
	.loc 7 5133 0
	#         Type *ty = pair[0];
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5134 0
	#         Node *expr = pair[1];
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 5135 0
	#         if (type_compatible(contexpr->ty, ty))
	mov A, 0
	mov B, SP
	.loc 7 5133 0
	#         Type *ty = pair[0];
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5135 0
	#         if (type_compatible(contexpr->ty, ty))
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 5136 0
	#             return expr;
	.loc 7 5134 0
	#         Node *expr = pair[1];
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5136 0
	#             return expr;
	.loc 7 5128 0
	#     expect(',');
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp type_compatible
	.L5534:
	mov A, B
	add SP, 2
	jeq .L5535, A, 0
	.loc 7 5136 0
	#             return expr;
	.loc 7 5135 0
	#         if (type_compatible(contexpr->ty, ty))
	mov B, BP
	add B, 16777208
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5535:
	.loc 7 5136 0
	#             return expr;
	.L970:
	.loc 7 5132 0
	#         void **pair = vec_get(list, i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5136 0
	#             return expr;
	jmp .L969
	.L971:
	.loc 7 5139 0
	#        errort(tok, "no matching generic selection for %s: %s", node2s(contexpr), ty2s(contexpr->ty));
	.loc 7 5130 0
	#     Vector *list = read_generic_list(&defaultexpr);
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	jeq .L5536, A, 0
	.loc 7 5139 0
	#        errort(tok, "no matching generic selection for %s: %s", node2s(contexpr), ty2s(contexpr->ty));
	.loc 7 5128 0
	#     expect(',');
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L5537:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5139 0
	#        errort(tok, "no matching generic selection for %s: %s", node2s(contexpr), ty2s(contexpr->ty));
	.loc 7 5128 0
	#     expect(',');
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5538:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5139 0
	#        errort(tok, "no matching generic selection for %s: %s", node2s(contexpr), ty2s(contexpr->ty));
.data
	.L5539:
	.string "no matching generic selection for %s: %s"
.text
	mov A, .L5539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5127 0
	#     Node *contexpr = read_assignment_expr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5540:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5139 0
	#        errort(tok, "no matching generic selection for %s: %s", node2s(contexpr), ty2s(contexpr->ty));
.data
	.L5541:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5542:
	mov A, B
	add SP, 5
	.L5536:
	.loc 7 5141 0
	# }
	.loc 7 5130 0
	#     Vector *list = read_generic_list(&defaultexpr);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_static_assert:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
	.loc 7 5149 0
	#     int val = read_intexpr();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5543:
	mov A, B
	add SP, 1
	.loc 7 5150 0
	#     expect(',');
	mov A, 0
	mov B, SP
	mov A, .L5544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_intexpr
	.L5544:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5151 0
	#     Token *tok = get();
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5545:
	mov A, B
	add SP, 1
	.loc 7 5152 0
	#     if (tok->kind != TSTRING)
	mov A, 0
	mov B, SP
	mov A, .L5546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5546:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5153 0
	#         errort(tok, "string expected as the second argument for _Static_assert, but got %s", tok2s(tok));
	.loc 7 5152 0
	#     if (tok->kind != TSTRING)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5547, A, 0
	.loc 7 5153 0
	#         errort(tok, "string expected as the second argument for _Static_assert, but got %s", tok2s(tok));
	.loc 7 5152 0
	#     if (tok->kind != TSTRING)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L5548:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5153 0
	#         errort(tok, "string expected as the second argument for _Static_assert, but got %s", tok2s(tok));
.data
	.L5549:
	.string "string expected as the second argument for _Static_assert, but got %s"
.text
	mov A, .L5549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5152 0
	#     if (tok->kind != TSTRING)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5550:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5153 0
	#         errort(tok, "string expected as the second argument for _Static_assert, but got %s", tok2s(tok));
.data
	.L5551:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5552:
	mov A, B
	add SP, 4
	.L5547:
	.loc 7 5155 0
	#     expect(';');
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5553:
	mov A, B
	add SP, 1
	.loc 7 5156 0
	#     if (!val)
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5554:
	mov A, B
	add SP, 1
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
	.loc 7 5150 0
	#     expect(',');
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L5555, A, 0
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
	.loc 7 5152 0
	#     if (tok->kind != TSTRING)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
.data
	.L5556:
	.string "_Static_assert failure: %s"
.text
	mov A, .L5556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5152 0
	#     if (tok->kind != TSTRING)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5557:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
.data
	.L5558:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5559:
	mov A, B
	add SP, 4
	.L5555:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_var_or_func:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5177 0
	# }
	.loc 7 5166 0
	#     if (!v) {
	mov A, 0
	mov B, SP
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5166 0
	#     if (!v) {
	mov A, .L5560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp env
	.L5560:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L5561:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5173 0
	#     }
	.loc 7 5167 0
	#         Token *tok = peek();
	.loc 7 5166 0
	#     if (!v) {
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L5562, A, 0
	.loc 7 5173 0
	#     }
	.loc 7 5168 0
	#         if (!is_keyword(tok, '('))
	mov A, 0
	mov B, SP
	mov A, .L5563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5563:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5169 0
	#             errort(tok, "undefined variable: %s", name);
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5168 0
	#         if (!is_keyword(tok, '('))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5564:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L5565, A, 0
	.loc 7 5169 0
	#             errort(tok, "undefined variable: %s", name);
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5169 0
	#             errort(tok, "undefined variable: %s", name);
.data
	.L5566:
	.string "undefined variable: %s"
.text
	mov A, .L5566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5168 0
	#         if (!is_keyword(tok, '('))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5567:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5169 0
	#             errort(tok, "undefined variable: %s", name);
.data
	.L5568:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5569:
	mov A, B
	add SP, 4
	.L5565:
	.loc 7 5171 0
	#         warnt(tok, "assume returning int: %s()", name);
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L5570:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_func_type
	.L5571:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777213
	store A, B
	.loc 11 355 0
	# 
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 355 0
	# 
.data
	.L5572:
	.string "assume returning int: %s()"
.text
	mov A, .L5572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5168 0
	#         if (!is_keyword(tok, '('))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5573:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 355 0
	# 
.data
	.L5574:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp warnf
	.L5575:
	mov A, B
	add SP, 4
	.loc 7 5173 0
	#     }
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5171 0
	#         warnt(tok, "assume returning int: %s()", name);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_funcdesg
	.L5576:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5562:
	.loc 7 5175 0
	#         return ast_funcdesg(v->ty, name);
	.loc 7 5166 0
	#     if (!v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5577, A, 0
	.loc 7 5175 0
	#         return ast_funcdesg(v->ty, name);
	.loc 7 5157 0
	#         errort(tok, "_Static_assert failure: %s", tok->sval);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5175 0
	#         return ast_funcdesg(v->ty, name);
	.loc 7 5166 0
	#     if (!v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_funcdesg
	.L5578:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5577:
	.loc 7 5177 0
	# }
	.loc 7 5166 0
	#     if (!v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
get_compound_assign_op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5195 0
	#     }
	.loc 7 5181 0
	#         return 0;
	.loc 7 5177 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5579, A, 0
	.loc 7 5181 0
	#         return 0;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5579:
	.loc 7 5195 0
	#     }
	.loc 7 5183 0
	#     case OP_A_ADD: return '+';
	.loc 7 5177 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5195 0
	#     }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 290
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5580, A, 0
	jmp .L973
	.L5580:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 298
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5581, A, 0
	jmp .L974
	.L5581:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 294
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5582, A, 0
	jmp .L975
	.L5582:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 292
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5583, A, 0
	jmp .L976
	.L5583:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 293
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5584, A, 0
	jmp .L977
	.L5584:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 291
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5585, A, 0
	jmp .L978
	.L5585:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 295
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5586, A, 0
	jmp .L979
	.L5586:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 299
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5587, A, 0
	jmp .L980
	.L5587:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 296
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5588, A, 0
	jmp .L981
	.L5588:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 297
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5589, A, 0
	jmp .L982
	.L5589:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 282
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5590, A, 0
	jmp .L983
	.L5590:
	jmp .L984
	.loc 7 5184 0
	#     case OP_A_SUB: return '-';
	.L973:
	mov A, 43
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5185 0
	#     case OP_A_MUL: return '*';
	.L974:
	mov A, 45
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5186 0
	#     case OP_A_DIV: return '/';
	.L975:
	mov A, 42
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5187 0
	#     case OP_A_MOD: return '%';
	.L976:
	mov A, 47
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5188 0
	#     case OP_A_AND: return '&';
	.L977:
	mov A, 37
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5189 0
	#     case OP_A_OR:  return '|';
	.L978:
	mov A, 38
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5190 0
	#     case OP_A_XOR: return '^';
	.L979:
	mov A, 124
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5191 0
	#     case OP_A_SAL: return OP_SAL;
	.L980:
	mov A, 94
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5192 0
	#     case OP_A_SAR: return OP_SAR;
	.L981:
	.loc 6 205 0
	# }
	mov A, 308
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5193 0
	#     case OP_A_SHR: return OP_SHR;
	.L982:
	.loc 6 205 0
	# }
	mov A, 309
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5194 0
	#     default: return 0;
	.L983:
	.loc 6 205 0
	# }
	mov A, 280
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5195 0
	#     }
	.L984:
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L972:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_stmt_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5209 0
	# }
	.loc 7 5200 0
	#     expect(')');
	mov A, 0
	mov B, SP
	mov A, .L5591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_compound_stmt
	.L5591:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5201 0
	#     Type *rtype = type_void;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5592:
	mov A, B
	add SP, 1
	.loc 7 5202 0
	#     if (vec_len(r->stmts) > 0) {
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, type_void
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5205 0
	#             rtype = lastexpr->ty;
	.loc 7 5203 0
	#         Node *lastexpr = vec_tail(r->stmts);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5200 0
	#     expect(')');
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L5593:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5594, A, 0
	.loc 7 5205 0
	#             rtype = lastexpr->ty;
	.loc 7 5204 0
	#         if (lastexpr->ty)
	mov A, 0
	mov B, SP
	.loc 7 5200 0
	#     expect(')');
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_tail
	.L5595:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5205 0
	#             rtype = lastexpr->ty;
	.loc 7 5204 0
	#         if (lastexpr->ty)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	jeq .L5596, A, 0
	.loc 7 5205 0
	#             rtype = lastexpr->ty;
	.loc 7 5204 0
	#         if (lastexpr->ty)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L5596:
	.L5594:
	.loc 7 5208 0
	#     return r;
	.loc 7 5202 0
	#     if (vec_len(r->stmts) > 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5200 0
	#     expect(')');
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5209 0
	# }
	.loc 7 5200 0
	#     expect(')');
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
char_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 5219 0
	#         return type_uint;
	.loc 7 5209 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5219 0
	#         return type_uint;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5597, A, 0
	jmp .L986
	.L5597:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5598, A, 0
	jmp .L987
	.L5598:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5599, A, 0
	jmp .L988
	.L5599:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5600, A, 0
	jmp .L989
	.L5600:
	jmp .L985
	.loc 7 5214 0
	#     case ENC_WCHAR:
	.L986:
	.L987:
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5217 0
	#         return type_ushort;
	.L988:
	.loc 7 4124 0
	# }
	mov B, type_ushort
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5219 0
	#         return type_uint;
	.L989:
	.loc 7 4124 0
	# }
	mov B, type_uint
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5219 0
	#         return type_uint;
	.L985:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L5601:
	.string "internal error"
.text
	mov A, .L5601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5602:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5602
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5603:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_primary_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5250 0
	#         error("internal error: unknown token kind: %d", tok->kind);
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov A, 0
	mov B, SP
	mov A, .L5604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5604:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5227 0
	#     if (is_keyword(tok, '(')) {
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L5605, A, 0
	.loc 7 5227 0
	#     if (is_keyword(tok, '(')) {
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5605:
	.loc 7 5233 0
	#     }
	.loc 7 5228 0
	#         if (next_token('{'))
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5606:
	mov A, B
	add SP, 2
	jeq .L5607, A, 0
	.loc 7 5233 0
	#     }
	.loc 7 5229 0
	#             return read_stmt_expr();
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5608:
	mov A, B
	add SP, 1
	jeq .L5609, A, 0
	mov A, .L5610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_stmt_expr
	.L5610:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5609:
	.loc 7 5231 0
	#         expect(')');
	mov A, 0
	mov B, SP
	mov A, .L5611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expr
	.L5611:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5232 0
	#         return r;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5612:
	mov A, B
	add SP, 1
	.loc 7 5233 0
	#     }
	.loc 7 5231 0
	#         expect(')');
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5607:
	.loc 7 5236 0
	#     }
	.loc 7 5235 0
	#         return read_generic();
	.loc 6 205 0
	# }
	mov A, 328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5613:
	mov A, B
	add SP, 2
	jeq .L5614, A, 0
	.loc 7 5236 0
	#     }
	mov A, .L5615
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_generic
	.L5615:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5614:
	.loc 7 5250 0
	#         error("internal error: unknown token kind: %d", tok->kind);
	.loc 7 5238 0
	#     case TIDENT:
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5250 0
	#         error("internal error: unknown token kind: %d", tok->kind);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5616, A, 0
	jmp .L991
	.L5616:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5617, A, 0
	jmp .L992
	.L5617:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5618, A, 0
	jmp .L993
	.L5618:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5619, A, 0
	jmp .L994
	.L5619:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5620, A, 0
	jmp .L995
	.L5620:
	jmp .L996
	.loc 7 5239 0
	#         return read_var_or_func(tok->sval);
	.L991:
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5621
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_var_or_func
	.L5621:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5241 0
	#         return read_number(tok);
	.L992:
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5622
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_number
	.L5622:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5243 0
	#         return ast_inttype(char_type(tok->enc), tok->c);
	.L993:
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5243 0
	#         return ast_inttype(char_type(tok->enc), tok->c);
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5623
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp char_type
	.L5623:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5624
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L5624:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5245 0
	#         return ast_string(tok->enc, tok->sval, tok->slen);
	.L994:
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5245 0
	#         return ast_string(tok->enc, tok->sval, tok->slen);
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5245 0
	#         return ast_string(tok->enc, tok->sval, tok->slen);
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5625
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_string
	.L5625:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5247 0
	#         unget_token(tok);
	.L995:
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5626
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L5626:
	mov A, B
	add SP, 1
	.loc 7 5249 0
	#     default:
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5250 0
	#         error("internal error: unknown token kind: %d", tok->kind);
	.L996:
	.loc 7 5226 0
	#     if (!tok) return NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5250 0
	#         error("internal error: unknown token kind: %d", tok->kind);
.data
	.L5627:
	.string "internal error: unknown token kind: %d"
.text
	mov A, .L5627
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5628:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5628
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5629
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5629:
	mov A, B
	add SP, 4
	.L990:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_subscript_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5262 0
	# }
	.loc 7 5256 0
	#     Node *sub = read_expr();
	mov A, 0
	mov B, SP
	mov A, .L5630
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5630:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5257 0
	#     if (!sub)
	mov A, 0
	mov B, SP
	mov A, .L5631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expr
	.L5631:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5258 0
	#         errort(tok, "subscription expected");
	.loc 7 5257 0
	#     if (!sub)
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	jeq .L5632, A, 0
	.loc 7 5258 0
	#         errort(tok, "subscription expected");
.data
	.L5633:
	.string "subscription expected"
.text
	mov A, .L5633
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5256 0
	#     Node *sub = read_expr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5634
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5634:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5258 0
	#         errort(tok, "subscription expected");
.data
	.L5635:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5635
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5636:
	mov A, B
	add SP, 3
	.L5632:
	.loc 7 5260 0
	#     Node *t = binop('+', conv(node), conv(sub));
	mov A, 93
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5637:
	mov A, B
	add SP, 1
	.loc 7 5261 0
	#     return ast_uop(AST_DEREF, t->ty->ptr, t);
	mov A, 0
	mov B, SP
	.loc 7 5257 0
	#     if (!sub)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5638:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5261 0
	#     return ast_uop(AST_DEREF, t->ty->ptr, t);
	.loc 7 5250 0
	#         error("internal error: unknown token kind: %d", tok->kind);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5639
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5639:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5261 0
	#     return ast_uop(AST_DEREF, t->ty->ptr, t);
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5640
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5640:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5262 0
	# }
	.loc 7 5261 0
	#     return ast_uop(AST_DEREF, t->ty->ptr, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5262 0
	# }
	.loc 7 5261 0
	#     return ast_uop(AST_DEREF, t->ty->ptr, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5641:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_postfix_expr_tail:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 5299 0
	#     }
	.loc 7 5266 0
	#     for (;;) {
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	eq A, 0
	jeq .L5642, A, 0
	.loc 7 5266 0
	#     for (;;) {
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5642:
	.loc 7 5299 0
	#     }
	.L997:
	.loc 7 5275 0
	#         }
	.loc 7 5268 0
	#             Token *tok = peek();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5643:
	mov A, B
	add SP, 1
	jeq .L5644, A, 0
	.loc 7 5275 0
	#         }
	.loc 7 5269 0
	#             node = conv(node);
	mov A, 0
	mov B, SP
	mov A, .L5645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5645:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5270 0
	#             Type *t = node->ty;
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5646:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 2
	store A, B
	.loc 7 5271 0
	#             if (t->kind != KIND_PTR || t->ptr->kind != KIND_FUNC)
	mov A, 0
	mov B, SP
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5272 0
	#                 errort(tok, "function expected, but got %s", node2s(node));
	.loc 7 5271 0
	#             if (t->kind != KIND_PTR || t->ptr->kind != KIND_FUNC)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 1
	jne .L5647, A, 0
	.loc 7 5272 0
	#                 errort(tok, "function expected, but got %s", node2s(node));
	.loc 7 5271 0
	#             if (t->kind != KIND_PTR || t->ptr->kind != KIND_FUNC)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L5647:
	mov A, B
	jeq .L5648, A, 0
	.loc 7 5272 0
	#                 errort(tok, "function expected, but got %s", node2s(node));
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5649:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5272 0
	#                 errort(tok, "function expected, but got %s", node2s(node));
.data
	.L5650:
	.string "function expected, but got %s"
.text
	mov A, .L5650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5269 0
	#             node = conv(node);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5651:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5272 0
	#                 errort(tok, "function expected, but got %s", node2s(node));
.data
	.L5652:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5653
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5653:
	mov A, B
	add SP, 4
	.L5648:
	.loc 7 5274 0
	#             continue;
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_funcall
	.L5654:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 2
	store A, B
	.loc 7 5275 0
	#         }
	jmp .L998
	.L5644:
	.loc 7 5279 0
	#         }
	.loc 7 5277 0
	#             node = read_subscript_expr(node);
	mov A, 91
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5655:
	mov A, B
	add SP, 1
	jeq .L5656, A, 0
	.loc 7 5279 0
	#         }
	.loc 7 5278 0
	#             continue;
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5657
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_subscript_expr
	.L5657:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 2
	store A, B
	.loc 7 5279 0
	#         }
	jmp .L998
	.L5656:
	.loc 7 5283 0
	#         }
	.loc 7 5281 0
	#             node = read_struct_field(node);
	mov A, 46
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5658:
	mov A, B
	add SP, 1
	jeq .L5659, A, 0
	.loc 7 5283 0
	#         }
	.loc 7 5282 0
	#             continue;
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5660
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_struct_field
	.L5660:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 2
	store A, B
	.loc 7 5283 0
	#         }
	jmp .L998
	.L5659:
	.loc 7 5291 0
	#         }
	.loc 7 5285 0
	#             if (node->ty->kind != KIND_PTR)
	.loc 6 205 0
	# }
	mov A, 289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5661
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5661:
	mov A, B
	add SP, 1
	jeq .L5662, A, 0
	.loc 7 5291 0
	#         }
	.loc 7 5286 0
	#                 error("pointer type expected, but got %s %s",
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5663, A, 0
	.loc 7 5286 0
	#                 error("pointer type expected, but got %s %s",
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5664:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5286 0
	#                 error("pointer type expected, but got %s %s",
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L5665:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5286 0
	#                 error("pointer type expected, but got %s %s",
.data
	.L5666:
	.string "pointer type expected, but got %s %s"
.text
	mov A, .L5666
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5667:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5668:
	mov A, B
	add SP, 5
	.L5663:
	.loc 7 5289 0
	#             node = read_struct_field(node);
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5289 0
	#             node = read_struct_field(node);
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5669:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 5290 0
	#             continue;
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_struct_field
	.L5670:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 2
	store A, B
	.loc 7 5291 0
	#         }
	jmp .L998
	.L5662:
	.loc 7 5293 0
	#         if (next_token(OP_INC) || next_token(OP_DEC)) {
	mov A, 0
	mov B, SP
	mov A, .L5671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5671:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5297 0
	#         }
	.loc 7 5294 0
	#             ensure_lvalue(node);
	.loc 6 205 0
	# }
	mov A, 303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5673:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L5672, A, 0
	.loc 7 5294 0
	#             ensure_lvalue(node);
	.loc 6 205 0
	# }
	mov A, 300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5674:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L5672:
	mov A, B
	jeq .L5675, A, 0
	.loc 7 5297 0
	#         }
	.loc 7 5295 0
	#             int op = is_keyword(tok, OP_INC) ? OP_POST_INC : OP_POST_DEC;
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_lvalue
	.L5676:
	mov A, B
	add SP, 1
	.loc 7 5296 0
	#             return ast_uop(op, node->ty, node);
	mov A, 0
	mov B, SP
	.loc 6 205 0
	# }
	mov A, 303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5293 0
	#         if (next_token(OP_INC) || next_token(OP_DEC)) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5677
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5677:
	mov A, B
	add SP, 2
	jeq .L5678, A, 0
	.loc 6 205 0
	# }
	mov A, 286
	jmp .L5679
	.L5678:
	mov A, 287
	.L5679:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5297 0
	#         }
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5297 0
	#         }
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5296 0
	#             return ast_uop(op, node->ty, node);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5680:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5675:
	.loc 7 5299 0
	#     }
	.loc 7 5262 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5299 0
	#     }
	.L998:
	jmp .L997
	.L999:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_postfix_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5305 0
	# }
	.loc 7 5304 0
	#     return read_postfix_expr_tail(node);
	mov A, 0
	mov B, SP
	mov A, .L5681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_primary_expr
	.L5681:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5305 0
	# }
	.loc 7 5304 0
	#     return read_postfix_expr_tail(node);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_postfix_expr_tail
	.L5682:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_unary_incdec:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5312 0
	# }
	.loc 7 5309 0
	#     operand = conv(operand);
	mov A, 0
	mov B, SP
	mov A, .L5683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_expr
	.L5683:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5310 0
	#     ensure_lvalue(operand);
	.loc 7 5309 0
	#     operand = conv(operand);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5684:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5311 0
	#     return ast_uop(op, operand->ty, operand);
	.loc 7 5309 0
	#     operand = conv(operand);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_lvalue
	.L5685:
	mov A, B
	add SP, 1
	.loc 7 5312 0
	# }
	.loc 7 5309 0
	#     operand = conv(operand);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5312 0
	# }
	.loc 7 5309 0
	#     operand = conv(operand);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5305 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5686:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_label_addr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5323 0
	# }
	.loc 7 5318 0
	#     if (tok2->kind != TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L5687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5687:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5319 0
	#         errort(tok, "label name expected after &&, but got %s", tok2s(tok2));
	.loc 7 5318 0
	#     if (tok2->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5688, A, 0
	.loc 7 5319 0
	#         errort(tok, "label name expected after &&, but got %s", tok2s(tok2));
	.loc 7 5318 0
	#     if (tok2->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L5689:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5319 0
	#         errort(tok, "label name expected after &&, but got %s", tok2s(tok2));
.data
	.L5690:
	.string "label name expected after &&, but got %s"
.text
	mov A, .L5690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5312 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5691:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5319 0
	#         errort(tok, "label name expected after &&, but got %s", tok2s(tok2));
.data
	.L5692:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5693:
	mov A, B
	add SP, 4
	.L5688:
	.loc 7 5321 0
	#     vec_push(gotos, r);
	mov A, 0
	mov B, SP
	.loc 7 5318 0
	#     if (tok2->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_label_addr
	.L5694:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5322 0
	#     return r;
	.loc 7 5321 0
	#     vec_push(gotos, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, gotos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L5695:
	mov A, B
	add SP, 2
	.loc 7 5323 0
	# }
	.loc 7 5321 0
	#     vec_push(gotos, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_unary_addr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5331 0
	# }
	.loc 7 5327 0
	#     if (operand->kind == AST_FUNCDESG)
	mov A, 0
	mov B, SP
	mov A, .L5696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5696:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5328 0
	#         return conv(operand);
	.loc 7 5327 0
	#     if (operand->kind == AST_FUNCDESG)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 262
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5697, A, 0
	.loc 7 5328 0
	#         return conv(operand);
	.loc 7 5327 0
	#     if (operand->kind == AST_FUNCDESG)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5698:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5697:
	.loc 7 5330 0
	#     return ast_uop(AST_ADDR, make_ptr_type(operand->ty), operand);
	.loc 7 5327 0
	#     if (operand->kind == AST_FUNCDESG)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_lvalue
	.L5699:
	mov A, B
	add SP, 1
	.loc 7 5331 0
	# }
	.loc 7 5327 0
	#     if (operand->kind == AST_FUNCDESG)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5331 0
	# }
	.loc 7 5327 0
	#     if (operand->kind == AST_FUNCDESG)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L5700:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5701:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_unary_deref:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5340 0
	# }
	.loc 7 5335 0
	#     if (operand->ty->kind != KIND_PTR)
	mov A, 0
	mov B, SP
	mov A, .L5702
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5702:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5703:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5336 0
	#         errort(tok, "pointer type expected, but got %s", node2s(operand));
	.loc 7 5335 0
	#     if (operand->ty->kind != KIND_PTR)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5704, A, 0
	.loc 7 5336 0
	#         errort(tok, "pointer type expected, but got %s", node2s(operand));
	.loc 7 5335 0
	#     if (operand->ty->kind != KIND_PTR)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5705:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5336 0
	#         errort(tok, "pointer type expected, but got %s", node2s(operand));
.data
	.L5706:
	.string "pointer type expected, but got %s"
.text
	mov A, .L5706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5331 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5707:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5336 0
	#         errort(tok, "pointer type expected, but got %s", node2s(operand));
.data
	.L5708:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5709:
	mov A, B
	add SP, 4
	.L5704:
	.loc 7 5338 0
	#         return operand;
	.loc 7 5335 0
	#     if (operand->ty->kind != KIND_PTR)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5710, A, 0
	.loc 7 5338 0
	#         return operand;
	.loc 7 5335 0
	#     if (operand->ty->kind != KIND_PTR)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5710:
	.loc 7 5340 0
	# }
	.loc 7 5335 0
	#     if (operand->ty->kind != KIND_PTR)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5340 0
	# }
	.loc 7 5335 0
	#     if (operand->ty->kind != KIND_PTR)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5711:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_unary_minus:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5348 0
	# }
	.loc 7 5344 0
	#     ensure_arithtype(expr);
	mov A, 0
	mov B, SP
	mov A, .L5712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5712:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5345 0
	#     if (is_inttype(expr->ty))
	.loc 7 5344 0
	#     ensure_arithtype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_arithtype
	.L5713:
	mov A, B
	add SP, 1
	.loc 7 5346 0
	#         return binop('-', conv(ast_inttype(expr->ty, 0)), conv(expr));
	.loc 7 5344 0
	#     ensure_arithtype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L5714:
	mov A, B
	add SP, 1
	jeq .L5715, A, 0
	.loc 7 5346 0
	#         return binop('-', conv(ast_inttype(expr->ty, 0)), conv(expr));
	.loc 7 5344 0
	#     ensure_arithtype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5716
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5716:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5346 0
	#         return binop('-', conv(ast_inttype(expr->ty, 0)), conv(expr));
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5344 0
	#     ensure_arithtype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L5717:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5718:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5346 0
	#         return binop('-', conv(ast_inttype(expr->ty, 0)), conv(expr));
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5719
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5719:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5715:
	.loc 7 5348 0
	# }
	.loc 7 5344 0
	#     ensure_arithtype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5348 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5344 0
	#     ensure_arithtype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5720
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_floattype
	.L5720:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5348 0
	# }
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5721
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5721:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_unary_bitnot:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5356 0
	# }
	.loc 7 5352 0
	#     expr = conv(expr);
	mov A, 0
	mov B, SP
	mov A, .L5722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5722:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5353 0
	#     if (!is_inttype(expr->ty))
	.loc 7 5352 0
	#     expr = conv(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5723:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5354 0
	#         errort(tok, "invalid use of ~: %s", node2s(expr));
	.loc 7 5352 0
	#     expr = conv(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5724
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L5724:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L5725, A, 0
	.loc 7 5354 0
	#         errort(tok, "invalid use of ~: %s", node2s(expr));
	.loc 7 5352 0
	#     expr = conv(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5726:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5354 0
	#         errort(tok, "invalid use of ~: %s", node2s(expr));
.data
	.L5727:
	.string "invalid use of ~: %s"
.text
	mov A, .L5727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5348 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5728
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5728:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5354 0
	#         errort(tok, "invalid use of ~: %s", node2s(expr));
.data
	.L5729:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5729
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5730:
	mov A, B
	add SP, 4
	.L5725:
	.loc 7 5356 0
	# }
	.loc 7 5352 0
	#     expr = conv(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5356 0
	# }
	.loc 7 5352 0
	#     expr = conv(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5356 0
	# }
	mov A, 126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5731
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5731:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_unary_lognot:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5362 0
	# }
	.loc 7 5360 0
	#     operand = conv(operand);
	mov A, 0
	mov B, SP
	mov A, .L5732
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5732:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5361 0
	#     return ast_uop('!', type_int, operand);
	.loc 7 5360 0
	#     operand = conv(operand);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5733:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5362 0
	# }
	.loc 7 5360 0
	#     operand = conv(operand);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5362 0
	# }
	mov A, 33
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5734:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_unary_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5383 0
	# }
	.loc 7 5366 0
	#     if (tok->kind == TKEYWORD) {
	mov A, 0
	mov B, SP
	mov A, .L5735
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5735:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5379 0
	#         }
	.loc 7 5367 0
	#         switch (tok->id) {
	.loc 7 5366 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5736, A, 0
	.loc 7 5379 0
	#         }
	.loc 7 5368 0
	#         case KSIZEOF: return read_sizeof_operand();
	.loc 7 5366 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5379 0
	#         }
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 342
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5737, A, 0
	jmp .L1001
	.L5737:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 311
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5738, A, 0
	jmp .L1002
	.L5738:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 303
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5739, A, 0
	jmp .L1003
	.L5739:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 300
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5740, A, 0
	jmp .L1004
	.L5740:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 305
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5741, A, 0
	jmp .L1005
	.L5741:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 38
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5742, A, 0
	jmp .L1006
	.L5742:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 42
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5743, A, 0
	jmp .L1007
	.L5743:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5744, A, 0
	jmp .L1008
	.L5744:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5745, A, 0
	jmp .L1009
	.L5745:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 126
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5746, A, 0
	jmp .L1010
	.L5746:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 33
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5747, A, 0
	jmp .L1011
	.L5747:
	jmp .L1000
	.loc 7 5369 0
	#         case KALIGNOF: return read_alignof_operand();
	.L1001:
	mov A, .L5748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_sizeof_operand
	.L5748:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5370 0
	#         case OP_INC: return read_unary_incdec(OP_PRE_INC);
	.L1002:
	mov A, .L5749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_alignof_operand
	.L5749:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5371 0
	#         case OP_DEC: return read_unary_incdec(OP_PRE_DEC);
	.L1003:
	.loc 6 205 0
	# }
	mov A, 284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_incdec
	.L5750:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5372 0
	#         case OP_LOGAND: return read_label_addr(tok);
	.L1004:
	.loc 6 205 0
	# }
	mov A, 285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_incdec
	.L5751:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5373 0
	#         case '&': return read_unary_addr();
	.L1005:
	.loc 7 5366 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_label_addr
	.L5752:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5374 0
	#         case '*': return read_unary_deref(tok);
	.L1006:
	mov A, .L5753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_addr
	.L5753:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5375 0
	#         case '+': return read_cast_expr();
	.L1007:
	.loc 7 5366 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_deref
	.L5754:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5376 0
	#         case '-': return read_unary_minus();
	.L1008:
	mov A, .L5755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5755:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5377 0
	#         case '~': return read_unary_bitnot(tok);
	.L1009:
	mov A, .L5756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_minus
	.L5756:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5378 0
	#         case '!': return read_unary_lognot();
	.L1010:
	.loc 7 5366 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_bitnot
	.L5757:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 5379 0
	#         }
	.L1011:
	mov A, .L5758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_lognot
	.L5758:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1000:
	.L5736:
	.loc 7 5382 0
	#     return read_postfix_expr();
	.loc 7 5366 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L5759:
	mov A, B
	add SP, 1
	.loc 7 5383 0
	# }
	mov A, .L5760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_postfix_expr
	.L5760:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_compound_literal:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5391 0
	# }
	.loc 7 5387 0
	#     Vector *init = read_decl_init(ty);
	mov A, 0
	mov B, SP
	mov A, .L5761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L5761:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5388 0
	#     Node *r = ast_lvar(ty, name);
	mov A, 0
	mov B, SP
	.loc 7 5383 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_init
	.L5762:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5389 0
	#     r->lvarinit = init;
	mov A, 0
	mov B, SP
	.loc 7 5387 0
	#     Vector *init = read_decl_init(ty);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5383 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_lvar
	.L5763:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5390 0
	#     return r;
	.loc 7 5388 0
	#     Node *r = ast_lvar(ty, name);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5389 0
	#     r->lvarinit = init;
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5391 0
	# }
	.loc 7 5389 0
	#     r->lvarinit = init;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_cast_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5395 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_spec
	.L5764:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_abstract_declarator
	.L5765:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_cast_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5410 0
	# }
	.loc 7 5399 0
	#     if (is_keyword(tok, '(') && is_type(peek())) {
	mov A, 0
	mov B, SP
	mov A, .L5766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5766:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5407 0
	#     }
	.loc 7 5400 0
	#         Type *ty = read_cast_type();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5399 0
	#     if (is_keyword(tok, '(') && is_type(peek())) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5768:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L5767, A, 0
	.loc 7 5400 0
	#         Type *ty = read_cast_type();
	mov A, .L5769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5769:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L5770:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L5767:
	mov A, B
	jeq .L5771, A, 0
	.loc 7 5407 0
	#     }
	.loc 7 5401 0
	#         expect(')');
	mov A, 0
	mov B, SP
	mov A, .L5772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_type
	.L5772:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5402 0
	#         if (is_keyword(peek(), '{')) {
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5773:
	mov A, B
	add SP, 1
	.loc 7 5405 0
	#         }
	.loc 7 5403 0
	#             Node *node = read_compound_literal(ty);
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5774:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5775:
	mov A, B
	add SP, 2
	jeq .L5776, A, 0
	.loc 7 5405 0
	#         }
	.loc 7 5404 0
	#             return read_postfix_expr_tail(node);
	mov A, 0
	mov B, SP
	.loc 7 5401 0
	#         expect(')');
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_compound_literal
	.L5777:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5405 0
	#         }
	.loc 7 5404 0
	#             return read_postfix_expr_tail(node);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_postfix_expr_tail
	.L5778:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5776:
	.loc 7 5407 0
	#     }
	mov A, .L5779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5779:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5401 0
	#         expect(')');
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_uop
	.L5780:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5771:
	.loc 7 5409 0
	#     return read_unary_expr();
	.loc 7 5399 0
	#     if (is_keyword(tok, '(') && is_type(peek())) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L5781:
	mov A, B
	add SP, 1
	.loc 7 5410 0
	# }
	mov A, .L5782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_unary_expr
	.L5782:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_multiplicative_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5416 0
	#         else if (next_token('/')) node = binop('/', conv(node), conv(read_cast_expr()));
	.loc 7 5414 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L5783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5783:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5416 0
	#         else if (next_token('/')) node = binop('/', conv(node), conv(read_cast_expr()));
	.L1012:
	mov A, 42
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5784:
	mov A, B
	add SP, 1
	jeq .L5785, A, 0
	mov A, .L5786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5786:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5787:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5414 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5788:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5416 0
	#         else if (next_token('/')) node = binop('/', conv(node), conv(read_cast_expr()));
	mov A, 42
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5789:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5790
	.L5785:
	mov A, 47
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5791:
	mov A, B
	add SP, 1
	jeq .L5792, A, 0
	mov A, .L5793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5793:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5794:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5414 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5795:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5416 0
	#         else if (next_token('/')) node = binop('/', conv(node), conv(read_cast_expr()));
	mov A, 47
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5796:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5797
	.L5792:
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5798:
	mov A, B
	add SP, 1
	jeq .L5799, A, 0
	mov A, .L5800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L5800:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5801:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5414 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5802
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5802:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5416 0
	#         else if (next_token('/')) node = binop('/', conv(node), conv(read_cast_expr()));
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5803:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5804
	.L5799:
	.loc 7 5414 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5804:
	.L5797:
	.L5790:
	.loc 7 5416 0
	#         else if (next_token('/')) node = binop('/', conv(node), conv(read_cast_expr()));
	.L1013:
	jmp .L1012
	.L1014:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_additive_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5426 0
	#         else if (next_token('-')) node = binop('-', conv(node), conv(read_multiplicative_expr()));
	.loc 7 5424 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L5805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_multiplicative_expr
	.L5805:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5426 0
	#         else if (next_token('-')) node = binop('-', conv(node), conv(read_multiplicative_expr()));
	.L1015:
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5806:
	mov A, B
	add SP, 1
	jeq .L5807, A, 0
	mov A, .L5808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_multiplicative_expr
	.L5808:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5809:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5424 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5810:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5426 0
	#         else if (next_token('-')) node = binop('-', conv(node), conv(read_multiplicative_expr()));
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5811:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5812
	.L5807:
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5813:
	mov A, B
	add SP, 1
	jeq .L5814, A, 0
	mov A, .L5815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_multiplicative_expr
	.L5815:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5816:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5424 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5817:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5426 0
	#         else if (next_token('-')) node = binop('-', conv(node), conv(read_multiplicative_expr()));
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5818:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5819
	.L5814:
	.loc 7 5424 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5819:
	.L5812:
	.loc 7 5426 0
	#         else if (next_token('-')) node = binop('-', conv(node), conv(read_multiplicative_expr()));
	.L1016:
	jmp .L1015
	.L1017:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_shift_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5447 0
	# }
	.loc 7 5433 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L5820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_additive_expr
	.L5820:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5445 0
	#     }
	.L1018:
	.loc 7 5435 0
	#         if (next_token(OP_SAL))
	.loc 7 5436 0
	#             op = OP_SAL;
	.loc 6 205 0
	# }
	mov A, 308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5821:
	mov A, B
	add SP, 1
	jeq .L5822, A, 0
	.loc 7 5436 0
	#             op = OP_SAL;
	.loc 6 205 0
	# }
	mov A, 308
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L5823
	.L5822:
	.loc 7 5436 0
	#             op = OP_SAL;
	.loc 6 205 0
	# }
	mov A, 309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5824
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5824:
	mov A, B
	add SP, 1
	jeq .L5825, A, 0
	.loc 7 5436 0
	#             op = OP_SAL;
	.loc 7 5433 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 3
	load A, B
	jeq .L5826, A, 0
	.loc 6 205 0
	# }
	mov A, 280
	jmp .L5827
	.L5826:
	mov A, 309
	.L5827:
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L5828
	.L5825:
	.loc 7 5436 0
	#             op = OP_SAL;
	jmp .L1020
	.L5828:
	.L5823:
	.loc 7 5442 0
	#         ensure_inttype(node);
	mov A, 0
	mov B, SP
	mov A, .L5829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_additive_expr
	.L5829:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5443 0
	#         ensure_inttype(right);
	.loc 7 5433 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_inttype
	.L5830:
	mov A, B
	add SP, 1
	.loc 7 5444 0
	#         node = ast_binop(node->ty, op, conv(node), conv(right));
	.loc 7 5442 0
	#         ensure_inttype(node);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_inttype
	.L5831:
	mov A, B
	add SP, 1
	.loc 7 5445 0
	#     }
	.loc 7 5442 0
	#         ensure_inttype(node);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5832:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5445 0
	#     }
	.loc 7 5433 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5833:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5435 0
	#         if (next_token(OP_SAL))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5445 0
	#     }
	.loc 7 5433 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5834:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5445 0
	#     }
	.L1019:
	jmp .L1018
	.L1020:
	.loc 7 5447 0
	# }
	.loc 7 5433 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_relational_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5458 0
	#     }
	.loc 7 5451 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L5835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_shift_expr
	.L5835:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5458 0
	#     }
	.L1021:
	.loc 7 5453 0
	#         else if (next_token('>'))   node = binop('<',   conv(read_shift_expr()), conv(node));
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5836:
	mov A, B
	add SP, 1
	jeq .L5837, A, 0
	mov A, .L5838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_shift_expr
	.L5838:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5839:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5451 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5840:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5453 0
	#         else if (next_token('>'))   node = binop('<',   conv(read_shift_expr()), conv(node));
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5841:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5842
	.L5837:
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5843:
	mov A, B
	add SP, 1
	jeq .L5844, A, 0
	.loc 7 5451 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5845:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5453 0
	#         else if (next_token('>'))   node = binop('<',   conv(read_shift_expr()), conv(node));
	mov A, .L5846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_shift_expr
	.L5846:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5847:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5848:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5849
	.L5844:
	.loc 6 205 0
	# }
	mov A, 304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5850:
	mov A, B
	add SP, 1
	jeq .L5851, A, 0
	.loc 7 5453 0
	#         else if (next_token('>'))   node = binop('<',   conv(read_shift_expr()), conv(node));
	mov A, .L5852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_shift_expr
	.L5852:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5853:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5451 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5854:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5855:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5856
	.L5851:
	.loc 7 5453 0
	#         else if (next_token('>'))   node = binop('<',   conv(read_shift_expr()), conv(node));
	.loc 6 205 0
	# }
	mov A, 302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5857:
	mov A, B
	add SP, 1
	jeq .L5858, A, 0
	.loc 7 5453 0
	#         else if (next_token('>'))   node = binop('<',   conv(read_shift_expr()), conv(node));
	.loc 7 5451 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5859:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5453 0
	#         else if (next_token('>'))   node = binop('<',   conv(read_shift_expr()), conv(node));
	mov A, .L5860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_shift_expr
	.L5860:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5861
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5861:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5862:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5863
	.L5858:
	.loc 7 5453 0
	#         else if (next_token('>'))   node = binop('<',   conv(read_shift_expr()), conv(node));
	.loc 7 5451 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5863:
	.L5856:
	.L5849:
	.L5842:
	.loc 7 5458 0
	#     }
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5451 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5458 0
	#     }
	.L1022:
	jmp .L1021
	.L1023:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_equality_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5473 0
	# }
	.loc 7 5463 0
	#     Node *r;
	mov A, 0
	mov B, SP
	mov A, .L5864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_relational_expr
	.L5864:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5464 0
	#     if (next_token(OP_EQ)) {
	.loc 7 5470 0
	#     }
	.loc 7 5465 0
	#         r = binop(OP_EQ, conv(node), conv(read_equality_expr()));
	.loc 6 205 0
	# }
	mov A, 301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5865:
	mov A, B
	add SP, 1
	jeq .L5866, A, 0
	.loc 7 5466 0
	#     } else if (next_token(OP_NE)) {
	mov A, .L5867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_equality_expr
	.L5867:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5868:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5463 0
	#     Node *r;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5869
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5869:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5870:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L5871
	.L5866:
	.loc 7 5470 0
	#     }
	.loc 7 5466 0
	#     } else if (next_token(OP_NE)) {
	.loc 6 205 0
	# }
	mov A, 307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5872
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5872:
	mov A, B
	add SP, 1
	jeq .L5873, A, 0
	.loc 7 5468 0
	#     } else {
	mov A, .L5874
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_equality_expr
	.L5874:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5875
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5875:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5463 0
	#     Node *r;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5876:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5877:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L5878
	.L5873:
	.loc 7 5470 0
	#     }
	.loc 7 5463 0
	#     Node *r;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5878:
	.L5871:
	.loc 7 5472 0
	#     return r;
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5464 0
	#     if (next_token(OP_EQ)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5473 0
	# }
	.loc 7 5464 0
	#     if (next_token(OP_EQ)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_bitand_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5480 0
	# }
	.loc 7 5477 0
	#     while (next_token('&'))
	mov A, 0
	mov B, SP
	mov A, .L5879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_equality_expr
	.L5879:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5478 0
	#         node = binop('&', conv(node), conv(read_equality_expr()));
	.L1024:
	mov A, 38
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5880:
	mov A, B
	add SP, 1
	jeq .L5881, A, 0
	mov A, .L5882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_equality_expr
	.L5882:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5883
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5883:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5477 0
	#     while (next_token('&'))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5884
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5884:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5478 0
	#         node = binop('&', conv(node), conv(read_equality_expr()));
	mov A, 38
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5885:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5886
	.L5881:
	jmp .L1025
	.L5886:
	jmp .L1024
	.L1025:
	.loc 7 5480 0
	# }
	.loc 7 5477 0
	#     while (next_token('&'))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_bitxor_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5487 0
	# }
	.loc 7 5484 0
	#     while (next_token('^'))
	mov A, 0
	mov B, SP
	mov A, .L5887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_bitand_expr
	.L5887:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5485 0
	#         node = binop('^', conv(node), conv(read_bitand_expr()));
	.L1026:
	mov A, 94
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5888:
	mov A, B
	add SP, 1
	jeq .L5889, A, 0
	mov A, .L5890
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_bitand_expr
	.L5890:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5891
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5891:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5484 0
	#     while (next_token('^'))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5892
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5892:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5485 0
	#         node = binop('^', conv(node), conv(read_bitand_expr()));
	mov A, 94
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5893
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5893:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5894
	.L5889:
	jmp .L1027
	.L5894:
	jmp .L1026
	.L1027:
	.loc 7 5487 0
	# }
	.loc 7 5484 0
	#     while (next_token('^'))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_bitor_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5494 0
	# }
	.loc 7 5491 0
	#     while (next_token('|'))
	mov A, 0
	mov B, SP
	mov A, .L5895
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_bitxor_expr
	.L5895:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5492 0
	#         node = binop('|', conv(node), conv(read_bitxor_expr()));
	.L1028:
	mov A, 124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5896
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5896:
	mov A, B
	add SP, 1
	jeq .L5897, A, 0
	mov A, .L5898
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_bitxor_expr
	.L5898:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5899:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5491 0
	#     while (next_token('|'))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5900:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5492 0
	#         node = binop('|', conv(node), conv(read_bitxor_expr()));
	mov A, 124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5901
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5901:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5902
	.L5897:
	jmp .L1029
	.L5902:
	jmp .L1028
	.L1029:
	.loc 7 5494 0
	# }
	.loc 7 5491 0
	#     while (next_token('|'))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_logand_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5501 0
	# }
	.loc 7 5498 0
	#     while (next_token(OP_LOGAND))
	mov A, 0
	mov B, SP
	mov A, .L5903
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_bitor_expr
	.L5903:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5499 0
	#         node = ast_binop(type_int, OP_LOGAND, node, read_bitor_expr());
	.L1030:
	.loc 6 205 0
	# }
	mov A, 305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5904:
	mov A, B
	add SP, 1
	jeq .L5905, A, 0
	.loc 7 5499 0
	#         node = ast_binop(type_int, OP_LOGAND, node, read_bitor_expr());
	mov A, .L5906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_bitor_expr
	.L5906:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5498 0
	#     while (next_token(OP_LOGAND))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5907:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5908
	.L5905:
	.loc 7 5499 0
	#         node = ast_binop(type_int, OP_LOGAND, node, read_bitor_expr());
	jmp .L1031
	.L5908:
	jmp .L1030
	.L1031:
	.loc 7 5501 0
	# }
	.loc 7 5498 0
	#     while (next_token(OP_LOGAND))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_logor_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5508 0
	# }
	.loc 7 5505 0
	#     while (next_token(OP_LOGOR))
	mov A, 0
	mov B, SP
	mov A, .L5909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_logand_expr
	.L5909:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5506 0
	#         node = ast_binop(type_int, OP_LOGOR, node, read_logand_expr());
	.L1032:
	.loc 6 205 0
	# }
	mov A, 306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5910:
	mov A, B
	add SP, 1
	jeq .L5911, A, 0
	.loc 7 5506 0
	#         node = ast_binop(type_int, OP_LOGOR, node, read_logand_expr());
	mov A, .L5912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_logand_expr
	.L5912:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5505 0
	#     while (next_token(OP_LOGOR))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5913:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5914
	.L5911:
	.loc 7 5506 0
	#         node = ast_binop(type_int, OP_LOGOR, node, read_logand_expr());
	jmp .L1033
	.L5914:
	jmp .L1032
	.L1033:
	.loc 7 5508 0
	# }
	.loc 7 5505 0
	#     while (next_token(OP_LOGOR))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_read_conditional_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 5524 0
	# }
	.loc 7 5512 0
	#     expect(':');
	mov A, 0
	mov B, SP
	mov A, .L5915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_comma_expr
	.L5915:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5916:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5513 0
	#     Node *els = conv(read_conditional_expr());
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L5917:
	mov A, B
	add SP, 1
	.loc 7 5514 0
	#     // [GNU] Omitting the middle operand is allowed.
	mov A, 0
	mov B, SP
	mov A, .L5918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_conditional_expr
	.L5918:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5919:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5516 0
	#     Type *u = els->ty;
	mov A, 0
	mov B, SP
	.loc 7 5512 0
	#     expect(':');
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L5920, A, 0
	.loc 7 5516 0
	#     Type *u = els->ty;
	.loc 7 5512 0
	#     expect(':');
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	jmp .L5921
	.L5920:
	.loc 7 5516 0
	#     Type *u = els->ty;
	.loc 7 5508 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	.L5921:
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5517 0
	#     // C11 6.5.15p5: if both types are arithemtic type, the result
	mov A, 0
	mov B, SP
	.loc 7 5514 0
	#     // [GNU] Omitting the middle operand is allowed.
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5522 0
	#     }
	.loc 7 5520 0
	#         Type *r = usual_arith_conv(t, u);
	.loc 7 5516 0
	#     Type *u = els->ty;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5923:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L5922, A, 0
	.loc 7 5520 0
	#         Type *r = usual_arith_conv(t, u);
	.loc 7 5517 0
	#     // C11 6.5.15p5: if both types are arithemtic type, the result
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5924:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L5922:
	mov A, B
	jeq .L5925, A, 0
	.loc 7 5522 0
	#     }
	.loc 7 5521 0
	#         return ast_ternary(r, cond, (then ? wrap(r, then) : NULL), wrap(r, els));
	mov A, 0
	mov B, SP
	.loc 7 5517 0
	#     // C11 6.5.15p5: if both types are arithemtic type, the result
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5516 0
	#     Type *u = els->ty;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp usual_arith_conv
	.L5926:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5522 0
	#     }
	.loc 7 5514 0
	#     // [GNU] Omitting the middle operand is allowed.
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5521 0
	#         return ast_ternary(r, cond, (then ? wrap(r, then) : NULL), wrap(r, els));
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5927
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp wrap
	.L5927:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5522 0
	#     }
	.loc 7 5512 0
	#     expect(':');
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L5928, A, 0
	.loc 7 5522 0
	#     }
	.loc 7 5512 0
	#     expect(':');
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5521 0
	#         return ast_ternary(r, cond, (then ? wrap(r, then) : NULL), wrap(r, els));
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5929
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp wrap
	.L5929:
	mov A, B
	add SP, 2
	jmp .L5930
	.L5928:
	.loc 7 5522 0
	#     }
	mov A, 0
	.L5930:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5508 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5521 0
	#         return ast_ternary(r, cond, (then ? wrap(r, then) : NULL), wrap(r, els));
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_ternary
	.L5931:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5925:
	.loc 7 5524 0
	# }
	.loc 7 5514 0
	#     // [GNU] Omitting the middle operand is allowed.
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5512 0
	#     expect(':');
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5508 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5517 0
	#     // C11 6.5.15p5: if both types are arithemtic type, the result
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5932
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_ternary
	.L5932:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_conditional_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5531 0
	# }
	.loc 7 5528 0
	#     if (!next_token('?'))
	mov A, 0
	mov B, SP
	mov A, .L5933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_logor_expr
	.L5933:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5529 0
	#         return cond;
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5934
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5934:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L5935, A, 0
	.loc 7 5528 0
	#     if (!next_token('?'))
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5935:
	.loc 7 5531 0
	# }
	.loc 7 5528 0
	#     if (!next_token('?'))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_read_conditional_expr
	.L5936:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_assignment_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 5552 0
	# }
	.loc 7 5535 0
	#     Token *tok = get();
	mov A, 0
	mov B, SP
	mov A, .L5937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_logor_expr
	.L5937:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5536 0
	#     if (!tok)
	mov A, 0
	mov B, SP
	mov A, .L5938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5938:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5537 0
	#         return node;
	.loc 7 5536 0
	#     if (!tok)
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	jeq .L5939, A, 0
	.loc 7 5537 0
	#         return node;
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5939:
	.loc 7 5539 0
	#         return do_read_conditional_expr(node);
	mov A, 63
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5536 0
	#     if (!tok)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5940:
	mov A, B
	add SP, 2
	jeq .L5941, A, 0
	.loc 7 5539 0
	#         return do_read_conditional_expr(node);
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_read_conditional_expr
	.L5942:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5941:
	.loc 7 5541 0
	#     if (is_keyword(tok, '=') || cop) {
	mov A, 0
	mov B, SP
	.loc 7 5536 0
	#     if (!tok)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_compound_assign_op
	.L5943:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5549 0
	#     }
	.loc 7 5542 0
	#         Node *value = conv(read_assignment_expr());
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5536 0
	#     if (!tok)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5945:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L5944, A, 0
	.loc 7 5541 0
	#     if (is_keyword(tok, '=') || cop) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	ne B, 0
	.L5944:
	mov A, B
	jeq .L5946, A, 0
	.loc 7 5549 0
	#     }
	.loc 7 5543 0
	#         if (is_keyword(tok, '=') || cop)
	mov A, 0
	mov B, SP
	mov A, .L5947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L5947:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5948:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5544 0
	#             ensure_lvalue(node);
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5536 0
	#     if (!tok)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L5950:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L5949, A, 0
	.loc 7 5541 0
	#     if (is_keyword(tok, '=') || cop) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	ne B, 0
	.L5949:
	mov A, B
	jeq .L5951, A, 0
	.loc 7 5544 0
	#             ensure_lvalue(node);
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_lvalue
	.L5952:
	mov A, B
	add SP, 1
	.L5951:
	.loc 7 5546 0
	#         if (is_arithtype(node->ty) && node->ty->kind != right->ty->kind)
	mov A, 0
	mov B, SP
	.loc 7 5541 0
	#     if (is_keyword(tok, '=') || cop) {
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L5953, A, 0
	.loc 7 5546 0
	#         if (is_arithtype(node->ty) && node->ty->kind != right->ty->kind)
	.loc 7 5543 0
	#         if (is_keyword(tok, '=') || cop)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5546 0
	#         if (is_arithtype(node->ty) && node->ty->kind != right->ty->kind)
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5954
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L5954:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5541 0
	#     if (is_keyword(tok, '=') || cop) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp binop
	.L5955:
	mov A, B
	add SP, 3
	jmp .L5956
	.L5953:
	.loc 7 5543 0
	#         if (is_keyword(tok, '=') || cop)
	mov B, BP
	add B, 16777212
	load A, B
	.L5956:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5547 0
	#             right = ast_conv(node->ty, right);
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5958
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L5958:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L5957, A, 0
	.loc 7 5547 0
	#             right = ast_conv(node->ty, right);
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5547 0
	#             right = ast_conv(node->ty, right);
	.loc 7 5546 0
	#         if (is_arithtype(node->ty) && node->ty->kind != right->ty->kind)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L5957:
	mov A, B
	jeq .L5959, A, 0
	.loc 7 5547 0
	#             right = ast_conv(node->ty, right);
	.loc 7 5546 0
	#         if (is_arithtype(node->ty) && node->ty->kind != right->ty->kind)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5547 0
	#             right = ast_conv(node->ty, right);
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_conv
	.L5960:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	.L5959:
	.loc 7 5549 0
	#     }
	.loc 7 5546 0
	#         if (is_arithtype(node->ty) && node->ty->kind != right->ty->kind)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5549 0
	#     }
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5961
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5961:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5946:
	.loc 7 5551 0
	#     return node;
	.loc 7 5536 0
	#     if (!tok)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5962
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L5962:
	mov A, B
	add SP, 1
	.loc 7 5552 0
	# }
	.loc 7 5535 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_comma_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5561 0
	# }
	.loc 7 5556 0
	#     while (next_token(',')) {
	mov A, 0
	mov B, SP
	mov A, .L5963
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L5963:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5559 0
	#     }
	.L1034:
	.loc 7 5557 0
	#         Node *expr = read_assignment_expr();
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5964
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L5964:
	mov A, B
	add SP, 1
	jeq .L5965, A, 0
	.loc 7 5559 0
	#     }
	.loc 7 5558 0
	#         node = ast_binop(expr->ty, ',', node, expr);
	mov A, 0
	mov B, SP
	mov A, .L5966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L5966:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5559 0
	#     }
	.loc 7 5558 0
	#         node = ast_binop(expr->ty, ',', node, expr);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5556 0
	#     while (next_token(',')) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5559 0
	#     }
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5558 0
	#         node = ast_binop(expr->ty, ',', node, expr);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L5967:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L5968
	.L5965:
	.loc 7 5559 0
	#     }
	jmp .L1035
	.L5968:
	jmp .L1034
	.L1035:
	.loc 7 5561 0
	# }
	.loc 7 5556 0
	#     while (next_token(',')) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5569 0
	# }
	.loc 7 5565 0
	#     Node *r = read_comma_expr();
	mov A, 0
	mov B, SP
	mov A, .L5969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L5969:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5566 0
	#     if (!r)
	mov A, 0
	mov B, SP
	mov A, .L5970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_comma_expr
	.L5970:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5567 0
	#         errort(tok, "expression expected");
	.loc 7 5566 0
	#     if (!r)
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	jeq .L5971, A, 0
	.loc 7 5567 0
	#         errort(tok, "expression expected");
.data
	.L5972:
	.string "expression expected"
.text
	mov A, .L5972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5565 0
	#     Node *r = read_comma_expr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L5973:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5567 0
	#         errort(tok, "expression expected");
.data
	.L5974:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5975:
	mov A, B
	add SP, 3
	.L5971:
	.loc 7 5569 0
	# }
	.loc 7 5566 0
	#     if (!r)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_expr_opt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5573 0
	# }
	mov A, .L5976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_comma_expr
	.L5976:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_struct_field:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5589 0
	# }
	.loc 7 5581 0
	#         error("struct expected, but got %s", node2s(struc));
	.loc 7 5573 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5977, A, 0
	.loc 7 5581 0
	#         error("struct expected, but got %s", node2s(struc));
	.loc 7 5573 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L5978:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5581 0
	#         error("struct expected, but got %s", node2s(struc));
.data
	.L5979:
	.string "struct expected, but got %s"
.text
	mov A, .L5979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5980:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5981:
	mov A, B
	add SP, 4
	.L5977:
	.loc 7 5583 0
	#     if (name->kind != TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L5982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5982:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5584 0
	#         error("field name expected, but got %s", tok2s(name));
	.loc 7 5583 0
	#     if (name->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5983, A, 0
	.loc 7 5584 0
	#         error("field name expected, but got %s", tok2s(name));
	.loc 7 5583 0
	#     if (name->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L5984:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5584 0
	#         error("field name expected, but got %s", tok2s(name));
.data
	.L5985:
	.string "field name expected, but got %s"
.text
	mov A, .L5985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5986:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5987:
	mov A, B
	add SP, 4
	.L5983:
	.loc 7 5586 0
	#     if (!field)
	mov A, 0
	mov B, SP
	.loc 7 5583 0
	#     if (name->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5586 0
	#     if (!field)
	.loc 7 5573 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_get
	.L5988:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5587 0
	#         error("struct has no such field: %s", tok2s(name));
	.loc 7 5586 0
	#     if (!field)
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	jeq .L5989, A, 0
	.loc 7 5587 0
	#         error("struct has no such field: %s", tok2s(name));
	.loc 7 5583 0
	#     if (name->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L5990:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5587 0
	#         error("struct has no such field: %s", tok2s(name));
.data
	.L5991:
	.string "struct has no such field: %s"
.text
	mov A, .L5991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5992:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L5992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L5993:
	mov A, B
	add SP, 4
	.L5989:
	.loc 7 5589 0
	# }
	.loc 7 5583 0
	#     if (name->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5573 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5586 0
	#     if (!field)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_struct_ref
	.L5994:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_rectype_tag:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5597 0
	# }
	.loc 7 5593 0
	#     if (tok->kind == TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L5995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L5995:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5594 0
	#         return tok->sval;
	.loc 7 5593 0
	#     if (tok->kind == TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5996, A, 0
	.loc 7 5594 0
	#         return tok->sval;
	.loc 7 5593 0
	#     if (tok->kind == TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5996:
	.loc 7 5596 0
	#     return NULL;
	.loc 7 5593 0
	#     if (tok->kind == TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L5997:
	mov A, B
	add SP, 1
	.loc 7 5597 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
compute_padding:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5601 0
	# }
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L5998:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5601 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5999, A, 0
	mov A, 0
	jmp .L6000
	.L5999:
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5601 0
	# }
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6001:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	.L6000:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
squash_unnamed_struct:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 5610 0
	#     }
	.loc 7 5605 0
	#     for (int i = 0; i < vec_len(keys); i++) {
	mov A, 0
	mov B, SP
	.loc 7 5601 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_keys
	.L6002:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5610 0
	#     }
	.loc 7 5606 0
	#         char *name = vec_get(keys, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 5610 0
	#     }
	.L1036:
	.loc 7 5606 0
	#         char *name = vec_get(keys, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5605 0
	#     for (int i = 0; i < vec_len(keys); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6003:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6004, A, 0
	jmp .L6005
	.L6004:
	.loc 7 5610 0
	#     }
	jmp .L1038
	.L6005:
	.loc 7 5607 0
	#         Type *t = copy_type(dict_get(unnamed->fields, name));
	mov A, 0
	mov B, SP
	.loc 7 5606 0
	#         char *name = vec_get(keys, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5605 0
	#     for (int i = 0; i < vec_len(keys); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6006:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5608 0
	#         t->offset += offset;
	mov A, 0
	mov B, SP
	.loc 7 5607 0
	#         Type *t = copy_type(dict_get(unnamed->fields, name));
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5608 0
	#         t->offset += offset;
	.loc 7 5601 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_get
	.L6007:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_type
	.L6008:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5609 0
	#         dict_put(dict, name, t);
	.loc 7 5608 0
	#         t->offset += offset;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5601 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5608 0
	#         t->offset += offset;
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5610 0
	#     }
	.loc 7 5608 0
	#         t->offset += offset;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5607 0
	#         Type *t = copy_type(dict_get(unnamed->fields, name));
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6009
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_put
	.L6009:
	mov A, B
	add SP, 3
	.loc 7 5610 0
	#     }
	.L1037:
	.loc 7 5606 0
	#         char *name = vec_get(keys, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5610 0
	#     }
	jmp .L1036
	.L1038:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_bitsize:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5625 0
	# }
	.loc 7 5615 0
	#         error("non-integer type cannot be a bitfield: %s", ty2s(ty));
	.loc 7 5610 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_inttype
	.L6010:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L6011, A, 0
	.loc 7 5615 0
	#         error("non-integer type cannot be a bitfield: %s", ty2s(ty));
	.loc 7 5610 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L6012:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5615 0
	#         error("non-integer type cannot be a bitfield: %s", ty2s(ty));
.data
	.L6013:
	.string "non-integer type cannot be a bitfield: %s"
.text
	mov A, .L6013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6014:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6015:
	mov A, B
	add SP, 4
	.L6011:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 5610 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L6016:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L6017:
	.string "bitfield is not implemented: %s"
.text
	mov A, .L6017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6018:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6019:
	mov A, B
	add SP, 4
	.loc 7 5618 0
	#     int r = read_intexpr();
	mov A, 0
	mov B, SP
	mov A, .L6020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6020:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5619 0
	#     int maxsize = ty->kind == KIND_BOOL ? 1 : ty->size * 8;
	mov A, 0
	mov B, SP
	mov A, .L6021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_intexpr
	.L6021:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5620 0
	#     if (r < 0 || maxsize < r)
	mov A, 0
	mov B, SP
	.loc 7 5610 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6022, A, 0
	.loc 7 5620 0
	#     if (r < 0 || maxsize < r)
	mov A, 1
	jmp .L6023
	.L6022:
	.loc 7 5610 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5620 0
	#     if (r < 0 || maxsize < r)
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6024:
	mov A, B
	add SP, 2
	.L6023:
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5621 0
	#         errort(tok, "invalid bitfield size for %s: %d", ty2s(ty), r);
	.loc 7 5619 0
	#     int maxsize = ty->kind == KIND_BOOL ? 1 : ty->size * 8;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5621 0
	#         errort(tok, "invalid bitfield size for %s: %d", ty2s(ty), r);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L6025, A, 0
	.loc 7 5620 0
	#     if (r < 0 || maxsize < r)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5619 0
	#     int maxsize = ty->kind == KIND_BOOL ? 1 : ty->size * 8;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L6025:
	mov A, B
	jeq .L6026, A, 0
	.loc 7 5621 0
	#         errort(tok, "invalid bitfield size for %s: %d", ty2s(ty), r);
	.loc 7 5619 0
	#     int maxsize = ty->kind == KIND_BOOL ? 1 : ty->size * 8;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5621 0
	#         errort(tok, "invalid bitfield size for %s: %d", ty2s(ty), r);
	.loc 7 5610 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L6027:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5621 0
	#         errort(tok, "invalid bitfield size for %s: %d", ty2s(ty), r);
.data
	.L6028:
	.string "invalid bitfield size for %s: %d"
.text
	mov A, .L6028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5618 0
	#     int r = read_intexpr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6029:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5621 0
	#         errort(tok, "invalid bitfield size for %s: %d", ty2s(ty), r);
.data
	.L6030:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6031:
	mov A, B
	add SP, 5
	.L6026:
	.loc 7 5623 0
	#         errort(tok, "zero-width bitfield needs to be unnamed: %s", name);
	.loc 7 5619 0
	#     int maxsize = ty->kind == KIND_BOOL ? 1 : ty->size * 8;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5623 0
	#         errort(tok, "zero-width bitfield needs to be unnamed: %s", name);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L6032, A, 0
	.loc 7 5610 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5623 0
	#         errort(tok, "zero-width bitfield needs to be unnamed: %s", name);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6032:
	mov A, B
	jeq .L6033, A, 0
	.loc 7 5610 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5623 0
	#         errort(tok, "zero-width bitfield needs to be unnamed: %s", name);
.data
	.L6034:
	.string "zero-width bitfield needs to be unnamed: %s"
.text
	mov A, .L6034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5618 0
	#     int r = read_intexpr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6035:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5623 0
	#         errort(tok, "zero-width bitfield needs to be unnamed: %s", name);
.data
	.L6036:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6036
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6037:
	mov A, B
	add SP, 4
	.L6033:
	.loc 7 5625 0
	# }
	.loc 7 5619 0
	#     int maxsize = ty->kind == KIND_BOOL ? 1 : ty->size * 8;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_rectype_fields_sub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 5659 0
	# }
	.loc 7 5629 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L6038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6038:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5655 0
	#         }
	.L1039:
	.loc 7 5633 0
	#         }
	.loc 7 5631 0
	#             read_static_assert();
	.loc 6 205 0
	# }
	mov A, 344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6039
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6039:
	mov A, B
	add SP, 1
	jeq .L6040, A, 0
	.loc 7 5633 0
	#         }
	.loc 7 5632 0
	#             continue;
	mov A, .L6041
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_static_assert
	.L6041:
	mov A, B
	.loc 7 5633 0
	#         }
	jmp .L1040
	.L6040:
	.loc 7 5635 0
	#             break;
	mov A, .L6042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6042:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6043
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6043:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L6044, A, 0
	jmp .L1041
	.L6044:
	.loc 7 5637 0
	#         if (basetype->kind == KIND_STRUCT && next_token(';')) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_spec
	.L6045:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5640 0
	#         }
	.loc 7 5638 0
	#             vec_push(r, make_pair(NULL, basetype));
	.loc 7 5637 0
	#         if (basetype->kind == KIND_STRUCT && next_token(';')) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L6046, A, 0
	.loc 7 5638 0
	#             vec_push(r, make_pair(NULL, basetype));
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6047:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L6046:
	mov A, B
	jeq .L6048, A, 0
	.loc 7 5640 0
	#         }
	.loc 7 5639 0
	#             continue;
	.loc 7 5637 0
	#         if (basetype->kind == KIND_STRUCT && next_token(';')) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5639 0
	#             continue;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_pair
	.L6049:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5629 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6050:
	mov A, B
	add SP, 2
	.loc 7 5640 0
	#         }
	jmp .L1040
	.L6048:
	.loc 7 5655 0
	#         }
	.L1042:
	.loc 7 5643 0
	#             Type *fieldtype = read_declarator(&name, basetype, NULL, DECL_PARAM_TYPEONLY);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5644 0
	#             ensure_not_void(fieldtype);
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5644 0
	#             ensure_not_void(fieldtype);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5637 0
	#         if (basetype->kind == KIND_STRUCT && next_token(';')) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5644 0
	#             ensure_not_void(fieldtype);
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator
	.L6051:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5645 0
	#             fieldtype = copy_type(fieldtype);
	.loc 7 5644 0
	#             ensure_not_void(fieldtype);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_not_void
	.L6052:
	mov A, B
	add SP, 1
	.loc 7 5646 0
	#             fieldtype->bitsize = next_token(':') ? read_bitsize(name, fieldtype) : -1;
	.loc 7 5644 0
	#             ensure_not_void(fieldtype);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_type
	.L6053:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5647 0
	#             vec_push(r, make_pair(name, fieldtype));
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6054:
	mov A, B
	add SP, 1
	jeq .L6055, A, 0
	.loc 7 5644 0
	#             ensure_not_void(fieldtype);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5643 0
	#             Type *fieldtype = read_declarator(&name, basetype, NULL, DECL_PARAM_TYPEONLY);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_bitsize
	.L6056:
	mov A, B
	add SP, 2
	jmp .L6057
	.L6055:
	.loc 7 5647 0
	#             vec_push(r, make_pair(name, fieldtype));
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	.L6057:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5644 0
	#             ensure_not_void(fieldtype);
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 11
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5648 0
	#             if (next_token(','))
	.loc 7 5644 0
	#             ensure_not_void(fieldtype);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5643 0
	#             Type *fieldtype = read_declarator(&name, basetype, NULL, DECL_PARAM_TYPEONLY);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6058
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_pair
	.L6058:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5629 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6059:
	mov A, B
	add SP, 2
	.loc 7 5649 0
	#                 continue;
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6060
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6060:
	mov A, B
	add SP, 1
	jeq .L6061, A, 0
	jmp .L1043
	.L6061:
	.loc 7 5651 0
	#                 warnt(peek(), "missing ';' at the end of field list");
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6062:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6063:
	mov A, B
	add SP, 2
	jeq .L6064, A, 0
.data
	.L6065:
	.string "missing ';' at the end of field list"
.text
	mov A, .L6065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6066:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6067:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6068:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6069
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp warnf
	.L6069:
	mov A, B
	add SP, 3
	jmp .L6070
	.L6064:
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6071
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6071:
	mov A, B
	add SP, 1
	.L6070:
	.loc 7 5655 0
	#         }
	jmp .L1044
	.L1043:
	jmp .L1042
	.L1044:
	.L1040:
	jmp .L1039
	.L1041:
	.loc 7 5658 0
	#     return r;
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6072:
	mov A, B
	add SP, 1
	.loc 7 5659 0
	# }
	.loc 7 5629 0
	#     for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fix_rectype_flexible_member:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 5675 0
	#         }
	.loc 7 5663 0
	#         void **pair = vec_get(fields, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 5675 0
	#         }
	.L1045:
	.loc 7 5663 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5659 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6073:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6074, A, 0
	jmp .L6075
	.L6074:
	.loc 7 5675 0
	#         }
	jmp .L1047
	.L6075:
	.loc 7 5664 0
	#         char *name = pair[0];
	mov A, 0
	mov B, SP
	.loc 7 5663 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5659 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6076:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5665 0
	#         Type *ty = pair[1];
	mov A, 0
	mov B, SP
	.loc 7 5664 0
	#         char *name = pair[0];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5665 0
	#         Type *ty = pair[1];
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5666 0
	#         if (ty->kind != KIND_ARRAY)
	mov A, 0
	mov B, SP
	.loc 7 5664 0
	#         char *name = pair[0];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5666 0
	#         if (ty->kind != KIND_ARRAY)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5667 0
	#             continue;
	.loc 7 5666 0
	#         if (ty->kind != KIND_ARRAY)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6077, A, 0
	.loc 7 5667 0
	#             continue;
	jmp .L1046
	.L6077:
	.loc 7 5675 0
	#         }
	.loc 7 5669 0
	#             if (i != vec_len(fields) - 1)
	.loc 7 5666 0
	#         if (ty->kind != KIND_ARRAY)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5669 0
	#             if (i != vec_len(fields) - 1)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6078, A, 0
	.loc 7 5675 0
	#         }
	.loc 7 5670 0
	#                 error("flexible member may only appear as the last member: %s %s", ty2s(ty), name);
	.loc 7 5663 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5670 0
	#                 error("flexible member may only appear as the last member: %s %s", ty2s(ty), name);
	.loc 7 5659 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6079:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5670 0
	#                 error("flexible member may only appear as the last member: %s %s", ty2s(ty), name);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6080, A, 0
	.loc 7 5665 0
	#         Type *ty = pair[1];
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5670 0
	#                 error("flexible member may only appear as the last member: %s %s", ty2s(ty), name);
	.loc 7 5666 0
	#         if (ty->kind != KIND_ARRAY)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L6081:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5670 0
	#                 error("flexible member may only appear as the last member: %s %s", ty2s(ty), name);
.data
	.L6082:
	.string "flexible member may only appear as the last member: %s %s"
.text
	mov A, .L6082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6083:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6084:
	mov A, B
	add SP, 5
	.L6080:
	.loc 7 5672 0
	#                 error("flexible member with no other fields: %s %s", ty2s(ty), name);
	.loc 7 5659 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6085:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5672 0
	#                 error("flexible member with no other fields: %s %s", ty2s(ty), name);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6086, A, 0
	.loc 7 5665 0
	#         Type *ty = pair[1];
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5672 0
	#                 error("flexible member with no other fields: %s %s", ty2s(ty), name);
	.loc 7 5666 0
	#         if (ty->kind != KIND_ARRAY)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ty2s
	.L6087:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5672 0
	#                 error("flexible member with no other fields: %s %s", ty2s(ty), name);
.data
	.L6088:
	.string "flexible member with no other fields: %s %s"
.text
	mov A, .L6088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6089:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6090:
	mov A, B
	add SP, 5
	.L6086:
	.loc 7 5674 0
	#             ty->size = 0;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5666 0
	#         if (ty->kind != KIND_ARRAY)
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5675 0
	#         }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5666 0
	#         if (ty->kind != KIND_ARRAY)
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.L6078:
	.loc 7 5675 0
	#         }
	.L1046:
	.loc 7 5663 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5675 0
	#         }
	jmp .L1045
	.L1047:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
finish_bitfield:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5682 0
	# }
	.loc 7 5681 0
	#     *bitoff = 0;
	.loc 7 5675 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5681 0
	#     *bitoff = 0;
	.loc 7 5675 0
	#         }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5681 0
	#     *bitoff = 0;
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L6091:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5675 0
	#         }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5682 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5675 0
	#         }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
update_struct_offset:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 9
	.loc 7 5739 0
	# }
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 5687 0
	#     for (int i = 0; i < vec_len(fields); i++) {
	mov A, 0
	mov B, SP
	mov A, .L6092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_dict
	.L6092:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5734 0
	#             dict_put(r, name, fieldtype);
	.loc 7 5688 0
	#         void **pair = vec_get(fields, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 5734 0
	#             dict_put(r, name, fieldtype);
	.L1048:
	.loc 7 5688 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5682 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6093:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6094, A, 0
	jmp .L6095
	.L6094:
	.loc 7 5734 0
	#             dict_put(r, name, fieldtype);
	jmp .L1050
	.L6095:
	.loc 7 5689 0
	#         char *name = pair[0];
	mov A, 0
	mov B, SP
	.loc 7 5688 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5682 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6096:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5690 0
	#         Type *fieldtype = pair[1];
	mov A, 0
	mov B, SP
	.loc 7 5689 0
	#         char *name = pair[0];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5690 0
	#         Type *fieldtype = pair[1];
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov A, 0
	mov B, SP
	.loc 7 5689 0
	#         char *name = pair[0];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 5696 0
	#             *align = MAX(*align, fieldtype->align);
	.loc 7 5690 0
	#         Type *fieldtype = pair[1];
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L6097, A, 0
	.loc 7 5696 0
	#             *align = MAX(*align, fieldtype->align);
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5696 0
	#             *align = MAX(*align, fieldtype->align);
	.loc 7 5682 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6098, A, 0
	.loc 7 5696 0
	#             *align = MAX(*align, fieldtype->align);
	.loc 7 5682 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jmp .L6099
	.L6098:
	.loc 7 5696 0
	#             *align = MAX(*align, fieldtype->align);
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 2
	load A, B
	.L6099:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5682 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L6097:
	.loc 7 5705 0
	#         }
	.loc 7 5699 0
	#             // C11 6.7.2.1p13: Anonymous struct
	.loc 7 5690 0
	#         Type *fieldtype = pair[1];
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5699 0
	#             // C11 6.7.2.1p13: Anonymous struct
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L6100, A, 0
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6100:
	mov A, B
	jeq .L6101, A, 0
	.loc 7 5705 0
	#         }
	.loc 7 5701 0
	#             off += compute_padding(off, fieldtype->align);
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp finish_bitfield
	.L6102:
	mov A, B
	add SP, 2
	.loc 7 5702 0
	#             squash_unnamed_struct(r, fieldtype, off);
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5702 0
	#             squash_unnamed_struct(r, fieldtype, off);
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp compute_padding
	.L6103:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5703 0
	#             off += fieldtype->size;
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5687 0
	#     for (int i = 0; i < vec_len(fields); i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp squash_unnamed_struct
	.L6104:
	mov A, B
	add SP, 3
	.loc 7 5704 0
	#             continue;
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5704 0
	#             continue;
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5705 0
	#         }
	jmp .L1049
	.L6101:
	.loc 7 5713 0
	#         }
	.loc 7 5707 0
	#             // C11 6.7.2.1p12: The zero-size bit-field indicates the end of the
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5707 0
	#             // C11 6.7.2.1p12: The zero-size bit-field indicates the end of the
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6105, A, 0
	.loc 7 5713 0
	#         }
	.loc 7 5710 0
	#             off += compute_padding(off, fieldtype->align);
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp finish_bitfield
	.L6106:
	mov A, B
	add SP, 2
	.loc 7 5711 0
	#             bitoff = 0;
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5711 0
	#             bitoff = 0;
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp compute_padding
	.L6107:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5712 0
	#             continue;
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5713 0
	#         }
	jmp .L1049
	.L6105:
	.loc 7 5732 0
	#         }
	.loc 7 5715 0
	#             int bit = fieldtype->size * 8;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 0
	jeq .L6108, A, 0
	.loc 7 5715 0
	#             int bit = fieldtype->size * 8;
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5715 0
	#             int bit = fieldtype->size * 8;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6108:
	mov A, B
	jeq .L6109, A, 0
	.loc 7 5727 0
	#         } else {
	.loc 7 5716 0
	#             int room = bit - (off * 8 + bitoff) % bit;
	mov A, 0
	mov B, SP
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5716 0
	#             int room = bit - (off * 8 + bitoff) % bit;
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6110
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6110:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 5717 0
	#             if (fieldtype->bitsize <= room) {
	mov A, 0
	mov B, SP
	.loc 7 5716 0
	#             int room = bit - (off * 8 + bitoff) % bit;
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5717 0
	#             if (fieldtype->bitsize <= room) {
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5717 0
	#             if (fieldtype->bitsize <= room) {
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6111:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5716 0
	#             int room = bit - (off * 8 + bitoff) % bit;
	mov B, BP
	add B, 16777208
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6112:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 5725 0
	#             }
	.loc 7 5718 0
	#                 fieldtype->offset = off;
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5717 0
	#             if (fieldtype->bitsize <= room) {
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L6113, A, 0
	.loc 7 5720 0
	#             } else {
	.loc 7 5719 0
	#                 fieldtype->bitoff = bitoff;
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5720 0
	#             } else {
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	jmp .L6114
	.L6113:
	.loc 7 5725 0
	#             }
	.loc 7 5722 0
	#                 off += compute_padding(off, fieldtype->align);
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6115
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp finish_bitfield
	.L6115:
	mov A, B
	add SP, 2
	.loc 7 5723 0
	#                 fieldtype->offset = off;
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5723 0
	#                 fieldtype->offset = off;
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp compute_padding
	.L6116:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5724 0
	#                 fieldtype->bitoff = 0;
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5725 0
	#             }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.L6114:
	.loc 7 5727 0
	#         } else {
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5727 0
	#         } else {
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L6117
	.L6109:
	.loc 7 5732 0
	#         }
	.loc 7 5729 0
	#             off += compute_padding(off, fieldtype->align);
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp finish_bitfield
	.L6118:
	mov A, B
	add SP, 2
	.loc 7 5730 0
	#             fieldtype->offset = off;
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5730 0
	#             fieldtype->offset = off;
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp compute_padding
	.L6119:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5731 0
	#             off += fieldtype->size;
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5732 0
	#         }
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5732 0
	#         }
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L6117:
	.loc 7 5734 0
	#             dict_put(r, name, fieldtype);
	.loc 7 5690 0
	#         Type *fieldtype = pair[1];
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L6120, A, 0
	.loc 7 5734 0
	#             dict_put(r, name, fieldtype);
	.loc 7 5691 0
	#         // C11 6.7.2.1p14: Each member is aligned to its natural boundary.
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5690 0
	#         Type *fieldtype = pair[1];
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5687 0
	#     for (int i = 0; i < vec_len(fields); i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6121
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_put
	.L6121:
	mov A, B
	add SP, 3
	.L6120:
	.loc 7 5734 0
	#             dict_put(r, name, fieldtype);
	.L1049:
	.loc 7 5688 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5734 0
	#             dict_put(r, name, fieldtype);
	jmp .L1048
	.L1050:
	.loc 7 5737 0
	#     *rsize = off + compute_padding(off, *align);
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6122
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp finish_bitfield
	.L6122:
	mov A, B
	add SP, 2
	.loc 7 5738 0
	#     return r;
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5738 0
	#     return r;
	.loc 7 5682 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5686 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp compute_padding
	.L6123:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5682 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5739 0
	# }
	.loc 7 5687 0
	#     for (int i = 0; i < vec_len(fields); i++) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
update_union_offset:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 7 5762 0
	# }
	.loc 7 5743 0
	#     Dict *r = make_dict();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 5744 0
	#     for (int i = 0; i < vec_len(fields); i++) {
	mov A, 0
	mov B, SP
	mov A, .L6124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_dict
	.L6124:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5758 0
	#             dict_put(r, name, fieldtype);
	.loc 7 5745 0
	#         void **pair = vec_get(fields, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 5758 0
	#             dict_put(r, name, fieldtype);
	.L1051:
	.loc 7 5745 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5739 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6125:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6126, A, 0
	jmp .L6127
	.L6126:
	.loc 7 5758 0
	#             dict_put(r, name, fieldtype);
	jmp .L1053
	.L6127:
	.loc 7 5746 0
	#         char *name = pair[0];
	mov A, 0
	mov B, SP
	.loc 7 5745 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5739 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6128:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5747 0
	#         Type *fieldtype = pair[1];
	mov A, 0
	mov B, SP
	.loc 7 5746 0
	#         char *name = pair[0];
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5747 0
	#         Type *fieldtype = pair[1];
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov A, 0
	mov B, SP
	.loc 7 5746 0
	#         char *name = pair[0];
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 5749 0
	#         *align = MAX(*align, fieldtype->align);
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5743 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6129, A, 0
	mov B, BP
	add B, 16777215
	load A, B
	jmp .L6130
	.L6129:
	.loc 7 5749 0
	#         *align = MAX(*align, fieldtype->align);
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 1
	load A, B
	.L6130:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5750 0
	#         if (name == NULL && fieldtype->kind == KIND_STRUCT) {
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5750 0
	#         if (name == NULL && fieldtype->kind == KIND_STRUCT) {
	.loc 7 5739 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6131, A, 0
	.loc 7 5750 0
	#         if (name == NULL && fieldtype->kind == KIND_STRUCT) {
	.loc 7 5739 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jmp .L6132
	.L6131:
	.loc 7 5750 0
	#         if (name == NULL && fieldtype->kind == KIND_STRUCT) {
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 2
	load A, B
	.L6132:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5739 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5753 0
	#         }
	.loc 7 5751 0
	#             squash_unnamed_struct(r, fieldtype, 0);
	.loc 7 5747 0
	#         Type *fieldtype = pair[1];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5751 0
	#             squash_unnamed_struct(r, fieldtype, 0);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L6133, A, 0
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6133:
	mov A, B
	jeq .L6134, A, 0
	.loc 7 5753 0
	#         }
	.loc 7 5752 0
	#             continue;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5744 0
	#     for (int i = 0; i < vec_len(fields); i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp squash_unnamed_struct
	.L6135:
	mov A, B
	add SP, 3
	.loc 7 5753 0
	#         }
	jmp .L1052
	.L6134:
	.loc 7 5755 0
	#         if (fieldtype->bitsize >= 0)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5756 0
	#             fieldtype->bitoff = 0;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L6136, A, 0
	.loc 7 5756 0
	#             fieldtype->bitoff = 0;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.L6136:
	.loc 7 5758 0
	#             dict_put(r, name, fieldtype);
	.loc 7 5747 0
	#         Type *fieldtype = pair[1];
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L6137, A, 0
	.loc 7 5758 0
	#             dict_put(r, name, fieldtype);
	.loc 7 5748 0
	#         maxsize = MAX(maxsize, fieldtype->size);
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5747 0
	#         Type *fieldtype = pair[1];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5744 0
	#     for (int i = 0; i < vec_len(fields); i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_put
	.L6138:
	mov A, B
	add SP, 3
	.L6137:
	.loc 7 5758 0
	#             dict_put(r, name, fieldtype);
	.L1052:
	.loc 7 5745 0
	#         void **pair = vec_get(fields, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5758 0
	#             dict_put(r, name, fieldtype);
	jmp .L1051
	.L1053:
	.loc 7 5761 0
	#     return r;
	.loc 7 5743 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5761 0
	#     return r;
	.loc 7 5739 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5743 0
	#     Dict *r = make_dict();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp compute_padding
	.L6139:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5739 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5762 0
	# }
	.loc 7 5744 0
	#     for (int i = 0; i < vec_len(fields); i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_rectype_fields:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5772 0
	# }
	.loc 7 5766 0
	#         return NULL;
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6140:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L6141, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6141:
	.loc 7 5768 0
	#     fix_rectype_flexible_member(fields);
	mov A, 0
	mov B, SP
	mov A, .L6142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rectype_fields_sub
	.L6142:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5769 0
	#     if (is_struct)
	.loc 7 5768 0
	#     fix_rectype_flexible_member(fields);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6143
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fix_rectype_flexible_member
	.L6143:
	mov A, B
	add SP, 1
	.loc 7 5770 0
	#         return update_struct_offset(rsize, align, fields);
	.loc 7 5762 0
	# }
	mov B, BP
	add B, 4
	load A, B
	jeq .L6144, A, 0
	.loc 7 5770 0
	#         return update_struct_offset(rsize, align, fields);
	.loc 7 5768 0
	#     fix_rectype_flexible_member(fields);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5762 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6145
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp update_struct_offset
	.L6145:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6144:
	.loc 7 5772 0
	# }
	.loc 7 5768 0
	#     fix_rectype_flexible_member(fields);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5762 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp update_union_offset
	.L6146:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_rectype_def:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 5796 0
	# }
	.loc 7 5776 0
	#     Type *r;
	mov A, 0
	mov B, SP
	mov A, .L6147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rectype_tag
	.L6147:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5777 0
	#     if (tag) {
	.loc 7 5787 0
	#     }
	.loc 7 5776 0
	#     Type *r;
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6148, A, 0
	.loc 7 5784 0
	#         }
	.loc 7 5779 0
	#         if (r && (r->kind == KIND_ENUM || r->is_struct != is_struct))
	.loc 7 5776 0
	#     Type *r;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, tags
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L6149:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5780 0
	#             error("declarations of %s does not match", tag);
	.loc 7 5777 0
	#     if (tag) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, 0
	jeq .L6150, A, 0
	.loc 7 5780 0
	#             error("declarations of %s does not match", tag);
	.loc 7 5777 0
	#     if (tag) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L6151, A, 0
	.loc 7 5780 0
	#             error("declarations of %s does not match", tag);
	.loc 7 5777 0
	#     if (tag) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5780 0
	#             error("declarations of %s does not match", tag);
	.loc 7 5772 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6151:
	mov A, B
	mov B, A
	ne B, 0
	.L6150:
	mov A, B
	jeq .L6152, A, 0
	.loc 7 5780 0
	#             error("declarations of %s does not match", tag);
	.loc 7 5776 0
	#     Type *r;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5780 0
	#             error("declarations of %s does not match", tag);
.data
	.L6153:
	.string "declarations of %s does not match"
.text
	mov A, .L6153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6154:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6155:
	mov A, B
	add SP, 4
	.L6152:
	.loc 7 5784 0
	#         }
	.loc 7 5782 0
	#             r = make_rectype(is_struct);
	.loc 7 5777 0
	#     if (tag) {
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	jeq .L6156, A, 0
	.loc 7 5784 0
	#         }
	.loc 7 5783 0
	#             map_put(tags, tag, r);
	.loc 7 5772 0
	# }
	mov B, BP
	add B, 2
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_rectype
	.L6157:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5784 0
	#         }
	.loc 7 5777 0
	#     if (tag) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5776 0
	#     Type *r;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, tags
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L6158:
	mov A, B
	add SP, 3
	.L6156:
	jmp .L6159
	.L6148:
	.loc 7 5787 0
	#     }
	.loc 7 5772 0
	# }
	mov B, BP
	add B, 2
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_rectype
	.L6160:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.L6159:
	.loc 7 5789 0
	#     Dict *fields = read_rectype_fields(&size, &align, is_struct);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 1
	store A, B
	.loc 7 5790 0
	#     r->align = align;
	mov A, 0
	mov B, SP
	.loc 7 5772 0
	# }
	mov B, BP
	add B, 2
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5790 0
	#     r->align = align;
	mov A, BP
	add A, -4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rectype_fields
	.L6161:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5791 0
	#     if (fields) {
	.loc 7 5789 0
	#     Dict *fields = read_rectype_fields(&size, &align, is_struct);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5777 0
	#     if (tag) {
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5794 0
	#     }
	.loc 7 5790 0
	#     r->align = align;
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L6162, A, 0
	.loc 7 5794 0
	#     }
	.loc 7 5793 0
	#         r->size = size;
	.loc 7 5790 0
	#     r->align = align;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5777 0
	#     if (tag) {
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5794 0
	#     }
	.loc 7 5789 0
	#     Dict *fields = read_rectype_fields(&size, &align, is_struct);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5777 0
	#     if (tag) {
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.L6162:
	.loc 7 5796 0
	# }
	.loc 7 5777 0
	#     if (tag) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_struct_def:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5800 0
	# }
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rectype_def
	.L6163:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_union_def:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5804 0
	# }
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_rectype_def
	.L6164:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_enum_def:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 7 5854 0
	# }
	.loc 7 5812 0
	#     Token *tok = get();
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5813 0
	# 
	mov A, 0
	mov B, SP
	mov A, .L6165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6165:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5819 0
	#     }
	.loc 7 5817 0
	#         tag = tok->sval;
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6166, A, 0
	.loc 7 5819 0
	#     }
	.loc 7 5818 0
	#         tok = get();
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5819 0
	#     }
	mov A, .L6167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6167:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L6166:
	.loc 7 5823 0
	#             errort(tok, "declarations of %s does not match", tag);
	.loc 7 5812 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6168, A, 0
	.loc 7 5823 0
	#             errort(tok, "declarations of %s does not match", tag);
	.loc 7 5822 0
	#         if (ty && ty->kind != KIND_ENUM)
	mov A, 0
	mov B, SP
	.loc 7 5812 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, tags
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L6169:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5823 0
	#             errort(tok, "declarations of %s does not match", tag);
	.loc 7 5822 0
	#         if (ty && ty->kind != KIND_ENUM)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, 0
	jeq .L6170, A, 0
	.loc 7 5823 0
	#             errort(tok, "declarations of %s does not match", tag);
	.loc 7 5822 0
	#         if (ty && ty->kind != KIND_ENUM)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6170:
	mov A, B
	jeq .L6171, A, 0
	.loc 7 5823 0
	#             errort(tok, "declarations of %s does not match", tag);
	.loc 7 5812 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5823 0
	#             errort(tok, "declarations of %s does not match", tag);
.data
	.L6172:
	.string "declarations of %s does not match"
.text
	mov A, .L6172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6173
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6173:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5823 0
	#             errort(tok, "declarations of %s does not match", tag);
.data
	.L6174:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6175
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6175:
	mov A, B
	add SP, 4
	.L6171:
	.L6168:
	.loc 7 5830 0
	#     }
	.loc 7 5826 0
	#         if (!tag || !map_get(tags, tag))
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6176
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6176:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L6177, A, 0
	.loc 7 5830 0
	#     }
	.loc 7 5827 0
	#             errort(tok, "enum tag %s is not defined", tag);
	.loc 7 5812 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	mov B, 1
	jne .L6178, A, 0
	.loc 7 5827 0
	#             errort(tok, "enum tag %s is not defined", tag);
	.loc 7 5812 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, tags
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L6179:
	mov A, B
	add SP, 2
	eq A, 0
	mov B, A
	ne B, 0
	.L6178:
	mov A, B
	jeq .L6180, A, 0
	.loc 7 5827 0
	#             errort(tok, "enum tag %s is not defined", tag);
	.loc 7 5812 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5827 0
	#             errort(tok, "enum tag %s is not defined", tag);
.data
	.L6181:
	.string "enum tag %s is not defined"
.text
	mov A, .L6181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6182:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5827 0
	#             errort(tok, "enum tag %s is not defined", tag);
.data
	.L6183:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6184:
	mov A, B
	add SP, 4
	.L6180:
	.loc 7 5829 0
	#         return type_int;
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6185:
	mov A, B
	add SP, 1
	.loc 7 5830 0
	#     }
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6177:
	.loc 7 5832 0
	#         map_put(tags, tag, type_enum);
	.loc 7 5812 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6186, A, 0
	.loc 7 5832 0
	#         map_put(tags, tag, type_enum);
	.loc 7 4124 0
	# }
	mov B, type_enum
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5812 0
	#     Token *tok = get();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, tags
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L6187:
	mov A, B
	add SP, 3
	.L6186:
	.loc 7 5835 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	.L1054:
	.loc 7 5837 0
	#         if (is_keyword(tok, '}'))
	mov A, .L6188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6188:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5838 0
	#             break;
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6189:
	mov A, B
	add SP, 2
	jeq .L6190, A, 0
	.loc 7 5838 0
	#             break;
	jmp .L1056
	.L6190:
	.loc 7 5840 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6191, A, 0
	.loc 7 5840 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6192:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5840 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L6193:
	.string "identifier expected, but got %s"
.text
	mov A, .L6193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6194:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5840 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L6195:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6196:
	mov A, B
	add SP, 4
	.L6191:
	.loc 7 5842 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 5813 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5844 0
	#             val = read_intexpr();
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6197:
	mov A, B
	add SP, 1
	jeq .L6198, A, 0
	mov A, .L6199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_intexpr
	.L6199:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.L6198:
	.loc 7 5846 0
	#         map_put(env(), name, constval);
	mov A, 0
	mov B, SP
	.loc 7 5835 0
	#     for (;;) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L6200:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 5847 0
	#         if (next_token(','))
	.loc 7 5846 0
	#         map_put(env(), name, constval);
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5842 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5847 0
	#         if (next_token(','))
	mov A, .L6201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp env
	.L6201:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L6202:
	mov A, B
	add SP, 3
	.loc 7 5848 0
	#             continue;
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6203:
	mov A, B
	add SP, 1
	jeq .L6204, A, 0
	jmp .L1055
	.L6204:
	.loc 7 5850 0
	#             break;
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6205:
	mov A, B
	add SP, 1
	jeq .L6206, A, 0
	jmp .L1056
	.L6206:
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	mov A, .L6207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6207:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6208:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6209:
	.string "',' or '}' expected, but got %s"
.text
	mov A, .L6209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6210:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6211:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6212:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6213
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6213:
	mov A, B
	add SP, 4
	.L1055:
	jmp .L1054
	.L1056:
	.loc 7 5854 0
	# }
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
assign_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5867 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, 0), type_char, off + i));
	.loc 7 5862 0
	#         ty->len = ty->size = strlen(p) + 1;
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5862 0
	#         ty->len = ty->size = strlen(p) + 1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6214, A, 0
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L6215:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5862 0
	#         ty->len = ty->size = strlen(p) + 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.L6214:
	.loc 7 5864 0
	#     for (; i < ty->len && *p; i++)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 5865 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, *p++), type_char, off + i));
	.L1057:
	.loc 7 5864 0
	#     for (; i < ty->len && *p; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5865 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, *p++), type_char, off + i));
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 0
	jeq .L6216, A, 0
	.loc 7 5865 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, *p++), type_char, off + i));
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, B
	mov B, A
	ne B, 0
	.L6216:
	mov A, B
	jeq .L6217, A, 0
	jmp .L6218
	.L6217:
	.loc 7 5865 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, *p++), type_char, off + i));
	jmp .L1059
	.L6218:
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5864 0
	#     for (; i < ty->len && *p; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_char
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5865 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, *p++), type_char, off + i));
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 4
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_char
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L6219:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6220
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_init
	.L6220:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6221:
	mov A, B
	add SP, 2
	.loc 7 5865 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, *p++), type_char, off + i));
	.L1058:
	.loc 7 5864 0
	#     for (; i < ty->len && *p; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5865 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, *p++), type_char, off + i));
	jmp .L1057
	.L1059:
	.loc 7 5867 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, 0), type_char, off + i));
	.L1060:
	.loc 7 5864 0
	#     for (; i < ty->len && *p; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5867 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, 0), type_char, off + i));
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6222, A, 0
	jmp .L6223
	.L6222:
	.loc 7 5867 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, 0), type_char, off + i));
	jmp .L1062
	.L6223:
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5864 0
	#     for (; i < ty->len && *p; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_char
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5867 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, 0), type_char, off + i));
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_char
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L6224:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_init
	.L6225:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5854 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6226:
	mov A, B
	add SP, 2
	.loc 7 5867 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, 0), type_char, off + i));
	.L1061:
	.loc 7 5864 0
	#     for (; i < ty->len && *p; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5867 0
	#         vec_push(inits, ast_init(ast_inttype(type_char, 0), type_char, off + i));
	jmp .L1060
	.L1062:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
maybe_read_brace:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5872 0
	# }
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6227:
	mov A, B
	add SP, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
maybe_skip_comma:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5876 0
	# }
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6228:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_to_brace:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5892 0
	#     }
	.L1063:
	.loc 7 5881 0
	#             return;
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6229:
	mov A, B
	add SP, 1
	jeq .L6230, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6230:
	.loc 7 5885 0
	#         }
	.loc 7 5883 0
	#             get();
	mov A, 46
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6231:
	mov A, B
	add SP, 1
	jeq .L6232, A, 0
	.loc 7 5885 0
	#         }
	.loc 7 5884 0
	#             expect('=');
	mov A, .L6233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6233:
	mov A, B
	.loc 7 5885 0
	#         }
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6234:
	mov A, B
	add SP, 1
	.L6232:
	.loc 7 5887 0
	#         Node *ignore = read_assignment_expr();
	mov A, 0
	mov B, SP
	mov A, .L6235
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6235:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5888 0
	#         if (!ignore)
	mov A, 0
	mov B, SP
	mov A, .L6236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L6236:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5889 0
	#             return;
	.loc 7 5888 0
	#         if (!ignore)
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	jeq .L6237, A, 0
	.loc 7 5889 0
	#             return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6237:
	.loc 11 355 0
	# 
	.loc 7 5888 0
	#         if (!ignore)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L6238:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 355 0
	# 
.data
	.L6239:
	.string "excessive initializer: %s"
.text
	mov A, .L6239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5887 0
	#         Node *ignore = read_assignment_expr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6240:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 355 0
	# 
.data
	.L6241:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp warnf
	.L6242:
	mov A, B
	add SP, 4
	.loc 7 5892 0
	#     }
	mov A, .L6243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_skip_comma
	.L6243:
	mov A, B
	.L1064:
	jmp .L1063
	.L1065:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_initializer_elem:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5906 0
	#     }
	.loc 7 5897 0
	#     if (ty->kind == KIND_ARRAY || ty->kind == KIND_STRUCT) {
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6244:
	mov A, B
	add SP, 1
	.loc 7 5906 0
	#     }
	.loc 7 5898 0
	#         read_initializer_list(inits, ty, off, designated);
	.loc 7 5892 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L6245, A, 0
	.loc 7 5898 0
	#         read_initializer_list(inits, ty, off, designated);
	.loc 7 5892 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6245:
	mov A, B
	jeq .L6246, A, 0
	.loc 7 5899 0
	#     } else if (next_token('{')) {
	.loc 7 5892 0
	#     }
	mov B, BP
	add B, 5
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_initializer_list
	.L6247:
	mov A, B
	add SP, 4
	jmp .L6248
	.L6246:
	.loc 7 5906 0
	#     }
	.loc 7 5899 0
	#     } else if (next_token('{')) {
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6249:
	mov A, B
	add SP, 1
	jeq .L6250, A, 0
	.loc 7 5902 0
	#     } else {
	.loc 7 5901 0
	#         expect('}');
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5892 0
	#     }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_initializer_elem
	.L6251:
	mov A, B
	add SP, 4
	.loc 7 5902 0
	#     } else {
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6252:
	mov A, B
	add SP, 1
	jmp .L6253
	.L6250:
	.loc 7 5906 0
	#     }
	.loc 7 5904 0
	#         ensure_assignable(ty, expr->ty);
	mov A, 0
	mov B, SP
	mov A, .L6254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L6254:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L6255:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5905 0
	#         vec_push(inits, ast_init(expr, ty, off));
	.loc 7 5904 0
	#         ensure_assignable(ty, expr->ty);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5892 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_assignable
	.L6256:
	mov A, B
	add SP, 2
	.loc 7 5906 0
	#     }
	.loc 7 5892 0
	#     }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5904 0
	#         ensure_assignable(ty, expr->ty);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_init
	.L6257:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5892 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6258:
	mov A, B
	add SP, 2
	.L6253:
	.L6248:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
comp_init:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5915 0
	# }
	.loc 7 5911 0
	#     int y = (*(Node **)q)->initoff;
	mov A, 0
	mov B, SP
	.loc 7 5906 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5912 0
	#     if (x < y) return -1;
	mov A, 0
	mov B, SP
	.loc 7 5906 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5913 0
	#     if (x > y) return 1;
	.loc 7 5911 0
	#     int y = (*(Node **)q)->initoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5912 0
	#     if (x < y) return -1;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6259, A, 0
	.loc 7 5913 0
	#     if (x > y) return 1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6259:
	.loc 7 5914 0
	#     return 0;
	.loc 7 5912 0
	#     if (x < y) return -1;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5911 0
	#     int y = (*(Node **)q)->initoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6260, A, 0
	.loc 7 5914 0
	#     return 0;
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6260:
	.loc 7 5915 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sort_inits:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5919 0
	# }
	mov A, comp_init
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5915 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6261:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5919 0
	# }
	.loc 7 5915 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_body
	.L6262:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L6263:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_struct_initializer_sub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 7 5968 0
	#         skip_to_brace();
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, .L6264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_read_brace
	.L6264:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5924 0
	#     int i = 0;
	mov A, 0
	mov B, SP
	.loc 7 5919 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6265
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_keys
	.L6265:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5925 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 5965 0
	#             break;
	.L1066:
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov A, 0
	mov B, SP
	mov A, .L6266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6266:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5931 0
	#         }
	.loc 7 5928 0
	#             if (!has_brace)
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6267:
	mov A, B
	add SP, 2
	jeq .L6268, A, 0
	.loc 7 5931 0
	#         }
	.loc 7 5929 0
	#                 unget_token(tok);
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L6269, A, 0
	.loc 7 5929 0
	#                 unget_token(tok);
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6270:
	mov A, B
	add SP, 1
	.L6269:
	.loc 7 5931 0
	#         }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6268:
	.loc 7 5933 0
	#         Type *fieldtype;
	.loc 7 5934 0
	#         if ((is_keyword(tok, '.') || is_keyword(tok, '[')) && !has_brace && !designated) {
	.loc 7 5937 0
	#         }
	.loc 7 5935 0
	#             unget_token(tok);
	mov A, 46
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6274:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L6273, A, 0
	.loc 7 5935 0
	#             unget_token(tok);
	mov A, 91
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6275:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L6273:
	mov A, B
	mov B, 0
	jeq .L6272, A, 0
	.loc 7 5935 0
	#             unget_token(tok);
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L6272:
	mov A, B
	mov B, 0
	jeq .L6271, A, 0
	.loc 7 5935 0
	#             unget_token(tok);
	.loc 7 5919 0
	# }
	mov B, BP
	add B, 5
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L6271:
	mov A, B
	jeq .L6276, A, 0
	.loc 7 5937 0
	#         }
	.loc 7 5936 0
	#             return;
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6277:
	mov A, B
	add SP, 1
	.loc 7 5937 0
	#         }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6276:
	.loc 7 5960 0
	#         }
	.loc 7 5939 0
	#             tok = get();
	mov A, 46
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6278:
	mov A, B
	add SP, 2
	jeq .L6279, A, 0
	.loc 7 5954 0
	#         } else {
	.loc 7 5940 0
	#             if (!tok || tok->kind != TIDENT)
	mov A, .L6280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6280:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5941 0
	#                 errort(tok, "malformed desginated initializer: %s", tok2s(tok));
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	eq A, 0
	mov B, 1
	jne .L6281, A, 0
	.loc 7 5941 0
	#                 errort(tok, "malformed desginated initializer: %s", tok2s(tok));
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6281:
	mov A, B
	jeq .L6282, A, 0
	.loc 7 5941 0
	#                 errort(tok, "malformed desginated initializer: %s", tok2s(tok));
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6283:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5941 0
	#                 errort(tok, "malformed desginated initializer: %s", tok2s(tok));
.data
	.L6284:
	.string "malformed desginated initializer: %s"
.text
	mov A, .L6284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6285:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5941 0
	#                 errort(tok, "malformed desginated initializer: %s", tok2s(tok));
.data
	.L6286:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6287:
	mov A, B
	add SP, 4
	.L6282:
	.loc 7 5943 0
	#             fieldtype = dict_get(ty->fields, fieldname);
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5944 0
	#             if (!fieldtype)
	.loc 7 5933 0
	#         Type *fieldtype;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5944 0
	#             if (!fieldtype)
	.loc 7 5919 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_get
	.L6288:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 5945 0
	#                 errort(tok, "field does not exist: %s", tok2s(tok));
	.loc 7 5934 0
	#         if ((is_keyword(tok, '.') || is_keyword(tok, '[')) && !has_brace && !designated) {
	mov B, BP
	add B, 16777210
	load A, B
	eq A, 0
	jeq .L6289, A, 0
	.loc 7 5945 0
	#                 errort(tok, "field does not exist: %s", tok2s(tok));
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6290:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5945 0
	#                 errort(tok, "field does not exist: %s", tok2s(tok));
.data
	.L6291:
	.string "field does not exist: %s"
.text
	mov A, .L6291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6292:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5945 0
	#                 errort(tok, "field does not exist: %s", tok2s(tok));
.data
	.L6293:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6294:
	mov A, B
	add SP, 4
	.L6289:
	.loc 7 5947 0
	#             i = 0;
	.loc 7 5919 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_keys
	.L6295:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5948 0
	#             while (i < vec_len(keys)) {
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5951 0
	#                     break;
	.L1069:
	.loc 7 5949 0
	#                 char *s = vec_get(keys, i++);
	.loc 7 5925 0
	#     for (;;) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5949 0
	#                 char *s = vec_get(keys, i++);
	.loc 7 5924 0
	#     int i = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6296:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6297, A, 0
	.loc 7 5951 0
	#                     break;
	.loc 7 5950 0
	#                 if (strcmp(fieldname, s) == 0)
	mov A, 0
	mov B, SP
	.loc 7 5925 0
	#     for (;;) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5924 0
	#     int i = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6298:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 5951 0
	#                     break;
	.loc 7 5950 0
	#                 if (strcmp(fieldname, s) == 0)
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5933 0
	#         Type *fieldtype;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L6299:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5951 0
	#                     break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6300, A, 0
	jmp .L1070
	.L6300:
	jmp .L6301
	.L6297:
	jmp .L1070
	.L6301:
	jmp .L1069
	.L1070:
	.loc 7 5954 0
	#         } else {
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 5
	store A, B
	jmp .L6302
	.L6279:
	.loc 7 5960 0
	#         }
	.loc 7 5956 0
	#             if (i == vec_len(keys))
	.loc 7 5927 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6303:
	mov A, B
	add SP, 1
	.loc 7 5957 0
	#                 break;
	.loc 7 5925 0
	#     for (;;) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5957 0
	#                 break;
	.loc 7 5924 0
	#     int i = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6304:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6305, A, 0
	.loc 7 5957 0
	#                 break;
	jmp .L1068
	.L6305:
	.loc 7 5959 0
	#             fieldtype = dict_get(ty->fields, fieldname);
	.loc 7 5925 0
	#     for (;;) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5924 0
	#     int i = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6306:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5960 0
	#         }
	.loc 7 5933 0
	#         Type *fieldtype;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5960 0
	#         }
	.loc 7 5919 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dict_get
	.L6307:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777210
	store A, B
	.L6302:
	.loc 7 5962 0
	#         maybe_skip_comma();
	.loc 7 5919 0
	# }
	mov B, BP
	add B, 5
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5962 0
	#         maybe_skip_comma();
	.loc 7 5919 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5962 0
	#         maybe_skip_comma();
	.loc 7 5934 0
	#         if ((is_keyword(tok, '.') || is_keyword(tok, '[')) && !has_brace && !designated) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5919 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_initializer_elem
	.L6308:
	mov A, B
	add SP, 4
	.loc 7 5963 0
	#         designated = false;
	mov A, .L6309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_skip_comma
	.L6309:
	mov A, B
	.loc 7 5964 0
	#         if (!ty->is_struct)
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 5
	store A, B
	.loc 7 5965 0
	#             break;
	.loc 7 5919 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 9
	load A, B
	eq A, 0
	jeq .L6310, A, 0
	.loc 7 5965 0
	#             break;
	jmp .L1068
	.L6310:
	.L1067:
	jmp .L1066
	.L1068:
	.loc 7 5968 0
	#         skip_to_brace();
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6311, A, 0
	.loc 7 5968 0
	#         skip_to_brace();
	mov A, .L6312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_to_brace
	.L6312:
	mov A, B
	.L6311:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_struct_initializer:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5974 0
	# }
	.loc 7 5973 0
	#     sort_inits(inits);
	.loc 7 5968 0
	#         skip_to_brace();
	mov B, BP
	add B, 5
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_struct_initializer_sub
	.L6313:
	mov A, B
	add SP, 4
	.loc 7 5974 0
	# }
	.loc 7 5968 0
	#         skip_to_brace();
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sort_inits
	.L6314:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_array_initializer_sub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 7 6013 0
	#     }
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, .L6315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_read_brace
	.L6315:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	mov A, 0
	mov B, SP
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 1
	jne .L6316, A, 0
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6316:
	mov A, B
	ne A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5980 0
	#     int i;
	mov A, 0
	mov B, SP
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5981 0
	#     for (i = 0; flexible || i < ty->len; i++) {
	.loc 7 6006 0
	#     }
	.loc 7 5982 0
	#         Token *tok = get();
	mov A, 0
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6006 0
	#     }
	.L1071:
	.loc 7 5982 0
	#         Token *tok = get();
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	mov B, 1
	jne .L6317, A, 0
	.loc 7 5982 0
	#         Token *tok = get();
	.loc 7 5981 0
	#     for (i = 0; flexible || i < ty->len; i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5982 0
	#         Token *tok = get();
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L6317:
	mov A, B
	jeq .L6318, A, 0
	jmp .L6319
	.L6318:
	.loc 7 6006 0
	#     }
	jmp .L1073
	.L6319:
	.loc 7 5983 0
	#         if (is_keyword(tok, '}')) {
	mov A, 0
	mov B, SP
	mov A, .L6320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6320:
	mov A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5987 0
	#         }
	.loc 7 5984 0
	#             if (!has_brace)
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5983 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6321:
	mov A, B
	add SP, 2
	jeq .L6322, A, 0
	.loc 7 5987 0
	#         }
	.loc 7 5985 0
	#                 unget_token(tok);
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L6323, A, 0
	.loc 7 5985 0
	#                 unget_token(tok);
	.loc 7 5983 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6324:
	mov A, B
	add SP, 1
	.L6323:
	.loc 7 5987 0
	#         }
	jmp .L1074
	.L6322:
	.loc 7 5991 0
	#         }
	.loc 7 5989 0
	#             unget_token(tok);
	mov A, 46
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5983 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6328:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L6327, A, 0
	.loc 7 5989 0
	#             unget_token(tok);
	mov A, 91
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5983 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6329:
	mov A, B
	add SP, 2
	mov B, A
	ne B, 0
	.L6327:
	mov A, B
	mov B, 0
	jeq .L6326, A, 0
	.loc 7 5989 0
	#             unget_token(tok);
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L6326:
	mov A, B
	mov B, 0
	jeq .L6325, A, 0
	.loc 7 5989 0
	#             unget_token(tok);
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 5
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L6325:
	mov A, B
	jeq .L6330, A, 0
	.loc 7 5991 0
	#         }
	.loc 7 5990 0
	#             return;
	.loc 7 5983 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6331:
	mov A, B
	add SP, 1
	.loc 7 5991 0
	#         }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6330:
	.loc 7 6002 0
	#         }
	.loc 7 5993 0
	#             Token *tok = peek();
	mov A, 91
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5983 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6332
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6332:
	mov A, B
	add SP, 2
	jeq .L6333, A, 0
	.loc 7 6000 0
	#         } else {
	.loc 7 5994 0
	#             int idx = read_intexpr();
	mov A, 0
	mov B, SP
	mov A, .L6334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6334:
	mov A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 5995 0
	#             if (idx < 0 || (!flexible && ty->len <= idx))
	mov A, 0
	mov B, SP
	mov A, .L6335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_intexpr
	.L6335:
	mov A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 5996 0
	#                 errort(tok, "array designator exceeds array bounds: %d", idx);
	.loc 7 5995 0
	#             if (idx < 0 || (!flexible && ty->len <= idx))
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5996 0
	#                 errort(tok, "array designator exceeds array bounds: %d", idx);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L6336, A, 0
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	eq A, 0
	mov B, 0
	jeq .L6337, A, 0
	.loc 7 5996 0
	#                 errort(tok, "array designator exceeds array bounds: %d", idx);
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5995 0
	#             if (idx < 0 || (!flexible && ty->len <= idx))
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L6337:
	mov A, B
	mov B, A
	ne B, 0
	.L6336:
	mov A, B
	jeq .L6338, A, 0
	.loc 7 5996 0
	#                 errort(tok, "array designator exceeds array bounds: %d", idx);
	.loc 7 5995 0
	#             if (idx < 0 || (!flexible && ty->len <= idx))
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5996 0
	#                 errort(tok, "array designator exceeds array bounds: %d", idx);
.data
	.L6339:
	.string "array designator exceeds array bounds: %d"
.text
	mov A, .L6339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5994 0
	#             int idx = read_intexpr();
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6340:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5996 0
	#                 errort(tok, "array designator exceeds array bounds: %d", idx);
.data
	.L6341:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6342:
	mov A, B
	add SP, 4
	.L6338:
	.loc 7 5998 0
	#             expect(']');
	.loc 7 5995 0
	#             if (idx < 0 || (!flexible && ty->len <= idx))
	mov B, BP
	add B, 16777209
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5999 0
	#             designated = true;
	mov A, 93
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6343:
	mov A, B
	add SP, 1
	.loc 7 6000 0
	#         } else {
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 5
	store A, B
	jmp .L6344
	.L6333:
	.loc 7 6002 0
	#         }
	.loc 7 5983 0
	#         if (is_keyword(tok, '}')) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6345:
	mov A, B
	add SP, 1
	.L6344:
	.loc 7 6004 0
	#         maybe_skip_comma();
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 5
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6004 0
	#         maybe_skip_comma();
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6004 0
	#         maybe_skip_comma();
	.loc 7 5980 0
	#     int i;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5981 0
	#     for (i = 0; flexible || i < ty->len; i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6346:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6004 0
	#         maybe_skip_comma();
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_initializer_elem
	.L6347:
	mov A, B
	add SP, 4
	.loc 7 6005 0
	#         designated = false;
	mov A, .L6348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp maybe_skip_comma
	.L6348:
	mov A, B
	.loc 7 6006 0
	#     }
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 5
	store A, B
	.L1072:
	.loc 7 5982 0
	#         Token *tok = get();
	.loc 7 5981 0
	#     for (i = 0; flexible || i < ty->len; i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6006 0
	#     }
	jmp .L1071
	.L1073:
	.loc 7 6008 0
	#         skip_to_brace();
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6349, A, 0
	.loc 7 6008 0
	#         skip_to_brace();
	mov A, .L6350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_to_brace
	.L6350:
	mov A, B
	.L6349:
	.loc 7 6013 0
	#     }
	.loc 7 6010 0
	#     if (ty->len == -1) {
	.L1074:
	.loc 7 6013 0
	#     }
	.loc 7 6010 0
	#     if (ty->len == -1) {
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6010 0
	#     if (ty->len == -1) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6351, A, 0
	.loc 7 6013 0
	#     }
	.loc 7 6012 0
	#         ty->size = elemsize * i;
	.loc 7 5981 0
	#     for (i = 0; flexible || i < ty->len; i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 6013 0
	#     }
	.loc 7 5980 0
	#     int i;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5981 0
	#     for (i = 0; flexible || i < ty->len; i++) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6352:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5974 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.L6351:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_array_initializer:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6019 0
	# }
	.loc 7 6018 0
	#     sort_inits(inits);
	.loc 7 6013 0
	#     }
	mov B, BP
	add B, 5
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_array_initializer_sub
	.L6353:
	mov A, B
	add SP, 4
	.loc 7 6019 0
	# }
	.loc 7 6013 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sort_inits
	.L6354:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_initializer_list:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6043 0
	#     }
	.loc 7 6023 0
	#     if (is_string(ty)) {
	mov A, 0
	mov B, SP
	mov A, .L6355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6355:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6033 0
	#         }
	.loc 7 6024 0
	#         if (tok->kind == TSTRING) {
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_string
	.L6356:
	mov A, B
	add SP, 1
	jeq .L6357, A, 0
	.loc 7 6033 0
	#         }
	.loc 7 6027 0
	#         }
	.loc 7 6025 0
	#             assign_string(inits, ty, tok->sval, off);
	.loc 7 6023 0
	#     if (is_string(ty)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6358, A, 0
	.loc 7 6027 0
	#         }
	.loc 7 6026 0
	#             return;
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6026 0
	#             return;
	.loc 7 6023 0
	#     if (is_string(ty)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp assign_string
	.L6359:
	mov A, B
	add SP, 4
	.loc 7 6027 0
	#         }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6358:
	.loc 7 6033 0
	#         }
	.loc 7 6029 0
	#             tok = get();
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6023 0
	#     if (is_string(ty)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6361:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L6360, A, 0
	.loc 7 6029 0
	#             tok = get();
	mov A, .L6362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6362:
	mov A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6360:
	mov A, B
	jeq .L6363, A, 0
	.loc 7 6033 0
	#         }
	.loc 7 6030 0
	#             assign_string(inits, ty, tok->sval, off);
	mov A, .L6364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6364:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6031 0
	#             expect('}');
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6031 0
	#             expect('}');
	.loc 7 6023 0
	#     if (is_string(ty)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp assign_string
	.L6365:
	mov A, B
	add SP, 4
	.loc 7 6032 0
	#             return;
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6366:
	mov A, B
	add SP, 1
	.loc 7 6033 0
	#         }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6363:
	.L6357:
	.loc 7 6036 0
	#     if (ty->kind == KIND_ARRAY) {
	.loc 7 6023 0
	#     if (is_string(ty)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6367:
	mov A, B
	add SP, 1
	.loc 7 6043 0
	#     }
	.loc 7 6037 0
	#         read_array_initializer(inits, ty, off, designated);
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6368, A, 0
	.loc 7 6038 0
	#     } else if (ty->kind == KIND_STRUCT) {
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 5
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_array_initializer
	.L6369:
	mov A, B
	add SP, 4
	jmp .L6370
	.L6368:
	.loc 7 6043 0
	#     }
	.loc 7 6038 0
	#     } else if (ty->kind == KIND_STRUCT) {
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6371, A, 0
	.loc 7 6040 0
	#     } else {
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 5
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_struct_initializer
	.L6372:
	mov A, B
	add SP, 4
	jmp .L6373
	.L6371:
	.loc 7 6043 0
	#     }
	.loc 7 6042 0
	#         read_array_initializer(inits, arraytype, off, designated);
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_array_type
	.L6374:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6043 0
	#     }
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 5
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6042 0
	#         read_array_initializer(inits, arraytype, off, designated);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6019 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_array_initializer
	.L6375:
	mov A, B
	add SP, 4
	.L6373:
	.L6370:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_decl_init:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6057 0
	# }
	.loc 7 6048 0
	#     if (is_keyword(peek(), '{') || is_string(ty)) {
	mov A, 0
	mov B, SP
	mov A, .L6376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6376:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6055 0
	#     }
	.loc 7 6049 0
	#         read_initializer_list(r, ty, 0, false);
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6378:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6379:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L6377, A, 0
	.loc 7 6043 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_string
	.L6380:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L6377:
	mov A, B
	jeq .L6381, A, 0
	.loc 7 6050 0
	#     } else {
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6043 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6048 0
	#     if (is_keyword(peek(), '{') || is_string(ty)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_initializer_list
	.L6382:
	mov A, B
	add SP, 4
	jmp .L6383
	.L6381:
	.loc 7 6055 0
	#     }
	.loc 7 6052 0
	#         if (is_arithtype(init->ty) && init->ty->kind != ty->kind)
	mov A, 0
	mov B, SP
	mov A, .L6384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_assignment_expr
	.L6384:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L6385:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6053 0
	#             init = ast_conv(ty, init);
	.loc 7 6052 0
	#         if (is_arithtype(init->ty) && init->ty->kind != ty->kind)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6387
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_arithtype
	.L6387:
	mov A, B
	add SP, 1
	mov B, 0
	jeq .L6386, A, 0
	.loc 7 6053 0
	#             init = ast_conv(ty, init);
	.loc 7 6052 0
	#         if (is_arithtype(init->ty) && init->ty->kind != ty->kind)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6053 0
	#             init = ast_conv(ty, init);
	.loc 7 6043 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6386:
	mov A, B
	jeq .L6388, A, 0
	.loc 7 6053 0
	#             init = ast_conv(ty, init);
	.loc 7 6052 0
	#         if (is_arithtype(init->ty) && init->ty->kind != ty->kind)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6043 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_conv
	.L6389:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.L6388:
	.loc 7 6055 0
	#     }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6043 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6052 0
	#         if (is_arithtype(init->ty) && init->ty->kind != ty->kind)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6390
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_init
	.L6390:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6048 0
	#     if (is_keyword(peek(), '{') || is_string(ty)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6391:
	mov A, B
	add SP, 2
	.L6383:
	.loc 7 6057 0
	# }
	.loc 7 6048 0
	#     if (is_keyword(peek(), '{') || is_string(ty)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_func_param:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6096 0
	# }
	.loc 7 6080 0
	#     Type *basety = type_int;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6081 0
	#     if (is_type(peek())) {
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	.loc 7 6082 0
	#         basety = read_decl_spec(&sclass);
	mov A, .L6392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6392:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6393:
	mov A, B
	add SP, 1
	jeq .L6394, A, 0
	.loc 7 6083 0
	#     } else if (optional) {
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_spec
	.L6395:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L6396
	.L6394:
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	.loc 7 6057 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L6397, A, 0
	.loc 11 353 0
	# #define warn(...)        warnf(__FILE__ ":" STR(__LINE__), NULL, __VA_ARGS__)
	mov A, .L6398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6398:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6399:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6400:
	.string "type expected, but got %s"
.text
	mov A, .L6400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6401:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6402:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6403:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6404:
	mov A, B
	add SP, 4
	.L6397:
	.L6396:
	.loc 7 6087 0
	#     // C11 6.7.6.3p7: Array of T is adjusted to pointer to T
	mov A, 0
	mov B, SP
	.loc 7 6057 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L6405, A, 0
	.loc 7 4124 0
	# }
	mov A, 3
	jmp .L6406
	.L6405:
	mov A, 2
	.L6406:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6087 0
	#     // C11 6.7.6.3p7: Array of T is adjusted to pointer to T
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6081 0
	#     if (is_type(peek())) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6057 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator
	.L6407:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6090 0
	#         return make_ptr_type(ty->ptr);
	.loc 7 6087 0
	#     // C11 6.7.6.3p7: Array of T is adjusted to pointer to T
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6408, A, 0
	.loc 7 6090 0
	#         return make_ptr_type(ty->ptr);
	.loc 7 6087 0
	#     // C11 6.7.6.3p7: Array of T is adjusted to pointer to T
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L6409:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6408:
	.loc 7 6094 0
	#         return make_ptr_type(ty);
	.loc 7 6087 0
	#     // C11 6.7.6.3p7: Array of T is adjusted to pointer to T
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6410, A, 0
	.loc 7 6094 0
	#         return make_ptr_type(ty);
	.loc 7 6087 0
	#     // C11 6.7.6.3p7: Array of T is adjusted to pointer to T
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L6411:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6410:
	.loc 7 6096 0
	# }
	.loc 7 6087 0
	#     // C11 6.7.6.3p7: Array of T is adjusted to pointer to T
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_declarator_params:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 6121 0
	#             errort(tok, "comma expected, but got %s", tok2s(tok));
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	.loc 7 6096 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6102 0
	#     for (;;) {
	mov A, 0
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6096 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 6121 0
	#             errort(tok, "comma expected, but got %s", tok2s(tok));
	.L1075:
	.loc 7 6104 0
	#         if (next_token(KELLIPSIS)) {
	mov A, 0
	mov B, SP
	mov A, .L6412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6412:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6110 0
	#         }
	.loc 7 6105 0
	#             if (vec_len(types) == 0)
	.loc 6 205 0
	# }
	mov A, 347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6413:
	mov A, B
	add SP, 1
	jeq .L6414, A, 0
	.loc 7 6110 0
	#         }
	.loc 7 6106 0
	#                 errort(tok, "at least one parameter is required before \"...\"");
	.loc 7 6096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6415:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6106 0
	#                 errort(tok, "at least one parameter is required before \"...\"");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6416, A, 0
.data
	.L6417:
	.string "at least one parameter is required before \"...\""
.text
	mov A, .L6417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6104 0
	#         if (next_token(KELLIPSIS)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6418:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6106 0
	#                 errort(tok, "at least one parameter is required before \"...\"");
.data
	.L6419:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6420:
	mov A, B
	add SP, 3
	.L6416:
	.loc 7 6108 0
	#             *ellipsis = true;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6421:
	mov A, B
	add SP, 1
	.loc 7 6109 0
	#             return;
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6096 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 6110 0
	#         }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6414:
	.loc 7 6112 0
	#         Type *ty = read_func_param(&name, typeonly);
	.loc 7 6113 0
	#         ensure_not_void(ty);
	mov A, 0
	mov B, SP
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6113 0
	#         ensure_not_void(ty);
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_func_param
	.L6422:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6114 0
	#         vec_push(types, ty);
	.loc 7 6113 0
	#         ensure_not_void(ty);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_not_void
	.L6423:
	mov A, B
	add SP, 1
	.loc 7 6115 0
	#         if (!typeonly)
	.loc 7 6113 0
	#         ensure_not_void(ty);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6424:
	mov A, B
	add SP, 2
	.loc 7 6116 0
	#             vec_push(vars, ast_lvar(ty, name));
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L6425, A, 0
	.loc 7 6116 0
	#             vec_push(vars, ast_lvar(ty, name));
	.loc 7 6112 0
	#         Type *ty = read_func_param(&name, typeonly);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6113 0
	#         ensure_not_void(ty);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_lvar
	.L6426:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6096 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6427
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6427:
	mov A, B
	add SP, 2
	.L6425:
	.loc 7 6118 0
	#         if (is_keyword(tok, ')'))
	mov A, .L6428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6428:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6119 0
	#             return;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6104 0
	#         if (next_token(KELLIPSIS)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6429:
	mov A, B
	add SP, 2
	jeq .L6430, A, 0
	.loc 7 6119 0
	#             return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6430:
	.loc 7 6121 0
	#             errort(tok, "comma expected, but got %s", tok2s(tok));
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6104 0
	#         if (next_token(KELLIPSIS)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6431:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L6432, A, 0
	.loc 7 6121 0
	#             errort(tok, "comma expected, but got %s", tok2s(tok));
	.loc 7 6104 0
	#         if (next_token(KELLIPSIS)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6433:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6121 0
	#             errort(tok, "comma expected, but got %s", tok2s(tok));
.data
	.L6434:
	.string "comma expected, but got %s"
.text
	mov A, .L6434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6104 0
	#         if (next_token(KELLIPSIS)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6435:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6121 0
	#             errort(tok, "comma expected, but got %s", tok2s(tok));
.data
	.L6436:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6437:
	mov A, B
	add SP, 4
	.L6432:
	.L1076:
	jmp .L1075
	.L1077:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_declarator_params_oldstyle:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	.L1078:
	.loc 7 6129 0
	#         if (tok->kind != TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L6438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6438:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6130 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 6129 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6439, A, 0
	.loc 7 6130 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 6129 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6440:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6130 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L6441:
	.string "identifier expected, but got %s"
.text
	mov A, .L6441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6129 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6442:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6130 0
	#             errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L6443:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6444:
	mov A, B
	add SP, 4
	.L6439:
	.loc 7 6132 0
	#         if (next_token(')'))
	.loc 7 6129 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_lvar
	.L6445:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6121 0
	#             errort(tok, "comma expected, but got %s", tok2s(tok));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6446:
	mov A, B
	add SP, 2
	.loc 7 6133 0
	#             return;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6447:
	mov A, B
	add SP, 1
	jeq .L6448, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6448:
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6449:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L6450, A, 0
	mov A, .L6451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6451:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6452
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6452:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6453:
	.string "comma expected, but got %s"
.text
	mov A, .L6453
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6129 0
	#         if (tok->kind != TIDENT)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6454:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
.data
	.L6455:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6455
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6456
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6456:
	mov A, B
	add SP, 4
	.L6450:
	.L1079:
	jmp .L1078
	.L1080:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_func_param_list:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 7 6170 0
	# }
	.loc 7 6143 0
	#     if (is_keyword(tok, KVOID) && next_token(')'))
	mov A, 0
	mov B, SP
	mov A, .L6457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6457:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6144 0
	#         return make_func_type(rettype, make_vector(), false, false);
	.loc 6 205 0
	# }
	mov A, 352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6143 0
	#     if (is_keyword(tok, KVOID) && next_token(')'))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6459
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6459:
	mov A, B
	add SP, 2
	mov B, 0
	jeq .L6458, A, 0
	.loc 7 6144 0
	#         return make_func_type(rettype, make_vector(), false, false);
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6460
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6460:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L6458:
	mov A, B
	jeq .L6461, A, 0
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6462:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_func_type
	.L6463:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6461:
	.loc 7 6151 0
	#         return make_func_type(rettype, make_vector(), true, true);
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6143 0
	#     if (is_keyword(tok, KVOID) && next_token(')'))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6464
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6464:
	mov A, B
	add SP, 2
	jeq .L6465, A, 0
	.loc 7 6151 0
	#         return make_func_type(rettype, make_vector(), true, true);
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6466
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6466:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6467
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_func_type
	.L6467:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6465:
	.loc 7 6153 0
	# 
	.loc 7 6143 0
	#     if (is_keyword(tok, KVOID) && next_token(')'))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6468
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6468:
	mov A, B
	add SP, 1
	.loc 7 6155 0
	#     if (next_token(KELLIPSIS))
	mov A, 0
	mov B, SP
	mov A, .L6469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6469:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6156 0
	#         errort(tok2, "at least one parameter is required before \"...\"");
	.loc 6 205 0
	# }
	mov A, 347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6470:
	mov A, B
	add SP, 1
	jeq .L6471, A, 0
	.loc 7 6156 0
	#         errort(tok2, "at least one parameter is required before \"...\"");
.data
	.L6472:
	.string "at least one parameter is required before \"...\""
.text
	mov A, .L6472
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6155 0
	#     if (next_token(KELLIPSIS))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6473:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6156 0
	#         errort(tok2, "at least one parameter is required before \"...\"");
.data
	.L6474:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6474
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6475
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6475:
	mov A, B
	add SP, 3
	.L6471:
	.loc 7 6162 0
	#     }
	.loc 7 6158 0
	#         bool ellipsis;
	mov A, .L6476
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6476:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6477
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6477:
	mov A, B
	add SP, 1
	jeq .L6478, A, 0
	.loc 7 6162 0
	#     }
	.loc 10 4 0
	# #define true 1
	.loc 7 6160 0
	#         read_declarator_params(paramtypes, paramvars, &ellipsis);
	mov A, 0
	mov B, SP
	mov A, .L6479
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6479:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6161 0
	#         return make_func_type(rettype, paramtypes, ellipsis, false);
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6160 0
	#         read_declarator_params(paramtypes, paramvars, &ellipsis);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6480
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator_params
	.L6480:
	mov A, B
	add SP, 3
	.loc 7 6162 0
	#     }
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777213
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6160 0
	#         read_declarator_params(paramtypes, paramvars, &ellipsis);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_func_type
	.L6481:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6478:
	.loc 7 6164 0
	#         errort(tok, "invalid function definition");
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	mov B, BP
	add B, 2
	load A, B
	eq A, 0
	jeq .L6482, A, 0
	.loc 7 6164 0
	#         errort(tok, "invalid function definition");
.data
	.L6483:
	.string "invalid function definition"
.text
	mov A, .L6483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6143 0
	#     if (is_keyword(tok, KVOID) && next_token(')'))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6484:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6164 0
	#         errort(tok, "invalid function definition");
.data
	.L6485:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6486:
	mov A, B
	add SP, 3
	.L6482:
	.loc 7 6166 0
	#     Vector *paramtypes = make_vector();
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator_params_oldstyle
	.L6487:
	mov A, B
	add SP, 1
	.loc 7 6167 0
	#     for (int i = 0; i < vec_len(paramvars); i++)
	mov A, 0
	mov B, SP
	mov A, .L6488
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6488:
	mov A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 6168 0
	#         vec_push(paramtypes, type_int);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777210
	mov A, 0
	store A, B
	.L1081:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6489
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6489:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6490, A, 0
	jmp .L6491
	.L6490:
	.loc 7 6168 0
	#         vec_push(paramtypes, type_int);
	jmp .L1083
	.L6491:
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6167 0
	#     for (int i = 0; i < vec_len(paramvars); i++)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6492:
	mov A, B
	add SP, 2
	.loc 7 6168 0
	#         vec_push(paramtypes, type_int);
	.L1082:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777210
	store A, B
	load A, SP
	add SP, 1
	jmp .L1081
	.L1083:
	.loc 7 6170 0
	# }
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6167 0
	#     for (int i = 0; i < vec_len(paramvars); i++)
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6135 0
	#             errort(tok, "comma expected, but got %s", tok2s(get()));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6493
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_func_type
	.L6493:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_declarator_array:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6185 0
	# }
	.loc 7 6174 0
	#     if (next_token(']')) {
	.loc 7 6179 0
	#     }
	.loc 7 6175 0
	#         len = -1;
	mov A, 93
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6494
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6494:
	mov A, B
	add SP, 1
	jeq .L6495, A, 0
	.loc 7 6176 0
	#     } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L6496
	.L6495:
	.loc 7 6179 0
	#     }
	.loc 7 6178 0
	#         expect(']');
	mov A, .L6497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_intexpr
	.L6497:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6179 0
	#     }
	mov A, 93
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6498
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6498:
	mov A, B
	add SP, 1
	.L6496:
	.loc 7 6181 0
	#     Type *t = read_declarator_tail(basety, NULL);
	mov A, 0
	mov B, SP
	mov A, .L6499
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6499:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6182 0
	#     if (t->kind == KIND_FUNC)
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6170 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator_tail
	.L6500:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6183 0
	#         errort(tok, "array of functions");
	.loc 7 6182 0
	#     if (t->kind == KIND_FUNC)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6501, A, 0
	.loc 7 6183 0
	#         errort(tok, "array of functions");
.data
	.L6502:
	.string "array of functions"
.text
	mov A, .L6502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6181 0
	#     Type *t = read_declarator_tail(basety, NULL);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6503
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6503:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6183 0
	#         errort(tok, "array of functions");
.data
	.L6504:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6505:
	mov A, B
	add SP, 3
	.L6501:
	.loc 7 6185 0
	# }
	.loc 7 6174 0
	#     if (next_token(']')) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6182 0
	#     if (t->kind == KIND_FUNC)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_array_type
	.L6506:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_declarator_func:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6193 0
	# }
	.loc 7 6189 0
	#         error("function returning a function");
	.loc 7 6185 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6507, A, 0
	.loc 7 6189 0
	#         error("function returning a function");
.data
	.L6508:
	.string "function returning a function"
.text
	mov A, .L6508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6509:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6510
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6510:
	mov A, B
	add SP, 3
	.L6507:
	.loc 7 6191 0
	#         error("function returning an array");
	.loc 7 6185 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6511, A, 0
	.loc 7 6191 0
	#         error("function returning an array");
.data
	.L6512:
	.string "function returning an array"
.text
	mov A, .L6512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6513:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6514:
	mov A, B
	add SP, 3
	.L6511:
	.loc 7 6193 0
	# }
	.loc 7 6185 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_func_param_list
	.L6515:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_declarator_tail:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6201 0
	# }
	.loc 7 6197 0
	#         return read_declarator_array(basety);
	mov A, 91
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6516:
	mov A, B
	add SP, 1
	jeq .L6517, A, 0
	.loc 7 6193 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6518
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator_array
	.L6518:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6517:
	.loc 7 6199 0
	#         return read_declarator_func(basety, params);
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6519:
	mov A, B
	add SP, 1
	jeq .L6520, A, 0
	.loc 7 6193 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator_func
	.L6521:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6520:
	.loc 7 6201 0
	# }
	.loc 7 6193 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_type_qualifiers:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6205 0
	# }
	.L1084:
	.loc 6 205 0
	# }
	mov A, 318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6524:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L6523, A, 0
	.loc 7 6205 0
	# }
	.loc 6 205 0
	# }
	mov A, 353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6525:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L6523:
	mov A, B
	mov B, 1
	jne .L6522, A, 0
	.loc 7 6205 0
	# }
	.loc 6 205 0
	# }
	mov A, 337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6526:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L6522:
	mov A, B
	jeq .L6527, A, 0
	jmp .L6528
	.L6527:
	.loc 7 6205 0
	# }
	jmp .L1085
	.L6528:
	jmp .L1084
	.L1085:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_declarator:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6241 0
	# }
	.loc 7 6225 0
	#     }
	.loc 7 6210 0
	#         // '(' is either beginning of grouping parentheses or of a function parameter list.
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6529:
	mov A, B
	add SP, 1
	jeq .L6530, A, 0
	.loc 7 6225 0
	#     }
	.loc 7 6213 0
	#             return read_declarator_func(basety, params);
	mov A, .L6531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6531:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6532:
	mov A, B
	add SP, 1
	jeq .L6533, A, 0
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator_func
	.L6534:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6533:
	.loc 7 6221 0
	#         Type *t = read_declarator(rname, stub, params, ctx);
	mov A, 0
	mov B, SP
	mov A, .L6535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_stub_type
	.L6535:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6222 0
	#         expect(')');
	mov A, 0
	mov B, SP
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6221 0
	#         Type *t = read_declarator(rname, stub, params, ctx);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator
	.L6536:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6223 0
	#         *stub = *read_declarator_tail(basety, params);
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6537:
	mov A, B
	add SP, 1
	.loc 7 6224 0
	#         return t;
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator_tail
	.L6538:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6221 0
	#         Type *t = read_declarator(rname, stub, params, ctx);
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 6225 0
	#     }
	.loc 7 6222 0
	#         expect(')');
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6530:
	.loc 7 6229 0
	#     }
	.loc 7 6227 0
	#         skip_type_qualifiers();
	mov A, 42
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6539:
	mov A, B
	add SP, 1
	jeq .L6540, A, 0
	.loc 7 6229 0
	#     }
	.loc 7 6228 0
	#         return read_declarator(rname, make_ptr_type(basety), params, ctx);
	mov A, .L6541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_type_qualifiers
	.L6541:
	mov A, B
	.loc 7 6229 0
	#     }
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6229 0
	#     }
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L6542:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator
	.L6543:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6540:
	.loc 7 6231 0
	#     if (tok->kind == TIDENT) {
	mov A, 0
	mov B, SP
	mov A, .L6544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6544:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6236 0
	#     }
	.loc 7 6232 0
	#         if (ctx == DECL_CAST)
	.loc 7 6231 0
	#     if (tok->kind == TIDENT) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6545, A, 0
	.loc 7 6236 0
	#     }
	.loc 7 6233 0
	#             errort(tok, "identifier is not expected, but got %s", tok2s(tok));
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6546, A, 0
	.loc 7 6233 0
	#             errort(tok, "identifier is not expected, but got %s", tok2s(tok));
	.loc 7 6231 0
	#     if (tok->kind == TIDENT) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6547:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6233 0
	#             errort(tok, "identifier is not expected, but got %s", tok2s(tok));
.data
	.L6548:
	.string "identifier is not expected, but got %s"
.text
	mov A, .L6548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6231 0
	#     if (tok->kind == TIDENT) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6549:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6233 0
	#             errort(tok, "identifier is not expected, but got %s", tok2s(tok));
.data
	.L6550:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6551:
	mov A, B
	add SP, 4
	.L6546:
	.loc 7 6235 0
	#         return read_declarator_tail(basety, params);
	.loc 7 6231 0
	#     if (tok->kind == TIDENT) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 6236 0
	#     }
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator_tail
	.L6552:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6545:
	.loc 7 6238 0
	#         errort(tok, "identifier, ( or * are expected, but got %s", tok2s(tok));
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L6553, A, 0
	.loc 7 6238 0
	#         errort(tok, "identifier, ( or * are expected, but got %s", tok2s(tok));
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6553:
	mov A, B
	jeq .L6554, A, 0
	.loc 7 6238 0
	#         errort(tok, "identifier, ( or * are expected, but got %s", tok2s(tok));
	.loc 7 6231 0
	#     if (tok->kind == TIDENT) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6555:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6238 0
	#         errort(tok, "identifier, ( or * are expected, but got %s", tok2s(tok));
.data
	.L6556:
	.string "identifier, ( or * are expected, but got %s"
.text
	mov A, .L6556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6231 0
	#     if (tok->kind == TIDENT) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6557:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6238 0
	#         errort(tok, "identifier, ( or * are expected, but got %s", tok2s(tok));
.data
	.L6558:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6559:
	mov A, B
	add SP, 4
	.L6554:
	.loc 7 6240 0
	#     return read_declarator_tail(basety, params);
	.loc 7 6231 0
	#     if (tok->kind == TIDENT) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6560:
	mov A, B
	add SP, 1
	.loc 7 6241 0
	# }
	.loc 7 6205 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator_tail
	.L6561:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_abstract_declarator:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6251 0
	# }
	.loc 7 4124 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6251 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6241 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6251 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator
	.L6562:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_typeof:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6264 0
	# }
	.loc 7 6259 0
	#     Type *r = is_type(peek())
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6563:
	mov A, B
	add SP, 1
	.loc 7 6260 0
	#         ? read_cast_type()
	mov A, 0
	mov B, SP
	mov A, .L6564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6564:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6565:
	mov A, B
	add SP, 1
	jeq .L6566, A, 0
	mov A, .L6567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_type
	.L6567:
	mov A, B
	jmp .L6568
	.L6566:
	mov A, .L6569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_comma_expr
	.L6569:
	mov A, B
	mov B, A
	add B, 1
	load A, B
	.L6568:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6263 0
	#     return r;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6570:
	mov A, B
	add SP, 1
	.loc 7 6264 0
	# }
	.loc 7 6260 0
	#         ? read_cast_type()
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_poweroftwo:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6273 0
	# }
	.loc 7 6264 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6273 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L6571, A, 0
	mov A, 0
	jmp .L6572
	.L6571:
	.loc 7 6264 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6273 0
	# }
	.loc 7 6264 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6273 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L6573:
	mov A, B
	add SP, 2
	eq A, 0
	.L6572:
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_alignas:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6284 0
	# }
	.loc 7 6279 0
	#     int r = is_type(peek())
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6574:
	mov A, B
	add SP, 1
	.loc 7 6280 0
	#         ? read_cast_type()->align
	mov A, 0
	mov B, SP
	mov A, .L6575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6575:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6576:
	mov A, B
	add SP, 1
	jeq .L6577, A, 0
	mov A, .L6578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_type
	.L6578:
	mov A, B
	mov B, A
	add B, 2
	load A, B
	jmp .L6579
	.L6577:
	mov A, .L6580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_intexpr
	.L6580:
	mov A, B
	.L6579:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6283 0
	#     return r;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6581:
	mov A, B
	add SP, 1
	.loc 7 6284 0
	# }
	.loc 7 6280 0
	#         ? read_cast_type()->align
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_decl_spec:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 13
	.loc 7 6407 0
	#     errort(tok, "type mismatch: %s", tok2s(tok));
	.loc 7 6288 0
	#     Token *tok = peek();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov A, 0
	mov B, SP
	mov A, .L6582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6582:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6290 0
	#         errort(tok, "type name expected, but got %s", tok2s(tok));
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6583:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L6584, A, 0
	.loc 7 6290 0
	#         errort(tok, "type name expected, but got %s", tok2s(tok));
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6585:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6290 0
	#         errort(tok, "type name expected, but got %s", tok2s(tok));
.data
	.L6586:
	.string "type name expected, but got %s"
.text
	mov A, .L6586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6587:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6290 0
	#         errort(tok, "type name expected, but got %s", tok2s(tok));
.data
	.L6588:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6589:
	mov A, B
	add SP, 4
	.L6584:
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 6296 0
	#     int align = -1;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777210
	mov A, 0
	store A, B
	.loc 7 6297 0
	# 
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 6372 0
	#             goto err;
	.L1086:
	.loc 7 6300 0
	#         if (tok->kind == EOF)
	mov A, .L6590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6590:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6301 0
	#             error("premature end of input");
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6301 0
	#             error("premature end of input");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6591, A, 0
.data
	.L6592:
	.string "premature end of input"
.text
	mov A, .L6592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6593:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6594:
	mov A, B
	add SP, 3
	.L6591:
	.loc 7 6308 0
	#             }
	.loc 7 6303 0
	#             Type *def = get_typedef(tok->sval);
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6303 0
	#             Type *def = get_typedef(tok->sval);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L6596, A, 0
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6596:
	mov A, B
	mov B, 0
	jeq .L6595, A, 0
	.loc 7 6303 0
	#             Type *def = get_typedef(tok->sval);
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L6595:
	mov A, B
	jeq .L6597, A, 0
	.loc 7 6308 0
	#             }
	.loc 7 6304 0
	#             if (def) {
	mov A, 0
	mov B, SP
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_typedef
	.L6598:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 6308 0
	#             }
	.loc 7 6304 0
	#             if (def) {
	mov B, BP
	add B, 16777208
	load A, B
	jeq .L6599, A, 0
	.loc 7 6308 0
	#             }
	.loc 7 6306 0
	#                 usertype = def;
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L6600, A, 0
	.loc 7 6306 0
	#                 usertype = def;
	jmp .L1127
	.L6600:
	.loc 7 6307 0
	#                 goto errcheck;
	.loc 7 6304 0
	#             if (def) {
	mov B, BP
	add B, 16777208
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6308 0
	#             }
	jmp .L1128
	.L6599:
	.L6597:
	.loc 7 6313 0
	#         }
	.loc 7 6311 0
	#             unget_token(tok);
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6601, A, 0
	.loc 7 6313 0
	#         }
	.loc 7 6312 0
	#             break;
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6602
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6602:
	mov A, B
	add SP, 1
	.loc 7 6313 0
	#         }
	jmp .L1088
	.L6601:
	.loc 7 6361 0
	#         }
	.loc 7 6315 0
	#         case KTYPEDEF:  if (sclass) goto err; sclass = S_TYPEDEF; break;
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 6361 0
	#         }
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 348
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6603, A, 0
	jmp .L1090
	.L6603:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 325
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6604, A, 0
	jmp .L1091
	.L6604:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 343
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6605, A, 0
	jmp .L1092
	.L6605:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 312
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6606, A, 0
	jmp .L1093
	.L6606:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 336
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6607, A, 0
	jmp .L1094
	.L6607:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 318
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6608, A, 0
	jmp .L1095
	.L6608:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 353
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6609, A, 0
	jmp .L1096
	.L6609:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 332
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6610, A, 0
	jmp .L1097
	.L6610:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 335
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6611, A, 0
	jmp .L1098
	.L6611:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 352
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6612, A, 0
	jmp .L1099
	.L6612:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 313
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6613, A, 0
	jmp .L1100
	.L6613:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 316
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6614, A, 0
	jmp .L1101
	.L6614:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 333
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6615, A, 0
	jmp .L1102
	.L6615:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 326
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6616, A, 0
	jmp .L1103
	.L6616:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 322
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6617, A, 0
	jmp .L1104
	.L6617:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 341
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6618, A, 0
	jmp .L1105
	.L6618:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 351
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6619, A, 0
	jmp .L1106
	.L6619:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 340
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6620, A, 0
	jmp .L1107
	.L6620:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 345
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6621, A, 0
	jmp .L1108
	.L6621:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 350
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6622, A, 0
	jmp .L1109
	.L6622:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 324
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6623, A, 0
	jmp .L1110
	.L6623:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 310
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6624, A, 0
	jmp .L1111
	.L6624:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 334
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6625, A, 0
	jmp .L1112
	.L6625:
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 349
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6626, A, 0
	jmp .L1113
	.L6626:
	jmp .L1114
	.loc 7 6316 0
	#         case KEXTERN:   if (sclass) goto err; sclass = S_EXTERN; break;
	.L1090:
	.loc 7 6288 0
	#     Token *tok = peek();
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6627, A, 0
	.loc 7 6316 0
	#         case KEXTERN:   if (sclass) goto err; sclass = S_EXTERN; break;
	jmp .L1127
	.L6627:
	.loc 7 4124 0
	# }
	mov A, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6316 0
	#         case KEXTERN:   if (sclass) goto err; sclass = S_EXTERN; break;
	jmp .L1089
	.loc 7 6317 0
	#         case KSTATIC:   if (sclass) goto err; sclass = S_STATIC; break;
	.L1091:
	.loc 7 6288 0
	#     Token *tok = peek();
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6628, A, 0
	.loc 7 6317 0
	#         case KSTATIC:   if (sclass) goto err; sclass = S_STATIC; break;
	jmp .L1127
	.L6628:
	.loc 7 4124 0
	# }
	mov A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6317 0
	#         case KSTATIC:   if (sclass) goto err; sclass = S_STATIC; break;
	jmp .L1089
	.loc 7 6318 0
	#         case KAUTO:     if (sclass) goto err; sclass = S_AUTO; break;
	.L1092:
	.loc 7 6288 0
	#     Token *tok = peek();
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6629, A, 0
	.loc 7 6318 0
	#         case KAUTO:     if (sclass) goto err; sclass = S_AUTO; break;
	jmp .L1127
	.L6629:
	.loc 7 4124 0
	# }
	mov A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6318 0
	#         case KAUTO:     if (sclass) goto err; sclass = S_AUTO; break;
	jmp .L1089
	.loc 7 6319 0
	#         case KREGISTER: if (sclass) goto err; sclass = S_REGISTER; break;
	.L1093:
	.loc 7 6288 0
	#     Token *tok = peek();
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6630, A, 0
	.loc 7 6319 0
	#         case KREGISTER: if (sclass) goto err; sclass = S_REGISTER; break;
	jmp .L1127
	.L6630:
	.loc 7 4124 0
	# }
	mov A, 4
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6319 0
	#         case KREGISTER: if (sclass) goto err; sclass = S_REGISTER; break;
	jmp .L1089
	.loc 7 6320 0
	#         case KCONST:    break;
	.L1094:
	.loc 7 6288 0
	#     Token *tok = peek();
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6631, A, 0
	.loc 7 6320 0
	#         case KCONST:    break;
	jmp .L1127
	.L6631:
	.loc 7 4124 0
	# }
	mov A, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6320 0
	#         case KCONST:    break;
	jmp .L1089
	.loc 7 6321 0
	#         case KVOLATILE: break;
	.L1095:
	jmp .L1089
	.loc 7 6322 0
	#         case KINLINE:   break;
	.L1096:
	jmp .L1089
	.loc 7 6323 0
	#         case KNORETURN: break;
	.L1097:
	jmp .L1089
	.loc 7 6324 0
	#         case KVOID:     if (kind) goto err; kind = kvoid; break;
	.L1098:
	jmp .L1089
	.loc 7 6325 0
	#         case KBOOL:     if (kind) goto err; kind = kbool; break;
	.L1099:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6632, A, 0
	.loc 7 6325 0
	#         case KBOOL:     if (kind) goto err; kind = kbool; break;
	jmp .L1127
	.L6632:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov A, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6325 0
	#         case KBOOL:     if (kind) goto err; kind = kbool; break;
	jmp .L1089
	.loc 7 6326 0
	#         case KCHAR:     if (kind) goto err; kind = kchar; break;
	.L1100:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6633, A, 0
	.loc 7 6326 0
	#         case KCHAR:     if (kind) goto err; kind = kchar; break;
	jmp .L1127
	.L6633:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov A, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6326 0
	#         case KCHAR:     if (kind) goto err; kind = kchar; break;
	jmp .L1089
	.loc 7 6327 0
	#         case KINT:      if (kind) goto err; kind = kint; break;
	.L1101:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6634, A, 0
	.loc 7 6327 0
	#         case KINT:      if (kind) goto err; kind = kint; break;
	jmp .L1127
	.L6634:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov A, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6327 0
	#         case KINT:      if (kind) goto err; kind = kint; break;
	jmp .L1089
	.loc 7 6328 0
	#         case KFLOAT:    if (kind) goto err; kind = kfloat; break;
	.L1102:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6635, A, 0
	.loc 7 6328 0
	#         case KFLOAT:    if (kind) goto err; kind = kfloat; break;
	jmp .L1127
	.L6635:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov A, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6328 0
	#         case KFLOAT:    if (kind) goto err; kind = kfloat; break;
	jmp .L1089
	.loc 7 6329 0
	#         case KDOUBLE:   if (kind) goto err; kind = kdouble; break;
	.L1103:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6636, A, 0
	.loc 7 6329 0
	#         case KDOUBLE:   if (kind) goto err; kind = kdouble; break;
	jmp .L1127
	.L6636:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov A, 5
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6329 0
	#         case KDOUBLE:   if (kind) goto err; kind = kdouble; break;
	jmp .L1089
	.loc 7 6330 0
	#         case KSIGNED:   if (sig) goto err; sig = ksigned; break;
	.L1104:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6637, A, 0
	.loc 7 6330 0
	#         case KSIGNED:   if (sig) goto err; sig = ksigned; break;
	jmp .L1127
	.L6637:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov A, 6
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6330 0
	#         case KSIGNED:   if (sig) goto err; sig = ksigned; break;
	jmp .L1089
	.loc 7 6331 0
	#         case KUNSIGNED: if (sig) goto err; sig = kunsigned; break;
	.L1105:
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L6638, A, 0
	.loc 7 6331 0
	#         case KUNSIGNED: if (sig) goto err; sig = kunsigned; break;
	jmp .L1127
	.L6638:
	.loc 7 6296 0
	#     int align = -1;
	mov A, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 6331 0
	#         case KUNSIGNED: if (sig) goto err; sig = kunsigned; break;
	jmp .L1089
	.loc 7 6332 0
	#         case KSHORT:    if (size) goto err; size = kshort; break;
	.L1106:
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L6639, A, 0
	.loc 7 6332 0
	#         case KSHORT:    if (size) goto err; size = kshort; break;
	jmp .L1127
	.L6639:
	.loc 7 6296 0
	#     int align = -1;
	mov A, 2
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 6332 0
	#         case KSHORT:    if (size) goto err; size = kshort; break;
	jmp .L1089
	.loc 7 6333 0
	#         case KSTRUCT:   if (usertype) goto err; usertype = read_struct_def(); break;
	.L1107:
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L6640, A, 0
	.loc 7 6333 0
	#         case KSTRUCT:   if (usertype) goto err; usertype = read_struct_def(); break;
	jmp .L1127
	.L6640:
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov A, 1
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 6333 0
	#         case KSTRUCT:   if (usertype) goto err; usertype = read_struct_def(); break;
	jmp .L1089
	.loc 7 6334 0
	#         case KUNION:    if (usertype) goto err; usertype = read_union_def(); break;
	.L1108:
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L6641, A, 0
	.loc 7 6334 0
	#         case KUNION:    if (usertype) goto err; usertype = read_union_def(); break;
	jmp .L1127
	.L6641:
	mov A, .L6642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_struct_def
	.L6642:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L1089
	.loc 7 6335 0
	#         case KENUM:     if (usertype) goto err; usertype = read_enum_def(); break;
	.L1109:
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L6643, A, 0
	.loc 7 6335 0
	#         case KENUM:     if (usertype) goto err; usertype = read_enum_def(); break;
	jmp .L1127
	.L6643:
	mov A, .L6644
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_union_def
	.L6644:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L1089
	.loc 7 6336 0
	#         case KALIGNAS: {
	.L1110:
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L6645, A, 0
	.loc 7 6336 0
	#         case KALIGNAS: {
	jmp .L1127
	.L6645:
	mov A, .L6646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_enum_def
	.L6646:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L1089
	.loc 7 6346 0
	#         }
	.loc 7 6337 0
	#             int val = read_alignas();
	.L1111:
	.loc 7 6346 0
	#         }
	.loc 7 6338 0
	#             if (val < 0)
	mov A, 0
	mov B, SP
	mov A, .L6647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_alignas
	.L6647:
	mov A, B
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 6339 0
	#                 errort(tok, "negative alignment: %d", val);
	.loc 7 6338 0
	#             if (val < 0)
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6339 0
	#                 errort(tok, "negative alignment: %d", val);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6648, A, 0
	.loc 7 6338 0
	#             if (val < 0)
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6339 0
	#                 errort(tok, "negative alignment: %d", val);
.data
	.L6649:
	.string "negative alignment: %d"
.text
	mov A, .L6649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6650:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6339 0
	#                 errort(tok, "negative alignment: %d", val);
.data
	.L6651:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6652:
	mov A, B
	add SP, 4
	.L6648:
	.loc 7 6342 0
	#                 break;
	.loc 7 6338 0
	#             if (val < 0)
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6342 0
	#                 break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6653, A, 0
	jmp .L1089
	.L6653:
	.loc 7 6344 0
	#                 align = val;
	.loc 7 6297 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6344 0
	#                 align = val;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L6654, A, 0
	.loc 7 6338 0
	#             if (val < 0)
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6297 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L6654:
	mov A, B
	jeq .L6655, A, 0
	.loc 7 6344 0
	#                 align = val;
	.loc 7 6338 0
	#             if (val < 0)
	mov B, BP
	add B, 16777207
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.L6655:
	.loc 7 6346 0
	#         }
	jmp .L1089
	.loc 7 6352 0
	#         }
	.loc 7 6348 0
	#             if (size == 0) size = klong;
	.L1112:
	.loc 7 6352 0
	#         }
	.loc 7 6349 0
	#             else if (size == klong) size = kllong;
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6349 0
	#             else if (size == klong) size = kllong;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6656, A, 0
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov A, 2
	mov B, BP
	add B, 16777211
	store A, B
	jmp .L6657
	.L6656:
	.loc 7 6349 0
	#             else if (size == klong) size = kllong;
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6658, A, 0
	.loc 7 6349 0
	#             else if (size == klong) size = kllong;
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov A, 3
	mov B, BP
	add B, 16777211
	store A, B
	jmp .L6659
	.L6658:
	.loc 7 6349 0
	#             else if (size == klong) size = kllong;
	jmp .L1127
	.L6659:
	.L6657:
	.loc 7 6352 0
	#         }
	jmp .L1089
	.loc 7 6357 0
	#         }
	.loc 7 6354 0
	#             if (usertype) goto err;
	.L1113:
	.loc 7 6357 0
	#         }
	.loc 7 6355 0
	#             usertype = read_typeof();
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L6660, A, 0
	.loc 7 6355 0
	#             usertype = read_typeof();
	jmp .L1127
	.L6660:
	.loc 7 6356 0
	#             break;
	mov A, .L6661
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_typeof
	.L6661:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6357 0
	#         }
	jmp .L1089
	.loc 7 6359 0
	#             unget_token(tok);
	.L1114:
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6662:
	mov A, B
	add SP, 1
	.loc 7 6361 0
	#         }
	jmp .L1129
	.L1089:
	.loc 7 6363 0
	#         if (kind == kbool && (size != 0 && sig != 0))
	.L1128:
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L6663, A, 0
	.loc 7 6363 0
	#         if (kind == kbool && (size != 0 && sig != 0))
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6363 0
	#         if (kind == kbool && (size != 0 && sig != 0))
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L6664, A, 0
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6363 0
	#         if (kind == kbool && (size != 0 && sig != 0))
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6664:
	mov A, B
	mov B, A
	ne B, 0
	.L6663:
	mov A, B
	jeq .L6665, A, 0
	jmp .L1127
	.L6665:
	.loc 7 6366 0
	#             goto err;
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L6666, A, 0
	.loc 7 6366 0
	#             goto err;
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6366 0
	#             goto err;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L6667, A, 0
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6667:
	mov A, B
	mov B, A
	ne B, 0
	.L6666:
	mov A, B
	jeq .L6668, A, 0
	.loc 7 6366 0
	#             goto err;
	jmp .L1127
	.L6668:
	.loc 7 6368 0
	#             goto err;
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L6669, A, 0
	.loc 7 6368 0
	#             goto err;
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6368 0
	#             goto err;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L6671, A, 0
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6671:
	mov A, B
	mov B, 0
	jeq .L6670, A, 0
	.loc 7 6368 0
	#             goto err;
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6670:
	mov A, B
	mov B, A
	ne B, 0
	.L6669:
	mov A, B
	jeq .L6672, A, 0
	.loc 7 6368 0
	#             goto err;
	jmp .L1127
	.L6672:
	.loc 7 6370 0
	#             goto err;
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6370 0
	#             goto err;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L6673, A, 0
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L6675, A, 0
	.loc 7 6370 0
	#             goto err;
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6675:
	mov A, B
	mov B, 1
	jne .L6674, A, 0
	.loc 7 6370 0
	#             goto err;
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6674:
	mov A, B
	mov B, A
	ne B, 0
	.L6673:
	mov A, B
	jeq .L6676, A, 0
	.loc 7 6370 0
	#             goto err;
	jmp .L1127
	.L6676:
	.loc 7 6372 0
	#             goto err;
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, 0
	jeq .L6677, A, 0
	.loc 7 6372 0
	#             goto err;
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6372 0
	#             goto err;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 1
	jne .L6679, A, 0
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6372 0
	#             goto err;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6679:
	mov A, B
	mov B, 1
	jne .L6678, A, 0
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6372 0
	#             goto err;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6678:
	mov A, B
	mov B, A
	ne B, 0
	.L6677:
	mov A, B
	jeq .L6680, A, 0
	jmp .L1127
	.L6680:
	.L1087:
	jmp .L1086
	.L1088:
	.loc 7 6375 0
	#     if (rsclass)
	.L1129:
	.loc 7 6284 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L6681, A, 0
	.loc 7 6375 0
	#     if (rsclass)
	.loc 7 6288 0
	#     Token *tok = peek();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6284 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L6681:
	.loc 7 6378 0
	#         return usertype;
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L6682, A, 0
	.loc 7 6378 0
	#         return usertype;
	.loc 7 6293 0
	#     enum { kvoid = 1, kbool, kchar, kint, kfloat, kdouble } kind = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6682:
	.loc 7 6380 0
	#         errort(tok, "alignment must be power of 2, but got %d", align);
	.loc 7 6297 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6380 0
	#         errort(tok, "alignment must be power of 2, but got %d", align);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L6683, A, 0
	.loc 7 6297 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_poweroftwo
	.L6684:
	mov A, B
	add SP, 1
	eq A, 0
	mov B, A
	ne B, 0
	.L6683:
	mov A, B
	jeq .L6685, A, 0
	.loc 7 6380 0
	#         errort(tok, "alignment must be power of 2, but got %d", align);
	.loc 7 6297 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6380 0
	#         errort(tok, "alignment must be power of 2, but got %d", align);
.data
	.L6686:
	.string "alignment must be power of 2, but got %d"
.text
	mov A, .L6686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6687:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6380 0
	#         errort(tok, "alignment must be power of 2, but got %d", align);
.data
	.L6688:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6689:
	mov A, B
	add SP, 4
	.L6685:
	.loc 7 6382 0
	#     switch (kind) {
	.loc 7 6394 0
	#     }
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777204
	store A, B
	.loc 7 6394 0
	#     }
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6690, A, 0
	jmp .L1116
	.L6690:
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6691, A, 0
	jmp .L1117
	.L6691:
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6692, A, 0
	jmp .L1118
	.L6692:
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6693, A, 0
	jmp .L1119
	.L6693:
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6694, A, 0
	jmp .L1120
	.L6694:
	jmp .L1121
	.loc 7 6384 0
	#     case kbool:   ty = make_numtype(KIND_BOOL, false); goto end;
	.L1116:
	.loc 7 4124 0
	# }
	mov B, type_void
	load A, B
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6384 0
	#     case kbool:   ty = make_numtype(KIND_BOOL, false); goto end;
	jmp .L1130
	.loc 7 6385 0
	#     case kchar:   ty = make_numtype(KIND_CHAR, sig == kunsigned); goto end;
	.L1117:
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_numtype
	.L6695:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6385 0
	#     case kchar:   ty = make_numtype(KIND_CHAR, sig == kunsigned); goto end;
	jmp .L1130
	.loc 7 6386 0
	# #if 0
	.L1118:
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_numtype
	.L6696:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6386 0
	# #if 0
	jmp .L1130
	.loc 7 6391 0
	#     case kdouble: ty = make_numtype(KIND_INT, false); goto end;
	.L1119:
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_numtype
	.L6697:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6391 0
	#     case kdouble: ty = make_numtype(KIND_INT, false); goto end;
	jmp .L1130
	.loc 7 6392 0
	# #endif
	.L1120:
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_numtype
	.L6698:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6392 0
	# #endif
	jmp .L1130
	.loc 7 6394 0
	#     }
	.L1121:
	jmp .L1115
	.L1115:
	.loc 7 6400 0
	#     }
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov B, BP
	add B, 16777211
	load A, B
	mov B, BP
	add B, 16777203
	store A, B
	.loc 7 6400 0
	#     }
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6699, A, 0
	jmp .L1123
	.L6699:
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6700, A, 0
	jmp .L1124
	.L6700:
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6701, A, 0
	jmp .L1125
	.L6701:
	jmp .L1126
	.loc 7 6397 0
	#     case klong:  ty = make_numtype(KIND_LONG, sig == kunsigned); goto end;
	.L1123:
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6702
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_numtype
	.L6702:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6397 0
	#     case klong:  ty = make_numtype(KIND_LONG, sig == kunsigned); goto end;
	jmp .L1130
	.loc 7 6398 0
	#     case kllong: ty = make_numtype(KIND_LLONG, sig == kunsigned); goto end;
	.L1124:
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_numtype
	.L6703:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6398 0
	#     case kllong: ty = make_numtype(KIND_LLONG, sig == kunsigned); goto end;
	jmp .L1130
	.loc 7 6399 0
	#     default:     ty = make_numtype(KIND_INT, sig == kunsigned); goto end;
	.L1125:
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_numtype
	.L6704:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6399 0
	#     default:     ty = make_numtype(KIND_INT, sig == kunsigned); goto end;
	jmp .L1130
	.loc 7 6400 0
	#     }
	.L1126:
	.loc 7 6296 0
	#     int align = -1;
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_numtype
	.L6705:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6400 0
	#     }
	jmp .L1130
	.L1122:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 6295 0
	#     enum { ksigned = 1, kunsigned } sig = 0;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6294 0
	#     enum { kshort = 1, klong, kllong } size = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L6706:
	.string "internal error: kind: %d, size: %d"
.text
	mov A, .L6706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6707:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6708:
	mov A, B
	add SP, 5
	.loc 7 6403 0
	#     if (align != -1)
	.L1130:
	.loc 7 6297 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6403 0
	#     if (align != -1)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6709, A, 0
	.loc 7 6297 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6382 0
	#     switch (kind) {
	mov B, BP
	add B, 16777205
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.L6709:
	.loc 7 6406 0
	#  err:
	.loc 7 6382 0
	#     switch (kind) {
	mov B, BP
	add B, 16777205
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6407 0
	#     errort(tok, "type mismatch: %s", tok2s(tok));
	.L1127:
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6710
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6710:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6407 0
	#     errort(tok, "type mismatch: %s", tok2s(tok));
.data
	.L6711:
	.string "type mismatch: %s"
.text
	mov A, .L6711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6289 0
	#     if (!is_type(tok))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6712:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6407 0
	#     errort(tok, "type mismatch: %s", tok2s(tok));
.data
	.L6713:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6714:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_static_local_var:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6424 0
	# }
	.loc 7 6416 0
	#     Vector *init = NULL;
	mov A, 0
	mov B, SP
	.loc 7 6407 0
	#     errort(tok, "type mismatch: %s", tok2s(tok));
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6715
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_static_lvar
	.L6715:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6417 0
	#     if (next_token('=')) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6422 0
	#     }
	.loc 7 6418 0
	#         Map *orig = localenv;
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6716
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6716:
	mov A, B
	add SP, 1
	jeq .L6717, A, 0
	.loc 7 6422 0
	#     }
	.loc 7 6419 0
	#         localenv = NULL;
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6420 0
	#         init = read_decl_init(ty);
	mov A, 0
	mov B, localenv
	store A, B
	.loc 7 6421 0
	#         localenv = orig;
	.loc 7 6407 0
	#     errort(tok, "type mismatch: %s", tok2s(tok));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_init
	.L6718:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6422 0
	#     }
	.loc 7 6419 0
	#         localenv = NULL;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, localenv
	store A, B
	.L6717:
	.loc 7 6424 0
	# }
	.loc 7 6417 0
	#     if (next_token('=')) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6416 0
	#     Vector *init = NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6719
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_decl
	.L6719:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, toplevels
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6720
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6720:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_decl_spec_opt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6431 0
	# }
	.loc 7 6428 0
	#         return read_decl_spec(sclass);
	mov A, .L6721
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6721:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6722:
	mov A, B
	add SP, 1
	jeq .L6723, A, 0
	.loc 7 6424 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6724
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_spec
	.L6724:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6723:
	.loc 11 355 0
	# 
.data
	.L6725:
	.string "type specifier missing, assuming int"
.text
	mov A, .L6725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6726:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6727:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6728:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6728
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6729
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp warnf
	.L6729:
	mov A, B
	add SP, 3
	.loc 7 6431 0
	# }
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_decl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 6459 0
	#             errort(peek(), "';' or ',' are expected, but got %s", tok2s(peek()));
	.loc 7 6435 0
	#     Type *basetype = read_decl_spec_opt(&sclass);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6436 0
	#     if (next_token(';'))
	mov A, 0
	mov B, SP
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_spec_opt
	.L6730:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6437 0
	#         return;
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6731
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6731:
	mov A, B
	add SP, 1
	jeq .L6732, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6732:
	.loc 7 6459 0
	#             errort(peek(), "';' or ',' are expected, but got %s", tok2s(peek()));
	.L1131:
	.loc 7 6440 0
	#         Type *ty = read_declarator(&name, copy_incomplete_type(basetype), NULL, DECL_BODY);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6436 0
	#     if (next_token(';'))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp copy_incomplete_type
	.L6733:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator
	.L6734:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6442 0
	#         if (sclass == S_TYPEDEF) {
	.loc 7 6435 0
	#     Type *basetype = read_decl_spec_opt(&sclass);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 6454 0
	#             }
	.loc 7 6443 0
	#             ast_typedef(ty, name);
	.loc 7 6435 0
	#     Type *basetype = read_decl_spec_opt(&sclass);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6735, A, 0
	.loc 7 6444 0
	#         } else if (ty->isstatic && !isglobal) {
	.loc 7 6440 0
	#         Type *ty = read_declarator(&name, copy_incomplete_type(basetype), NULL, DECL_BODY);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6736
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_typedef
	.L6736:
	mov A, B
	add SP, 2
	jmp .L6737
	.L6735:
	.loc 7 6454 0
	#             }
	.loc 7 6444 0
	#         } else if (ty->isstatic && !isglobal) {
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, 0
	jeq .L6738, A, 0
	.loc 7 6444 0
	#         } else if (ty->isstatic && !isglobal) {
	.loc 7 6431 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L6738:
	mov A, B
	jeq .L6739, A, 0
	.loc 7 6447 0
	#         } else {
	.loc 7 6446 0
	#             read_static_local_var(ty, name);
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6740
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_not_void
	.L6740:
	mov A, B
	add SP, 1
	.loc 7 6447 0
	#         } else {
	.loc 7 6440 0
	#         Type *ty = read_declarator(&name, copy_incomplete_type(basetype), NULL, DECL_BODY);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_static_local_var
	.L6741:
	mov A, B
	add SP, 2
	jmp .L6742
	.L6739:
	.loc 7 6454 0
	#             }
	.loc 7 6449 0
	#             Node *var = (isglobal ? ast_gvar : ast_lvar)(ty, name);
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_not_void
	.L6743:
	mov A, B
	add SP, 1
	.loc 7 6450 0
	#             if (next_token('=')) {
	mov A, 0
	mov B, SP
	.loc 7 6440 0
	#         Type *ty = read_declarator(&name, copy_incomplete_type(basetype), NULL, DECL_BODY);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6450 0
	#             if (next_token('=')) {
	.loc 7 6431 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L6745, A, 0
	.loc 7 6450 0
	#             if (next_token('=')) {
	mov A, ast_gvar
	jmp .L6746
	.L6745:
	mov A, ast_lvar
	.L6746:
	mov C, A
	mov A, .L6744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L6744:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 6454 0
	#             }
	.loc 7 6451 0
	#                 vec_push(block, ast_decl(var, read_decl_init(ty)));
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6747:
	mov A, B
	add SP, 1
	jeq .L6748, A, 0
	.loc 7 6452 0
	#             } else if (sclass != S_EXTERN && ty->kind != KIND_FUNC) {
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_init
	.L6749:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6450 0
	#             if (next_token('=')) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_decl
	.L6750:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6431 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6751:
	mov A, B
	add SP, 2
	jmp .L6752
	.L6748:
	.loc 7 6454 0
	#             }
	.loc 7 6452 0
	#             } else if (sclass != S_EXTERN && ty->kind != KIND_FUNC) {
	.loc 7 6435 0
	#     Type *basetype = read_decl_spec_opt(&sclass);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L6753, A, 0
	.loc 7 6452 0
	#             } else if (sclass != S_EXTERN && ty->kind != KIND_FUNC) {
	.loc 7 6441 0
	#         ty->isstatic = (sclass == S_STATIC);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6753:
	mov A, B
	jeq .L6754, A, 0
	.loc 7 6454 0
	#             }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6450 0
	#             if (next_token('=')) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_decl
	.L6755:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6431 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6756:
	mov A, B
	add SP, 2
	.L6754:
	.L6752:
	.L6742:
	.L6737:
	.loc 7 6457 0
	#             return;
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6757:
	mov A, B
	add SP, 1
	jeq .L6758, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6758:
	.loc 7 6459 0
	#             errort(peek(), "';' or ',' are expected, but got %s", tok2s(peek()));
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6759:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L6760, A, 0
	mov A, .L6761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6761:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6762:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6763:
	.string "';' or ',' are expected, but got %s"
.text
	mov A, .L6763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6764:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6765:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6766:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6767:
	mov A, B
	add SP, 4
	.L6760:
	.L1132:
	jmp .L1131
	.L1133:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_oldstyle_param_args:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6480 0
	# }
	.loc 7 6469 0
	#     localenv = NULL;
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6470 0
	#     Vector *r = make_vector();
	mov A, 0
	mov B, localenv
	store A, B
	.loc 7 6471 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L6768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6768:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6477 0
	#     }
	.L1134:
	.loc 7 6473 0
	#             break;
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6769:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6770:
	mov A, B
	add SP, 2
	jeq .L6771, A, 0
	jmp .L1136
	.L6771:
	.loc 7 6475 0
	#             errort(peek(), "K&R-style declarator expected, but got %s", tok2s(peek()));
	mov A, .L6772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6772:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6773:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L6774, A, 0
	mov A, .L6775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6775:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6776:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6777:
	.string "K&R-style declarator expected, but got %s"
.text
	mov A, .L6777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6778:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6779:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6780:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6781:
	mov A, B
	add SP, 4
	.L6774:
	.loc 7 6477 0
	#     }
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6471 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl
	.L6782:
	mov A, B
	add SP, 2
	.loc 7 6477 0
	#     }
	.L1135:
	jmp .L1134
	.L1136:
	.loc 7 6479 0
	#     return r;
	.loc 7 6469 0
	#     localenv = NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, localenv
	store A, B
	.loc 7 6480 0
	# }
	.loc 7 6471 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
update_oldstyle_param_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 6498 0
	#     }
	.loc 7 6484 0
	#         Node *decl = vec_get(vars, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6498 0
	#     }
	.L1137:
	.loc 7 6484 0
	#         Node *decl = vec_get(vars, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6480 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6783:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6784, A, 0
	jmp .L6785
	.L6784:
	.loc 7 6498 0
	#     }
	jmp .L1139
	.L6785:
	.loc 7 6485 0
	#         assert(decl->kind == AST_DECL);
	mov A, 0
	mov B, SP
	.loc 7 6484 0
	#         Node *decl = vec_get(vars, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6480 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6786:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L1140:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 6485 0
	#         assert(decl->kind == AST_DECL);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 264
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L6787, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L6788:
	.string "assertion failed: decl->kind == AST_DECL\n"
.text
	mov A, .L6788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L6789:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L6787:
	mov A, 0
	jeq .L6790, A, 0
	jmp .L1140
	.L6790:
	.L1141:
	.loc 7 6487 0
	#         assert(var->kind == AST_LVAR);
	mov A, 0
	mov B, SP
	.loc 7 6485 0
	#         assert(decl->kind == AST_DECL);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L1142:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 6487 0
	#         assert(var->kind == AST_LVAR);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L6791, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L6792:
	.string "assertion failed: var->kind == AST_LVAR\n"
.text
	mov A, .L6792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L6793:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L6791:
	mov A, 0
	jeq .L6794, A, 0
	jmp .L1142
	.L6794:
	.L1143:
	.loc 7 6495 0
	#         }
	.loc 7 6489 0
	#             Node *param = vec_get(params, j);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 6495 0
	#         }
	.L1144:
	.loc 7 6489 0
	#             Node *param = vec_get(params, j);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6480 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6795:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6796, A, 0
	jmp .L6797
	.L6796:
	.loc 7 6495 0
	#         }
	jmp .L1146
	.L6797:
	.loc 7 6490 0
	#             assert(param->kind == AST_LVAR);
	mov A, 0
	mov B, SP
	.loc 7 6489 0
	#             Node *param = vec_get(params, j);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6480 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6798:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	.loc 12 12 0
	#     }                                           \
	.L1147:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 6490 0
	#             assert(param->kind == AST_LVAR);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 257
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L6799, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L6800:
	.string "assertion failed: param->kind == AST_LVAR\n"
.text
	mov A, .L6800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L6801:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L6799:
	mov A, 0
	jeq .L6802, A, 0
	jmp .L1147
	.L6802:
	.L1148:
	.loc 7 6492 0
	#                 continue;
	.loc 7 6487 0
	#         assert(var->kind == AST_LVAR);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6492 0
	#                 continue;
	.loc 7 6490 0
	#             assert(param->kind == AST_LVAR);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L6803:
	mov A, B
	add SP, 2
	jeq .L6804, A, 0
	.loc 7 6492 0
	#                 continue;
	jmp .L1145
	.L6804:
	.loc 7 6494 0
	#             goto found;
	.loc 7 6487 0
	#         assert(var->kind == AST_LVAR);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6490 0
	#             assert(param->kind == AST_LVAR);
	mov B, BP
	add B, 16777211
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 6495 0
	#         }
	jmp .L1149
	.L1145:
	.loc 7 6489 0
	#             Node *param = vec_get(params, j);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6495 0
	#         }
	jmp .L1144
	.L1146:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 6487 0
	#         assert(var->kind == AST_LVAR);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L6805:
	.string "missing parameter: %s"
.text
	mov A, .L6805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6806:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6807:
	mov A, B
	add SP, 4
	.loc 7 6498 0
	#     }
	.L1149:
	.L1138:
	.loc 7 6484 0
	#         Node *decl = vec_get(vars, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6498 0
	#     }
	jmp .L1137
	.L1139:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_oldstyle_param_type:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6504 0
	# }
	.loc 7 6503 0
	#     update_oldstyle_param_type(params, vars);
	mov A, 0
	mov B, SP
	mov A, .L6808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_oldstyle_param_args
	.L6808:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6504 0
	# }
	.loc 7 6503 0
	#     update_oldstyle_param_type(params, vars);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6498 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp update_oldstyle_param_type
	.L6809:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
param_types:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6513 0
	# }
	.loc 7 6508 0
	#     for (int i = 0; i < vec_len(params); i++) {
	mov A, 0
	mov B, SP
	mov A, .L6810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6810:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6511 0
	#     }
	.loc 7 6509 0
	#         Node *param = vec_get(params, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 6511 0
	#     }
	.L1150:
	.loc 7 6509 0
	#         Node *param = vec_get(params, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6504 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6811:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6812, A, 0
	jmp .L6813
	.L6812:
	.loc 7 6511 0
	#     }
	jmp .L1152
	.L6813:
	.loc 7 6510 0
	#         vec_push(r, param->ty);
	mov A, 0
	mov B, SP
	.loc 7 6509 0
	#         Node *param = vec_get(params, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6504 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6814:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6511 0
	#     }
	.loc 7 6510 0
	#         vec_push(r, param->ty);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6508 0
	#     for (int i = 0; i < vec_len(params); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6815:
	mov A, B
	add SP, 2
	.loc 7 6511 0
	#     }
	.L1151:
	.loc 7 6509 0
	#         Node *param = vec_get(params, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6511 0
	#     }
	jmp .L1150
	.L1152:
	.loc 7 6513 0
	# }
	.loc 7 6508 0
	#     for (int i = 0; i < vec_len(params); i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_func_body:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6532 0
	# }
	.loc 7 6521 0
	#     localvars = make_vector();
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_map_parent
	.L6816:
	mov A, B
	add SP, 1
	mov B, localenv
	store A, B
	.loc 7 6522 0
	#     current_func_type = functype;
	mov A, .L6817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6817:
	mov A, B
	mov B, localvars
	store A, B
	.loc 7 6523 0
	#     Node *funcname = ast_string(ENC_NONE, fname, strlen(fname) + 1);
	.loc 7 6513 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, current_func_type
	store A, B
	.loc 7 6524 0
	#     map_put(localenv, "__func__", funcname);
	mov A, 0
	mov B, SP
	.loc 7 6513 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L6818:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6524 0
	#     map_put(localenv, "__func__", funcname);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6513 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_string
	.L6819:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6525 0
	#     map_put(localenv, "__FUNCTION__", funcname);
	.loc 7 6524 0
	#     map_put(localenv, "__func__", funcname);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6525 0
	#     map_put(localenv, "__FUNCTION__", funcname);
.data
	.L6820:
	.string "__func__"
.text
	mov A, .L6820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L6821:
	mov A, B
	add SP, 3
	.loc 7 6526 0
	#     Node *body = read_compound_stmt();
	.loc 7 6524 0
	#     map_put(localenv, "__func__", funcname);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6526 0
	#     Node *body = read_compound_stmt();
.data
	.L6822:
	.string "__FUNCTION__"
.text
	mov A, .L6822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6823
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L6823:
	mov A, B
	add SP, 3
	.loc 7 6527 0
	#     Node *r = ast_func(functype, fname, params, body, localvars);
	mov A, 0
	mov B, SP
	mov A, .L6824
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_compound_stmt
	.L6824:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6528 0
	#     current_func_type = NULL;
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, localvars
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6527 0
	#     Node *r = ast_func(functype, fname, params, body, localvars);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6513 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6825
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_func
	.L6825:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6529 0
	#     localenv = NULL;
	mov A, 0
	mov B, current_func_type
	store A, B
	.loc 7 6530 0
	#     localvars = NULL;
	mov A, 0
	mov B, localenv
	store A, B
	.loc 7 6531 0
	#     return r;
	mov A, 0
	mov B, localvars
	store A, B
	.loc 7 6532 0
	# }
	.loc 7 6528 0
	#     current_func_type = NULL;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_parentheses:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6543 0
	#             skip_parentheses(buf);
	.L1153:
	.loc 7 6537 0
	#         if (tok->kind == TEOF)
	mov A, 0
	mov B, SP
	mov A, .L6826
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6826:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6538 0
	#             error("premature end of input");
	.loc 7 6537 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6827, A, 0
	.loc 7 6538 0
	#             error("premature end of input");
.data
	.L6828:
	.string "premature end of input"
.text
	mov A, .L6828
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6829:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6830:
	mov A, B
	add SP, 3
	.L6827:
	.loc 7 6540 0
	#         if (is_keyword(tok, ')'))
	.loc 7 6537 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6532 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6831:
	mov A, B
	add SP, 2
	.loc 7 6541 0
	#             return;
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6537 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6832:
	mov A, B
	add SP, 2
	jeq .L6833, A, 0
	.loc 7 6541 0
	#             return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6833:
	.loc 7 6543 0
	#             skip_parentheses(buf);
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6537 0
	#         if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6834:
	mov A, B
	add SP, 2
	jeq .L6835, A, 0
	.loc 7 6543 0
	#             skip_parentheses(buf);
	.loc 7 6532 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_parentheses
	.L6836:
	mov A, B
	add SP, 1
	.L6835:
	.loc 7 6543 0
	#             skip_parentheses(buf);
	.L1154:
	jmp .L1153
	.L1155:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
is_funcdef:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6580 0
	# }
	.loc 7 6554 0
	#     bool r = false;
	mov A, 0
	mov B, SP
	mov A, .L6837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6837:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 10 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6576 0
	#     }
	.L1156:
	.loc 7 6557 0
	#         vec_push(buf, tok);
	mov A, 0
	mov B, SP
	mov A, .L6838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6838:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6558 0
	#         if (tok->kind == TEOF)
	.loc 7 6557 0
	#         vec_push(buf, tok);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6554 0
	#     bool r = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6839:
	mov A, B
	add SP, 2
	.loc 7 6559 0
	#             error("premature end of input");
	.loc 7 6557 0
	#         vec_push(buf, tok);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6840, A, 0
	.loc 7 6559 0
	#             error("premature end of input");
.data
	.L6841:
	.string "premature end of input"
.text
	mov A, .L6841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6842:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6843:
	mov A, B
	add SP, 3
	.L6840:
	.loc 7 6561 0
	#             break;
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6557 0
	#         vec_push(buf, tok);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6844:
	mov A, B
	add SP, 2
	jeq .L6845, A, 0
	.loc 7 6561 0
	#             break;
	jmp .L1158
	.L6845:
	.loc 7 6563 0
	#             continue;
	.loc 7 6557 0
	#         vec_push(buf, tok);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6846:
	mov A, B
	add SP, 1
	jeq .L6847, A, 0
	.loc 7 6563 0
	#             continue;
	jmp .L1157
	.L6847:
	.loc 7 6567 0
	#         }
	.loc 7 6565 0
	#             skip_parentheses(buf);
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6557 0
	#         vec_push(buf, tok);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6848:
	mov A, B
	add SP, 2
	jeq .L6849, A, 0
	.loc 7 6567 0
	#         }
	.loc 7 6566 0
	#             continue;
	.loc 7 6554 0
	#     bool r = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_parentheses
	.L6850:
	mov A, B
	add SP, 1
	.loc 7 6567 0
	#         }
	jmp .L1157
	.L6849:
	.loc 7 6569 0
	#             continue;
	.loc 7 6557 0
	#         vec_push(buf, tok);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6851, A, 0
	.loc 7 6569 0
	#             continue;
	jmp .L1157
	.L6851:
	.loc 7 6571 0
	#             continue;
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6852:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6853:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L6854, A, 0
	jmp .L1157
	.L6854:
	.loc 7 6573 0
	#         skip_parentheses(buf);
	mov A, .L6855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6855:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6554 0
	#     bool r = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6856:
	mov A, B
	add SP, 2
	.loc 7 6574 0
	#         r = (is_keyword(peek(), '{') || is_type(peek()));
	.loc 7 6554 0
	#     bool r = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_parentheses
	.L6857:
	mov A, B
	add SP, 1
	.loc 7 6575 0
	#         break;
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6859:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6860:
	mov A, B
	add SP, 2
	mov B, 1
	jne .L6858, A, 0
	mov A, .L6861
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L6861:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L6862:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L6858:
	mov A, B
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6576 0
	#     }
	jmp .L1158
	.L1157:
	jmp .L1156
	.L1158:
	.loc 7 6578 0
	#         unget_token(vec_pop(buf));
	.L1159:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6554 0
	#     bool r = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6863
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6863:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6864, A, 0
	.loc 7 6578 0
	#         unget_token(vec_pop(buf));
	.loc 7 6554 0
	#     bool r = false;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_pop
	.L6865:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L6866:
	mov A, B
	add SP, 1
	jmp .L6867
	.L6864:
	.loc 7 6578 0
	#         unget_token(vec_pop(buf));
	jmp .L1160
	.L6867:
	jmp .L1159
	.L1160:
	.loc 7 6580 0
	# }
	.loc 10 4 0
	# #define true 1
	mov B, BP
	add B, 16777214
	load A, B
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
backfill_labels:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 6590 0
	#             src->newlabel = dst->newlabel;
	.loc 7 6584 0
	#         Node *src = vec_get(gotos, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6590 0
	#             src->newlabel = dst->newlabel;
	.L1161:
	.loc 7 6584 0
	#         Node *src = vec_get(gotos, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, gotos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6868:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6869, A, 0
	jmp .L6870
	.L6869:
	.loc 7 6590 0
	#             src->newlabel = dst->newlabel;
	jmp .L1163
	.L6870:
	.loc 7 6585 0
	#         char *label = src->label;
	mov A, 0
	mov B, SP
	.loc 7 6584 0
	#         Node *src = vec_get(gotos, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, gotos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6871
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L6871:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6586 0
	#         Node *dst = map_get(labels, label);
	mov A, 0
	mov B, SP
	.loc 7 6585 0
	#         char *label = src->label;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6587 0
	#         if (!dst)
	mov A, 0
	mov B, SP
	.loc 7 6586 0
	#         Node *dst = map_get(labels, label);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, labels
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6872
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L6872:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6588 0
	#             error("stray %s: %s", src->kind == AST_GOTO ? "goto" : "unary &&", label);
	.loc 7 6587 0
	#         if (!dst)
	mov B, BP
	add B, 16777212
	load A, B
	eq A, 0
	jeq .L6873, A, 0
	.loc 7 6588 0
	#             error("stray %s: %s", src->kind == AST_GOTO ? "goto" : "unary &&", label);
	.loc 7 6586 0
	#         Node *dst = map_get(labels, label);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6588 0
	#             error("stray %s: %s", src->kind == AST_GOTO ? "goto" : "unary &&", label);
	.loc 7 6585 0
	#         char *label = src->label;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 275
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6874, A, 0
	.loc 7 6588 0
	#             error("stray %s: %s", src->kind == AST_GOTO ? "goto" : "unary &&", label);
.data
	.L6875:
	.string "goto"
.text
	mov A, .L6875
	jmp .L6876
	.L6874:
.data
	.L6877:
	.string "unary &&"
.text
	mov A, .L6877
	.L6876:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6878:
	.string "stray %s: %s"
.text
	mov A, .L6878
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6879:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6880:
	mov A, B
	add SP, 5
	.L6873:
	.loc 7 6590 0
	#             src->newlabel = dst->newlabel;
	.loc 7 6587 0
	#         if (!dst)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 4
	load A, B
	jeq .L6881, A, 0
	.loc 7 6590 0
	#             src->newlabel = dst->newlabel;
	.loc 7 6587 0
	#         if (!dst)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6585 0
	#         char *label = src->label;
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	jmp .L6882
	.L6881:
	.loc 7 6590 0
	#             src->newlabel = dst->newlabel;
	mov A, .L6883
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L6883:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6587 0
	#         if (!dst)
	mov B, BP
	add B, 16777212
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6585 0
	#         char *label = src->label;
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.L6882:
	.loc 7 6590 0
	#             src->newlabel = dst->newlabel;
	.L1162:
	.loc 7 6584 0
	#         Node *src = vec_get(gotos, i);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6590 0
	#             src->newlabel = dst->newlabel;
	jmp .L1161
	.L1163:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_funcdef:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 7 6618 0
	# }
	.loc 7 6598 0
	#     Type *basetype = read_decl_spec_opt(&sclass);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6599 0
	#     localenv = make_map_parent(globalenv);
	mov A, 0
	mov B, SP
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6884
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_spec_opt
	.L6884:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6600 0
	#     gotos = make_vector();
	.loc 7 4124 0
	# }
	mov B, globalenv
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_map_parent
	.L6885:
	mov A, B
	add SP, 1
	mov B, localenv
	store A, B
	.loc 7 6601 0
	#     labels = make_map();
	mov A, .L6886
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6886:
	mov A, B
	mov B, gotos
	store A, B
	.loc 7 6602 0
	#     char *name;
	mov A, .L6887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_map
	.L6887:
	mov A, B
	mov B, labels
	store A, B
	.loc 7 6603 0
	#     Vector *params = make_vector();
	.loc 7 6604 0
	#     Type *functype = read_declarator(&name, basetype, params, DECL_BODY);
	mov A, 0
	mov B, SP
	mov A, .L6888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6888:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6605 0
	#     if (functype->oldstyle) {
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6604 0
	#     Type *functype = read_declarator(&name, basetype, params, DECL_BODY);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6599 0
	#     localenv = make_map_parent(globalenv);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6605 0
	#     if (functype->oldstyle) {
	mov A, BP
	add A, -3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6889
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_declarator
	.L6889:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 6610 0
	#     }
	.loc 7 6606 0
	#         if (vec_len(params) == 0)
	.loc 7 6605 0
	#     if (functype->oldstyle) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 15
	load A, B
	jeq .L6890, A, 0
	.loc 7 6610 0
	#     }
	.loc 7 6607 0
	#             functype->hasva = false;
	.loc 7 6604 0
	#     Type *functype = read_declarator(&name, basetype, params, DECL_BODY);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6891
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L6891:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6607 0
	#             functype->hasva = false;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6892, A, 0
	mov A, 0
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6605 0
	#     if (functype->oldstyle) {
	mov B, BP
	add B, 16777211
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 14
	store B, A
	load A, SP
	add SP, 1
	.L6892:
	.loc 7 6609 0
	#         functype->params = param_types(params);
	.loc 7 6604 0
	#     Type *functype = read_declarator(&name, basetype, params, DECL_BODY);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6893
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_oldstyle_param_type
	.L6893:
	mov A, B
	add SP, 1
	.loc 7 6610 0
	#     }
	.loc 7 6604 0
	#     Type *functype = read_declarator(&name, basetype, params, DECL_BODY);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6894
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp param_types
	.L6894:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6605 0
	#     if (functype->oldstyle) {
	mov B, BP
	add B, 16777211
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 13
	store B, A
	load A, SP
	add SP, 1
	.L6890:
	.loc 7 6612 0
	#     ast_gvar(functype, name);
	.loc 7 6598 0
	#     Type *basetype = read_decl_spec_opt(&sclass);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6605 0
	#     if (functype->oldstyle) {
	mov B, BP
	add B, 16777211
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 6613 0
	#     expect('{');
	.loc 7 6603 0
	#     Vector *params = make_vector();
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6605 0
	#     if (functype->oldstyle) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6895
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_gvar
	.L6895:
	mov A, B
	add SP, 2
	.loc 7 6614 0
	#     Node *r = read_func_body(functype, name, params);
	mov A, 123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6896
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6896:
	mov A, B
	add SP, 1
	.loc 7 6615 0
	#     backfill_labels();
	mov A, 0
	mov B, SP
	.loc 7 6604 0
	#     Type *functype = read_declarator(&name, basetype, params, DECL_BODY);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6603 0
	#     Vector *params = make_vector();
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6605 0
	#     if (functype->oldstyle) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_func_body
	.L6897:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 6616 0
	#     localenv = NULL;
	mov A, .L6898
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp backfill_labels
	.L6898:
	mov A, B
	.loc 7 6617 0
	#     return r;
	mov A, 0
	mov B, localenv
	store A, B
	.loc 7 6618 0
	# }
	.loc 7 6615 0
	#     backfill_labels();
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_boolean_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6627 0
	# }
	.loc 7 6626 0
	#     return is_flotype(cond->ty) ? ast_conv(type_bool, cond) : cond;
	mov A, 0
	mov B, SP
	mov A, .L6899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expr
	.L6899:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6627 0
	# }
	.loc 7 6626 0
	#     return is_flotype(cond->ty) ? ast_conv(type_bool, cond) : cond;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L6900:
	mov A, B
	add SP, 1
	jeq .L6901, A, 0
	.loc 7 6627 0
	# }
	.loc 7 6626 0
	#     return is_flotype(cond->ty) ? ast_conv(type_bool, cond) : cond;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_bool
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6902
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_conv
	.L6902:
	mov A, B
	add SP, 2
	jmp .L6903
	.L6901:
	.loc 7 6626 0
	#     return is_flotype(cond->ty) ? ast_conv(type_bool, cond) : cond;
	mov B, BP
	add B, 16777215
	load A, B
	.L6903:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_if_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6638 0
	# }
	.loc 7 6631 0
	#     Node *cond = read_boolean_expr();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6904:
	mov A, B
	add SP, 1
	.loc 7 6632 0
	#     expect(')');
	mov A, 0
	mov B, SP
	mov A, .L6905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_boolean_expr
	.L6905:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6633 0
	#     Node *then = read_stmt();
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6906:
	mov A, B
	add SP, 1
	.loc 7 6634 0
	#     if (!next_token(KELSE))
	mov A, 0
	mov B, SP
	mov A, .L6907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_stmt
	.L6907:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6635 0
	#         return ast_if(cond, then, NULL);
	.loc 6 205 0
	# }
	mov A, 323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6908
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6908:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L6909, A, 0
	.loc 7 6635 0
	#         return ast_if(cond, then, NULL);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6634 0
	#     if (!next_token(KELSE))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6632 0
	#     expect(')');
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_if
	.L6910:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6909:
	.loc 7 6637 0
	#     return ast_if(cond, then, els);
	mov A, 0
	mov B, SP
	mov A, .L6911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_stmt
	.L6911:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6638 0
	# }
	.loc 7 6637 0
	#     return ast_if(cond, then, els);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6634 0
	#     if (!next_token(KELSE))
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6632 0
	#     expect(')');
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_if
	.L6912:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_opt_decl_or_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6650 0
	# }
	.loc 7 6646 0
	#         return NULL;
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L6913:
	mov A, B
	add SP, 1
	jeq .L6914, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6914:
	.loc 7 6648 0
	#     read_decl_or_stmt(list);
	mov A, 0
	mov B, SP
	mov A, .L6915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6915:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6649 0
	#     return ast_compound_stmt(list);
	.loc 7 6648 0
	#     read_decl_or_stmt(list);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_or_stmt
	.L6916:
	mov A, B
	add SP, 1
	.loc 7 6650 0
	# }
	.loc 7 6648 0
	#     read_decl_or_stmt(list);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_compound_stmt
	.L6917:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_for_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 11
	.loc 7 6695 0
	# }
	.loc 7 6664 0
	#     char *beg = make_label();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6918:
	mov A, B
	add SP, 1
	.loc 7 6665 0
	#     char *mid = make_label();
	mov A, 0
	mov B, SP
	mov A, .L6919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L6919:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6666 0
	#     char *end = make_label();
	mov A, 0
	mov B, SP
	mov A, .L6920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L6920:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6667 0
	#     Map *orig = localenv;
	mov A, 0
	mov B, SP
	mov A, .L6921
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L6921:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6668 0
	#     localenv = make_map_parent(localenv);
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6669 0
	#     Node *init = read_opt_decl_or_stmt();
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6922
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_map_parent
	.L6922:
	mov A, B
	add SP, 1
	mov B, localenv
	store A, B
	.loc 7 6670 0
	#     Node *cond = read_expr_opt();
	mov A, 0
	mov B, SP
	mov A, .L6923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_opt_decl_or_stmt
	.L6923:
	mov A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 6671 0
	#     if (cond && is_flotype(cond->ty))
	mov A, 0
	mov B, SP
	mov A, .L6924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expr_opt
	.L6924:
	mov A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 6672 0
	#         cond = ast_conv(type_bool, cond);
	.loc 7 6671 0
	#     if (cond && is_flotype(cond->ty))
	mov B, BP
	add B, 16777210
	load A, B
	mov B, 0
	jeq .L6925, A, 0
	.loc 7 6672 0
	#         cond = ast_conv(type_bool, cond);
	.loc 7 6671 0
	#     if (cond && is_flotype(cond->ty))
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_flotype
	.L6926:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L6925:
	mov A, B
	jeq .L6927, A, 0
	.loc 7 6672 0
	#         cond = ast_conv(type_bool, cond);
	.loc 7 6671 0
	#     if (cond && is_flotype(cond->ty))
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_bool
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6928
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_conv
	.L6928:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777210
	store A, B
	.L6927:
	.loc 7 6674 0
	#     Node *step = read_expr_opt();
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6929
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6929:
	mov A, B
	add SP, 1
	.loc 7 6675 0
	#     expect(')');
	mov A, 0
	mov B, SP
	mov A, .L6930
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expr_opt
	.L6930:
	mov A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 6676 0
	#     SET_JUMP_LABELS(mid, end);
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6931:
	mov A, B
	add SP, 1
	.loc 7 6654 0
	#     char *obreak = lbreak;                      \
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, lcontinue
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 6655 0
	#     lcontinue = cont;                           \
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, lbreak
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 6656 0
	#     lbreak = brk
	.loc 7 6666 0
	#     char *end = make_label();
	mov B, BP
	add B, 16777214
	load A, B
	mov B, lcontinue
	store A, B
	.loc 7 6657 0
	# 
	.loc 7 6667 0
	#     Map *orig = localenv;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, lbreak
	store A, B
	.loc 7 6678 0
	#     RESTORE_JUMP_LABELS();
	mov A, 0
	mov B, SP
	mov A, .L6932
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_stmt
	.L6932:
	mov A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 6660 0
	#     lbreak = obreak
	.loc 7 6654 0
	#     char *obreak = lbreak;                      \
	mov B, BP
	add B, 16777208
	load A, B
	mov B, lcontinue
	store A, B
	.loc 7 6661 0
	# 
	.loc 7 6655 0
	#     lcontinue = cont;                           \
	mov B, BP
	add B, 16777207
	load A, B
	mov B, lbreak
	store A, B
	.loc 7 6680 0
	# 
	.loc 7 6668 0
	#     localenv = make_map_parent(localenv);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, localenv
	store A, B
	.loc 7 6682 0
	#     if (init)
	mov A, 0
	mov B, SP
	mov A, .L6933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6933:
	mov A, B
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 6683 0
	#         vec_push(v, init);
	.loc 7 6670 0
	#     Node *cond = read_expr_opt();
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L6934, A, 0
	.loc 7 6683 0
	#         vec_push(v, init);
	.loc 7 6670 0
	#     Node *cond = read_expr_opt();
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     if (init)
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6935
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6935:
	mov A, B
	add SP, 2
	.L6934:
	.loc 7 6685 0
	#     if (cond)
	.loc 7 6665 0
	#     char *mid = make_label();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L6936:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     if (init)
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6937:
	mov A, B
	add SP, 2
	.loc 7 6686 0
	#         vec_push(v, ast_if(cond, NULL, ast_jump(end)));
	.loc 7 6671 0
	#     if (cond && is_flotype(cond->ty))
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L6938, A, 0
	.loc 7 6686 0
	#         vec_push(v, ast_if(cond, NULL, ast_jump(end)));
	.loc 7 6667 0
	#     Map *orig = localenv;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_jump
	.L6939:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6686 0
	#         vec_push(v, ast_if(cond, NULL, ast_jump(end)));
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6671 0
	#     if (cond && is_flotype(cond->ty))
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_if
	.L6940:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     if (init)
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6941:
	mov A, B
	add SP, 2
	.L6938:
	.loc 7 6688 0
	#         vec_push(v, body);
	.loc 7 6678 0
	#     RESTORE_JUMP_LABELS();
	mov B, BP
	add B, 16777206
	load A, B
	jeq .L6942, A, 0
	.loc 7 6688 0
	#         vec_push(v, body);
	.loc 7 6678 0
	#     RESTORE_JUMP_LABELS();
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     if (init)
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6943:
	mov A, B
	add SP, 2
	.L6942:
	.loc 7 6690 0
	#     if (step)
	.loc 7 6666 0
	#     char *end = make_label();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L6944:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     if (init)
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6945:
	mov A, B
	add SP, 2
	.loc 7 6691 0
	#         vec_push(v, step);
	.loc 7 6675 0
	#     expect(')');
	mov B, BP
	add B, 16777209
	load A, B
	jeq .L6946, A, 0
	.loc 7 6691 0
	#         vec_push(v, step);
	.loc 7 6675 0
	#     expect(')');
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     if (init)
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6947:
	mov A, B
	add SP, 2
	.L6946:
	.loc 7 6693 0
	#     vec_push(v, ast_dest(end));
	.loc 7 6665 0
	#     char *mid = make_label();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_jump
	.L6948:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     if (init)
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6949
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6949:
	mov A, B
	add SP, 2
	.loc 7 6694 0
	#     return ast_compound_stmt(v);
	.loc 7 6667 0
	#     Map *orig = localenv;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L6950:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     if (init)
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6951
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6951:
	mov A, B
	add SP, 2
	.loc 7 6695 0
	# }
	.loc 7 6682 0
	#     if (init)
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_compound_stmt
	.L6952:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_while_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 7 6718 0
	# }
	.loc 7 6703 0
	#     Node *cond = read_boolean_expr();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6953:
	mov A, B
	add SP, 1
	.loc 7 6704 0
	#     expect(')');
	mov A, 0
	mov B, SP
	mov A, .L6954
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_boolean_expr
	.L6954:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6705 0
	# 
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6955:
	mov A, B
	add SP, 1
	.loc 7 6707 0
	#     char *end = make_label();
	mov A, 0
	mov B, SP
	mov A, .L6956
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L6956:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6708 0
	#     SET_JUMP_LABELS(beg, end);
	mov A, 0
	mov B, SP
	mov A, .L6957
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L6957:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6654 0
	#     char *obreak = lbreak;                      \
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, lcontinue
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6655 0
	#     lcontinue = cont;                           \
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, lbreak
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 6656 0
	#     lbreak = brk
	.loc 7 6707 0
	#     char *end = make_label();
	mov B, BP
	add B, 16777214
	load A, B
	mov B, lcontinue
	store A, B
	.loc 7 6657 0
	# 
	.loc 7 6708 0
	#     SET_JUMP_LABELS(beg, end);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, lbreak
	store A, B
	.loc 7 6710 0
	#     RESTORE_JUMP_LABELS();
	mov A, 0
	mov B, SP
	mov A, .L6958
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_stmt
	.L6958:
	mov A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 6660 0
	#     lbreak = obreak
	.loc 7 6654 0
	#     char *obreak = lbreak;                      \
	mov B, BP
	add B, 16777212
	load A, B
	mov B, lcontinue
	store A, B
	.loc 7 6661 0
	# 
	.loc 7 6655 0
	#     lcontinue = cont;                           \
	mov B, BP
	add B, 16777211
	load A, B
	mov B, lbreak
	store A, B
	.loc 7 6713 0
	#     vec_push(v, ast_dest(beg));
	mov A, 0
	mov B, SP
	mov A, .L6959
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6959:
	mov A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 6714 0
	#     vec_push(v, ast_if(cond, body, ast_jump(end)));
	.loc 7 6707 0
	#     char *end = make_label();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L6960:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6713 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6961
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6961:
	mov A, B
	add SP, 2
	.loc 7 6715 0
	#     vec_push(v, ast_jump(beg));
	.loc 7 6708 0
	#     SET_JUMP_LABELS(beg, end);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6962
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_jump
	.L6962:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6710 0
	#     RESTORE_JUMP_LABELS();
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6704 0
	#     expect(')');
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6963
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_if
	.L6963:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6713 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6964
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6964:
	mov A, B
	add SP, 2
	.loc 7 6716 0
	#     vec_push(v, ast_dest(end));
	.loc 7 6707 0
	#     char *end = make_label();
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_jump
	.L6965:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6713 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6966:
	mov A, B
	add SP, 2
	.loc 7 6717 0
	#     return ast_compound_stmt(v);
	.loc 7 6708 0
	#     SET_JUMP_LABELS(beg, end);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L6967:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6713 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6968:
	mov A, B
	add SP, 2
	.loc 7 6718 0
	# }
	.loc 7 6713 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_compound_stmt
	.L6969:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_do_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 8
	.loc 7 6745 0
	# }
	.loc 7 6726 0
	#     char *end = make_label();
	mov A, 0
	mov B, SP
	mov A, .L6970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L6970:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6727 0
	#     SET_JUMP_LABELS(beg, end);
	mov A, 0
	mov B, SP
	mov A, .L6971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L6971:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6654 0
	#     char *obreak = lbreak;                      \
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, lcontinue
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6655 0
	#     lcontinue = cont;                           \
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, lbreak
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6656 0
	#     lbreak = brk
	.loc 7 6726 0
	#     char *end = make_label();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, lcontinue
	store A, B
	.loc 7 6657 0
	# 
	.loc 7 6727 0
	#     SET_JUMP_LABELS(beg, end);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, lbreak
	store A, B
	.loc 7 6729 0
	#     RESTORE_JUMP_LABELS();
	mov A, 0
	mov B, SP
	mov A, .L6972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_stmt
	.L6972:
	mov A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 6660 0
	#     lbreak = obreak
	.loc 7 6654 0
	#     char *obreak = lbreak;                      \
	mov B, BP
	add B, 16777213
	load A, B
	mov B, lcontinue
	store A, B
	.loc 7 6661 0
	# 
	.loc 7 6655 0
	#     lcontinue = cont;                           \
	mov B, BP
	add B, 16777212
	load A, B
	mov B, lbreak
	store A, B
	.loc 7 6731 0
	#     if (!is_keyword(tok, KWHILE))
	mov A, 0
	mov B, SP
	mov A, .L6973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L6973:
	mov A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 6732 0
	#         errort(tok, "'while' is expected, but got %s", tok2s(tok));
	.loc 6 205 0
	# }
	mov A, 354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6731 0
	#     if (!is_keyword(tok, KWHILE))
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_keyword
	.L6974:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L6975, A, 0
	.loc 7 6732 0
	#         errort(tok, "'while' is expected, but got %s", tok2s(tok));
	.loc 7 6731 0
	#     if (!is_keyword(tok, KWHILE))
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L6976:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6732 0
	#         errort(tok, "'while' is expected, but got %s", tok2s(tok));
.data
	.L6977:
	.string "'while' is expected, but got %s"
.text
	mov A, .L6977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6731 0
	#     if (!is_keyword(tok, KWHILE))
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L6978:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6732 0
	#         errort(tok, "'while' is expected, but got %s", tok2s(tok));
.data
	.L6979:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L6979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L6980:
	mov A, B
	add SP, 4
	.L6975:
	.loc 7 6734 0
	#     Node *cond = read_boolean_expr();
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6981:
	mov A, B
	add SP, 1
	.loc 7 6735 0
	#     expect(')');
	mov A, 0
	mov B, SP
	mov A, .L6982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_boolean_expr
	.L6982:
	mov A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 6736 0
	#     expect(';');
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6983:
	mov A, B
	add SP, 1
	.loc 7 6737 0
	# 
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L6984:
	mov A, B
	add SP, 1
	.loc 7 6739 0
	#     vec_push(v, ast_dest(beg));
	mov A, 0
	mov B, SP
	mov A, .L6985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L6985:
	mov A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 6740 0
	#     if (body)
	.loc 7 6726 0
	#     char *end = make_label();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L6986:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6739 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6987:
	mov A, B
	add SP, 2
	.loc 7 6741 0
	#         vec_push(v, body);
	.loc 7 6729 0
	#     RESTORE_JUMP_LABELS();
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L6988, A, 0
	.loc 7 6741 0
	#         vec_push(v, body);
	.loc 7 6729 0
	#     RESTORE_JUMP_LABELS();
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6739 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6989:
	mov A, B
	add SP, 2
	.L6988:
	.loc 7 6743 0
	#     vec_push(v, ast_dest(end));
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6726 0
	#     char *end = make_label();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_jump
	.L6990:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6735 0
	#     expect(')');
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_if
	.L6991:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6739 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6992:
	mov A, B
	add SP, 2
	.loc 7 6744 0
	#     return ast_compound_stmt(v);
	.loc 7 6727 0
	#     SET_JUMP_LABELS(beg, end);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L6993:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6739 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L6994:
	mov A, B
	add SP, 2
	.loc 7 6745 0
	# }
	.loc 7 6739 0
	#     vec_push(v, ast_dest(beg));
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_compound_stmt
	.L6995:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_switch_jump:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6762 0
	# }
	.loc 7 6753 0
	#     if (c->beg == c->end) {
	.loc 7 6760 0
	#     }
	.loc 7 6754 0
	#         cond = ast_binop(type_int, OP_EQ, var, ast_inttype(type_int, c->beg));
	.loc 7 6745 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6754 0
	#         cond = ast_binop(type_int, OP_EQ, var, ast_inttype(type_int, c->beg));
	.loc 7 6745 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6996, A, 0
	.loc 7 6755 0
	#     } else {
	.loc 7 6745 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L6997:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6745 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L6998:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L6999
	.L6996:
	.loc 7 6760 0
	#     }
	.loc 7 6758 0
	#         Node *y = ast_binop(type_int, OP_LE, var, ast_inttype(type_int, c->end));
	mov A, 0
	mov B, SP
	.loc 7 6745 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6758 0
	#         Node *y = ast_binop(type_int, OP_LE, var, ast_inttype(type_int, c->end));
	.loc 7 6745 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L7000:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L7001:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6759 0
	#         cond = ast_binop(type_int, OP_LOGAND, x, y);
	mov A, 0
	mov B, SP
	.loc 7 6745 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_inttype
	.L7002:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6745 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L7003:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6760 0
	#     }
	.loc 7 6759 0
	#         cond = ast_binop(type_int, OP_LOGAND, x, y);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6758 0
	#         Node *y = ast_binop(type_int, OP_LE, var, ast_inttype(type_int, c->end));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7004
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L7004:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777215
	store A, B
	.L6999:
	.loc 7 6762 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6745 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_jump
	.L7005:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6753 0
	#     if (c->beg == c->end) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_if
	.L7006:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
check_case_duplicates:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 6767 0
	#     Case *x = vec_get(cases, len - 1);
	mov A, 0
	mov B, SP
	.loc 7 6762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L7007:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6768 0
	#     for (int i = 0; i < len - 1; i++) {
	mov A, 0
	mov B, SP
	.loc 7 6767 0
	#     Case *x = vec_get(cases, len - 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6768 0
	#     for (int i = 0; i < len - 1; i++) {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L7008:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 6769 0
	#         Case *y = vec_get(cases, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.L1164:
	.loc 7 6769 0
	#         Case *y = vec_get(cases, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6767 0
	#     Case *x = vec_get(cases, len - 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6769 0
	#         Case *y = vec_get(cases, i);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7009, A, 0
	jmp .L7010
	.L7009:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	jmp .L1166
	.L7010:
	.loc 7 6770 0
	#         if (x->end < y->beg || y->end < x->beg)
	mov A, 0
	mov B, SP
	.loc 7 6769 0
	#         Case *y = vec_get(cases, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6762 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L7011:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6771 0
	#             continue;
	.loc 7 6768 0
	#     for (int i = 0; i < len - 1; i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6771 0
	#             continue;
	.loc 7 6770 0
	#         if (x->end < y->beg || y->end < x->beg)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L7012, A, 0
	.loc 7 6771 0
	#             continue;
	.loc 7 6770 0
	#         if (x->end < y->beg || y->end < x->beg)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6771 0
	#             continue;
	.loc 7 6768 0
	#     for (int i = 0; i < len - 1; i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L7012:
	mov A, B
	jeq .L7013, A, 0
	.loc 7 6771 0
	#             continue;
	jmp .L1165
	.L7013:
	.loc 7 6773 0
	#             error("duplicate case value: %d", x->beg);
	.loc 7 6768 0
	#     for (int i = 0; i < len - 1; i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6773 0
	#             error("duplicate case value: %d", x->beg);
	.loc 7 6768 0
	#     for (int i = 0; i < len - 1; i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7014, A, 0
	.loc 7 6773 0
	#             error("duplicate case value: %d", x->beg);
	.loc 7 6768 0
	#     for (int i = 0; i < len - 1; i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6773 0
	#             error("duplicate case value: %d", x->beg);
.data
	.L7015:
	.string "duplicate case value: %d"
.text
	mov A, .L7015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L7016:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7017:
	mov A, B
	add SP, 4
	.L7014:
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 6768 0
	#     for (int i = 0; i < len - 1; i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	.loc 7 6768 0
	#     for (int i = 0; i < len - 1; i++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
.data
	.L7018:
	.string "duplicate case value: %d ... %d"
.text
	mov A, .L7018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L7019:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7020:
	mov A, B
	add SP, 5
	.L1165:
	.loc 7 6769 0
	#         Case *y = vec_get(cases, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 11 352 0
	# #define errort(tok, ...) errorf(__FILE__ ":" STR(__LINE__), token_pos(tok), __VA_ARGS__)
	jmp .L1164
	.L1166:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_switch_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 9
	.loc 7 6811 0
	# }
	.loc 7 6793 0
	#     Node *expr = conv(read_expr());
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7021:
	mov A, B
	add SP, 1
	.loc 7 6794 0
	#     ensure_inttype(expr);
	mov A, 0
	mov B, SP
	mov A, .L7022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expr
	.L7022:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp conv
	.L7023:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6795 0
	#     expect(')');
	.loc 7 6794 0
	#     ensure_inttype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ensure_inttype
	.L7024:
	mov A, B
	add SP, 1
	.loc 7 6796 0
	# 
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7025:
	mov A, B
	add SP, 1
	.loc 7 6798 0
	#     SET_SWITCH_CONTEXT(end);
	mov A, 0
	mov B, SP
	mov A, .L7026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L7026:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6780 0
	#     char *odefaultcase = defaultcase;           \
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, cases
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6781 0
	#     char *obreak = lbreak;                      \
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, defaultcase
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6782 0
	#     cases = make_vector();                      \
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, lbreak
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 6783 0
	#     defaultcase = NULL;                         \
	mov A, .L7027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L7027:
	mov A, B
	mov B, cases
	store A, B
	.loc 7 6784 0
	#     lbreak = brk
	mov A, 0
	mov B, defaultcase
	store A, B
	.loc 7 6785 0
	# 
	.loc 7 6798 0
	#     SET_SWITCH_CONTEXT(end);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, lbreak
	store A, B
	.loc 7 6800 0
	#     Vector *v = make_vector();
	mov A, 0
	mov B, SP
	mov A, .L7028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_stmt
	.L7028:
	mov A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 6801 0
	#     Node *var = ast_lvar(expr->ty, make_tempname());
	mov A, 0
	mov B, SP
	mov A, .L7029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L7029:
	mov A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 6802 0
	#     vec_push(v, ast_binop(expr->ty, '=', var, expr));
	mov A, 0
	mov B, SP
	mov A, .L7030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_tempname
	.L7030:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6794 0
	#     ensure_inttype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_lvar
	.L7031:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 6803 0
	#     for (int i = 0; i < vec_len(cases); i++)
	.loc 7 6794 0
	#     ensure_inttype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6802 0
	#     vec_push(v, ast_binop(expr->ty, '=', var, expr));
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6803 0
	#     for (int i = 0; i < vec_len(cases); i++)
	mov A, 61
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6794 0
	#     ensure_inttype(expr);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7032
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_binop
	.L7032:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6801 0
	#     Node *var = ast_lvar(expr->ty, make_tempname());
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7033:
	mov A, B
	add SP, 2
	.loc 7 6804 0
	#         vec_push(v, make_switch_jump(var, vec_get(cases, i)));
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777207
	mov A, 0
	store A, B
	.L1167:
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, cases
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_len
	.L7034:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7035, A, 0
	jmp .L7036
	.L7035:
	.loc 7 6804 0
	#         vec_push(v, make_switch_jump(var, vec_get(cases, i)));
	jmp .L1169
	.L7036:
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, cases
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_get
	.L7037:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6802 0
	#     vec_push(v, ast_binop(expr->ty, '=', var, expr));
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_switch_jump
	.L7038:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6801 0
	#     Node *var = ast_lvar(expr->ty, make_tempname());
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7039
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7039:
	mov A, B
	add SP, 2
	.loc 7 6804 0
	#         vec_push(v, make_switch_jump(var, vec_get(cases, i)));
	.L1168:
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777207
	store A, B
	load A, SP
	add SP, 1
	jmp .L1167
	.L1169:
	.loc 7 6806 0
	#     if (body)
	.loc 7 4124 0
	# }
	mov B, defaultcase
	load A, B
	jeq .L7040, A, 0
	mov B, defaultcase
	load A, B
	jmp .L7041
	.L7040:
	.loc 7 6798 0
	#     SET_SWITCH_CONTEXT(end);
	mov B, BP
	add B, 16777214
	load A, B
	.L7041:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_jump
	.L7042:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6801 0
	#     Node *var = ast_lvar(expr->ty, make_tempname());
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7043
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7043:
	mov A, B
	add SP, 2
	.loc 7 6807 0
	#         vec_push(v, body);
	.loc 7 6800 0
	#     Vector *v = make_vector();
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L7044, A, 0
	.loc 7 6807 0
	#         vec_push(v, body);
	.loc 7 6800 0
	#     Vector *v = make_vector();
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6801 0
	#     Node *var = ast_lvar(expr->ty, make_tempname());
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7045:
	mov A, B
	add SP, 2
	.L7044:
	.loc 7 6809 0
	#     RESTORE_SWITCH_CONTEXT();
	.loc 7 6798 0
	#     SET_SWITCH_CONTEXT(end);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L7046:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6801 0
	#     Node *var = ast_lvar(expr->ty, make_tempname());
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7047:
	mov A, B
	add SP, 2
	.loc 7 6788 0
	#     defaultcase = odefaultcase;                 \
	.loc 7 6780 0
	#     char *odefaultcase = defaultcase;           \
	mov B, BP
	add B, 16777213
	load A, B
	mov B, cases
	store A, B
	.loc 7 6789 0
	#     lbreak = obreak
	.loc 7 6781 0
	#     char *obreak = lbreak;                      \
	mov B, BP
	add B, 16777212
	load A, B
	mov B, defaultcase
	store A, B
	.loc 7 6790 0
	# 
	.loc 7 6782 0
	#     cases = make_vector();                      \
	mov B, BP
	add B, 16777211
	load A, B
	mov B, lbreak
	store A, B
	.loc 7 6811 0
	# }
	.loc 7 6801 0
	#     Node *var = ast_lvar(expr->ty, make_tempname());
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7048
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_compound_stmt
	.L7048:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_label_tail:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6820 0
	# }
	.loc 7 6815 0
	#     Vector *v = make_vector();
	mov A, 0
	mov B, SP
	mov A, .L7049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_stmt
	.L7049:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6816 0
	#     vec_push(v, label);
	mov A, 0
	mov B, SP
	mov A, .L7050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L7050:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6817 0
	#     if (stmt)
	.loc 7 6811 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6816 0
	#     vec_push(v, label);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7051:
	mov A, B
	add SP, 2
	.loc 7 6818 0
	#         vec_push(v, stmt);
	.loc 7 6815 0
	#     Vector *v = make_vector();
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L7052, A, 0
	.loc 7 6818 0
	#         vec_push(v, stmt);
	.loc 7 6815 0
	#     Vector *v = make_vector();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6816 0
	#     vec_push(v, label);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7053:
	mov A, B
	add SP, 2
	.L7052:
	.loc 7 6820 0
	# }
	.loc 7 6816 0
	#     vec_push(v, label);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_compound_stmt
	.L7054:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_case_label:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6839 0
	# }
	.loc 7 6824 0
	#         errort(tok, "stray case label");
	.loc 7 4124 0
	# }
	mov B, cases
	load A, B
	eq A, 0
	jeq .L7055, A, 0
	.loc 7 6824 0
	#         errort(tok, "stray case label");
.data
	.L7056:
	.string "stray case label"
.text
	mov A, .L7056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6820 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7057:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6824 0
	#         errort(tok, "stray case label");
.data
	.L7058:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7058
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7059:
	mov A, B
	add SP, 3
	.L7055:
	.loc 7 6826 0
	#     int beg = read_intexpr();
	mov A, 0
	mov B, SP
	mov A, .L7060
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L7060:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6827 0
	#     if (next_token(KELLIPSIS)) {
	mov A, 0
	mov B, SP
	mov A, .L7061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_intexpr
	.L7061:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6836 0
	#     }
	.loc 7 6828 0
	#         int end = read_intexpr();
	.loc 6 205 0
	# }
	mov A, 347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L7062:
	mov A, B
	add SP, 1
	jeq .L7063, A, 0
	.loc 7 6833 0
	#     } else {
	.loc 7 6829 0
	#         expect(':');
	mov A, 0
	mov B, SP
	mov A, .L7064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_intexpr
	.L7064:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6830 0
	#         if (beg > end)
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7065:
	mov A, B
	add SP, 1
	.loc 7 6831 0
	#             errort(tok, "case region is not in correct order: %d ... %d", beg, end);
	.loc 7 6829 0
	#         expect(':');
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6827 0
	#     if (next_token(KELLIPSIS)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7066, A, 0
	.loc 7 6831 0
	#             errort(tok, "case region is not in correct order: %d ... %d", beg, end);
	.loc 7 6829 0
	#         expect(':');
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6827 0
	#     if (next_token(KELLIPSIS)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6831 0
	#             errort(tok, "case region is not in correct order: %d ... %d", beg, end);
.data
	.L7067:
	.string "case region is not in correct order: %d ... %d"
.text
	mov A, .L7067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6820 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7068:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6831 0
	#             errort(tok, "case region is not in correct order: %d ... %d", beg, end);
.data
	.L7069:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7069
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7070
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7070:
	mov A, B
	add SP, 5
	.L7066:
	.loc 7 6833 0
	#     } else {
	.loc 7 6826 0
	#     int beg = read_intexpr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6829 0
	#         expect(':');
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6827 0
	#     if (next_token(KELLIPSIS)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7071
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_case
	.L7071:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, cases
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7072:
	mov A, B
	add SP, 2
	jmp .L7073
	.L7063:
	.loc 7 6836 0
	#     }
	.loc 7 6835 0
	#         vec_push(cases, make_case(beg, beg, label));
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7074:
	mov A, B
	add SP, 1
	.loc 7 6836 0
	#     }
	.loc 7 6826 0
	#     int beg = read_intexpr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6827 0
	#     if (next_token(KELLIPSIS)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7075
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_case
	.L7075:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, cases
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7076:
	mov A, B
	add SP, 2
	.L7073:
	.loc 7 6838 0
	#     return read_label_tail(ast_dest(label));
	.loc 7 4124 0
	# }
	mov B, cases
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7077
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp check_case_duplicates
	.L7077:
	mov A, B
	add SP, 1
	.loc 7 6839 0
	# }
	.loc 7 6826 0
	#     int beg = read_intexpr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7078
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L7078:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_label_tail
	.L7079:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_default_label:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6847 0
	# }
	.loc 7 6843 0
	#     if (defaultcase)
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7080:
	mov A, B
	add SP, 1
	.loc 7 6844 0
	#         errort(tok, "duplicate default");
	.loc 7 4124 0
	# }
	mov B, defaultcase
	load A, B
	jeq .L7081, A, 0
	.loc 7 6844 0
	#         errort(tok, "duplicate default");
.data
	.L7082:
	.string "duplicate default"
.text
	mov A, .L7082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6839 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7083:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6844 0
	#         errort(tok, "duplicate default");
.data
	.L7084:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7085:
	mov A, B
	add SP, 3
	.L7081:
	.loc 7 6846 0
	#     return read_label_tail(ast_dest(defaultcase));
	mov A, .L7086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_label
	.L7086:
	mov A, B
	mov B, defaultcase
	store A, B
	.loc 7 6847 0
	# }
	.loc 7 4124 0
	# }
	mov B, defaultcase
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_dest
	.L7087:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_label_tail
	.L7088:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_break_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6858 0
	# }
	.loc 7 6855 0
	#     if (!lbreak)
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7089:
	mov A, B
	add SP, 1
	.loc 7 6856 0
	#         errort(tok, "stray break statement");
	.loc 7 4124 0
	# }
	mov B, lbreak
	load A, B
	eq A, 0
	jeq .L7090, A, 0
	.loc 7 6856 0
	#         errort(tok, "stray break statement");
.data
	.L7091:
	.string "stray break statement"
.text
	mov A, .L7091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6847 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7092:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6856 0
	#         errort(tok, "stray break statement");
.data
	.L7093:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7094
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7094:
	mov A, B
	add SP, 3
	.L7090:
	.loc 7 6858 0
	# }
	.loc 7 4124 0
	# }
	mov B, lbreak
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7095
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_jump
	.L7095:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_continue_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6865 0
	# }
	.loc 7 6862 0
	#     if (!lcontinue)
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7096:
	mov A, B
	add SP, 1
	.loc 7 6863 0
	#         errort(tok, "stray continue statement");
	.loc 7 4124 0
	# }
	mov B, lcontinue
	load A, B
	eq A, 0
	jeq .L7097, A, 0
	.loc 7 6863 0
	#         errort(tok, "stray continue statement");
.data
	.L7098:
	.string "stray continue statement"
.text
	mov A, .L7098
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6858 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7099:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6863 0
	#         errort(tok, "stray continue statement");
.data
	.L7100:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7101:
	mov A, B
	add SP, 3
	.L7097:
	.loc 7 6865 0
	# }
	.loc 7 4124 0
	# }
	mov B, lcontinue
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_jump
	.L7102:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_return_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6873 0
	# }
	.loc 7 6869 0
	#     expect(';');
	mov A, 0
	mov B, SP
	mov A, .L7103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expr_opt
	.L7103:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6870 0
	#     if (retval)
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7104:
	mov A, B
	add SP, 1
	.loc 7 6871 0
	#         return ast_return(ast_conv(current_func_type->rettype, retval));
	.loc 7 6869 0
	#     expect(';');
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L7105, A, 0
	.loc 7 6871 0
	#         return ast_return(ast_conv(current_func_type->rettype, retval));
	.loc 7 6869 0
	#     expect(';');
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6871 0
	#         return ast_return(ast_conv(current_func_type->rettype, retval));
	.loc 7 4124 0
	# }
	mov B, current_func_type
	load A, B
	mov B, A
	add B, 12
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_conv
	.L7106:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_return
	.L7107:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L7105:
	.loc 7 6873 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_return
	.L7108:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_goto_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 6891 0
	# }
	.loc 7 6883 0
	#     }
	.loc 7 6877 0
	#         // [GNU] computed goto. "goto *p" jumps to the address pointed by p.
	mov A, 42
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7109
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L7109:
	mov A, B
	add SP, 1
	jeq .L7110, A, 0
	.loc 7 6883 0
	#     }
	.loc 7 6879 0
	#         Node *expr = read_cast_expr();
	mov A, 0
	mov B, SP
	mov A, .L7111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L7111:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6880 0
	#         if (expr->ty->kind != KIND_PTR)
	mov A, 0
	mov B, SP
	mov A, .L7112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_cast_expr
	.L7112:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6881 0
	#             errort(tok, "pointer expected for computed goto, but got %s", node2s(expr));
	.loc 7 6880 0
	#         if (expr->ty->kind != KIND_PTR)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L7113, A, 0
	.loc 7 6881 0
	#             errort(tok, "pointer expected for computed goto, but got %s", node2s(expr));
	.loc 7 6880 0
	#         if (expr->ty->kind != KIND_PTR)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7114
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp node2s
	.L7114:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6881 0
	#             errort(tok, "pointer expected for computed goto, but got %s", node2s(expr));
.data
	.L7115:
	.string "pointer expected for computed goto, but got %s"
.text
	mov A, .L7115
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6879 0
	#         Node *expr = read_cast_expr();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7116:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6881 0
	#             errort(tok, "pointer expected for computed goto, but got %s", node2s(expr));
.data
	.L7117:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7118:
	mov A, B
	add SP, 4
	.L7113:
	.loc 7 6883 0
	#     }
	.loc 7 6880 0
	#         if (expr->ty->kind != KIND_PTR)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_computed_goto
	.L7119:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L7110:
	.loc 7 6885 0
	#     if (!tok || tok->kind != TIDENT)
	mov A, 0
	mov B, SP
	mov A, .L7120
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L7120:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6886 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 6885 0
	#     if (!tok || tok->kind != TIDENT)
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	mov B, 1
	jne .L7121, A, 0
	.loc 7 6886 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 6885 0
	#     if (!tok || tok->kind != TIDENT)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L7121:
	mov A, B
	jeq .L7122, A, 0
	.loc 7 6886 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
	.loc 7 6885 0
	#     if (!tok || tok->kind != TIDENT)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L7123:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6886 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L7124:
	.string "identifier expected, but got %s"
.text
	mov A, .L7124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6885 0
	#     if (!tok || tok->kind != TIDENT)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7125:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6886 0
	#         errort(tok, "identifier expected, but got %s", tok2s(tok));
.data
	.L7126:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7127:
	mov A, B
	add SP, 4
	.L7122:
	.loc 7 6888 0
	#     Node *r = ast_goto(tok->sval);
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7128:
	mov A, B
	add SP, 1
	.loc 7 6889 0
	#     vec_push(gotos, r);
	mov A, 0
	mov B, SP
	.loc 7 6885 0
	#     if (!tok || tok->kind != TIDENT)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_goto
	.L7129:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6890 0
	#     return r;
	.loc 7 6889 0
	#     vec_push(gotos, r);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, gotos
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7130:
	mov A, B
	add SP, 2
	.loc 7 6891 0
	# }
	.loc 7 6889 0
	#     vec_push(gotos, r);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_label:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6900 0
	# }
	.loc 7 6895 0
	#     if (map_get(labels, label))
	mov A, 0
	mov B, SP
	.loc 7 6891 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6896 0
	#         errort(tok, "duplicate label: %s", tok2s(tok));
	.loc 7 6895 0
	#     if (map_get(labels, label))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, labels
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_get
	.L7131:
	mov A, B
	add SP, 2
	jeq .L7132, A, 0
	.loc 7 6896 0
	#         errort(tok, "duplicate label: %s", tok2s(tok));
	.loc 7 6891 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L7133:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6896 0
	#         errort(tok, "duplicate label: %s", tok2s(tok));
.data
	.L7134:
	.string "duplicate label: %s"
.text
	mov A, .L7134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6891 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7135:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6896 0
	#         errort(tok, "duplicate label: %s", tok2s(tok));
.data
	.L7136:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7137:
	mov A, B
	add SP, 4
	.L7132:
	.loc 7 6898 0
	#     map_put(labels, label, r);
	mov A, 0
	mov B, SP
	.loc 7 6895 0
	#     if (map_get(labels, label))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_label
	.L7138:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6899 0
	#     return read_label_tail(r);
	.loc 7 6898 0
	#     map_put(labels, label, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6895 0
	#     if (map_get(labels, label))
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, labels
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp map_put
	.L7139:
	mov A, B
	add SP, 3
	.loc 7 6900 0
	# }
	.loc 7 6898 0
	#     map_put(labels, label, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_label_tail
	.L7140:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6930 0
	# }
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov A, 0
	mov B, SP
	mov A, .L7141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get
	.L7141:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6922 0
	#         }
	.loc 7 6909 0
	#         switch (tok->id) {
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7142, A, 0
	.loc 7 6922 0
	#         }
	.loc 7 6910 0
	#         case '{':       return read_compound_stmt();
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6922 0
	#         }
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 123
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7143, A, 0
	jmp .L1171
	.L7143:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 330
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7144, A, 0
	jmp .L1172
	.L7144:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 327
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7145, A, 0
	jmp .L1173
	.L7145:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 354
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7146, A, 0
	jmp .L1174
	.L7146:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 321
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7147, A, 0
	jmp .L1175
	.L7147:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 338
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7148, A, 0
	jmp .L1176
	.L7148:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 346
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7149, A, 0
	jmp .L1177
	.L7149:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 315
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7150, A, 0
	jmp .L1178
	.L7150:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 320
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7151, A, 0
	jmp .L1179
	.L7151:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 314
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7152, A, 0
	jmp .L1180
	.L7152:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 319
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7153, A, 0
	jmp .L1181
	.L7153:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 329
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7154, A, 0
	jmp .L1182
	.L7154:
	jmp .L1170
	.loc 7 6911 0
	#         case KIF:       return read_if_stmt();
	.L1171:
	mov A, .L7155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_compound_stmt
	.L7155:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6912 0
	#         case KFOR:      return read_for_stmt();
	.L1172:
	mov A, .L7156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_if_stmt
	.L7156:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6913 0
	#         case KWHILE:    return read_while_stmt();
	.L1173:
	mov A, .L7157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_for_stmt
	.L7157:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6914 0
	#         case KDO:       return read_do_stmt();
	.L1174:
	mov A, .L7158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_while_stmt
	.L7158:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6915 0
	#         case KRETURN:   return read_return_stmt();
	.L1175:
	mov A, .L7159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_do_stmt
	.L7159:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6916 0
	#         case KSWITCH:   return read_switch_stmt();
	.L1176:
	mov A, .L7160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_return_stmt
	.L7160:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6917 0
	#         case KCASE:     return read_case_label(tok);
	.L1177:
	mov A, .L7161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_switch_stmt
	.L7161:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6918 0
	#         case KDEFAULT:  return read_default_label(tok);
	.L1178:
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_case_label
	.L7162:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6919 0
	#         case KBREAK:    return read_break_stmt(tok);
	.L1179:
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_default_label
	.L7163:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6920 0
	#         case KCONTINUE: return read_continue_stmt(tok);
	.L1180:
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_break_stmt
	.L7164:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6921 0
	#         case KGOTO:     return read_goto_stmt();
	.L1181:
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_continue_stmt
	.L7165:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6922 0
	#         }
	.L1182:
	mov A, .L7166
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_goto_stmt
	.L7166:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1170:
	.L7142:
	.loc 7 6925 0
	#         return read_label(tok);
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L7167, A, 0
	.loc 7 6925 0
	#         return read_label(tok);
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7168
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L7168:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L7167:
	mov A, B
	jeq .L7169, A, 0
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_label
	.L7170:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L7169:
	.loc 7 6927 0
	#     Node *r = read_expr_opt();
	.loc 7 6908 0
	#     if (tok->kind == TKEYWORD) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unget_token
	.L7171:
	mov A, B
	add SP, 1
	.loc 7 6928 0
	#     expect(';');
	mov A, 0
	mov B, SP
	mov A, .L7172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_expr_opt
	.L7172:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6929 0
	#     return r;
	mov A, 59
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7173
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp expect
	.L7173:
	mov A, B
	add SP, 1
	.loc 7 6930 0
	# }
	.loc 7 6928 0
	#     expect(';');
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_compound_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6943 0
	# }
	.loc 7 6934 0
	#     localenv = make_map_parent(localenv);
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6935 0
	#     Vector *list = make_vector();
	.loc 7 4124 0
	# }
	mov B, localenv
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_map_parent
	.L7174:
	mov A, B
	add SP, 1
	mov B, localenv
	store A, B
	.loc 7 6936 0
	#     for (;;) {
	mov A, 0
	mov B, SP
	mov A, .L7175
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L7175:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6940 0
	#     }
	.L1183:
	.loc 7 6938 0
	#             break;
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7176
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L7176:
	mov A, B
	add SP, 1
	jeq .L7177, A, 0
	jmp .L1185
	.L7177:
	.loc 7 6940 0
	#     }
	.loc 7 6936 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl_or_stmt
	.L7178:
	mov A, B
	add SP, 1
	.loc 7 6940 0
	#     }
	.L1184:
	jmp .L1183
	.L1185:
	.loc 7 6942 0
	#     return ast_compound_stmt(list);
	.loc 7 6934 0
	#     localenv = make_map_parent(localenv);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, localenv
	store A, B
	.loc 7 6943 0
	# }
	.loc 7 6936 0
	#     for (;;) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_compound_stmt
	.L7179:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_decl_or_stmt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6957 0
	#             vec_push(list, stmt);
	.loc 7 6947 0
	#     if (tok->kind == TEOF)
	mov A, 0
	mov B, SP
	mov A, .L7180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L7180:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6948 0
	#         error("premature end of input");
	.loc 7 6947 0
	#     if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7181, A, 0
	.loc 7 6948 0
	#         error("premature end of input");
.data
	.L7182:
	.string "premature end of input"
.text
	mov A, .L7182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L7183:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7184:
	mov A, B
	add SP, 3
	.L7181:
	.loc 7 6950 0
	#     if (is_type(tok)) {
	mov A, .L7185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp mark_location
	.L7185:
	mov A, B
	.loc 7 6957 0
	#             vec_push(list, stmt);
	.loc 7 6951 0
	#         read_decl(list, false);
	.loc 7 6947 0
	#     if (tok->kind == TEOF)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_type
	.L7186:
	mov A, B
	add SP, 1
	jeq .L7187, A, 0
	.loc 7 6952 0
	#     } else if (next_token(KSTATIC_ASSERT)) {
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6943 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl
	.L7188:
	mov A, B
	add SP, 2
	jmp .L7189
	.L7187:
	.loc 7 6957 0
	#             vec_push(list, stmt);
	.loc 7 6952 0
	#     } else if (next_token(KSTATIC_ASSERT)) {
	.loc 6 205 0
	# }
	mov A, 344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7190
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp next_token
	.L7190:
	mov A, B
	add SP, 1
	jeq .L7191, A, 0
	.loc 7 6954 0
	#     } else {
	mov A, .L7192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_static_assert
	.L7192:
	mov A, B
	jmp .L7193
	.L7191:
	.loc 7 6957 0
	#             vec_push(list, stmt);
	.loc 7 6956 0
	#         if (stmt)
	mov A, 0
	mov B, SP
	mov A, .L7194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_stmt
	.L7194:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6957 0
	#             vec_push(list, stmt);
	.loc 7 6956 0
	#         if (stmt)
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L7195, A, 0
	.loc 7 6957 0
	#             vec_push(list, stmt);
	.loc 7 6956 0
	#         if (stmt)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6943 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7196:
	mov A, B
	add SP, 2
	.L7195:
	.L7193:
	.L7189:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_toplevels:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	.loc 7 6967 0
	#     for (;;) {
	mov A, .L7197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L7197:
	mov A, B
	mov B, toplevels
	store A, B
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	.L1186:
	.loc 7 6969 0
	#             return toplevels;
	mov A, .L7198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L7198:
	mov A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7199, A, 0
	.loc 7 6969 0
	#             return toplevels;
	.loc 7 4124 0
	# }
	mov B, toplevels
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L7199:
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	mov A, .L7200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp is_funcdef
	.L7200:
	mov A, B
	jeq .L7201, A, 0
	mov A, .L7202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_funcdef
	.L7202:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, toplevels
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7203:
	mov A, B
	add SP, 2
	jmp .L7204
	.L7201:
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, toplevels
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_decl
	.L7205:
	mov A, B
	add SP, 2
	.L7204:
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	.L1187:
	jmp .L1186
	.L1188:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
concatenate_string:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 6999 0
	# }
	.loc 7 6984 0
	#     Buffer *b = make_buffer();
	mov A, 0
	mov B, SP
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6985 0
	#     buf_append(b, tok->sval, tok->slen - 1);
	mov A, 0
	mov B, SP
	mov A, .L7206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_buffer
	.L7206:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6986 0
	#     while (peek()->kind == TSTRING) {
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6986 0
	#     while (peek()->kind == TSTRING) {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6985 0
	#     buf_append(b, tok->sval, tok->slen - 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_append
	.L7207:
	mov A, B
	add SP, 3
	.loc 7 6993 0
	#             enc = enc2;
	.L1189:
	.loc 7 6987 0
	#         Token *tok2 = read_token();
	mov A, .L7208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L7208:
	mov A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7209, A, 0
	.loc 7 6993 0
	#             enc = enc2;
	.loc 7 6988 0
	#         buf_append(b, tok2->sval, tok2->slen - 1);
	mov A, 0
	mov B, SP
	mov A, .L7210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_token
	.L7210:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6989 0
	#         int enc2 = tok2->enc;
	.loc 7 6988 0
	#         buf_append(b, tok2->sval, tok2->slen - 1);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6989 0
	#         int enc2 = tok2->enc;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6988 0
	#         buf_append(b, tok2->sval, tok2->slen - 1);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6985 0
	#     buf_append(b, tok->sval, tok->slen - 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_append
	.L7211:
	mov A, B
	add SP, 3
	.loc 7 6990 0
	#         if (enc != ENC_NONE && enc2 != ENC_NONE && enc != enc2)
	mov A, 0
	mov B, SP
	.loc 7 6988 0
	#         buf_append(b, tok2->sval, tok2->slen - 1);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 11
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6991 0
	#             errort(tok2, "unsupported non-standard concatenation of string literals: %s", tok2s(tok2));
	.loc 7 6984 0
	#     Buffer *b = make_buffer();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L7213, A, 0
	.loc 7 6991 0
	#             errort(tok2, "unsupported non-standard concatenation of string literals: %s", tok2s(tok2));
	.loc 7 6990 0
	#         if (enc != ENC_NONE && enc2 != ENC_NONE && enc != enc2)
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L7213:
	mov A, B
	mov B, 0
	jeq .L7212, A, 0
	.loc 7 6991 0
	#             errort(tok2, "unsupported non-standard concatenation of string literals: %s", tok2s(tok2));
	.loc 7 6984 0
	#     Buffer *b = make_buffer();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6990 0
	#         if (enc != ENC_NONE && enc2 != ENC_NONE && enc != enc2)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L7212:
	mov A, B
	jeq .L7214, A, 0
	.loc 7 6991 0
	#             errort(tok2, "unsupported non-standard concatenation of string literals: %s", tok2s(tok2));
	.loc 7 6988 0
	#         buf_append(b, tok2->sval, tok2->slen - 1);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tok2s
	.L7215:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6991 0
	#             errort(tok2, "unsupported non-standard concatenation of string literals: %s", tok2s(tok2));
.data
	.L7216:
	.string "unsupported non-standard concatenation of string literals: %s"
.text
	mov A, .L7216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6988 0
	#         buf_append(b, tok2->sval, tok2->slen - 1);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7217:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6991 0
	#             errort(tok2, "unsupported non-standard concatenation of string literals: %s", tok2s(tok2));
.data
	.L7218:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7219:
	mov A, B
	add SP, 4
	.L7214:
	.loc 7 6993 0
	#             enc = enc2;
	.loc 7 6984 0
	#     Buffer *b = make_buffer();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7220, A, 0
	.loc 7 6993 0
	#             enc = enc2;
	.loc 7 6990 0
	#         if (enc != ENC_NONE && enc2 != ENC_NONE && enc != enc2)
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L7220:
	jmp .L7221
	.L7209:
	.loc 7 6993 0
	#             enc = enc2;
	jmp .L1190
	.L7221:
	jmp .L1189
	.L1190:
	.loc 7 6996 0
	#     tok->sval = buf_body(b);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6985 0
	#     buf_append(b, tok->sval, tok->slen - 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7222
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_write
	.L7222:
	mov A, B
	add SP, 2
	.loc 7 6997 0
	#     tok->slen = buf_len(b);
	.loc 7 6985 0
	#     buf_append(b, tok->sval, tok->slen - 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_body
	.L7223:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 6998 0
	#     tok->enc = enc;
	.loc 7 6985 0
	#     buf_append(b, tok->sval, tok->slen - 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp buf_len
	.L7224:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 6999 0
	# }
	.loc 7 6984 0
	#     Buffer *b = make_buffer();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6971 0
	#             vec_push(toplevels, read_funcdef());
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 11
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
get:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7008 0
	# }
	.loc 7 7003 0
	#     if (r->kind == TINVALID)
	mov A, 0
	mov B, SP
	mov A, .L7225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_token
	.L7225:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7004 0
	#         errort(r, "stray character in program: '%c'", r->c);
	.loc 7 7003 0
	#     if (r->kind == TINVALID)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7226, A, 0
	.loc 7 7004 0
	#         errort(r, "stray character in program: '%c'", r->c);
	.loc 7 7003 0
	#     if (r->kind == TINVALID)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7004 0
	#         errort(r, "stray character in program: '%c'", r->c);
.data
	.L7227:
	.string "stray character in program: '%c'"
.text
	mov A, .L7227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7003 0
	#     if (r->kind == TINVALID)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp token_pos
	.L7228:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7004 0
	#         errort(r, "stray character in program: '%c'", r->c);
.data
	.L7229:
	.string "/Users/nullpo/dev/elvm/out/8cc.h:432"
.text
	mov A, .L7229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7230
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp errorf
	.L7230:
	mov A, B
	add SP, 4
	.L7226:
	.loc 7 7006 0
	#         concatenate_string(r);
	.loc 7 7003 0
	#     if (r->kind == TINVALID)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L7231, A, 0
	.loc 7 7006 0
	#         concatenate_string(r);
	mov A, .L7232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L7232:
	mov A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L7231:
	mov A, B
	jeq .L7233, A, 0
	.loc 7 7006 0
	#         concatenate_string(r);
	.loc 7 7003 0
	#     if (r->kind == TINVALID)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp concatenate_string
	.L7234:
	mov A, B
	add SP, 1
	.L7233:
	.loc 7 7008 0
	# }
	.loc 7 7003 0
	#     if (r->kind == TINVALID)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
peek:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7012 0
	# }
	mov A, .L7235
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek_token
	.L7235:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
define_builtin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7020 0
	# }
	.loc 7 7012 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7020 0
	# }
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7012 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_func_type
	.L7236:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ast_gvar
	.L7237:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parse_init:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 7031 0
	# }
	.loc 7 7024 0
	#     Vector *two_voidptrs = make_vector();
	mov A, 0
	mov B, SP
	.loc 7 4124 0
	# }
	mov B, type_void
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L7238:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector1
	.L7239:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7025 0
	#     vec_push(two_voidptrs, make_ptr_type(type_void));
	mov A, 0
	mov B, SP
	mov A, .L7240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_vector
	.L7240:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7026 0
	#     vec_push(two_voidptrs, make_ptr_type(type_void));
	.loc 7 4124 0
	# }
	mov B, type_void
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L7241:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7025 0
	#     vec_push(two_voidptrs, make_ptr_type(type_void));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7242:
	mov A, B
	add SP, 2
	.loc 7 7027 0
	#     define_builtin("__builtin_return_address", make_ptr_type(type_void), voidptr);
	.loc 7 4124 0
	# }
	mov B, type_void
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L7243:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7025 0
	#     vec_push(two_voidptrs, make_ptr_type(type_void));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7244:
	mov A, B
	add SP, 2
	.loc 7 7028 0
	#     define_builtin("__builtin_reg_class", type_int, voidptr);
	.loc 7 7024 0
	#     Vector *two_voidptrs = make_vector();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7028 0
	#     define_builtin("__builtin_reg_class", type_int, voidptr);
	.loc 7 4124 0
	# }
	mov B, type_void
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp make_ptr_type
	.L7245:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7028 0
	#     define_builtin("__builtin_reg_class", type_int, voidptr);
.data
	.L7246:
	.string "__builtin_return_address"
.text
	mov A, .L7246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_builtin
	.L7247:
	mov A, B
	add SP, 3
	.loc 7 7029 0
	#     define_builtin("__builtin_va_arg", type_void, two_voidptrs);
	.loc 7 7024 0
	#     Vector *two_voidptrs = make_vector();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_int
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7029 0
	#     define_builtin("__builtin_va_arg", type_void, two_voidptrs);
.data
	.L7248:
	.string "__builtin_reg_class"
.text
	mov A, .L7248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_builtin
	.L7249:
	mov A, B
	add SP, 3
	.loc 7 7030 0
	#     define_builtin("__builtin_va_start", type_void, voidptr);
	.loc 7 7025 0
	#     vec_push(two_voidptrs, make_ptr_type(type_void));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_void
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7030 0
	#     define_builtin("__builtin_va_start", type_void, voidptr);
.data
	.L7250:
	.string "__builtin_va_arg"
.text
	mov A, .L7250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_builtin
	.L7251:
	mov A, B
	add SP, 3
	.loc 7 7031 0
	# }
	.loc 7 7024 0
	#     Vector *two_voidptrs = make_vector();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4124 0
	# }
	mov B, type_void
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7031 0
	# }
.data
	.L7252:
	.string "__builtin_va_start"
.text
	mov A, .L7252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp define_builtin
	.L7253:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
set_add:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7110 0
	# }
	.loc 7 7107 0
	#     r->next = s;
	mov A, 0
	mov B, SP
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L7254:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7108 0
	#     r->v = v;
	.loc 7 7031 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7107 0
	#     r->next = s;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7109 0
	#     return r;
	.loc 7 7031 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7107 0
	#     r->next = s;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7110 0
	# }
	.loc 7 7107 0
	#     r->next = s;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
set_has:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7117 0
	# }
	.loc 7 7114 0
	#         if (!strcmp(s->v, v))
	.L1191:
	.loc 7 7110 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L7255, A, 0
	jmp .L7256
	.L7255:
	.loc 7 7114 0
	#         if (!strcmp(s->v, v))
	jmp .L1193
	.L7256:
	.loc 7 7110 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7114 0
	#         if (!strcmp(s->v, v))
	.loc 7 7110 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L7257:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L7258, A, 0
	.loc 7 7114 0
	#         if (!strcmp(s->v, v))
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L7258:
	.L1192:
	.loc 7 7110 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7114 0
	#         if (!strcmp(s->v, v))
	jmp .L1191
	.L1193:
	.loc 7 7117 0
	# }
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
set_union:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7125 0
	# }
	.loc 7 7121 0
	#     for (; a; a = a->next)
	mov A, 0
	mov B, SP
	.loc 7 7117 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7122 0
	#         if (!set_has(b, a->v))
	.L1194:
	.loc 7 7117 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L7259, A, 0
	jmp .L7260
	.L7259:
	.loc 7 7122 0
	#         if (!set_has(b, a->v))
	jmp .L1196
	.L7260:
	.loc 7 7117 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp set_has
	.L7261:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L7262, A, 0
	.loc 7 7122 0
	#         if (!set_has(b, a->v))
	.loc 7 7117 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7121 0
	#     for (; a; a = a->next)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp set_add
	.L7263:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.L7262:
	.loc 7 7122 0
	#         if (!set_has(b, a->v))
	.L1195:
	.loc 7 7117 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7122 0
	#         if (!set_has(b, a->v))
	jmp .L1194
	.L1196:
	.loc 7 7125 0
	# }
	.loc 7 7121 0
	#     for (; a; a = a->next)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
set_intersection:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7133 0
	# }
	.loc 7 7129 0
	#     for (; a; a = a->next)
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7130 0
	#         if (set_has(b, a->v))
	.L1197:
	.loc 7 7125 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L7264, A, 0
	jmp .L7265
	.L7264:
	.loc 7 7130 0
	#         if (set_has(b, a->v))
	jmp .L1199
	.L7265:
	.loc 7 7125 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp set_has
	.L7266:
	mov A, B
	add SP, 2
	jeq .L7267, A, 0
	.loc 7 7130 0
	#         if (set_has(b, a->v))
	.loc 7 7125 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7129 0
	#     for (; a; a = a->next)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp set_add
	.L7268:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.L7267:
	.loc 7 7130 0
	#         if (set_has(b, a->v))
	.L1198:
	.loc 7 7125 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7130 0
	#         if (set_has(b, a->v))
	jmp .L1197
	.L1199:
	.loc 7 7133 0
	# }
	.loc 7 7129 0
	#     for (; a; a = a->next)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
max:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7148 0
	# }
	.loc 7 7133 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7269, A, 0
	mov B, BP
	add B, 2
	load A, B
	jmp .L7270
	.L7269:
	mov B, BP
	add B, 3
	load A, B
	.L7270:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
roundup:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7157 0
	# }
	.loc 7 7152 0
	#         return 0;
	.loc 7 7148 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7152 0
	#         return 0;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7271, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L7271:
	.loc 7 7154 0
	#     while (n > r)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 1
	store A, B
	.loc 7 7155 0
	#         r *= 2;
	.L1200:
	.loc 7 7154 0
	#     while (n > r)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7148 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7272, A, 0
	.loc 7 7155 0
	#         r *= 2;
	.loc 7 7154 0
	#     while (n > r)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7155 0
	#         r *= 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7273:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L7274
	.L7272:
	jmp .L1201
	.L7274:
	jmp .L1200
	.L1201:
	.loc 7 7157 0
	# }
	.loc 7 7154 0
	#     while (n > r)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
do_make_vector:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7167 0
	# }
	.loc 7 7161 0
	#     size = roundup(size);
	mov A, 0
	mov B, SP
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L7275:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7162 0
	#     if (size > 0)
	.loc 7 7157 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp roundup
	.L7276:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7163 0
	#         r->body = malloc(sizeof(void *) * size);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7157 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7277, A, 0
	.loc 7 7163 0
	#         r->body = malloc(sizeof(void *) * size);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7157 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7278:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L7279:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7161 0
	#     size = roundup(size);
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L7277:
	.loc 7 7165 0
	#     r->nalloc = size;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7161 0
	#     size = roundup(size);
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7166 0
	#     return r;
	.loc 7 7157 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7161 0
	#     size = roundup(size);
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7167 0
	# }
	.loc 7 7161 0
	#     size = roundup(size);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_vector:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7171 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_make_vector
	.L7280:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
extend:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 7181 0
	# }
	.loc 7 7175 0
	#         return;
	.loc 7 7171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7175 0
	#         return;
	.loc 7 7171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L7281, A, 0
	.loc 7 7175 0
	#         return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L7281:
	.loc 7 7177 0
	#     void *newbody = malloc(sizeof(void *) * nelem);
	mov A, 0
	mov B, SP
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp roundup
	.L7282:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp max
	.L7283:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7178 0
	#     memcpy(newbody, vec->body, sizeof(void *) * vec->len);
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7177 0
	#     void *newbody = malloc(sizeof(void *) * nelem);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7284:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L7285:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7179 0
	#     vec->body = newbody;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7286:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7179 0
	#     vec->body = newbody;
	.loc 7 7171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7178 0
	#     memcpy(newbody, vec->body, sizeof(void *) * vec->len);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L7287:
	mov A, B
	add SP, 3
	.loc 7 7180 0
	#     vec->nalloc = nelem;
	.loc 7 7178 0
	#     memcpy(newbody, vec->body, sizeof(void *) * vec->len);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7181 0
	# }
	.loc 7 7177 0
	#     void *newbody = malloc(sizeof(void *) * nelem);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
make_vector1:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7187 0
	# }
	.loc 7 7185 0
	#     vec_push(r, e);
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_make_vector
	.L7288:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7186 0
	#     return r;
	.loc 7 7181 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7185 0
	#     vec_push(r, e);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vec_push
	.L7289:
	mov A, B
	add SP, 2
	.loc 7 7187 0
	# }
	.loc 7 7185 0
	#     vec_push(r, e);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_copy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7194 0
	# }
	.loc 7 7191 0
	#     memcpy(r->body, src->body, sizeof(void *) * src->len);
	mov A, 0
	mov B, SP
	.loc 7 7187 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_make_vector
	.L7290:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7192 0
	#     r->len = src->len;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7187 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7291:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7192 0
	#     r->len = src->len;
	.loc 7 7187 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7192 0
	#     r->len = src->len;
	.loc 7 7191 0
	#     memcpy(r->body, src->body, sizeof(void *) * src->len);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L7292:
	mov A, B
	add SP, 3
	.loc 7 7193 0
	#     return r;
	.loc 7 7187 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7191 0
	#     memcpy(r->body, src->body, sizeof(void *) * src->len);
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7194 0
	# }
	.loc 7 7191 0
	#     memcpy(r->body, src->body, sizeof(void *) * src->len);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_push:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7199 0
	# }
	.loc 7 7198 0
	#     vec->body[vec->len++] = elem;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7194 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp extend
	.L7293:
	mov A, B
	add SP, 2
	.loc 7 7199 0
	# }
	.loc 7 7194 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7199 0
	# }
	.loc 7 7194 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7199 0
	# }
	.loc 7 7194 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_append:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7205 0
	# }
	.loc 7 7203 0
	#     memcpy(a->body + a->len, b->body, sizeof(void *) * b->len);
	.loc 7 7199 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp extend
	.L7294:
	mov A, B
	add SP, 2
	.loc 7 7204 0
	#     a->len += b->len;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7199 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7295:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7204 0
	#     a->len += b->len;
	.loc 7 7199 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7204 0
	#     a->len += b->len;
	.loc 7 7199 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7204 0
	#     a->len += b->len;
	.loc 7 7199 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L7296:
	mov A, B
	add SP, 3
	.loc 7 7205 0
	# }
	.loc 7 7199 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7205 0
	# }
	.loc 7 7199 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_pop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7210 0
	# }
	.loc 12 12 0
	#     }                                           \
	.L1202:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L7297, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L7298:
	.string "assertion failed: vec->len > 0\n"
.text
	mov A, .L7298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L7299:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L7297:
	mov A, 0
	jeq .L7300, A, 0
	jmp .L1202
	.L7300:
	.L1203:
	.loc 7 7210 0
	# }
	.loc 7 7205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7210 0
	# }
	.loc 7 7205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	sub A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_get:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7215 0
	# }
	.loc 12 12 0
	#     }                                           \
	.L1204:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7210 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L7301, A, 0
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 7210 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 7210 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L7301:
	mov A, B
	eq A, 0
	jeq .L7302, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L7303:
	.string "assertion failed: 0 <= index && index < vec->len\n"
.text
	mov A, .L7303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L7304:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L7302:
	mov A, 0
	jeq .L7305, A, 0
	jmp .L1204
	.L7305:
	.L1205:
	.loc 7 7215 0
	# }
	.loc 7 7210 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_set:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7220 0
	# }
	.loc 12 12 0
	#     }                                           \
	.L1206:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7215 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L7306, A, 0
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 7215 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 7215 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L7306:
	mov A, B
	eq A, 0
	jeq .L7307, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L7308:
	.string "assertion failed: 0 <= index && index < vec->len\n"
.text
	mov A, .L7308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L7309:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L7307:
	mov A, 0
	jeq .L7310, A, 0
	jmp .L1206
	.L7310:
	.L1207:
	.loc 7 7220 0
	# }
	.loc 7 7215 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7220 0
	# }
	.loc 7 7215 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_head:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7225 0
	# }
	.loc 12 12 0
	#     }                                           \
	.L1208:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7220 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L7311, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L7312:
	.string "assertion failed: vec->len > 0\n"
.text
	mov A, .L7312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L7313:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L7311:
	mov A, 0
	jeq .L7314, A, 0
	jmp .L1208
	.L7314:
	.L1209:
	.loc 7 7225 0
	# }
	.loc 7 7220 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7225 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_tail:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7230 0
	# }
	.loc 12 12 0
	#     }                                           \
	.L1210:
	.loc 12 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7225 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L7315, A, 0
	.loc 12 12 0
	#     }                                           \
	.loc 12 11 0
	#       exit(1);                                  \
.data
	.L7316:
	.string "assertion failed: vec->len > 0\n"
.text
	mov A, .L7316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L7317:
	mov A, B
	add SP, 1
	.loc 12 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L7315:
	mov A, 0
	jeq .L7318, A, 0
	jmp .L1210
	.L7318:
	.L1211:
	.loc 7 7230 0
	# }
	.loc 7 7225 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7230 0
	# }
	.loc 7 7225 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7230 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_reverse:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 7238 0
	# }
	.loc 7 7234 0
	#     for (int i = 0; i < vec->len; i++)
	mov A, 0
	mov B, SP
	.loc 7 7230 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp do_make_vector
	.L7319:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7235 0
	#         r->body[i] = vec->body[vec->len - i - 1];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.L1212:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7230 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7320, A, 0
	jmp .L7321
	.L7320:
	.loc 7 7235 0
	#         r->body[i] = vec->body[vec->len - i - 1];
	jmp .L1214
	.L7321:
	.loc 7 7230 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7235 0
	#         r->body[i] = vec->body[vec->len - i - 1];
	.loc 7 7230 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7235 0
	#         r->body[i] = vec->body[vec->len - i - 1];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7234 0
	#     for (int i = 0; i < vec->len; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7235 0
	#         r->body[i] = vec->body[vec->len - i - 1];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1213:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	jmp .L1212
	.L1214:
	.loc 7 7237 0
	#     return r;
	.loc 7 7230 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7234 0
	#     for (int i = 0; i < vec->len; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7238 0
	# }
	.loc 7 7234 0
	#     for (int i = 0; i < vec->len; i++)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_body:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7242 0
	# }
	.loc 7 7238 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vec_len:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7246 0
	# }
	.loc 7 7242 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
