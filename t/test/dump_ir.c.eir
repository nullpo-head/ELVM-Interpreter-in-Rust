	.text
my_div:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 52
	.file 1 "/Users/nullpo/dev/elvm/libc/_builtin.h"
	.loc 1 35 0
	# }
	.loc 1 11 0
	#   unsigned int r[24];
	.loc 1 12 0
	#   unsigned int i;
	.loc 1 13 0
	#   r[0] = 1;
	.loc 1 14 0
	#   for (i = 0;; i++) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 14 0
	#   for (i = 0;; i++) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 21 0
	#   }
	.loc 1 15 0
	#     d[i] = b;
	mov A, 0
	mov B, BP
	add B, 16777167
	store A, B
	.loc 1 21 0
	#   }
	.L0:
	.loc 1 16 0
	#     unsigned int nb = b + b;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 11 0
	#   unsigned int r[24];
	mov A, BP
	add A, 16777192
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777166
	store A, B
	.loc 1 18 0
	#       break;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L199, A, 0
	.loc 1 18 0
	#       break;
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L199:
	mov A, B
	jeq .L200, A, 0
	.loc 1 18 0
	#       break;
	jmp .L2
	.L200:
	.loc 1 20 0
	#     b = nb;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 21 0
	#   }
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 21 0
	#   }
	.L1:
	.loc 1 15 0
	#     d[i] = b;
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777167
	store A, B
	load A, SP
	add SP, 1
	.loc 1 21 0
	#   }
	jmp .L0
	.L2:
	.loc 1 24 0
	#   for (;; i--) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777165
	mov A, 0
	store A, B
	.loc 1 31 0
	#       break;
	.L3:
	.loc 1 26 0
	#     if (a >= v) {
	mov A, 0
	mov B, SP
	.loc 1 11 0
	#   unsigned int r[24];
	mov A, BP
	add A, 16777192
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777164
	store A, B
	.loc 1 29 0
	#     }
	.loc 1 27 0
	#       q += r[i];
	.loc 1 26 0
	#     if (a >= v) {
	mov B, BP
	add B, 16777164
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L201, A, 0
	.loc 1 29 0
	#     }
	.loc 1 28 0
	#       a -= v;
	.loc 1 24 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777165
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 28 0
	#       a -= v;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777165
	store A, B
	.loc 1 29 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 26 0
	#     if (a >= v) {
	mov B, BP
	add B, 16777164
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.L201:
	.loc 1 31 0
	#       break;
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 31 0
	#       break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L202, A, 0
	jmp .L5
	.L202:
	.L4:
	.loc 1 25 0
	#     unsigned int v = d[i];
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777167
	store A, B
	load A, SP
	add SP, 1
	.loc 1 31 0
	#       break;
	jmp .L3
	.L5:
	.loc 1 34 0
	#   o->rem = a;
	.loc 1 24 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777165
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_mul:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 53
	.loc 1 70 0
	# }
	.loc 1 39 0
	#   if (a < b) {
	.loc 1 43 0
	#   }
	.loc 1 40 0
	#     v = a;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L203, A, 0
	.loc 1 43 0
	#   }
	.loc 1 41 0
	#     a = b;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 42 0
	#     b = v;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 43 0
	#   }
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.L203:
	.loc 1 45 0
	#     return a;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 45 0
	#     return a;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L204, A, 0
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L204:
	.loc 1 47 0
	#     return 0;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 47 0
	#     return 0;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L205, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L205:
	.loc 1 49 0
	#   int r[24];
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	.loc 1 58 0
	#   }
	.loc 1 51 0
	#     d[i] = v;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	mov A, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 58 0
	#   }
	.L6:
	.loc 1 52 0
	#     r[i] = e;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 52 0
	#     r[i] = e;
	.loc 1 49 0
	#   int r[24];
	mov A, BP
	add A, 16777189
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 53 0
	#     v += v;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 53 0
	#     v += v;
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 54 0
	#     int ne = e + e;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov A, 0
	mov B, SP
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777164
	store A, B
	.loc 1 56 0
	#       break;
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L206, A, 0
	.loc 1 56 0
	#       break;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L206:
	mov A, B
	jeq .L207, A, 0
	.loc 1 56 0
	#       break;
	jmp .L8
	.L207:
	.loc 1 58 0
	#   }
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 58 0
	#   }
	.L7:
	.loc 1 51 0
	#     d[i] = v;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 1 58 0
	#   }
	jmp .L6
	.L8:
	.loc 1 61 0
	#   for (;; i--) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777163
	mov A, 0
	store A, B
	.loc 1 67 0
	#       break;
	.L9:
	.loc 1 65 0
	#     }
	.loc 1 63 0
	#       x += d[i];
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L208, A, 0
	.loc 1 65 0
	#     }
	.loc 1 64 0
	#       b -= r[i];
	.loc 1 61 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777163
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 64 0
	#       b -= r[i];
	.loc 1 49 0
	#   int r[24];
	mov A, BP
	add A, 16777189
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777163
	store A, B
	.loc 1 65 0
	#     }
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 65 0
	#     }
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.L208:
	.loc 1 67 0
	#       break;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 67 0
	#       break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L209, A, 0
	jmp .L11
	.L209:
	.L10:
	.loc 1 62 0
	#     if (b >= r[i]) {
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 1 67 0
	#       break;
	jmp .L9
	.L11:
	.loc 1 70 0
	# }
	.loc 1 61 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777163
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_div:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 1 78 0
	# }
	.loc 1 74 0
	#     return a;
	.loc 1 70 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 74 0
	#     return a;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L210, A, 0
	.loc 1 70 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L210:
	.loc 1 76 0
	#   my_div(a, b, &r);
	.loc 1 77 0
	#   return r.quot;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 70 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp my_div
	.L211:
	mov A, B
	add SP, 3
	.loc 1 78 0
	# }
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_mod:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 1 84 0
	# }
	.loc 1 82 0
	#   my_div(a, b, &r);
	.loc 1 83 0
	#   return r.rem;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 78 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp my_div
	.L212:
	mov A, B
	add SP, 3
	.loc 1 84 0
	# }
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
__builtin_bits_table:
	.long 8388608
	.long 4194304
	.long 2097152
	.long 1048576
	.long 524288
	.long 262144
	.long 131072
	.long 65536
	.long 32768
	.long 16384
	.long 8192
	.long 4096
	.long 2048
	.long 1024
	.long 512
	.long 256
	.long 128
	.long 64
	.long 32
	.long 16
	.long 8
	.long 4
	.long 2
	.long 1
	.text
__builtin_and:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 1 107 0
	# }
	.loc 1 99 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 104 0
	#       r += t;
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 104 0
	#       r += t;
	.L12:
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L213, A, 0
	jmp .L214
	.L213:
	.loc 1 104 0
	#       r += t;
	jmp .L14
	.L214:
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 84 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L215, A, 0
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 84 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L216
	.L215:
	mov A, 0
	.L216:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 103 0
	#     if (a1 && b1)
	mov A, 0
	mov B, SP
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 84 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L217, A, 0
	.loc 1 103 0
	#     if (a1 && b1)
	.loc 1 84 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 103 0
	#     if (a1 && b1)
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 103 0
	#     if (a1 && b1)
	mov A, 1
	jmp .L218
	.L217:
	mov A, 0
	.L218:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 1 104 0
	#       r += t;
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, 0
	jeq .L219, A, 0
	.loc 1 103 0
	#     if (a1 && b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L219:
	mov A, B
	jeq .L220, A, 0
	.loc 1 104 0
	#       r += t;
	.loc 1 99 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L220:
	.loc 1 104 0
	#       r += t;
	.L13:
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 104 0
	#       r += t;
	jmp .L12
	.L14:
	.loc 1 107 0
	# }
	.loc 1 99 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_or:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 1 119 0
	# }
	.loc 1 111 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 116 0
	#       r += t;
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 116 0
	#       r += t;
	.L15:
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L221, A, 0
	jmp .L222
	.L221:
	.loc 1 116 0
	#       r += t;
	jmp .L17
	.L222:
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 107 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L223, A, 0
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 107 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L224
	.L223:
	mov A, 0
	.L224:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 115 0
	#     if (a1 || b1)
	mov A, 0
	mov B, SP
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L225, A, 0
	.loc 1 115 0
	#     if (a1 || b1)
	.loc 1 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 115 0
	#     if (a1 || b1)
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 115 0
	#     if (a1 || b1)
	mov A, 1
	jmp .L226
	.L225:
	mov A, 0
	.L226:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 1 116 0
	#       r += t;
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, 1
	jne .L227, A, 0
	.loc 1 115 0
	#     if (a1 || b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L227:
	mov A, B
	jeq .L228, A, 0
	.loc 1 116 0
	#       r += t;
	.loc 1 111 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L228:
	.loc 1 116 0
	#       r += t;
	.L16:
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 116 0
	#       r += t;
	jmp .L15
	.L17:
	.loc 1 119 0
	# }
	.loc 1 111 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_xor:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 1 131 0
	# }
	.loc 1 123 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 128 0
	#       r += t;
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 128 0
	#       r += t;
	.L18:
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L229, A, 0
	jmp .L230
	.L229:
	.loc 1 128 0
	#       r += t;
	jmp .L20
	.L230:
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 119 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L231, A, 0
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 119 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L232
	.L231:
	mov A, 0
	.L232:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 127 0
	#     if (a1 != b1)
	mov A, 0
	mov B, SP
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 119 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L233, A, 0
	.loc 1 127 0
	#     if (a1 != b1)
	.loc 1 119 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 127 0
	#     if (a1 != b1)
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 127 0
	#     if (a1 != b1)
	mov A, 1
	jmp .L234
	.L233:
	mov A, 0
	.L234:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 1 128 0
	#       r += t;
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 127 0
	#     if (a1 != b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L235, A, 0
	.loc 1 128 0
	#       r += t;
	.loc 1 123 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L235:
	.loc 1 128 0
	#       r += t;
	.L19:
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 128 0
	#       r += t;
	jmp .L18
	.L20:
	.loc 1 131 0
	# }
	.loc 1 123 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_not:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 1 142 0
	# }
	.loc 1 135 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 139 0
	#       r += t;
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 139 0
	#       r += t;
	.L21:
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L236, A, 0
	jmp .L237
	.L236:
	.loc 1 139 0
	#       r += t;
	jmp .L23
	.L237:
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 138 0
	#     if (!a1)
	mov A, 0
	mov B, SP
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 131 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L238, A, 0
	.loc 1 138 0
	#     if (!a1)
	.loc 1 131 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 138 0
	#     if (!a1)
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 138 0
	#     if (!a1)
	mov A, 1
	jmp .L239
	.L238:
	mov A, 0
	.L239:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 139 0
	#       r += t;
	.loc 1 138 0
	#     if (!a1)
	mov B, BP
	add B, 16777212
	load A, B
	eq A, 0
	jeq .L240, A, 0
	.loc 1 139 0
	#       r += t;
	.loc 1 135 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L240:
	.loc 1 139 0
	#       r += t;
	.L22:
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 139 0
	#       r += t;
	jmp .L21
	.L23:
	.loc 1 142 0
	# }
	.loc 1 135 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_shl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 1 153 0
	# }
	.loc 1 146 0
	#   for (int i = b; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	.loc 1 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.L24:
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L241, A, 0
	jmp .L242
	.L241:
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	jmp .L26
	.L242:
	.loc 1 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 149 0
	#     if (a1)
	mov A, 0
	mov B, SP
	.loc 1 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L243, A, 0
	.loc 1 149 0
	#     if (a1)
	.loc 1 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 149 0
	#     if (a1)
	.loc 1 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 149 0
	#     if (a1)
	mov A, 1
	jmp .L244
	.L243:
	mov A, 0
	.L244:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 149 0
	#     if (a1)
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L245, A, 0
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 146 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L245:
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.L25:
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	jmp .L24
	.L26:
	.loc 1 153 0
	# }
	.loc 1 146 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_shr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 1 164 0
	# }
	.loc 1 157 0
	#   for (int i = b; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov A, 0
	mov B, SP
	.loc 1 153 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.L27:
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L246, A, 0
	jmp .L247
	.L246:
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	jmp .L29
	.L247:
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 153 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 160 0
	#     if (a1)
	mov A, 0
	mov B, SP
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L248, A, 0
	.loc 1 160 0
	#     if (a1)
	.loc 1 153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 160 0
	#     if (a1)
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 160 0
	#     if (a1)
	mov A, 1
	jmp .L249
	.L248:
	mov A, 0
	.L249:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 160 0
	#     if (a1)
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L250, A, 0
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 157 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L250:
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.L28:
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	jmp .L27
	.L29:
	.loc 1 164 0
	# }
	.loc 1 157 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
print_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 2 "/Users/nullpo/dev/elvm/libc/_raw_print.h"
	.loc 2 9 0
	#     putchar(*p);
	.L30:
	.loc 1 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L251, A, 0
	jmp .L252
	.L251:
	.loc 2 9 0
	#     putchar(*p);
	jmp .L32
	.L252:
	.loc 1 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 2 9 0
	#     putchar(*p);
	.L31:
	.loc 1 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 2 9 0
	#     putchar(*p);
	jmp .L30
	.L32:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stringify_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 2 20 0
	# }
	.loc 2 14 0
	#   do {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 18 0
	#   } while (v);
	.L33:
	.loc 2 16 0
	#     *p = v % 10 + '0';
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 2 17 0
	#     v /= 10;
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 17 0
	#     v /= 10;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L253:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 18 0
	#   } while (v);
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 18 0
	#   } while (v);
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L254:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	jeq .L255, A, 0
	.loc 2 18 0
	#   } while (v);
	jmp .L33
	.L255:
	.L34:
	.loc 2 20 0
	# }
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
print_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 32
	.loc 2 25 0
	# }
	.loc 2 24 0
	#   print_str(stringify_int(v, buf + sizeof(buf) - 1));
	.loc 2 25 0
	# }
	.loc 2 24 0
	#   print_str(stringify_int(v, buf + sizeof(buf) - 1));
	mov A, BP
	add A, 16777184
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_int
	.L256:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L257:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stringify_hex:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 2 44 0
	# }
	.loc 2 29 0
	#   int c;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 2 30 0
	#   *p = '\0';
	.loc 2 31 0
	#   if (v < 0) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 34 0
	#   }
	.loc 2 32 0
	#     v = -v;
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 32 0
	#     v = -v;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L258, A, 0
	.loc 2 34 0
	#   }
	.loc 2 33 0
	#     is_negative = 1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 34 0
	#   }
	mov A, 1
	mov B, BP
	add B, 16777215
	store A, B
	.L258:
	.loc 2 40 0
	#   } while (v);
	.L35:
	.loc 2 37 0
	#     c = v % 16;
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 2 38 0
	#     *p = c < 10 ? c + '0' : c - 10 + 'a';
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 38 0
	#     *p = c < 10 ? c + '0' : c - 10 + 'a';
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L259:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 2 39 0
	#     v /= 16;
	.loc 2 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#     v /= 16;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L260, A, 0
	.loc 2 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#     v /= 16;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	jmp .L261
	.L260:
	.loc 2 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#     v /= 16;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	.L261:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 40 0
	#   } while (v);
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 40 0
	#   } while (v);
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L262:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L263, A, 0
	.loc 2 40 0
	#   } while (v);
	jmp .L35
	.L263:
	.L36:
	.loc 2 42 0
	#     *--p = '-';
	.loc 2 29 0
	#   int c;
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L264, A, 0
	.loc 2 42 0
	#     *--p = '-';
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L264:
	.loc 2 44 0
	# }
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isspace:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 3 "/Users/nullpo/dev/elvm/libc/ctype.h"
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L269, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L269:
	mov A, B
	mov B, 1
	jne .L268, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L268:
	mov A, B
	mov B, 1
	jne .L267, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L267:
	mov A, B
	mov B, 1
	jne .L266, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L266:
	mov A, B
	mov B, 1
	jne .L265, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L265:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isdigit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 10 0
	# }
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L270, A, 0
	.loc 3 10 0
	# }
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 10 0
	# }
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L270:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isxdigit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 14 0
	# }
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L273:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L272, A, 0
	.loc 3 14 0
	# }
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L274, A, 0
	.loc 3 14 0
	# }
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 14 0
	# }
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L274:
	mov A, B
	mov B, A
	ne B, 0
	.L272:
	mov A, B
	mov B, 1
	jne .L271, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L275, A, 0
	.loc 3 14 0
	# }
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 14 0
	# }
	mov A, 70
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L275:
	mov A, B
	mov B, A
	ne B, 0
	.L271:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isupper:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 18 0
	# }
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 14 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L276, A, 0
	.loc 3 18 0
	# }
	.loc 3 14 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	# }
	mov A, 90
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L276:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isalpha:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 22 0
	# }
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L278, A, 0
	.loc 3 22 0
	# }
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 22 0
	# }
	mov A, 122
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L278:
	mov A, B
	mov B, 1
	jne .L277, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L279, A, 0
	.loc 3 22 0
	# }
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 22 0
	# }
	mov A, 90
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L279:
	mov A, B
	mov B, A
	ne B, 0
	.L277:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isalnum:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 26 0
	# }
	.loc 3 22 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L281:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L280, A, 0
	.loc 3 26 0
	# }
	.loc 3 22 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L282:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L280:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isprint:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 30 0
	# }
	.loc 3 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L284:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L283, A, 0
	.loc 3 30 0
	# }
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L285, A, 0
	.loc 3 30 0
	# }
	.loc 3 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 30 0
	# }
	mov A, 127
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L285:
	mov A, B
	mov B, A
	ne B, 0
	.L283:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
abort:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 4 "/Users/nullpo/dev/elvm/libc/stdlib.h"
	.loc 4 21 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
malloc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 4 31 0
	# }
	.loc 4 25 0
	#   _edata += n;
	mov A, 0
	mov B, SP
	.loc 3 30 0
	# }
	mov B, _edata
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 26 0
	#   if (r > _edata) {
	.loc 3 30 0
	# }
	mov B, _edata
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 21 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, _edata
	store A, B
	.loc 4 29 0
	#   }
	.loc 4 27 0
	#     print_str("no memory!\n");
	.loc 3 30 0
	# }
	mov B, _edata
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 25 0
	#   _edata += n;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L286, A, 0
	.loc 4 29 0
	#   }
	.loc 4 28 0
	#     exit(1);
.data
	.L287:
	.string "no memory!\n"
.text
	mov A, .L287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L288:
	mov A, B
	add SP, 1
	.loc 4 29 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L286:
	.loc 4 31 0
	# }
	.loc 4 25 0
	#   _edata += n;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
calloc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 35 0
	# }
	.loc 4 31 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L289:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L290:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
free:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 35 0
	# }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtol:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 4 116 0
	# }
	.loc 4 45 0
	#   long acc, cutoff;
	.loc 4 46 0
	#   int c;
	.loc 4 47 0
	#   int neg, any, cutlim;
	.loc 4 48 0
	# 
	.loc 4 57 0
	#   }
	.loc 4 54 0
	#     if (endptr != 0)
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 54 0
	#     if (endptr != 0)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L292, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 54 0
	#     if (endptr != 0)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L292:
	mov A, B
	mov B, 1
	jne .L291, A, 0
	mov A, 36
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L291:
	mov A, B
	jeq .L293, A, 0
	.loc 4 57 0
	#   }
	.loc 4 55 0
	#       *endptr = (char *)nptr;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 55 0
	#       *endptr = (char *)nptr;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L294, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L294:
	.loc 4 57 0
	#   }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L293:
	.loc 4 65 0
	#   do {
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 67 0
	#   } while (isspace(c));
	.L37:
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 67 0
	#   } while (isspace(c));
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L295:
	mov A, B
	add SP, 1
	jeq .L296, A, 0
	.loc 4 67 0
	#   } while (isspace(c));
	jmp .L37
	.L296:
	.L38:
	.loc 4 74 0
	#       c = *s++;
	.loc 4 69 0
	#     neg = 1;
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 69 0
	#     neg = 1;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L297, A, 0
	.loc 4 71 0
	#   } else {
	.loc 4 70 0
	#     c = *s++;
	mov A, 1
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 71 0
	#   } else {
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L298
	.L297:
	.loc 4 74 0
	#       c = *s++;
	.loc 4 73 0
	#     if (c == '+')
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 74 0
	#       c = *s++;
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 74 0
	#       c = *s++;
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L299, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.L299:
	.L298:
	.loc 4 81 0
	#   }
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L302, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L302:
	mov A, B
	mov B, 0
	jeq .L301, A, 0
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L301:
	mov A, B
	mov B, 0
	jeq .L300, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L303, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 88
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L303:
	mov A, B
	mov B, A
	ne B, 0
	.L300:
	mov A, B
	jeq .L304, A, 0
	.loc 4 81 0
	#   }
	.loc 4 79 0
	#     s += 2;
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 79 0
	#     s += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 80 0
	#     base = 16;
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 80 0
	#     base = 16;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 81 0
	#   }
	mov A, 16
	mov B, BP
	add B, 4
	store A, B
	.L304:
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L305, A, 0
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L306, A, 0
	mov A, 8
	jmp .L307
	.L306:
	mov A, 10
	.L307:
	mov B, BP
	add B, 4
	store A, B
	.L305:
	.loc 4 91 0
	#   }
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L308, A, 0
	.loc 4 91 0
	#   }
	.loc 4 89 0
	#     }
	.loc 4 87 0
	#       cutlim -= base;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L309, A, 0
	.loc 4 89 0
	#     }
	.loc 4 88 0
	#       cutoff += 1;
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 4 89 0
	#     }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 89 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.L309:
	.loc 4 91 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777209
	store A, B
	.L308:
	.loc 4 111 0
	#     }
	.loc 4 93 0
	#     if (isdigit(c))
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	mov A, 0
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 111 0
	#     }
	.L39:
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L310:
	mov A, B
	add SP, 1
	jeq .L311, A, 0
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 94 0
	#       c -= '0';
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L312
	.L311:
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L313:
	mov A, B
	add SP, 1
	jeq .L314, A, 0
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isupper
	.L315:
	mov A, B
	add SP, 1
	jeq .L316, A, 0
	.loc 4 94 0
	#       c -= '0';
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L317
	.L316:
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	.L317:
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L318
	.L314:
	jmp .L41
	.L318:
	.L312:
	.loc 4 100 0
	#       break;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L319, A, 0
	.loc 4 100 0
	#       break;
	jmp .L41
	.L319:
	.loc 4 102 0
	#       continue;
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 102 0
	#       continue;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L320, A, 0
	jmp .L40
	.L320:
	.loc 4 111 0
	#     }
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L321, A, 0
	.loc 4 107 0
	#     } else {
	.loc 4 105 0
	#       acc *= base;
	mov A, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 106 0
	#       acc -= c;
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 106 0
	#       acc -= c;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L322:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 107 0
	#     } else {
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 107 0
	#     } else {
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L323
	.L321:
	.loc 4 111 0
	#     }
	.loc 4 109 0
	#       acc *= base;
	mov A, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 110 0
	#       acc += c;
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 110 0
	#       acc += c;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L324:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 111 0
	#     }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 111 0
	#     }
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L323:
	.loc 4 111 0
	#     }
	.L40:
	.loc 4 93 0
	#     if (isdigit(c))
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 111 0
	#     }
	jmp .L39
	.L41:
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	.loc 4 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L325, A, 0
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L326, A, 0
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	jmp .L327
	.L326:
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	.L327:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L325:
	.loc 4 116 0
	# }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoul:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 120 0
	# }
	.loc 4 116 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L328:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoll:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 124 0
	# }
	.loc 4 120 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L329:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoull:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 128 0
	# }
	.loc 4 124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L330:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
atoi:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 4 138 0
	# }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 136 0
	#   }
	.L42:
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L331, A, 0
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L331:
	mov A, B
	jeq .L332, A, 0
	.loc 4 136 0
	#   }
	.loc 4 135 0
	#     n += s[i++] - '0';
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 135 0
	#     n += s[i++] - '0';
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L333:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 135 0
	#     n += s[i++] - '0';
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L334:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 136 0
	#   }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L335
	.L332:
	jmp .L43
	.L335:
	jmp .L42
	.L43:
	.loc 4 138 0
	# }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
getenv:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 142 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
qsort:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 4 184 0
	#         size, compar);
	.loc 4 147 0
	#     return;
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 147 0
	#     return;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L336, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L336:
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov A, 0
	mov B, SP
	.loc 4 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 150 0
	#   char* left = base;
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L337:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L338:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 4 152 0
	# #if 0
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L339:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 179 0
	#   }
	.L44:
	.loc 4 162 0
	#       left += size;
	.L47:
	mov A, 32768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	mov A, .L340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L340:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L341, A, 0
	.loc 4 162 0
	#       left += size;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L342
	.L341:
	.loc 4 162 0
	#       left += size;
	jmp .L48
	.L342:
	jmp .L47
	.L48:
	.loc 4 164 0
	#       right -= size;
	.L49:
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	mov A, .L343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L343:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 164 0
	#       right -= size;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 32768
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L344, A, 0
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L345
	.L344:
	.loc 4 164 0
	#       right -= size;
	jmp .L50
	.L345:
	jmp .L49
	.L50:
	.loc 4 167 0
	#       break;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L346, A, 0
	.loc 4 167 0
	#       break;
	jmp .L46
	.L346:
	.loc 4 172 0
	#     }
	.loc 4 169 0
	#       char tmp = left[i];
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 172 0
	#     }
	.L51:
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L347, A, 0
	jmp .L348
	.L347:
	.loc 4 172 0
	#     }
	jmp .L53
	.L348:
	.loc 4 170 0
	#       left[i] = right[i];
	mov A, 0
	mov B, SP
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 171 0
	#       right[i] = tmp;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 171 0
	#       right[i] = tmp;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	.loc 4 170 0
	#       left[i] = right[i];
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 172 0
	#     }
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	.L52:
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	jmp .L51
	.L53:
	.loc 4 174 0
	#       pivot = right;
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L349, A, 0
	.loc 4 174 0
	#       pivot = right;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L350
	.L349:
	.loc 4 174 0
	#       pivot = right;
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L351, A, 0
	.loc 4 174 0
	#       pivot = right;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L351:
	.L350:
	.loc 4 178 0
	#     right -= size;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777213
	store A, B
	.loc 4 179 0
	#   }
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 179 0
	#   }
	.L45:
	jmp .L44
	.L46:
	.loc 4 182 0
	#   qsort(base, (size_t)(left - base) / size, size, compar);
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 183 0
	#   qsort(right, (size_t)(base + nmemb * size - right) / size,
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 183 0
	#   qsort(right, (size_t)(base + nmemb * size - right) / size,
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L352:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L353:
	mov A, B
	add SP, 4
	.loc 4 184 0
	#         size, compar);
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L354:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L355:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L356:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
memset:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.file 5 "/Users/nullpo/dev/elvm/libc/string.h"
	.loc 5 13 0
	# }
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	.loc 5 11 0
	#   }
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 11 0
	#   }
	.L54:
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L357, A, 0
	jmp .L358
	.L357:
	.loc 5 11 0
	#   }
	jmp .L56
	.L358:
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 11 0
	#   }
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 11 0
	#   }
	.L55:
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 11 0
	#   }
	jmp .L54
	.L56:
	.loc 5 13 0
	# }
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
memcpy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 21 0
	# }
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	.loc 5 19 0
	#   }
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 19 0
	#   }
	.L57:
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 13 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L359, A, 0
	jmp .L360
	.L359:
	.loc 5 19 0
	#   }
	jmp .L59
	.L360:
	.loc 5 13 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 19 0
	#   }
	.loc 5 13 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 19 0
	#   }
	.L58:
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 19 0
	#   }
	jmp .L57
	.L59:
	.loc 5 21 0
	# }
	.loc 5 13 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strlen:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 27 0
	# }
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	.loc 5 26 0
	#   return r;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.L60:
	.loc 5 21 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	jeq .L361, A, 0
	jmp .L362
	.L361:
	.loc 5 26 0
	#   return r;
	jmp .L62
	.L362:
	.L61:
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 26 0
	#   return r;
	jmp .L60
	.L62:
	.loc 5 27 0
	# }
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcat:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 35 0
	# }
	.loc 5 31 0
	#   for (; *d; d++) {}
	mov A, 0
	mov B, SP
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 32 0
	#   for (; *s; s++, d++)
	.L63:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L363, A, 0
	jmp .L364
	.L363:
	.loc 5 32 0
	#   for (; *s; s++, d++)
	jmp .L65
	.L364:
	.L64:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 32 0
	#   for (; *s; s++, d++)
	jmp .L63
	.L65:
	.loc 5 33 0
	#     *d = *s;
	.L66:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jeq .L365, A, 0
	jmp .L366
	.L365:
	.loc 5 33 0
	#     *d = *s;
	jmp .L68
	.L366:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	.L67:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	jmp .L66
	.L68:
	.loc 5 35 0
	# }
	.loc 5 31 0
	#   for (; *d; d++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcpy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 43 0
	# }
	.loc 5 39 0
	#   for (; *s; s++, d++)
	mov A, 0
	mov B, SP
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 40 0
	#     *d = *s;
	.L69:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jeq .L367, A, 0
	jmp .L368
	.L367:
	.loc 5 40 0
	#     *d = *s;
	jmp .L71
	.L368:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	.L70:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	jmp .L69
	.L71:
	.loc 5 42 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 43 0
	# }
	.loc 5 39 0
	#   for (; *s; s++, d++)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 5 53 0
	# }
	.loc 5 50 0
	#       return 1;
	.L72:
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, 1
	jne .L369, A, 0
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	ne B, 0
	.L369:
	mov A, B
	jeq .L370, A, 0
	jmp .L371
	.L370:
	.loc 5 50 0
	#       return 1;
	jmp .L74
	.L371:
	.loc 5 48 0
	#       return -1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 48 0
	#       return -1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L372, A, 0
	.loc 5 48 0
	#       return -1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L372:
	.loc 5 50 0
	#       return 1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 50 0
	#       return 1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L373, A, 0
	.loc 5 50 0
	#       return 1;
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L373:
	.L73:
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 50 0
	#       return 1;
	jmp .L72
	.L74:
	.loc 5 53 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strchr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 5 61 0
	# }
	.loc 5 58 0
	#       return s;
	.L75:
	.loc 5 57 0
	#     if (*s == c)
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L374, A, 0
	jmp .L375
	.L374:
	.loc 5 58 0
	#       return s;
	jmp .L77
	.L375:
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L376, A, 0
	.loc 5 58 0
	#       return s;
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L376:
	.loc 5 58 0
	#       return s;
	.L76:
	.loc 5 57 0
	#     if (*s == c)
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 58 0
	#       return s;
	jmp .L75
	.L77:
	.loc 5 61 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strdup:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 5 68 0
	# }
	.loc 5 65 0
	#   char* r = malloc(l + 1);
	mov A, 0
	mov B, SP
	.loc 5 61 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L377:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 66 0
	#   strcpy(r, s);
	mov A, 0
	mov B, SP
	.loc 5 65 0
	#   char* r = malloc(l + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 66 0
	#   strcpy(r, s);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L378:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 67 0
	#   return r;
	.loc 5 61 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 66 0
	#   strcpy(r, s);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcpy
	.L379:
	mov A, B
	add SP, 2
	.loc 5 68 0
	# }
	.loc 5 66 0
	#   strcpy(r, s);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtok_r:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 5 112 0
	#       }
	.loc 5 75 0
	#   int c, sc;
	.loc 5 76 0
	#   char *tok;
	.loc 5 77 0
	# 
	.loc 5 79 0
	#     return (NULL);
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 79 0
	#     return (NULL);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L380, A, 0
	.loc 5 68 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 2
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 79 0
	#     return (NULL);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L380:
	mov A, B
	jeq .L381, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L381:
	.loc 5 85 0
	#   c = *s++;
	.L86:
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 88 0
	#       goto cont;
	.loc 5 87 0
	#     if (c == sc)
	.loc 5 68 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 88 0
	#       goto cont;
	.L78:
	.loc 5 87 0
	#     if (c == sc)
	.loc 5 75 0
	#   int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 87 0
	#     if (c == sc)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L382, A, 0
	jmp .L383
	.L382:
	.loc 5 88 0
	#       goto cont;
	jmp .L80
	.L383:
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L384, A, 0
	.loc 5 88 0
	#       goto cont;
	jmp .L86
	.L384:
	.L79:
	jmp .L78
	.L80:
	.loc 5 94 0
	#   }
	.loc 5 92 0
	#     *last = NULL;
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 92 0
	#     *last = NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L385, A, 0
	.loc 5 94 0
	#   }
	.loc 5 93 0
	#     return (NULL);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 68 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 94 0
	#   }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L385:
	.loc 5 96 0
	# 
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 96 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 5 112 0
	#       }
	.L81:
	.loc 5 103 0
	#     spanp = delim;
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 104 0
	#     do {
	.loc 5 68 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 112 0
	#       }
	.L84:
	.loc 5 106 0
	#         if (c == 0)
	.loc 5 75 0
	#   int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L386, A, 0
	.loc 5 112 0
	#       }
	.loc 5 107 0
	#           s = NULL;
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 107 0
	#           s = NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L387, A, 0
	mov A, 0
	mov B, BP
	add B, 2
	store A, B
	jmp .L388
	.L387:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 107 0
	#           s = NULL;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L388:
	.loc 5 111 0
	#         return (tok);
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 112 0
	#       }
	.loc 5 77 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L386:
	.loc 5 112 0
	#       }
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 112 0
	#       }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L389, A, 0
	jmp .L84
	.L389:
	.L85:
	.L82:
	jmp .L81
	.L83:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
charmap:
	.long 0
	.long 1
	.long 2
	.long 3
	.long 4
	.long 5
	.long 6
	.long 7
	.long 8
	.long 9
	.long 10
	.long 11
	.long 12
	.long 13
	.long 14
	.long 15
	.long 16
	.long 17
	.long 18
	.long 19
	.long 20
	.long 21
	.long 22
	.long 23
	.long 24
	.long 25
	.long 26
	.long 27
	.long 28
	.long 29
	.long 30
	.long 31
	.long 32
	.long 33
	.long 34
	.long 35
	.long 36
	.long 37
	.long 38
	.long 39
	.long 40
	.long 41
	.long 42
	.long 43
	.long 44
	.long 45
	.long 46
	.long 47
	.long 48
	.long 49
	.long 50
	.long 51
	.long 52
	.long 53
	.long 54
	.long 55
	.long 56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
	.long 64
	.long 97
	.long 98
	.long 99
	.long 100
	.long 101
	.long 102
	.long 103
	.long 104
	.long 105
	.long 106
	.long 107
	.long 108
	.long 109
	.long 110
	.long 111
	.long 112
	.long 113
	.long 114
	.long 115
	.long 116
	.long 117
	.long 118
	.long 119
	.long 120
	.long 121
	.long 122
	.long 91
	.long 92
	.long 93
	.long 94
	.long 95
	.long 96
	.long 97
	.long 98
	.long 99
	.long 100
	.long 101
	.long 102
	.long 103
	.long 104
	.long 105
	.long 106
	.long 107
	.long 108
	.long 109
	.long 110
	.long 111
	.long 112
	.long 113
	.long 114
	.long 115
	.long 116
	.long 117
	.long 118
	.long 119
	.long 120
	.long 121
	.long 122
	.long 123
	.long 124
	.long 125
	.long 126
	.long 127
	.long -128
	.long -127
	.long -126
	.long -125
	.long -124
	.long -123
	.long -122
	.long -121
	.long -120
	.long -119
	.long -118
	.long -117
	.long -116
	.long -115
	.long -114
	.long -113
	.long -112
	.long -111
	.long -110
	.long -109
	.long -108
	.long -107
	.long -106
	.long -105
	.long -104
	.long -103
	.long -102
	.long -101
	.long -100
	.long -99
	.long -98
	.long -97
	.long -96
	.long -95
	.long -94
	.long -93
	.long -92
	.long -91
	.long -90
	.long -89
	.long -88
	.long -87
	.long -86
	.long -85
	.long -84
	.long -83
	.long -82
	.long -81
	.long -80
	.long -79
	.long -78
	.long -77
	.long -76
	.long -75
	.long -74
	.long -73
	.long -72
	.long -71
	.long -70
	.long -69
	.long -68
	.long -67
	.long -66
	.long -65
	.long -64
	.long -63
	.long -62
	.long -61
	.long -60
	.long -59
	.long -58
	.long -57
	.long -56
	.long -55
	.long -54
	.long -53
	.long -52
	.long -51
	.long -50
	.long -49
	.long -48
	.long -47
	.long -46
	.long -45
	.long -44
	.long -43
	.long -42
	.long -41
	.long -40
	.long -39
	.long -38
	.long -37
	.long -36
	.long -35
	.long -34
	.long -33
	.long -32
	.long -31
	.long -30
	.long -29
	.long -28
	.long -27
	.long -26
	.long -25
	.long -24
	.long -23
	.long -22
	.long -21
	.long -20
	.long -19
	.long -18
	.long -17
	.long -16
	.long -15
	.long -14
	.long -13
	.long -12
	.long -11
	.long -10
	.long -9
	.long -8
	.long -7
	.long -6
	.long -5
	.long -4
	.long -3
	.long -2
	.long -1
	.text
strcasecmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov A, charmap
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 166 0
	# 
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.L87:
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 166 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L390, A, 0
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L391, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L391:
	jmp .L392
	.L390:
	jmp .L88
	.L392:
	jmp .L87
	.L88:
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 166 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	sub A, 1
	mov B, BP
	add B, 16777213
	store A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strncasecmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 190 0
	# }
	.loc 5 186 0
	#         break;
	.loc 5 178 0
	#     const unsigned char *cm = charmap;
	.loc 5 171 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 178 0
	#     const unsigned char *cm = charmap;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L393, A, 0
	.loc 5 186 0
	#         break;
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov A, charmap
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov A, 0
	mov B, SP
	.loc 5 171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 181 0
	# 
	mov A, 0
	mov B, SP
	.loc 5 171 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 5 186 0
	#         break;
	.L89:
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 181 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L394, A, 0
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 181 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	sub A, 1
	mov B, BP
	add B, 16777213
	store A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L394:
	.loc 5 186 0
	#         break;
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 186 0
	#         break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L395, A, 0
	jmp .L90
	.L395:
	.loc 5 171 0
	# }
	mov B, BP
	add B, 4
	load A, B
	sub A, 1
	mov B, BP
	add B, 4
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 186 0
	#         break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L396, A, 0
	jmp .L89
	.L396:
	.L90:
	.L393:
	.loc 5 190 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strpbrk:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 205 0
	# }
	.loc 5 197 0
	# 	int c, sc;
	.loc 5 198 0
	# 
	.loc 5 201 0
	# 			if (sc == c)
	.L91:
	.loc 5 200 0
	# 		for (scanp = s2; (sc = *scanp++) != 0;)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 200 0
	# 		for (scanp = s2; (sc = *scanp++) != 0;)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L397, A, 0
	.loc 5 201 0
	# 			if (sc == c)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 201 0
	# 			if (sc == c)
	.L93:
	.loc 5 197 0
	# 	int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 201 0
	# 			if (sc == c)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L398, A, 0
	jmp .L399
	.L398:
	jmp .L95
	.L399:
	.loc 5 198 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L400, A, 0
	.loc 5 201 0
	# 			if (sc == c)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 201 0
	# 			if (sc == c)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L400:
	.L94:
	jmp .L93
	.L95:
	jmp .L401
	.L397:
	jmp .L92
	.L401:
	jmp .L91
	.L92:
	.loc 5 205 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
puts:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 6 "/Users/nullpo/dev/elvm/libc/stdio.h"
	.loc 6 20 0
	# }
	.loc 6 19 0
	#   putchar('\n');
	.loc 5 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L402:
	mov A, B
	add SP, 1
	.loc 6 20 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vsnprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 38
	.loc 6 87 0
	# }
	.loc 6 24 0
	#   size_t off = 0;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 6 84 0
	#   }
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 20 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 84 0
	#   }
	.L96:
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	jeq .L403, A, 0
	jmp .L404
	.L403:
	.loc 6 84 0
	#   }
	jmp .L98
	.L404:
	.loc 6 38 0
	#     }
	.loc 6 28 0
	#       if (!is_overlow) {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 28 0
	#       if (!is_overlow) {
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L405, A, 0
	.loc 6 38 0
	#     }
	.loc 6 34 0
	#         }
	.loc 6 29 0
	#         if (off + 1 >= size) {
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	jeq .L406, A, 0
	.loc 6 34 0
	#         }
	.loc 6 30 0
	#           is_overlow = 1;
	.loc 6 20 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 30 0
	#           is_overlow = 1;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 30 0
	#           is_overlow = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L407, A, 0
	.loc 6 32 0
	#         } else {
	.loc 6 31 0
	#           buf[off] = 0;
	mov A, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 6 32 0
	#         } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L408
	.L407:
	.loc 6 34 0
	#         }
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 34 0
	#         }
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L408:
	.L406:
	.loc 6 37 0
	#       continue;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 6 38 0
	#     }
	jmp .L97
	.L405:
	.loc 6 41 0
	#     char* cur_p;
	.loc 6 42 0
	#  retry:
	.loc 6 72 0
	#     }
	.loc 6 43 0
	#     switch (*++inp) {
	.L108:
	.loc 6 72 0
	#     }
	.loc 6 43 0
	#     switch (*++inp) {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777179
	store A, B
	.loc 6 72 0
	#     }
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 108
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L409, A, 0
	jmp .L100
	.L409:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 100
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L410, A, 0
	jmp .L101
	.L410:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L411, A, 0
	jmp .L102
	.L411:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L412, A, 0
	jmp .L103
	.L412:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 115
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L413, A, 0
	jmp .L104
	.L413:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 99
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L414, A, 0
	jmp .L105
	.L414:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L415, A, 0
	jmp .L106
	.L415:
	jmp .L107
	.loc 6 45 0
	#         goto retry;
	.L100:
	jmp .L108
	.loc 6 47 0
	#       case 'u':
	.L101:
	.L102:
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 47 0
	#       case 'u':
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L416
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_int
	.L416:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 50 0
	#       case 'x':
	jmp .L99
	.loc 6 51 0
	#         cur_p = stringify_hex(va_arg(ap, long), cur_buf + sizeof(cur_buf) - 1);
	.L103:
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 51 0
	#         cur_p = stringify_hex(va_arg(ap, long), cur_buf + sizeof(cur_buf) - 1);
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_hex
	.L417:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 53 0
	#       case 's':
	jmp .L99
	.loc 6 54 0
	#         cur_p = va_arg(ap, char*);
	.L104:
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 56 0
	#       case 'c':
	jmp .L99
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	.L105:
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 59 0
	#         cur_p = cur_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 59 0
	#         cur_p = cur_buf;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 60 0
	#         break;
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 61 0
	#       case '%':
	jmp .L99
	.loc 6 62 0
	#         cur_buf[0] = '%';
	.L106:
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 62 0
	#         cur_buf[0] = '%';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 64 0
	#         cur_p = cur_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 64 0
	#         cur_p = cur_buf;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 65 0
	#         break;
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 66 0
	#       default:
	jmp .L99
	.loc 6 67 0
	#         print_int(*inp);
	.L107:
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_int
	.L418:
	mov A, B
	add SP, 1
	.loc 6 69 0
	#         print_str(fmt);
.data
	.L419:
	.string " in "
.text
	mov A, .L419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L420:
	mov A, B
	add SP, 1
	.loc 6 70 0
	#         print_str(": unknown format!\n");
	.loc 6 20 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L421:
	mov A, B
	add SP, 1
	.loc 6 71 0
	#         exit(1);
.data
	.L422:
	.string ": unknown format!\n"
.text
	mov A, .L422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L423:
	mov A, B
	add SP, 1
	.loc 6 72 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L99:
	.loc 6 75 0
	#     if (!is_overlow) {
	mov A, 0
	mov B, SP
	.loc 6 42 0
	#  retry:
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L424:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777178
	store A, B
	.loc 6 81 0
	#       }
	.loc 6 76 0
	#       if (off + len >= size) {
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	jeq .L425, A, 0
	.loc 6 81 0
	#       }
	.loc 6 77 0
	#         is_overlow = 1;
	.loc 6 20 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 77 0
	#         is_overlow = 1;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 75 0
	#     if (!is_overlow) {
	mov B, BP
	add B, 16777178
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L426, A, 0
	.loc 6 79 0
	#       } else {
	.loc 6 78 0
	#         buf[off] = 0;
	mov A, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 6 79 0
	#       } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L427
	.L426:
	.loc 6 81 0
	#       }
	.loc 6 42 0
	#  retry:
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 81 0
	#       }
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcpy
	.L428:
	mov A, B
	add SP, 2
	.L427:
	.L425:
	.loc 6 84 0
	#   }
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 75 0
	#     if (!is_overlow) {
	mov B, BP
	add B, 16777178
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 84 0
	#   }
	.L97:
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 6 84 0
	#   }
	jmp .L96
	.L98:
	.loc 6 86 0
	#   return off;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 87 0
	# }
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vsprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 91 0
	# }
	.loc 6 87 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 91 0
	# }
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 87 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L429:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
snprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 99 0
	# }
	.loc 6 95 0
	#   va_start(ap, fmt);
	.loc 6 96 0
	#   int r = vsnprintf(buf, size, fmt , ap);
	mov A, BP
	add A, 4
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 97 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 95 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 91 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L430:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 99 0
	# }
	.loc 6 97 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 107 0
	# }
	.loc 6 103 0
	#   va_start(ap, fmt);
	.loc 6 104 0
	#   int r = vsprintf(buf, fmt, ap);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 105 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 103 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 99 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsprintf
	.L431:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 107 0
	# }
	.loc 6 105 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 257
	.loc 6 115 0
	# }
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	.loc 6 112 0
	#   buf[r] = 0;
	mov A, 0
	mov B, SP
	.loc 6 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 112 0
	#   buf[r] = 0;
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L432:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16776959
	store A, B
	.loc 6 113 0
	#   print_str(buf);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 112 0
	#   buf[r] = 0;
	mov B, BP
	add B, 16776959
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 114 0
	#   return r;
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L433:
	mov A, B
	add SP, 1
	.loc 6 115 0
	# }
	.loc 6 112 0
	#   buf[r] = 0;
	mov B, BP
	add B, 16776959
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
printf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 123 0
	# }
	.loc 6 119 0
	#   va_start(ap, fmt);
	.loc 6 120 0
	#   int r = vprintf(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 121 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 119 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 115 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L434:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 123 0
	# }
	.loc 6 121 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
stdin:
	.long 1
	.data 0
stdout:
	.long 1
	.data 0
stderr:
	.long 1
	.text
fprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 6 135 0
	# }
	.loc 6 132 0
	#   va_start(ap, fmt);
	.loc 6 133 0
	#   vprintf(fmt, ap);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 134 0
	#   va_end(ap);
	.loc 6 132 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L435:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vfprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 139 0
	# }
	.loc 6 135 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L436:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fileno:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 143 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fopen:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 147 0
	# }
	.loc 6 123 0
	# }
	mov B, stdin
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fclose:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 151 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fwrite:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 6 159 0
	# }
	.loc 6 155 0
	#   size_t l = (int)s * (int)n;
	mov A, 0
	mov B, SP
	.loc 6 151 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov A, 0
	mov B, SP
	.loc 6 151 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	.loc 6 151 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L437:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 157 0
	#     putchar(str[i]);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.L109:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L438, A, 0
	jmp .L439
	.L438:
	.loc 6 157 0
	#     putchar(str[i]);
	jmp .L111
	.L439:
	.loc 6 155 0
	#   size_t l = (int)s * (int)n;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 157 0
	#     putchar(str[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L110:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	jmp .L109
	.L111:
	.loc 6 159 0
	# }
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fputs:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 163 0
	# }
	.loc 6 159 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L440:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fgets:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 176 0
	# }
	.loc 6 172 0
	#     }
	.loc 6 167 0
	#     int c = getchar();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 6 172 0
	#     }
	.L112:
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 167 0
	#     int c = getchar();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L441, A, 0
	jmp .L442
	.L441:
	.loc 6 172 0
	#     }
	jmp .L114
	.L442:
	.loc 6 168 0
	#     s[i] = c;
	mov A, 0
	mov B, SP
	getc A
	jne .L443, A, 0
	mov A, -1
	.L443:
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 169 0
	#     if (c == '\n' || c == EOF) {
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 169 0
	#     if (c == '\n' || c == EOF) {
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	.loc 6 170 0
	#       s[i + 1] = 0;
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 170 0
	#       s[i + 1] = 0;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L444, A, 0
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 170 0
	#       s[i + 1] = 0;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L444:
	mov A, B
	jeq .L445, A, 0
	.loc 6 172 0
	#     }
	.loc 6 171 0
	#       return i;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 171 0
	#       return i;
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 171 0
	#       return i;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L445:
	.loc 6 172 0
	#     }
	.L113:
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	jmp .L112
	.L114:
	.loc 6 175 0
	#   return size;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 175 0
	#   return size;
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 175 0
	#   return size;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 176 0
	# }
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
g_ungot:
	.long -1
	.data
	eof_seen:

	.long 0
	.text
fgetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 6 195 0
	# }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	.loc 6 191 0
	#   }
	.loc 6 184 0
	#     // A hack for whitespace, in which getchar after EOF is not
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 184 0
	#     // A hack for whitespace, in which getchar after EOF is not
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L446, A, 0
	.loc 6 191 0
	#   }
	.loc 6 187 0
	#       return EOF;
	.loc 6 176 0
	# }
	mov B, eof_seen
	load A, B
	jeq .L447, A, 0
	.loc 6 187 0
	#       return EOF;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L447:
	.loc 6 189 0
	#     eof_seen = r == EOF;
	getc A
	jne .L448, A, 0
	mov A, -1
	.L448:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 190 0
	#     return r;
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 190 0
	#     return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, eof_seen
	store A, B
	.loc 6 191 0
	#   }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L446:
	.loc 6 193 0
	#   g_ungot = EOF;
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 194 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, g_ungot
	store A, B
	.loc 6 195 0
	# }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
getc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 199 0
	# }
	.loc 6 195 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fgetc
	.L449:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ungetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 205 0
	# }
	.loc 6 203 0
	#     return g_ungot = c;
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 203 0
	#     return g_ungot = c;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L450, A, 0
	.loc 6 199 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, g_ungot
	store A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L450:
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
main:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.file 7 "out/dump_ir.c"
	.loc 7 20 0
	# }
	.loc 7 7 0
	#   // Host dump_ir.c.exe should dump to stdout for testing.
	mov A, 0
	mov B, SP
	.loc 6 123 0
	# }
	mov B, stdin
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp load_eir
	.L451:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9 0
	# #else
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov B, stderr
	store A, B
	.loc 7 18 0
	#   }
	.loc 7 17 0
	#     dump_inst(inst);
	mov A, 0
	mov B, SP
	.loc 7 7 0
	#   // Host dump_ir.c.exe should dump to stdout for testing.
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 18 0
	#   }
	.L115:
	.loc 7 17 0
	#     dump_inst(inst);
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L452, A, 0
	jmp .L453
	.L452:
	.loc 7 18 0
	#   }
	jmp .L117
	.L453:
	.loc 7 17 0
	#     dump_inst(inst);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_inst
	.L454:
	mov A, B
	add SP, 1
	.loc 7 18 0
	#   }
	.L116:
	.loc 7 17 0
	#     dump_inst(inst);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 18 0
	#   }
	jmp .L115
	.L117:
	.loc 7 20 0
	# }
	mov A, 0
	mov B, A
	exit
	exit
	.data 0
g_split_basic_block_by_mem:
	.long 0
	.text
ir_error:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 69 0
	# }
	.loc 7 68 0
	#   exit(1);
	.loc 7 20 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 68 0
	#   exit(1);
	.loc 7 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 68 0
	#   exit(1);
	.loc 7 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 68 0
	#   exit(1);
	.loc 7 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 68 0
	#   exit(1);
.data
	.L455:
	.string "%s:%d:%d: %s\n"
.text
	mov A, .L455
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L456
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L456:
	mov A, B
	add SP, 6
	.loc 7 69 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ir_getc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 80 0
	# }
	.loc 7 73 0
	#   if (c == '\n') {
	mov A, 0
	mov B, SP
	.loc 7 69 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fgetc
	.L457:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 78 0
	#   }
	.loc 7 74 0
	#     p->lineno++;
	.loc 7 73 0
	#   if (c == '\n') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 74 0
	#     p->lineno++;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L458, A, 0
	.loc 7 76 0
	#   } else {
	.loc 7 75 0
	#     p->col = 0;
	.loc 7 69 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.loc 7 76 0
	#   } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 69 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	jmp .L459
	.L458:
	.loc 7 78 0
	#   }
	.loc 7 69 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.L459:
	.loc 7 80 0
	# }
	.loc 7 73 0
	#   if (c == '\n') {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ir_ungetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 87 0
	# }
	.loc 7 85 0
	#   }
	.loc 7 84 0
	#     p->lineno--;
	.loc 7 80 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 84 0
	#     p->lineno--;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L460, A, 0
	.loc 7 85 0
	#   }
	.loc 7 80 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.L460:
	.loc 7 87 0
	# }
	.loc 7 80 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L461
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ungetc
	.L461:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
peek:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 93 0
	# }
	.loc 7 91 0
	#   ungetc(c, p->fp);
	mov A, 0
	mov B, SP
	.loc 7 87 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fgetc
	.L462:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 92 0
	#   return c;
	.loc 7 87 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 91 0
	#   ungetc(c, p->fp);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ungetc
	.L463:
	mov A, B
	add SP, 2
	.loc 7 93 0
	# }
	.loc 7 91 0
	#   ungetc(c, p->fp);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_until_ret:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 103 0
	# }
	.loc 7 97 0
	#   for (;;) {
	.loc 7 100 0
	#       break;
	.L118:
	.loc 7 99 0
	#     if (c == '\n' || c == EOF)
	.loc 7 93 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L464
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L464:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 100 0
	#       break;
	.loc 7 97 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 100 0
	#       break;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L465, A, 0
	.loc 7 97 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 100 0
	#       break;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L465:
	mov A, B
	jeq .L466, A, 0
	jmp .L120
	.L466:
	.L119:
	jmp .L118
	.L120:
	.loc 7 103 0
	# }
	.loc 7 97 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 93 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L467
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L467:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_ws:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 113 0
	# }
	.loc 7 107 0
	#   for (;;) {
	.loc 7 110 0
	#       break;
	.L121:
	.loc 7 109 0
	#     if (!isspace(c))
	.loc 7 103 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L468
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L468:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 110 0
	#       break;
	.loc 7 107 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L469:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L470, A, 0
	.loc 7 110 0
	#       break;
	jmp .L123
	.L470:
	.L122:
	jmp .L121
	.L123:
	.loc 7 113 0
	# }
	.loc 7 107 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 103 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L471:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_while_ident:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 126 0
	# }
	.loc 7 124 0
	#   }
	.L124:
	.loc 7 117 0
	#     int c = ir_getc(p);
	.loc 7 113 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 4
	store A, B
	load A, SP
	add SP, 1
	jeq .L472, A, 0
	.loc 7 124 0
	#   }
	.loc 7 118 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov A, 0
	mov B, SP
	.loc 7 113 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L473:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 122 0
	#     }
	.loc 7 119 0
	#       ir_ungetc(p, c);
	.loc 7 118 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L476
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalnum
	.L476:
	mov A, B
	add SP, 1
	eq A, 0
	mov B, 0
	jeq .L475, A, 0
	.loc 7 119 0
	#       ir_ungetc(p, c);
	.loc 7 118 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 119 0
	#       ir_ungetc(p, c);
	mov A, 95
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L475:
	mov A, B
	mov B, 0
	jeq .L474, A, 0
	.loc 7 118 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 119 0
	#       ir_ungetc(p, c);
	mov A, 46
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L474:
	mov A, B
	jeq .L477, A, 0
	.loc 7 122 0
	#     }
	.loc 7 120 0
	#       *buf = 0;
	.loc 7 118 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 113 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L478
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L478:
	mov A, B
	add SP, 2
	.loc 7 121 0
	#       return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 113 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 122 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L477:
	.loc 7 124 0
	#   }
	.loc 7 118 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 124 0
	#   }
	.loc 7 113 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L479
	.L472:
	.loc 7 124 0
	#   }
	jmp .L125
	.L479:
	jmp .L124
	.L125:
	.loc 7 126 0
	# }
.data
	.L480:
	.string "too long ident"
.text
	mov A, .L480
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 113 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L481:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 144 0
	# }
	.file 8 "/Users/nullpo/dev/elvm/libc/stdbool.h"
	.loc 8 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 131 0
	#   if (c == '-') {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 135 0
	#       ir_error(p, "digit expected");
	.loc 7 132 0
	#     is_minus = true;
	.loc 7 126 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 132 0
	#     is_minus = true;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L482, A, 0
	.loc 7 135 0
	#       ir_error(p, "digit expected");
	.loc 7 133 0
	#     c = ir_getc(p);
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 134 0
	#     if (!isdigit(c))
	.loc 7 126 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L483:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 135 0
	#       ir_error(p, "digit expected");
	.loc 7 126 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L484:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L485, A, 0
	.loc 7 135 0
	#       ir_error(p, "digit expected");
.data
	.L486:
	.string "digit expected"
.text
	mov A, .L486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 126 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L487:
	mov A, B
	add SP, 2
	.L485:
	.L482:
	.loc 7 141 0
	#   }
	.L126:
	.loc 7 138 0
	#     r *= 10;
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 126 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L488, A, 0
	.loc 7 138 0
	#     r *= 10;
	.loc 7 126 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 138 0
	#     r *= 10;
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L488:
	mov A, B
	jeq .L489, A, 0
	.loc 7 141 0
	#   }
	.loc 7 139 0
	#     r += c - '0';
	.loc 7 131 0
	#   if (c == '-') {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 139 0
	#     r += c - '0';
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L490:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 140 0
	#     c = ir_getc(p);
	.loc 7 131 0
	#   if (c == '-') {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 140 0
	#     c = ir_getc(p);
	.loc 7 126 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 140 0
	#     c = ir_getc(p);
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 141 0
	#   }
	.loc 7 126 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L491:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	jmp .L492
	.L489:
	.loc 7 141 0
	#   }
	jmp .L127
	.L492:
	jmp .L126
	.L127:
	.loc 7 143 0
	#   return is_minus ? -r : r;
	.loc 7 126 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L493
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L493:
	mov A, B
	add SP, 2
	.loc 7 144 0
	# }
	.loc 8 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L494, A, 0
	.loc 7 144 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 131 0
	#   if (c == '-') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L495
	.L494:
	mov B, BP
	add B, 16777214
	load A, B
	.L495:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
add_data:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 154 0
	# }
	.loc 7 148 0
	#   n->next = 0;
	mov A, 0
	mov B, SP
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L496
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L496:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 149 0
	#   n->v = p->subsection;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 148 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 150 0
	#   n->lineno = p->lineno;
	.loc 7 144 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 148 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 151 0
	#   p->data->next = n;
	.loc 7 144 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 148 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 152 0
	#   p->data = n;
	.loc 7 148 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 152 0
	#   p->data = n;
	.loc 7 144 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 153 0
	#   return n;
	.loc 7 148 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 144 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 154 0
	# }
	.loc 7 148 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
add_imm_data:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 160 0
	# }
	.loc 7 158 0
	#   n->val.type = IMM;
	mov A, 0
	mov B, SP
	.loc 7 154 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_data
	.L497:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 159 0
	#   n->val.imm = v;
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 158 0
	#   n->val.type = IMM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 160 0
	# }
	.loc 7 154 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 158 0
	#   n->val.type = IMM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
serialize_data:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 11
	.loc 7 198 0
	# }
	.loc 8 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 165 0
	#   DataPrivate* serialized = &serialized_root;
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 166 0
	#   intptr_t mp = 0;
	mov A, 0
	mov B, SP
	mov A, BP
	add A, -6
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 167 0
	#   for (int subsection = 0; !done; subsection++) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 188 0
	#     }
	.loc 7 168 0
	#     done = true;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777207
	mov A, 0
	store A, B
	.loc 7 188 0
	#     }
	.L128:
	.loc 7 168 0
	#     done = true;
	.loc 8 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L498, A, 0
	jmp .L499
	.L498:
	.loc 7 188 0
	#     }
	jmp .L130
	.L499:
	.loc 7 169 0
	#     for (DataPrivate* data = data_root; data->next;) {
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 188 0
	#     }
	.loc 7 170 0
	#       DataPrivate* prev = data;
	mov A, 0
	mov B, SP
	.loc 7 160 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 188 0
	#     }
	.L131:
	.loc 7 170 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	add B, 1
	load A, B
	jeq .L500, A, 0
	jmp .L501
	.L500:
	.loc 7 188 0
	#     }
	jmp .L133
	.L501:
	.loc 7 171 0
	#       data = prev->next;
	mov A, 0
	mov B, SP
	.loc 7 170 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 172 0
	#       if (data->v != subsection) {
	.loc 7 171 0
	#       data = prev->next;
	mov B, BP
	add B, 16777205
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 174 0
	#       }
	.loc 7 173 0
	#         continue;
	.loc 7 170 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 168 0
	#     done = true;
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L502, A, 0
	.loc 7 174 0
	#       }
	jmp .L132
	.L502:
	.loc 7 176 0
	# 
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 178 0
	# 
	.loc 7 170 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 171 0
	#       data = prev->next;
	mov B, BP
	add B, 16777205
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 186 0
	#       }
	.loc 7 180 0
	#         p->symtab = table_add(p->symtab, data->val.tmp, (void*)mp);
	.loc 7 170 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 180 0
	#         p->symtab = table_add(p->symtab, data->val.tmp, (void*)mp);
	.loc 7 20 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L503, A, 0
	.loc 7 181 0
	#       } else {
	.loc 7 167 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 181 0
	#       } else {
	.loc 7 170 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 181 0
	#       } else {
	.loc 7 160 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_add
	.L504:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	jmp .L505
	.L503:
	.loc 7 186 0
	#       }
	.loc 7 183 0
	#         serialized = data;
	.loc 7 170 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 166 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 184 0
	#         serialized->next = 0;
	.loc 7 170 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 185 0
	#         mp++;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 166 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 186 0
	#       }
	.loc 7 167 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777208
	store A, B
	load A, SP
	add SP, 1
	.L505:
	.loc 7 188 0
	#     }
	.loc 7 171 0
	#       data = prev->next;
	mov B, BP
	add B, 16777205
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 188 0
	#     }
	.L132:
	jmp .L131
	.L133:
	.L129:
	.loc 7 168 0
	#     done = true;
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777207
	store A, B
	load A, SP
	add SP, 1
	.loc 7 188 0
	#     }
	jmp .L128
	.L130:
	.loc 7 192 0
	#   serialized->next = malloc(sizeof(DataPrivate));
	.loc 7 167 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 192 0
	#   serialized->next = malloc(sizeof(DataPrivate));
.data
	.L506:
	.string "_edata"
.text
	mov A, .L506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 160 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L507
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_add
	.L507:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 193 0
	#   serialized->next->v = mp + 1;
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L508:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 166 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 194 0
	#   serialized->next->next = 0;
	.loc 7 167 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 194 0
	#   serialized->next->next = 0;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 166 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 195 0
	#   serialized->next->val.type = IMM;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 166 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 196 0
	#   serialized->next->val.imm = mp + 1;
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 196 0
	#   serialized->next->val.imm = mp + 1;
	.loc 7 166 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 197 0
	#   data_root->next = serialized_root.next;
	.loc 7 167 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 197 0
	#   data_root->next = serialized_root.next;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 166 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 198 0
	# }
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 160 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
get_op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 261 0
	# }
	.loc 7 202 0
	#     return OP_UNSET;
	.loc 7 198 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L509:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 202 0
	#     return OP_UNSET;
	mov A, 58
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L510, A, 0
	.loc 6 205 0
	# }
	mov A, 16777214
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L510:
	.loc 7 259 0
	#   }
	.loc 7 204 0
	#     return MOV;
.data
	.L511:
	.string "mov"
.text
	mov A, .L511
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L512:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L513, A, 0
	.loc 7 205 0
	#   } else if (!strcmp(buf, "add")) {
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L514
	.L513:
	.loc 7 259 0
	#   }
	.loc 7 205 0
	#   } else if (!strcmp(buf, "add")) {
.data
	.L515:
	.string "add"
.text
	mov A, .L515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L516:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L517, A, 0
	.loc 7 207 0
	#   } else if (!strcmp(buf, "sub")) {
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L518
	.L517:
	.loc 7 259 0
	#   }
	.loc 7 207 0
	#   } else if (!strcmp(buf, "sub")) {
.data
	.L519:
	.string "sub"
.text
	mov A, .L519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L520
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L520:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L521, A, 0
	.loc 7 209 0
	#   } else if (!strcmp(buf, "load")) {
	.loc 6 205 0
	# }
	mov A, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L522
	.L521:
	.loc 7 259 0
	#   }
	.loc 7 209 0
	#   } else if (!strcmp(buf, "load")) {
.data
	.L523:
	.string "load"
.text
	mov A, .L523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L524:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L525, A, 0
	.loc 7 211 0
	#   } else if (!strcmp(buf, "store")) {
	.loc 6 205 0
	# }
	mov A, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L526
	.L525:
	.loc 7 259 0
	#   }
	.loc 7 211 0
	#   } else if (!strcmp(buf, "store")) {
.data
	.L527:
	.string "store"
.text
	mov A, .L527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L528:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L529, A, 0
	.loc 7 213 0
	#   } else if (!strcmp(buf, "putc")) {
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L530
	.L529:
	.loc 7 259 0
	#   }
	.loc 7 213 0
	#   } else if (!strcmp(buf, "putc")) {
.data
	.L531:
	.string "putc"
.text
	mov A, .L531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L532:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L533, A, 0
	.loc 7 215 0
	#   } else if (!strcmp(buf, "getc")) {
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L534
	.L533:
	.loc 7 259 0
	#   }
	.loc 7 215 0
	#   } else if (!strcmp(buf, "getc")) {
.data
	.L535:
	.string "getc"
.text
	mov A, .L535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L536:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L537, A, 0
	.loc 7 217 0
	#   } else if (!strcmp(buf, "exit")) {
	.loc 6 205 0
	# }
	mov A, 6
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L538
	.L537:
	.loc 7 259 0
	#   }
	.loc 7 217 0
	#   } else if (!strcmp(buf, "exit")) {
.data
	.L539:
	.string "exit"
.text
	mov A, .L539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L540:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L541, A, 0
	.loc 7 219 0
	#   } else if (!strcmp(buf, "dump")) {
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L542
	.L541:
	.loc 7 259 0
	#   }
	.loc 7 219 0
	#   } else if (!strcmp(buf, "dump")) {
.data
	.L543:
	.string "dump"
.text
	mov A, .L543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L544:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L545, A, 0
	.loc 7 221 0
	#   } else if (!strcmp(buf, "jeq")) {
	.loc 6 205 0
	# }
	mov A, 22
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L546
	.L545:
	.loc 7 259 0
	#   }
	.loc 7 221 0
	#   } else if (!strcmp(buf, "jeq")) {
.data
	.L547:
	.string "jeq"
.text
	mov A, .L547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L548:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L549, A, 0
	.loc 7 223 0
	#   } else if (!strcmp(buf, "jne")) {
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L550
	.L549:
	.loc 7 259 0
	#   }
	.loc 7 223 0
	#   } else if (!strcmp(buf, "jne")) {
.data
	.L551:
	.string "jne"
.text
	mov A, .L551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L552:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L553, A, 0
	.loc 7 225 0
	#   } else if (!strcmp(buf, "jlt")) {
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L554
	.L553:
	.loc 7 259 0
	#   }
	.loc 7 225 0
	#   } else if (!strcmp(buf, "jlt")) {
.data
	.L555:
	.string "jlt"
.text
	mov A, .L555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L556:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L557, A, 0
	.loc 7 227 0
	#   } else if (!strcmp(buf, "jgt")) {
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L558
	.L557:
	.loc 7 259 0
	#   }
	.loc 7 227 0
	#   } else if (!strcmp(buf, "jgt")) {
.data
	.L559:
	.string "jgt"
.text
	mov A, .L559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L560:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L561, A, 0
	.loc 7 229 0
	#   } else if (!strcmp(buf, "jle")) {
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L562
	.L561:
	.loc 7 259 0
	#   }
	.loc 7 229 0
	#   } else if (!strcmp(buf, "jle")) {
.data
	.L563:
	.string "jle"
.text
	mov A, .L563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L564:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L565, A, 0
	.loc 7 231 0
	#   } else if (!strcmp(buf, "jge")) {
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L566
	.L565:
	.loc 7 259 0
	#   }
	.loc 7 231 0
	#   } else if (!strcmp(buf, "jge")) {
.data
	.L567:
	.string "jge"
.text
	mov A, .L567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L568:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L569, A, 0
	.loc 7 233 0
	#   } else if (!strcmp(buf, "jmp")) {
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L570
	.L569:
	.loc 7 259 0
	#   }
	.loc 7 233 0
	#   } else if (!strcmp(buf, "jmp")) {
.data
	.L571:
	.string "jmp"
.text
	mov A, .L571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L572:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L573, A, 0
	.loc 7 235 0
	#   } else if (!strcmp(buf, "eq")) {
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L574
	.L573:
	.loc 7 259 0
	#   }
	.loc 7 235 0
	#   } else if (!strcmp(buf, "eq")) {
.data
	.L575:
	.string "eq"
.text
	mov A, .L575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L576:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L577, A, 0
	.loc 7 237 0
	#   } else if (!strcmp(buf, "ne")) {
	.loc 6 205 0
	# }
	mov A, 16
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L578
	.L577:
	.loc 7 259 0
	#   }
	.loc 7 237 0
	#   } else if (!strcmp(buf, "ne")) {
.data
	.L579:
	.string "ne"
.text
	mov A, .L579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L580:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L581, A, 0
	.loc 7 239 0
	#   } else if (!strcmp(buf, "lt")) {
	.loc 6 205 0
	# }
	mov A, 17
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L582
	.L581:
	.loc 7 259 0
	#   }
	.loc 7 239 0
	#   } else if (!strcmp(buf, "lt")) {
.data
	.L583:
	.string "lt"
.text
	mov A, .L583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L584:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L585, A, 0
	.loc 7 241 0
	#   } else if (!strcmp(buf, "gt")) {
	.loc 6 205 0
	# }
	mov A, 18
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L586
	.L585:
	.loc 7 259 0
	#   }
	.loc 7 241 0
	#   } else if (!strcmp(buf, "gt")) {
.data
	.L587:
	.string "gt"
.text
	mov A, .L587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L588:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L589, A, 0
	.loc 7 243 0
	#   } else if (!strcmp(buf, "le")) {
	.loc 6 205 0
	# }
	mov A, 19
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L590
	.L589:
	.loc 7 259 0
	#   }
	.loc 7 243 0
	#   } else if (!strcmp(buf, "le")) {
.data
	.L591:
	.string "le"
.text
	mov A, .L591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L592:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L593, A, 0
	.loc 7 245 0
	#   } else if (!strcmp(buf, "ge")) {
	.loc 6 205 0
	# }
	mov A, 20
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L594
	.L593:
	.loc 7 259 0
	#   }
	.loc 7 245 0
	#   } else if (!strcmp(buf, "ge")) {
.data
	.L595:
	.string "ge"
.text
	mov A, .L595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L596:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L597, A, 0
	.loc 7 247 0
	#   } else if (!strcmp(buf, ".text")) {
	.loc 6 205 0
	# }
	mov A, 21
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L598
	.L597:
	.loc 7 259 0
	#   }
	.loc 7 247 0
	#   } else if (!strcmp(buf, ".text")) {
.data
	.L599:
	.string ".text"
.text
	mov A, .L599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L600:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L601, A, 0
	.loc 7 249 0
	#   } else if (!strcmp(buf, ".data")) {
	.loc 7 20 0
	# }
	mov A, 25
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L602
	.L601:
	.loc 7 259 0
	#   }
	.loc 7 249 0
	#   } else if (!strcmp(buf, ".data")) {
.data
	.L603:
	.string ".data"
.text
	mov A, .L603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L604:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L605, A, 0
	.loc 7 251 0
	#   } else if (!strcmp(buf, ".long")) {
	.loc 7 20 0
	# }
	mov A, 24
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L606
	.L605:
	.loc 7 259 0
	#   }
	.loc 7 251 0
	#   } else if (!strcmp(buf, ".long")) {
.data
	.L607:
	.string ".long"
.text
	mov A, .L607
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L608:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L609, A, 0
	.loc 7 253 0
	#   } else if (!strcmp(buf, ".string")) {
	.loc 7 20 0
	# }
	mov A, 26
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L610
	.L609:
	.loc 7 259 0
	#   }
	.loc 7 253 0
	#   } else if (!strcmp(buf, ".string")) {
.data
	.L611:
	.string ".string"
.text
	mov A, .L611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L612:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L613, A, 0
	.loc 7 255 0
	#   } else if (!strcmp(buf, ".file")) {
	.loc 7 20 0
	# }
	mov A, 27
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L614
	.L613:
	.loc 7 259 0
	#   }
	.loc 7 255 0
	#   } else if (!strcmp(buf, ".file")) {
.data
	.L615:
	.string ".file"
.text
	mov A, .L615
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L616
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L616:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L617, A, 0
	.loc 7 257 0
	#   } else if (!strcmp(buf, ".loc")) {
	.loc 7 20 0
	# }
	mov A, 28
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L618
	.L617:
	.loc 7 259 0
	#   }
	.loc 7 257 0
	#   } else if (!strcmp(buf, ".loc")) {
.data
	.L619:
	.string ".loc"
.text
	mov A, .L619
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 198 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L620
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L620:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L621, A, 0
	.loc 7 259 0
	#   }
	.loc 7 20 0
	# }
	mov A, 29
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L621:
	.L618:
	.L614:
	.L610:
	.L606:
	.L602:
	.L598:
	.L594:
	.L590:
	.L586:
	.L582:
	.L578:
	.L574:
	.L570:
	.L566:
	.L562:
	.L558:
	.L554:
	.L550:
	.L546:
	.L542:
	.L538:
	.L534:
	.L530:
	.L526:
	.L522:
	.L518:
	.L514:
	.loc 7 261 0
	# }
	.loc 6 205 0
	# }
	mov A, 16777214
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parse_line:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 82
	.loc 7 478 0
	#       ir_error(p, "oops");
	.loc 7 265 0
	#   buf[0] = c;
	.loc 7 266 0
	#   read_while_ident(p, buf + 1, 62);
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 266 0
	#   read_while_ident(p, buf + 1, 62);
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 266 0
	#   read_while_ident(p, buf + 1, 62);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 267 0
	#   Op op = get_op(p, buf);
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 267 0
	#   Op op = get_op(p, buf);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L622
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_while_ident
	.L622:
	mov A, B
	add SP, 3
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov A, 0
	mov B, SP
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L623
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_op
	.L623:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777151
	store A, B
	.loc 7 344 0
	#   }
	.loc 7 269 0
	#     p->in_text = 1;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 269 0
	#     p->in_text = 1;
	.loc 7 20 0
	# }
	mov A, 25
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L624, A, 0
	.loc 7 271 0
	#   } else if (op == (Op)STRING) {
	.loc 7 270 0
	#     return;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 271 0
	#   } else if (op == (Op)STRING) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L625
	.L624:
	.loc 7 344 0
	#   }
	.loc 7 271 0
	#   } else if (op == (Op)STRING) {
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 271 0
	#   } else if (op == (Op)STRING) {
	.loc 7 20 0
	# }
	mov A, 27
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L626, A, 0
	.loc 7 320 0
	#   } else if (op == (Op)FILENAME) {
	.loc 7 273 0
	#       ir_error(p, "in text");
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L627, A, 0
	.loc 7 273 0
	#       ir_error(p, "in text");
.data
	.L628:
	.string "in text"
.text
	mov A, .L628
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L629
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L629:
	mov A, B
	add SP, 2
	.L627:
	.loc 7 275 0
	#     if (ir_getc(p) != '"')
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L630
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L630:
	mov A, B
	add SP, 1
	.loc 7 276 0
	#       ir_error(p, "expected open '\"'");
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L631:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 276 0
	#       ir_error(p, "expected open '\"'");
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L632, A, 0
.data
	.L633:
	.string "expected open '\"'"
.text
	mov A, .L633
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L634
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L634:
	mov A, B
	add SP, 2
	.L632:
	.loc 7 279 0
	#     while (c != '"') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L635
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L635:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 317 0
	#     }
	.L134:
	.loc 7 280 0
	#       if (c == '\\') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 280 0
	#       if (c == '\\') {
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L636, A, 0
	.loc 7 317 0
	#     }
	.loc 7 315 0
	#       }
	.loc 7 281 0
	#         c = ir_getc(p);
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 281 0
	#         c = ir_getc(p);
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L637, A, 0
	.loc 7 313 0
	#       } else {
	.loc 7 282 0
	#         if (c == 'n') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L638:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 311 0
	#         }
	.loc 7 283 0
	#           c = '\n';
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 283 0
	#           c = '\n';
	mov A, 110
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L639, A, 0
	.loc 7 284 0
	#         } else if (c == 't') {
	mov A, 10
	mov B, BP
	add B, 3
	store A, B
	jmp .L640
	.L639:
	.loc 7 311 0
	#         }
	.loc 7 284 0
	#         } else if (c == 't') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 284 0
	#         } else if (c == 't') {
	mov A, 116
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L641, A, 0
	.loc 7 286 0
	#         } else if (c == 'b') {
	mov A, 9
	mov B, BP
	add B, 3
	store A, B
	jmp .L642
	.L641:
	.loc 7 311 0
	#         }
	.loc 7 286 0
	#         } else if (c == 'b') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 286 0
	#         } else if (c == 'b') {
	mov A, 98
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L643, A, 0
	.loc 7 288 0
	#         } else if (c == 'f') {
	mov A, 8
	mov B, BP
	add B, 3
	store A, B
	jmp .L644
	.L643:
	.loc 7 311 0
	#         }
	.loc 7 288 0
	#         } else if (c == 'f') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 288 0
	#         } else if (c == 'f') {
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L645, A, 0
	.loc 7 290 0
	#         } else if (c == 'r') {
	mov A, 12
	mov B, BP
	add B, 3
	store A, B
	jmp .L646
	.L645:
	.loc 7 311 0
	#         }
	.loc 7 290 0
	#         } else if (c == 'r') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 290 0
	#         } else if (c == 'r') {
	mov A, 114
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L647, A, 0
	.loc 7 292 0
	#         } else if (c == '\"') {
	mov A, 13
	mov B, BP
	add B, 3
	store A, B
	jmp .L648
	.L647:
	.loc 7 311 0
	#         }
	.loc 7 292 0
	#         } else if (c == '\"') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 292 0
	#         } else if (c == '\"') {
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L649, A, 0
	.loc 7 294 0
	#         } else if (c == '\\') {
	mov A, 34
	mov B, BP
	add B, 3
	store A, B
	jmp .L650
	.L649:
	.loc 7 311 0
	#         }
	.loc 7 294 0
	#         } else if (c == '\\') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 294 0
	#         } else if (c == '\\') {
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L651, A, 0
	.loc 7 296 0
	#         } else if (c == 'x') {
	mov A, 92
	mov B, BP
	add B, 3
	store A, B
	jmp .L652
	.L651:
	.loc 7 311 0
	#         }
	.loc 7 296 0
	#         } else if (c == 'x') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 296 0
	#         } else if (c == 'x') {
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L653, A, 0
	.loc 7 309 0
	#         } else {
	.loc 7 298 0
	#           b[0] = ir_getc(p);
	.loc 7 299 0
	#           c = ir_getc(p);
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L654:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 299 0
	#           c = ir_getc(p);
	.loc 7 298 0
	#           b[0] = ir_getc(p);
	mov A, BP
	add A, 16777148
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 299 0
	#           c = ir_getc(p);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 300 0
	#           if (!((c >= '0' && c <= '9') ||
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L655:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 305 0
	#           }
	.loc 7 301 0
	#                 (c >= 'a' && c <= 'f') ||
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L658, A, 0
	.loc 7 301 0
	#                 (c >= 'a' && c <= 'f') ||
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 301 0
	#                 (c >= 'a' && c <= 'f') ||
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L658:
	mov A, B
	mov B, 1
	jne .L657, A, 0
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L659, A, 0
	.loc 7 301 0
	#                 (c >= 'a' && c <= 'f') ||
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 301 0
	#                 (c >= 'a' && c <= 'f') ||
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L659:
	mov A, B
	mov B, A
	ne B, 0
	.L657:
	mov A, B
	mov B, 1
	jne .L656, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L660, A, 0
	.loc 7 301 0
	#                 (c >= 'a' && c <= 'f') ||
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 301 0
	#                 (c >= 'a' && c <= 'f') ||
	mov A, 70
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L660:
	mov A, B
	mov B, A
	ne B, 0
	.L656:
	mov A, B
	eq A, 0
	jeq .L661, A, 0
	.loc 7 305 0
	#           }
	.loc 7 304 0
	#             c = 0;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L662:
	mov A, B
	add SP, 2
	.loc 7 305 0
	#           }
	mov A, 0
	mov B, BP
	add B, 3
	store A, B
	.L661:
	.loc 7 307 0
	#           b[2] = 0;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 307 0
	#           b[2] = 0;
	.loc 7 298 0
	#           b[0] = ir_getc(p);
	mov A, BP
	add A, 16777148
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 307 0
	#           b[2] = 0;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 308 0
	#           c = strtoul(b, NULL, 16);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 298 0
	#           b[0] = ir_getc(p);
	mov A, BP
	add A, 16777148
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 308 0
	#           c = strtoul(b, NULL, 16);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 309 0
	#         } else {
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 298 0
	#           b[0] = ir_getc(p);
	mov A, BP
	add A, 16777148
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtoul
	.L663:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 3
	store A, B
	jmp .L664
	.L653:
	.loc 7 311 0
	#         }
.data
	.L665:
	.string "unknown escape"
.text
	mov A, .L665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L666
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L666:
	mov A, B
	add SP, 2
	.L664:
	.L652:
	.L650:
	.L648:
	.L646:
	.L644:
	.L642:
	.L640:
	.loc 7 313 0
	#       } else {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_imm_data
	.L667:
	mov A, B
	add SP, 2
	jmp .L668
	.L637:
	.loc 7 315 0
	#       }
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_imm_data
	.L669:
	mov A, B
	add SP, 2
	.L668:
	.loc 7 317 0
	#     }
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L670:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	jmp .L671
	.L636:
	.loc 7 317 0
	#     }
	jmp .L135
	.L671:
	jmp .L134
	.L135:
	.loc 7 319 0
	#     return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_imm_data
	.L672:
	mov A, B
	add SP, 2
	.loc 7 320 0
	#   } else if (op == (Op)FILENAME) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L673
	.L626:
	.loc 7 344 0
	#   }
	.loc 7 320 0
	#   } else if (op == (Op)FILENAME) {
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 320 0
	#   } else if (op == (Op)FILENAME) {
	.loc 7 20 0
	# }
	mov A, 28
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L674, A, 0
	.loc 7 323 0
	#   } else if (op == (Op)LOC) {
	.loc 7 322 0
	#     return;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_until_ret
	.L675:
	mov A, B
	add SP, 1
	.loc 7 323 0
	#   } else if (op == (Op)LOC) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L676
	.L674:
	.loc 7 344 0
	#   }
	.loc 7 323 0
	#   } else if (op == (Op)LOC) {
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 323 0
	#   } else if (op == (Op)LOC) {
	.loc 7 20 0
	# }
	mov A, 29
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L677, A, 0
	.loc 7 326 0
	#   } else if (op == OP_UNSET) {
	.loc 7 325 0
	#     return;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_until_ret
	.L678:
	mov A, B
	add SP, 1
	.loc 7 326 0
	#   } else if (op == OP_UNSET) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L679
	.L677:
	.loc 7 344 0
	#   }
	.loc 7 326 0
	#   } else if (op == OP_UNSET) {
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 16777214
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L680, A, 0
	.loc 7 344 0
	#   }
	.loc 7 328 0
	#     if (c == ':') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L681:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 342 0
	#     }
	.loc 7 329 0
	#       intptr_t value = 0;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 329 0
	#       intptr_t value = 0;
	mov A, 58
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L682, A, 0
	.loc 7 342 0
	#     }
	.loc 7 330 0
	#       if (p->in_text) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777147
	store A, B
	.loc 7 340 0
	#       }
	.loc 7 331 0
	#         if (!p->prev_boundary)
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L683, A, 0
	.loc 7 336 0
	#       } else {
	.loc 7 332 0
	#           p->pc++;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 10
	load A, B
	eq A, 0
	jeq .L684, A, 0
	.loc 7 332 0
	#           p->pc++;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.L684:
	.loc 7 334 0
	#         p->prev_boundary = true;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777147
	store A, B
	.loc 7 335 0
	#         p->symtab = table_add(p->symtab, strdup(buf), (void*)value);
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.loc 7 336 0
	#       } else {
	.loc 7 330 0
	#       if (p->in_text) {
	mov B, BP
	add B, 16777147
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 336 0
	#       } else {
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strdup
	.L685:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 336 0
	#       } else {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_add
	.L686:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	jmp .L687
	.L683:
	.loc 7 340 0
	#       }
	.loc 7 338 0
	#         d->val.type = LABEL;
	mov A, 0
	mov B, SP
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_data
	.L688:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777146
	store A, B
	.loc 7 339 0
	#         d->val.tmp = strdup(buf);
	.loc 7 20 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 338 0
	#         d->val.type = LABEL;
	mov B, BP
	add B, 16777146
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 340 0
	#       }
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strdup
	.L689:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 338 0
	#         d->val.type = LABEL;
	mov B, BP
	add B, 16777146
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.L687:
	.loc 7 342 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L682:
	.loc 7 344 0
	#   }
.data
	.L690:
	.string "unknown op"
.text
	mov A, .L690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L691:
	mov A, B
	add SP, 2
	.L680:
	.L679:
	.L676:
	.L673:
	.L625:
	.loc 7 348 0
	#   }
	.loc 7 347 0
	#     ir_error(p, "oops");
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 347 0
	#     ir_error(p, "oops");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L692, A, 0
	.loc 7 348 0
	#   }
.data
	.L693:
	.string "oops"
.text
	mov A, .L693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L694:
	mov A, B
	add SP, 2
	.L692:
	.loc 7 350 0
	#   if (op <= STORE)
	.loc 7 370 0
	#   } else
	.loc 7 351 0
	#     argc = 2;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L695, A, 0
	.loc 7 351 0
	#     argc = 2;
	mov A, 2
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L696
	.L695:
	.loc 7 370 0
	#   } else
	.loc 7 351 0
	#     argc = 2;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L697, A, 0
	.loc 7 351 0
	#     argc = 2;
	mov A, 1
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L698
	.L697:
	.loc 7 370 0
	#   } else
	.loc 7 351 0
	#     argc = 2;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L699, A, 0
	.loc 7 351 0
	#     argc = 2;
	mov A, 0
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L700
	.L699:
	.loc 7 370 0
	#   } else
	.loc 7 351 0
	#     argc = 2;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L701, A, 0
	.loc 7 351 0
	#     argc = 2;
	mov A, 3
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L702
	.L701:
	.loc 7 370 0
	#   } else
	.loc 7 351 0
	#     argc = 2;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L703, A, 0
	.loc 7 351 0
	#     argc = 2;
	mov A, 1
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L704
	.L703:
	.loc 7 370 0
	#   } else
	.loc 7 351 0
	#     argc = 2;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L705, A, 0
	.loc 7 351 0
	#     argc = 2;
	mov A, 2
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L706
	.L705:
	.loc 7 370 0
	#   } else
	.loc 7 351 0
	#     argc = 2;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L707, A, 0
	.loc 7 351 0
	#     argc = 2;
	mov A, 0
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L708
	.L707:
	.loc 7 370 0
	#   } else
	.loc 7 351 0
	#     argc = 2;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 351 0
	#     argc = 2;
	.loc 7 20 0
	# }
	mov A, 26
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L709, A, 0
	.loc 7 351 0
	#     argc = 2;
	mov A, 1
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L710
	.L709:
	.loc 7 370 0
	#   } else
	.loc 7 351 0
	#     argc = 2;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 351 0
	#     argc = 2;
	.loc 7 20 0
	# }
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L711, A, 0
	.loc 7 370 0
	#   } else
	.loc 7 368 0
	#     c = peek(p);
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L712:
	mov A, B
	add SP, 1
	.loc 7 369 0
	#     argc = c == '-' || isdigit(c) ? 1 : 0;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L713:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 370 0
	#   } else
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 370 0
	#   } else
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L714, A, 0
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L715
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L715:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L714:
	mov A, B
	jeq .L716, A, 0
	.loc 7 370 0
	#   } else
	mov A, 1
	jmp .L717
	.L716:
	mov A, 0
	.L717:
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L718
	.L711:
.data
	.L719:
	.string "oops"
.text
	mov A, .L719
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L720
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L720:
	mov A, B
	add SP, 2
	.L718:
	.L710:
	.L708:
	.L706:
	.L704:
	.L702:
	.L700:
	.L698:
	.L696:
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	.loc 7 410 0
	#   }
	.loc 7 375 0
	#     skip_ws(p);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777138
	mov A, 0
	store A, B
	.loc 7 410 0
	#   }
	.L136:
	.loc 7 375 0
	#     skip_ws(p);
	mov B, BP
	add B, 16777138
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 350 0
	#   if (op <= STORE)
	mov B, BP
	add B, 16777145
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L721, A, 0
	jmp .L722
	.L721:
	.loc 7 410 0
	#   }
	jmp .L138
	.L722:
	.loc 7 376 0
	#     if (i) {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L723:
	mov A, B
	add SP, 1
	.loc 7 381 0
	#     }
	.loc 7 375 0
	#     skip_ws(p);
	mov B, BP
	add B, 16777138
	load A, B
	jeq .L724, A, 0
	.loc 7 381 0
	#     }
	.loc 7 378 0
	#       if (c != ',')
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L725:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 379 0
	#         ir_error(p, "comma expected");
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 379 0
	#         ir_error(p, "comma expected");
	mov A, 44
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L726, A, 0
.data
	.L727:
	.string "comma expected"
.text
	mov A, .L727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L728
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L728:
	mov A, B
	add SP, 2
	.L726:
	.loc 7 381 0
	#     }
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L729
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L729:
	mov A, B
	add SP, 1
	.L724:
	.loc 7 384 0
	#     c = ir_getc(p);
	.loc 7 385 0
	#     if (isdigit(c) || c == '-') {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L730:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 407 0
	#       }
	.loc 7 386 0
	#       a.type = IMM;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L732
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L732:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L731, A, 0
	.loc 7 386 0
	#       a.type = IMM;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#       a.type = IMM;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L731:
	mov A, B
	jeq .L733, A, 0
	.loc 7 388 0
	#     } else {
	.loc 7 387 0
	#       a.imm = MOD24(read_int(p, c));
	.loc 6 205 0
	# }
	mov A, 1
	mov B, BP
	add B, 16777136
	store A, B
	.loc 7 388 0
	#     } else {
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_int
	.L734:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L735
	.L733:
	.loc 7 407 0
	#       }
	.loc 7 390 0
	#       read_while_ident(p, buf + 1, 62);
	.loc 7 261 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 390 0
	#       read_while_ident(p, buf + 1, 62);
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 390 0
	#       read_while_ident(p, buf + 1, 62);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 391 0
	#       a.type = REG;
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 391 0
	#       a.type = REG;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L736
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_while_ident
	.L736:
	mov A, B
	add SP, 3
	.loc 7 392 0
	#       if (!strcmp(buf, "A")) {
	.loc 6 205 0
	# }
	mov A, 0
	mov B, BP
	add B, 16777136
	store A, B
	.loc 7 407 0
	#       }
	.loc 7 393 0
	#         a.reg = A;
.data
	.L737:
	.string "A"
.text
	mov A, .L737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L738
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L738:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L739, A, 0
	.loc 7 394 0
	#       } else if (!strcmp(buf, "B")) {
	.loc 6 205 0
	# }
	mov A, 0
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L740
	.L739:
	.loc 7 407 0
	#       }
	.loc 7 394 0
	#       } else if (!strcmp(buf, "B")) {
.data
	.L741:
	.string "B"
.text
	mov A, .L741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L742:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L743, A, 0
	.loc 7 396 0
	#       } else if (!strcmp(buf, "C")) {
	.loc 6 205 0
	# }
	mov A, 1
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L744
	.L743:
	.loc 7 407 0
	#       }
	.loc 7 396 0
	#       } else if (!strcmp(buf, "C")) {
.data
	.L745:
	.string "C"
.text
	mov A, .L745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L746:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L747, A, 0
	.loc 7 398 0
	#       } else if (!strcmp(buf, "D")) {
	.loc 6 205 0
	# }
	mov A, 2
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L748
	.L747:
	.loc 7 407 0
	#       }
	.loc 7 398 0
	#       } else if (!strcmp(buf, "D")) {
.data
	.L749:
	.string "D"
.text
	mov A, .L749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L750:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L751, A, 0
	.loc 7 400 0
	#       } else if (!strcmp(buf, "SP")) {
	.loc 6 205 0
	# }
	mov A, 3
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L752
	.L751:
	.loc 7 407 0
	#       }
	.loc 7 400 0
	#       } else if (!strcmp(buf, "SP")) {
.data
	.L753:
	.string "SP"
.text
	mov A, .L753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L754:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L755, A, 0
	.loc 7 402 0
	#       } else if (!strcmp(buf, "BP")) {
	.loc 6 205 0
	# }
	mov A, 5
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L756
	.L755:
	.loc 7 407 0
	#       }
	.loc 7 402 0
	#       } else if (!strcmp(buf, "BP")) {
.data
	.L757:
	.string "BP"
.text
	mov A, .L757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L758:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L759, A, 0
	.loc 7 404 0
	#       } else {
	.loc 6 205 0
	# }
	mov A, 4
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L760
	.L759:
	.loc 7 407 0
	#       }
	.loc 7 406 0
	#         a.tmp = strdup(buf);
	.loc 7 20 0
	# }
	mov A, 2
	mov B, BP
	add B, 16777136
	store A, B
	.loc 7 407 0
	#       }
	.loc 7 265 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strdup
	.L761:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777137
	store A, B
	.L760:
	.L756:
	.L752:
	.L748:
	.L744:
	.L740:
	.L735:
	.loc 7 410 0
	#   }
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	mov A, BP
	add A, -80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 375 0
	#     skip_ws(p);
	mov B, BP
	add B, 16777138
	load A, B
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 410 0
	#   }
	.L137:
	.loc 7 375 0
	#     skip_ws(p);
	mov B, BP
	add B, 16777138
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777138
	store A, B
	load A, SP
	add SP, 1
	.loc 7 410 0
	#   }
	jmp .L136
	.L138:
	.loc 7 431 0
	#   }
	.loc 7 413 0
	#     if (args[0].type == IMM) {
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 413 0
	#     if (args[0].type == IMM) {
	.loc 7 20 0
	# }
	mov A, 26
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L762, A, 0
	.loc 7 423 0
	#   } else if (op == (Op)DATA) {
	.loc 7 421 0
	#     }
	.loc 7 414 0
	#       add_imm_data(p, args[0].imm);
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 414 0
	#       add_imm_data(p, args[0].imm);
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L763, A, 0
	.loc 7 415 0
	#     } else if (args[0].type == (ValueType)REF) {
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 415 0
	#     } else if (args[0].type == (ValueType)REF) {
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_imm_data
	.L764:
	mov A, B
	add SP, 2
	jmp .L765
	.L763:
	.loc 7 421 0
	#     }
	.loc 7 415 0
	#     } else if (args[0].type == (ValueType)REF) {
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 415 0
	#     } else if (args[0].type == (ValueType)REF) {
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 20 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L766, A, 0
	.loc 7 419 0
	#     } else {
	.loc 7 417 0
	#       d->val.type = REF;
	mov A, 0
	mov B, SP
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_data
	.L767:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777135
	store A, B
	.loc 7 418 0
	#       d->val.tmp = args[0].tmp;
	.loc 7 20 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 417 0
	#       d->val.type = REF;
	mov B, BP
	add B, 16777135
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 419 0
	#     } else {
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 419 0
	#     } else {
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 417 0
	#       d->val.type = REF;
	mov B, BP
	add B, 16777135
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	jmp .L768
	.L766:
	.loc 7 421 0
	#     }
.data
	.L769:
	.string "number expected"
.text
	mov A, .L769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L770:
	mov A, B
	add SP, 2
	.L768:
	.L765:
	.loc 7 423 0
	#   } else if (op == (Op)DATA) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L771
	.L762:
	.loc 7 431 0
	#   }
	.loc 7 423 0
	#   } else if (op == (Op)DATA) {
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 423 0
	#   } else if (op == (Op)DATA) {
	.loc 7 20 0
	# }
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L772, A, 0
	.loc 7 431 0
	#   }
	.loc 7 428 0
	#     }
	.loc 7 425 0
	#       if (args[0].type != IMM)
	.loc 7 350 0
	#   if (op <= STORE)
	mov B, BP
	add B, 16777145
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 425 0
	#       if (args[0].type != IMM)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L773, A, 0
	.loc 7 428 0
	#     }
	.loc 7 426 0
	#         ir_error(p, "number expected");
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 426 0
	#         ir_error(p, "number expected");
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L774, A, 0
	.loc 7 426 0
	#         ir_error(p, "number expected");
.data
	.L775:
	.string "number expected"
.text
	mov A, .L775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L776:
	mov A, B
	add SP, 2
	.L774:
	.loc 7 428 0
	#     }
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 428 0
	#     }
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.L773:
	.loc 7 430 0
	#     return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 431 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L772:
	.L771:
	.loc 7 434 0
	#   p->text = p->text->next;
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L777:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 435 0
	#   p->text->op = op;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 436 0
	#   p->text->pc = p->pc;
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 436 0
	#   p->text->pc = p->pc;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 437 0
	#   p->text->lineno = p->lineno;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	#   p->text->lineno = p->lineno;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 438 0
	#   p->prev_boundary = false;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 438 0
	#   p->prev_boundary = false;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 439 0
	#   switch (op) {
	mov A, 0
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.loc 7 478 0
	#       ir_error(p, "oops");
	.loc 7 268 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov B, BP
	add B, 16777134
	store A, B
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L778, A, 0
	jmp .L140
	.L778:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L779, A, 0
	jmp .L141
	.L779:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L780, A, 0
	jmp .L142
	.L780:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L781, A, 0
	jmp .L143
	.L781:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L782, A, 0
	jmp .L144
	.L782:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L783, A, 0
	jmp .L145
	.L783:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L784, A, 0
	jmp .L146
	.L784:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L785, A, 0
	jmp .L147
	.L785:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L786, A, 0
	jmp .L148
	.L786:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L787, A, 0
	jmp .L149
	.L787:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L788, A, 0
	jmp .L150
	.L788:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L789, A, 0
	jmp .L151
	.L789:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L790, A, 0
	jmp .L152
	.L790:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L791, A, 0
	jmp .L153
	.L791:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L792, A, 0
	jmp .L154
	.L792:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L793, A, 0
	jmp .L155
	.L793:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L794, A, 0
	jmp .L156
	.L794:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L795, A, 0
	jmp .L157
	.L795:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L796, A, 0
	jmp .L158
	.L796:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L797, A, 0
	jmp .L159
	.L797:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L798, A, 0
	jmp .L160
	.L798:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L799, A, 0
	jmp .L161
	.L799:
	jmp .L162
	.loc 7 445 0
	#       }
	.loc 7 441 0
	#     case STORE:
	.L140:
	.loc 7 445 0
	#       }
	.loc 7 441 0
	#     case STORE:
	.L141:
	.loc 7 445 0
	#       }
	.loc 7 20 0
	# }
	mov B, g_split_basic_block_by_mem
	load A, B
	jeq .L800, A, 0
	.loc 7 445 0
	#       }
	.loc 7 444 0
	#         p->prev_boundary = true;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.loc 7 445 0
	#       }
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.L800:
	.loc 7 447 0
	#     case ADD:
	.L142:
	.L143:
	.L144:
	.L145:
	.L146:
	.L147:
	.L148:
	.L149:
	.L150:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 447 0
	#     case ADD:
	mov A, 1
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 3
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 457 0
	#       p->text->dst = args[0];
	.L151:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 457 0
	#       p->text->dst = args[0];
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 459 0
	#     case PUTC:
	jmp .L139
	.loc 7 460 0
	#       p->text->src = args[0];
	.L152:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 460 0
	#       p->text->src = args[0];
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 3
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 462 0
	#     case DUMP:
	.L153:
	.L154:
	jmp .L139
	.loc 7 465 0
	#     case JNE:
	.L155:
	.L156:
	.L157:
	.L158:
	.L159:
	.L160:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 465 0
	#     case JNE:
	mov A, 1
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 472 0
	#     case JMP:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 472 0
	#     case JMP:
	mov A, 2
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 3
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 473 0
	#       p->text->jmp = args[0];
	.L161:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 374 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 473 0
	#       p->text->jmp = args[0];
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 5
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 475 0
	#       p->prev_boundary = true;
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.loc 7 476 0
	#       break;
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.loc 7 477 0
	#     default:
	jmp .L139
	.loc 7 478 0
	#       ir_error(p, "oops");
	.L162:
.data
	.L801:
	.string "oops"
.text
	mov A, .L801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L802
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L802:
	mov A, B
	add SP, 2
	.loc 7 478 0
	#       ir_error(p, "oops");
	.L139:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parse_eir:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 16
	.loc 7 526 0
	# }
	.loc 7 488 0
	#   DataPrivate data_root = {};
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 489 0
	#   int c;
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 490 0
	# 
	.loc 7 492 0
	#   p->lineno = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 493 0
	#   p->text = &text_root;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 494 0
	#   p->data = &data_root;
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 495 0
	#   p->pc = 0;
	mov A, BP
	add A, -15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 496 0
	#   p->prev_boundary = true;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 497 0
	# 
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.loc 7 499 0
	#   p->text = p->text->next;
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L803:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 500 0
	#   p->text->op = JMP;
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 501 0
	#   p->text->pc = p->pc++;
	.loc 6 205 0
	# }
	mov A, 14
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 501 0
	#   p->text->pc = p->pc++;
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 502 0
	#   p->text->lineno = -1;
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 502 0
	#   p->text->lineno = -1;
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 503 0
	#   p->text->jmp.type = (ValueType)REF;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 504 0
	#   p->text->jmp.tmp = "main";
	.loc 7 20 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 504 0
	#   p->text->jmp.tmp = "main";
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 505 0
	#   p->text->next = 0;
.data
	.L804:
	.string "main"
.text
	mov A, .L804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 506 0
	#   p->symtab = table_add(p->symtab, "main", (void*)1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 507 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L805:
	.string "main"
.text
	mov A, .L805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_add
	.L806:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 520 0
	#     }
	.L163:
	.loc 7 510 0
	#     c = ir_getc(p);
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L807:
	mov A, B
	add SP, 1
	.loc 7 511 0
	#     if (c == EOF)
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L808:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777200
	store A, B
	.loc 7 512 0
	#       break;
	.loc 7 490 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 512 0
	#       break;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L809, A, 0
	jmp .L165
	.L809:
	.loc 7 520 0
	#     }
	.loc 7 515 0
	#       skip_until_ret(p);
	.loc 7 490 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 515 0
	#       skip_until_ret(p);
	mov A, 35
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L810, A, 0
	.loc 7 516 0
	#     } else if (c == '_' || c == '.' || isalpha(c)) {
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_until_ret
	.L811:
	mov A, B
	add SP, 1
	jmp .L812
	.L810:
	.loc 7 520 0
	#     }
	.loc 7 516 0
	#     } else if (c == '_' || c == '.' || isalpha(c)) {
	.loc 7 490 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 516 0
	#     } else if (c == '_' || c == '.' || isalpha(c)) {
	mov A, 95
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L814, A, 0
	.loc 7 490 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 516 0
	#     } else if (c == '_' || c == '.' || isalpha(c)) {
	mov A, 46
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L814:
	mov A, B
	mov B, 1
	jne .L813, A, 0
	.loc 7 490 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L815:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L813:
	mov A, B
	jeq .L816, A, 0
	.loc 7 518 0
	#     } else {
	.loc 7 490 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse_line
	.L817:
	mov A, B
	add SP, 2
	jmp .L818
	.L816:
	.loc 7 520 0
	#     }
.data
	.L819:
	.string "unexpected char"
.text
	mov A, .L819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L820:
	mov A, B
	add SP, 2
	.L818:
	.L812:
	.loc 7 520 0
	#     }
	.L164:
	jmp .L163
	.L165:
	.loc 7 524 0
	#   p->text = text_root.next;
	mov A, BP
	add A, -15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp serialize_data
	.L821:
	mov A, B
	add SP, 2
	.loc 7 525 0
	#   p->data = data_root.next;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 526 0
	# }
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 478 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
resolve:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 538 0
	# }
	.loc 7 530 0
	#     return;
	.loc 7 526 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 530 0
	#     return;
	.loc 7 20 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L822, A, 0
	.loc 7 530 0
	#     return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L822:
	.loc 7 532 0
	#   if (!table_get(symtab, name, (void*)&v->imm)) {
	mov A, 0
	mov B, SP
	.loc 7 526 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 535 0
	#   }
	.loc 7 533 0
	#     fprintf(stderr, "undefined sym: %s\n", name);
	.loc 7 526 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 532 0
	#   if (!table_get(symtab, name, (void*)&v->imm)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 526 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L823
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_get
	.L823:
	mov A, B
	add SP, 3
	eq A, 0
	jeq .L824, A, 0
	.loc 7 535 0
	#   }
	.loc 7 534 0
	#     exit(1);
	.loc 7 532 0
	#   if (!table_get(symtab, name, (void*)&v->imm)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 534 0
	#     exit(1);
.data
	.L825:
	.string "undefined sym: %s\n"
.text
	mov A, .L825
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L826
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L826:
	mov A, B
	add SP, 3
	.loc 7 535 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L824:
	.loc 7 538 0
	# }
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 526 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
resolve_syms:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 552 0
	#   }
	.loc 7 546 0
	#   }
	.loc 7 542 0
	#     if (data->val.type == (ValueType)REF) {
	mov A, 0
	mov B, SP
	.loc 7 538 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 546 0
	#   }
	.L166:
	.loc 7 542 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L827, A, 0
	jmp .L828
	.L827:
	.loc 7 546 0
	#   }
	jmp .L168
	.L828:
	.loc 7 544 0
	#     }
	.loc 7 543 0
	#       resolve(&data->val, p->symtab);
	.loc 7 542 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 543 0
	#       resolve(&data->val, p->symtab);
	.loc 7 20 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L829, A, 0
	.loc 7 544 0
	#     }
	.loc 7 538 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 544 0
	#     }
	.loc 7 542 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	add A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve
	.L830:
	mov A, B
	add SP, 2
	.L829:
	.loc 7 546 0
	#   }
	.loc 7 542 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 546 0
	#   }
	.L167:
	.loc 7 542 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 546 0
	#   }
	jmp .L166
	.L168:
	.loc 7 552 0
	#   }
	.loc 7 549 0
	#     resolve(&inst->dst, p->symtab);
	mov A, 0
	mov B, SP
	.loc 7 538 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 552 0
	#   }
	.L169:
	.loc 7 549 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L831, A, 0
	jmp .L832
	.L831:
	.loc 7 552 0
	#   }
	jmp .L171
	.L832:
	.loc 7 550 0
	#     resolve(&inst->src, p->symtab);
	.loc 7 538 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 550 0
	#     resolve(&inst->src, p->symtab);
	.loc 7 549 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve
	.L833:
	mov A, B
	add SP, 2
	.loc 7 551 0
	#     resolve(&inst->jmp, p->symtab);
	.loc 7 538 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 551 0
	#     resolve(&inst->jmp, p->symtab);
	.loc 7 549 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve
	.L834:
	mov A, B
	add SP, 2
	.loc 7 552 0
	#   }
	.loc 7 538 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 552 0
	#   }
	.loc 7 549 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve
	.L835:
	mov A, B
	add SP, 2
	.loc 7 552 0
	#   }
	.L170:
	.loc 7 549 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 552 0
	#   }
	jmp .L169
	.L171:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
load_eir_impl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 12
	.loc 7 567 0
	# }
	.loc 7 557 0
	#     .filename = filename,
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 552 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777205
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 561 0
	#   resolve_syms(&parser);
	mov A, BP
	add A, -11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse_eir
	.L836:
	mov A, B
	add SP, 1
	.loc 7 562 0
	# 
	mov A, BP
	add A, -11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve_syms
	.L837:
	mov A, B
	add SP, 1
	.loc 7 564 0
	#   m->text = parser.text;
	mov A, 0
	mov B, SP
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L838:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777204
	store A, B
	.loc 7 565 0
	#   m->data = (Data*)parser.data;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 564 0
	#   m->text = parser.text;
	mov B, BP
	add B, 16777204
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 566 0
	#   return m;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 564 0
	#   m->text = parser.text;
	mov B, BP
	add B, 16777204
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 567 0
	# }
	.loc 7 564 0
	#   m->text = parser.text;
	mov B, BP
	add B, 16777204
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
load_eir:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 571 0
	# }
	.loc 7 567 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 571 0
	# }
.data
	.L839:
	.string "<stdin>"
.text
	mov A, .L839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp load_eir_impl
	.L840:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
load_eir_from_file:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 582 0
	# }
	.loc 7 575 0
	#   if (!fp) {
	mov A, 0
	mov B, SP
.data
	.L841:
	.string "r"
.text
	mov A, .L841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 571 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fopen
	.L842:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 578 0
	#   }
	.loc 7 576 0
	#     fprintf(stderr, "no such file: %s\n", filename);
	.loc 7 575 0
	#   if (!fp) {
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L843, A, 0
	.loc 7 578 0
	#   }
	.loc 7 577 0
	#     exit(1);
	.loc 7 571 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 577 0
	#     exit(1);
.data
	.L844:
	.string "no such file: %s\n"
.text
	mov A, .L844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L845:
	mov A, B
	add SP, 3
	.loc 7 578 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L843:
	.loc 7 580 0
	#   fclose(fp);
	mov A, 0
	mov B, SP
	.loc 7 575 0
	#   if (!fp) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 571 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp load_eir_impl
	.L846:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 581 0
	#   return r;
	.loc 7 575 0
	#   if (!fp) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fclose
	.L847:
	mov A, B
	add SP, 1
	.loc 7 582 0
	# }
	.loc 7 580 0
	#   fclose(fp);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
split_basic_block_by_mem:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 586 0
	# }
	mov A, 1
	ne A, 0
	ne A, 0
	ne A, 0
	mov B, g_split_basic_block_by_mem
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S0.op_strs:
	.data 1
	.L848:
	.string "mov"
	.data 0
	.long .L848
	.data 1
	.L849:
	.string "add"
	.data 0
	.long .L849
	.data 1
	.L850:
	.string "sub"
	.data 0
	.long .L850
	.data 1
	.L851:
	.string "load"
	.data 0
	.long .L851
	.data 1
	.L852:
	.string "store"
	.data 0
	.long .L852
	.data 1
	.L853:
	.string "putc"
	.data 0
	.long .L853
	.data 1
	.L854:
	.string "getc"
	.data 0
	.long .L854
	.data 1
	.L855:
	.string "exit"
	.data 0
	.long .L855
	.data 1
	.L856:
	.string "jeq"
	.data 0
	.long .L856
	.data 1
	.L857:
	.string "jne"
	.data 0
	.long .L857
	.data 1
	.L858:
	.string "jlt"
	.data 0
	.long .L858
	.data 1
	.L859:
	.string "jgt"
	.data 0
	.long .L859
	.data 1
	.L860:
	.string "jle"
	.data 0
	.long .L860
	.data 1
	.L861:
	.string "jge"
	.data 0
	.long .L861
	.data 1
	.L862:
	.string "jmp"
	.data 0
	.long .L862
	.data 1
	.L863:
	.string "xxx"
	.data 0
	.long .L863
	.data 1
	.L864:
	.string "eq"
	.data 0
	.long .L864
	.data 1
	.L865:
	.string "ne"
	.data 0
	.long .L865
	.data 1
	.L866:
	.string "lt"
	.data 0
	.long .L866
	.data 1
	.L867:
	.string "gt"
	.data 0
	.long .L867
	.data 1
	.L868:
	.string "le"
	.data 0
	.long .L868
	.data 1
	.L869:
	.string "ge"
	.data 0
	.long .L869
	.data 1
	.L870:
	.string "dump"
	.data 0
	.long .L870
	.text
dump_op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 595 0
	# }
	.loc 7 590 0
	#     "mov", "add", "sub", "load", "store", "putc", "getc", "exit",
	mov A, .S0.op_strs
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 586 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 595 0
	# }
.data
	.L871:
	.string "%s"
.text
	mov A, .L871
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 586 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L872
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L872:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S1.reg_strs:
	.data 1
	.L873:
	.string "A"
	.data 0
	.long .L873
	.data 1
	.L874:
	.string "B"
	.data 0
	.long .L874
	.data 1
	.L875:
	.string "C"
	.data 0
	.long .L875
	.data 1
	.L876:
	.string "D"
	.data 0
	.long .L876
	.data 1
	.L877:
	.string "BP"
	.data 0
	.long .L877
	.data 1
	.L878:
	.string "SP"
	.data 0
	.long .L878
	.text
dump_val:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 607 0
	#   }
	.loc 7 602 0
	#     fprintf(fp, "%s", reg_strs[val->reg]);
	.loc 7 595 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L879, A, 0
	.loc 7 603 0
	#   } else if (val->type == IMM) {
	.loc 7 599 0
	#     "A", "B", "C", "D", "BP", "SP"
	mov A, .S1.reg_strs
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 603 0
	#   } else if (val->type == IMM) {
	.loc 7 595 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 603 0
	#   } else if (val->type == IMM) {
.data
	.L880:
	.string "%s"
.text
	mov A, .L880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 595 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L881
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L881:
	mov A, B
	add SP, 3
	jmp .L882
	.L879:
	.loc 7 607 0
	#   }
	.loc 7 603 0
	#   } else if (val->type == IMM) {
	.loc 7 595 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L883, A, 0
	.loc 7 605 0
	#   } else {
	.loc 7 595 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 605 0
	#   } else {
.data
	.L884:
	.string "%d"
.text
	mov A, .L884
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 595 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L885:
	mov A, B
	add SP, 3
	jmp .L886
	.L883:
	.loc 7 607 0
	#   }
	.loc 7 595 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	.loc 7 595 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
.data
	.L887:
	.string "%d (type=%d)"
.text
	mov A, .L887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 595 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L888:
	mov A, B
	add SP, 4
	.L886:
	.L882:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
dump_inst_fp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 668 0
	# }
	.loc 7 612 0
	#   switch (inst->op) {
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 612 0
	#   switch (inst->op) {
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L889
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_op
	.L889:
	mov A, B
	add SP, 2
	.loc 7 660 0
	#   }
	.loc 7 613 0
	#     case MOV:
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 660 0
	#   }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L890, A, 0
	jmp .L173
	.L890:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L891, A, 0
	jmp .L174
	.L891:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L892, A, 0
	jmp .L175
	.L892:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L893, A, 0
	jmp .L176
	.L893:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L894, A, 0
	jmp .L177
	.L894:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L895, A, 0
	jmp .L178
	.L895:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L896, A, 0
	jmp .L179
	.L896:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L897, A, 0
	jmp .L180
	.L897:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L898, A, 0
	jmp .L181
	.L898:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L899, A, 0
	jmp .L182
	.L899:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L900, A, 0
	jmp .L183
	.L900:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L901, A, 0
	jmp .L184
	.L901:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L902, A, 0
	jmp .L185
	.L902:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L903, A, 0
	jmp .L186
	.L903:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L904, A, 0
	jmp .L187
	.L904:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L905, A, 0
	jmp .L188
	.L905:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L906, A, 0
	jmp .L189
	.L906:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L907, A, 0
	jmp .L190
	.L907:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L908, A, 0
	jmp .L191
	.L908:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L909, A, 0
	jmp .L192
	.L909:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L910, A, 0
	jmp .L193
	.L910:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L911, A, 0
	jmp .L194
	.L911:
	jmp .L195
	.loc 7 614 0
	#     case ADD:
	.L173:
	.L174:
	.L175:
	.L176:
	.L177:
	.L178:
	.L179:
	.L180:
	.L181:
	.L182:
	.L183:
.data
	.L912:
	.string " "
.text
	mov A, .L912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L913:
	mov A, B
	add SP, 2
	.loc 7 626 0
	#       fprintf(fp, " ");
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 626 0
	#       fprintf(fp, " ");
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L914
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L914:
	mov A, B
	add SP, 2
	.loc 7 627 0
	#       dump_val(&inst->src, fp);
.data
	.L915:
	.string " "
.text
	mov A, .L915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L916:
	mov A, B
	add SP, 2
	.loc 7 628 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 628 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L917:
	mov A, B
	add SP, 2
	.loc 7 629 0
	#     case PUTC:
	jmp .L172
	.loc 7 630 0
	#       fprintf(fp, " ");
	.L184:
.data
	.L918:
	.string " "
.text
	mov A, .L918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L919:
	mov A, B
	add SP, 2
	.loc 7 632 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 632 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L920:
	mov A, B
	add SP, 2
	.loc 7 633 0
	#     case GETC:
	jmp .L172
	.loc 7 634 0
	#       fprintf(fp, " ");
	.L185:
.data
	.L921:
	.string " "
.text
	mov A, .L921
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L922
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L922:
	mov A, B
	add SP, 2
	.loc 7 636 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 636 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L923:
	mov A, B
	add SP, 2
	.loc 7 637 0
	#     case EXIT:
	jmp .L172
	.loc 7 638 0
	#     case DUMP:
	.L186:
	.L187:
	jmp .L172
	.loc 7 641 0
	#     case JNE:
	.L188:
	.L189:
	.L190:
	.L191:
	.L192:
	.L193:
.data
	.L924:
	.string " "
.text
	mov A, .L924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L925
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L925:
	mov A, B
	add SP, 2
	.loc 7 648 0
	#       fprintf(fp, " ");
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 648 0
	#       fprintf(fp, " ");
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L926:
	mov A, B
	add SP, 2
	.loc 7 649 0
	#       dump_val(&inst->dst, fp);
.data
	.L927:
	.string " "
.text
	mov A, .L927
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L928
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L928:
	mov A, B
	add SP, 2
	.loc 7 650 0
	#       fprintf(fp, " ");
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 650 0
	#       fprintf(fp, " ");
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L929
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L929:
	mov A, B
	add SP, 2
	.loc 7 651 0
	#       dump_val(&inst->src, fp);
.data
	.L930:
	.string " "
.text
	mov A, .L930
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L931:
	mov A, B
	add SP, 2
	.loc 7 652 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 652 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L932
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L932:
	mov A, B
	add SP, 2
	.loc 7 653 0
	#     case JMP:
	jmp .L172
	.loc 7 654 0
	#       fprintf(fp, " ");
	.L194:
.data
	.L933:
	.string " "
.text
	mov A, .L933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L934
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L934:
	mov A, B
	add SP, 2
	.loc 7 656 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 656 0
	#       break;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L935
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L935:
	mov A, B
	add SP, 2
	.loc 7 657 0
	#     default:
	jmp .L172
	.loc 7 658 0
	#       fprintf(fp, "oops op=%d\n", inst->op);
	.L195:
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 658 0
	#       fprintf(fp, "oops op=%d\n", inst->op);
.data
	.L936:
	.string "oops op=%d\n"
.text
	mov A, .L936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L937:
	mov A, B
	add SP, 3
	.loc 7 660 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L172:
	.loc 7 662 0
	#   int lineno = inst->lineno;
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 662 0
	#   int lineno = inst->lineno;
.data
	.L938:
	.string " pc=%d @"
.text
	mov A, .L938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L939:
	mov A, B
	add SP, 3
	.loc 7 663 0
	#   // A hack to make the test for dump_ir.c.eir pass.
	mov A, 0
	mov B, SP
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 668 0
	# }
	.loc 7 663 0
	#   // A hack to make the test for dump_ir.c.eir pass.
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 668 0
	# }
.data
	.L940:
	.string "%d\n"
.text
	mov A, .L940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L941:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
dump_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 672 0
	# }
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 668 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_inst_fp
	.L942:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
table_add:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 684 0
	# }
	.loc 7 680 0
	#   ntbl->next = tbl;
	mov A, 0
	mov B, SP
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L943:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 681 0
	#   ntbl->key = key;
	.loc 7 672 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 680 0
	#   ntbl->next = tbl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 682 0
	#   ntbl->value = value;
	.loc 7 672 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 680 0
	#   ntbl->next = tbl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 683 0
	#   return ntbl;
	.loc 7 672 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 680 0
	#   ntbl->next = tbl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 684 0
	# }
	.loc 7 680 0
	#   ntbl->next = tbl;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
table_get:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 694 0
	# }
	.loc 7 691 0
	#     }
	.L196:
	.loc 7 684 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L944, A, 0
	jmp .L945
	.L944:
	.loc 7 691 0
	#     }
	jmp .L198
	.L945:
	.loc 7 689 0
	#       *value = tbl->value;
	.loc 7 684 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 689 0
	#       *value = tbl->value;
	.loc 7 684 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L946:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L947, A, 0
	.loc 7 691 0
	#     }
	.loc 7 690 0
	#       return true;
	.loc 7 684 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 691 0
	#     }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L947:
	.L197:
	.loc 7 688 0
	#     if (!strcmp(tbl->key, key)) {
	.loc 7 684 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 691 0
	#     }
	jmp .L196
	.L198:
	.loc 7 694 0
	# }
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
