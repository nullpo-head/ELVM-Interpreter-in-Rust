	.text
my_div:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 52
	.file 1 "/Users/nullpo/dev/elvm/libc/_builtin.h"
	.loc 1 35 0
	# }
	.loc 1 11 0
	#   unsigned int r[24];
	.loc 1 12 0
	#   unsigned int i;
	.loc 1 13 0
	#   r[0] = 1;
	.loc 1 14 0
	#   for (i = 0;; i++) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 14 0
	#   for (i = 0;; i++) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 21 0
	#   }
	.loc 1 15 0
	#     d[i] = b;
	mov A, 0
	mov B, BP
	add B, 16777167
	store A, B
	.loc 1 21 0
	#   }
	.L0:
	.loc 1 16 0
	#     unsigned int nb = b + b;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 11 0
	#   unsigned int r[24];
	mov A, BP
	add A, 16777192
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777166
	store A, B
	.loc 1 18 0
	#       break;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L143, A, 0
	.loc 1 18 0
	#       break;
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L143:
	mov A, B
	jeq .L144, A, 0
	.loc 1 18 0
	#       break;
	jmp .L2
	.L144:
	.loc 1 20 0
	#     b = nb;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 21 0
	#   }
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 21 0
	#   }
	.L1:
	.loc 1 15 0
	#     d[i] = b;
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777167
	store A, B
	load A, SP
	add SP, 1
	.loc 1 21 0
	#   }
	jmp .L0
	.L2:
	.loc 1 24 0
	#   for (;; i--) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777165
	mov A, 0
	store A, B
	.loc 1 31 0
	#       break;
	.L3:
	.loc 1 26 0
	#     if (a >= v) {
	mov A, 0
	mov B, SP
	.loc 1 11 0
	#   unsigned int r[24];
	mov A, BP
	add A, 16777192
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777164
	store A, B
	.loc 1 29 0
	#     }
	.loc 1 27 0
	#       q += r[i];
	.loc 1 26 0
	#     if (a >= v) {
	mov B, BP
	add B, 16777164
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L145, A, 0
	.loc 1 29 0
	#     }
	.loc 1 28 0
	#       a -= v;
	.loc 1 24 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777165
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 28 0
	#       a -= v;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777165
	store A, B
	.loc 1 29 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 26 0
	#     if (a >= v) {
	mov B, BP
	add B, 16777164
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.L145:
	.loc 1 31 0
	#       break;
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 31 0
	#       break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L146, A, 0
	jmp .L5
	.L146:
	.L4:
	.loc 1 25 0
	#     unsigned int v = d[i];
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777167
	store A, B
	load A, SP
	add SP, 1
	.loc 1 31 0
	#       break;
	jmp .L3
	.L5:
	.loc 1 34 0
	#   o->rem = a;
	.loc 1 24 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777165
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_mul:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 53
	.loc 1 70 0
	# }
	.loc 1 39 0
	#   if (a < b) {
	.loc 1 43 0
	#   }
	.loc 1 40 0
	#     v = a;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L147, A, 0
	.loc 1 43 0
	#   }
	.loc 1 41 0
	#     a = b;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 42 0
	#     b = v;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 43 0
	#   }
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.L147:
	.loc 1 45 0
	#     return a;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 45 0
	#     return a;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L148, A, 0
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L148:
	.loc 1 47 0
	#     return 0;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 47 0
	#     return 0;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L149, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L149:
	.loc 1 49 0
	#   int r[24];
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	.loc 1 58 0
	#   }
	.loc 1 51 0
	#     d[i] = v;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	mov A, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 58 0
	#   }
	.L6:
	.loc 1 52 0
	#     r[i] = e;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 52 0
	#     r[i] = e;
	.loc 1 49 0
	#   int r[24];
	mov A, BP
	add A, 16777189
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 53 0
	#     v += v;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 53 0
	#     v += v;
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 54 0
	#     int ne = e + e;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov A, 0
	mov B, SP
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777164
	store A, B
	.loc 1 56 0
	#       break;
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L150, A, 0
	.loc 1 56 0
	#       break;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L150:
	mov A, B
	jeq .L151, A, 0
	.loc 1 56 0
	#       break;
	jmp .L8
	.L151:
	.loc 1 58 0
	#   }
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 58 0
	#   }
	.L7:
	.loc 1 51 0
	#     d[i] = v;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 1 58 0
	#   }
	jmp .L6
	.L8:
	.loc 1 61 0
	#   for (;; i--) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777163
	mov A, 0
	store A, B
	.loc 1 67 0
	#       break;
	.L9:
	.loc 1 65 0
	#     }
	.loc 1 63 0
	#       x += d[i];
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L152, A, 0
	.loc 1 65 0
	#     }
	.loc 1 64 0
	#       b -= r[i];
	.loc 1 61 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777163
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 64 0
	#       b -= r[i];
	.loc 1 49 0
	#   int r[24];
	mov A, BP
	add A, 16777189
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777163
	store A, B
	.loc 1 65 0
	#     }
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 65 0
	#     }
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.L152:
	.loc 1 67 0
	#       break;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 67 0
	#       break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L153, A, 0
	jmp .L11
	.L153:
	.L10:
	.loc 1 62 0
	#     if (b >= r[i]) {
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 1 67 0
	#       break;
	jmp .L9
	.L11:
	.loc 1 70 0
	# }
	.loc 1 61 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777163
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_div:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 1 78 0
	# }
	.loc 1 74 0
	#     return a;
	.loc 1 70 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 74 0
	#     return a;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L154, A, 0
	.loc 1 70 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L154:
	.loc 1 76 0
	#   my_div(a, b, &r);
	.loc 1 77 0
	#   return r.quot;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 70 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp my_div
	.L155:
	mov A, B
	add SP, 3
	.loc 1 78 0
	# }
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_mod:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 1 84 0
	# }
	.loc 1 82 0
	#   my_div(a, b, &r);
	.loc 1 83 0
	#   return r.rem;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 78 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp my_div
	.L156:
	mov A, B
	add SP, 3
	.loc 1 84 0
	# }
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
__builtin_bits_table:
	.long 8388608
	.long 4194304
	.long 2097152
	.long 1048576
	.long 524288
	.long 262144
	.long 131072
	.long 65536
	.long 32768
	.long 16384
	.long 8192
	.long 4096
	.long 2048
	.long 1024
	.long 512
	.long 256
	.long 128
	.long 64
	.long 32
	.long 16
	.long 8
	.long 4
	.long 2
	.long 1
	.text
__builtin_and:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 1 107 0
	# }
	.loc 1 99 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 104 0
	#       r += t;
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 104 0
	#       r += t;
	.L12:
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L157, A, 0
	jmp .L158
	.L157:
	.loc 1 104 0
	#       r += t;
	jmp .L14
	.L158:
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 84 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L159, A, 0
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 84 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L160
	.L159:
	mov A, 0
	.L160:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 103 0
	#     if (a1 && b1)
	mov A, 0
	mov B, SP
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 84 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L161, A, 0
	.loc 1 103 0
	#     if (a1 && b1)
	.loc 1 84 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 103 0
	#     if (a1 && b1)
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 103 0
	#     if (a1 && b1)
	mov A, 1
	jmp .L162
	.L161:
	mov A, 0
	.L162:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 1 104 0
	#       r += t;
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, 0
	jeq .L163, A, 0
	.loc 1 103 0
	#     if (a1 && b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L163:
	mov A, B
	jeq .L164, A, 0
	.loc 1 104 0
	#       r += t;
	.loc 1 99 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L164:
	.loc 1 104 0
	#       r += t;
	.L13:
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 104 0
	#       r += t;
	jmp .L12
	.L14:
	.loc 1 107 0
	# }
	.loc 1 99 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_or:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 1 119 0
	# }
	.loc 1 111 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 116 0
	#       r += t;
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 116 0
	#       r += t;
	.L15:
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L165, A, 0
	jmp .L166
	.L165:
	.loc 1 116 0
	#       r += t;
	jmp .L17
	.L166:
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 107 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L167, A, 0
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 107 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L168
	.L167:
	mov A, 0
	.L168:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 115 0
	#     if (a1 || b1)
	mov A, 0
	mov B, SP
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L169, A, 0
	.loc 1 115 0
	#     if (a1 || b1)
	.loc 1 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 115 0
	#     if (a1 || b1)
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 115 0
	#     if (a1 || b1)
	mov A, 1
	jmp .L170
	.L169:
	mov A, 0
	.L170:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 1 116 0
	#       r += t;
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, 1
	jne .L171, A, 0
	.loc 1 115 0
	#     if (a1 || b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L171:
	mov A, B
	jeq .L172, A, 0
	.loc 1 116 0
	#       r += t;
	.loc 1 111 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L172:
	.loc 1 116 0
	#       r += t;
	.L16:
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 116 0
	#       r += t;
	jmp .L15
	.L17:
	.loc 1 119 0
	# }
	.loc 1 111 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_xor:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 1 131 0
	# }
	.loc 1 123 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 128 0
	#       r += t;
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 128 0
	#       r += t;
	.L18:
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L173, A, 0
	jmp .L174
	.L173:
	.loc 1 128 0
	#       r += t;
	jmp .L20
	.L174:
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 119 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L175, A, 0
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 119 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L176
	.L175:
	mov A, 0
	.L176:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 127 0
	#     if (a1 != b1)
	mov A, 0
	mov B, SP
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 119 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L177, A, 0
	.loc 1 127 0
	#     if (a1 != b1)
	.loc 1 119 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 127 0
	#     if (a1 != b1)
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 127 0
	#     if (a1 != b1)
	mov A, 1
	jmp .L178
	.L177:
	mov A, 0
	.L178:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 1 128 0
	#       r += t;
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 127 0
	#     if (a1 != b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L179, A, 0
	.loc 1 128 0
	#       r += t;
	.loc 1 123 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L179:
	.loc 1 128 0
	#       r += t;
	.L19:
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 128 0
	#       r += t;
	jmp .L18
	.L20:
	.loc 1 131 0
	# }
	.loc 1 123 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_not:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 1 142 0
	# }
	.loc 1 135 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 139 0
	#       r += t;
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 139 0
	#       r += t;
	.L21:
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L180, A, 0
	jmp .L181
	.L180:
	.loc 1 139 0
	#       r += t;
	jmp .L23
	.L181:
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 138 0
	#     if (!a1)
	mov A, 0
	mov B, SP
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 131 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L182, A, 0
	.loc 1 138 0
	#     if (!a1)
	.loc 1 131 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 138 0
	#     if (!a1)
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 138 0
	#     if (!a1)
	mov A, 1
	jmp .L183
	.L182:
	mov A, 0
	.L183:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 139 0
	#       r += t;
	.loc 1 138 0
	#     if (!a1)
	mov B, BP
	add B, 16777212
	load A, B
	eq A, 0
	jeq .L184, A, 0
	.loc 1 139 0
	#       r += t;
	.loc 1 135 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L184:
	.loc 1 139 0
	#       r += t;
	.L22:
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 139 0
	#       r += t;
	jmp .L21
	.L23:
	.loc 1 142 0
	# }
	.loc 1 135 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_shl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 1 153 0
	# }
	.loc 1 146 0
	#   for (int i = b; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	.loc 1 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.L24:
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L185, A, 0
	jmp .L186
	.L185:
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	jmp .L26
	.L186:
	.loc 1 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 149 0
	#     if (a1)
	mov A, 0
	mov B, SP
	.loc 1 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L187, A, 0
	.loc 1 149 0
	#     if (a1)
	.loc 1 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 149 0
	#     if (a1)
	.loc 1 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 149 0
	#     if (a1)
	mov A, 1
	jmp .L188
	.L187:
	mov A, 0
	.L188:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 149 0
	#     if (a1)
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L189, A, 0
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 146 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L189:
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.L25:
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	jmp .L24
	.L26:
	.loc 1 153 0
	# }
	.loc 1 146 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_shr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 1 164 0
	# }
	.loc 1 157 0
	#   for (int i = b; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov A, 0
	mov B, SP
	.loc 1 153 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.L27:
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L190, A, 0
	jmp .L191
	.L190:
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	jmp .L29
	.L191:
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 153 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 160 0
	#     if (a1)
	mov A, 0
	mov B, SP
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L192, A, 0
	.loc 1 160 0
	#     if (a1)
	.loc 1 153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 160 0
	#     if (a1)
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 160 0
	#     if (a1)
	mov A, 1
	jmp .L193
	.L192:
	mov A, 0
	.L193:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 160 0
	#     if (a1)
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L194, A, 0
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 157 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L194:
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.L28:
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	jmp .L27
	.L29:
	.loc 1 164 0
	# }
	.loc 1 157 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
print_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 2 "/Users/nullpo/dev/elvm/libc/_raw_print.h"
	.loc 2 9 0
	#     putchar(*p);
	.L30:
	.loc 1 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L195, A, 0
	jmp .L196
	.L195:
	.loc 2 9 0
	#     putchar(*p);
	jmp .L32
	.L196:
	.loc 1 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 2 9 0
	#     putchar(*p);
	.L31:
	.loc 1 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 2 9 0
	#     putchar(*p);
	jmp .L30
	.L32:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stringify_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 2 20 0
	# }
	.loc 2 14 0
	#   do {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 18 0
	#   } while (v);
	.L33:
	.loc 2 16 0
	#     *p = v % 10 + '0';
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 2 17 0
	#     v /= 10;
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 17 0
	#     v /= 10;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L197:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 18 0
	#   } while (v);
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 18 0
	#   } while (v);
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L198:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	jeq .L199, A, 0
	.loc 2 18 0
	#   } while (v);
	jmp .L33
	.L199:
	.L34:
	.loc 2 20 0
	# }
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
print_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 32
	.loc 2 25 0
	# }
	.loc 2 24 0
	#   print_str(stringify_int(v, buf + sizeof(buf) - 1));
	.loc 2 25 0
	# }
	.loc 2 24 0
	#   print_str(stringify_int(v, buf + sizeof(buf) - 1));
	mov A, BP
	add A, 16777184
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_int
	.L200:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L201:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stringify_hex:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 2 44 0
	# }
	.loc 2 29 0
	#   int c;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 2 30 0
	#   *p = '\0';
	.loc 2 31 0
	#   if (v < 0) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 34 0
	#   }
	.loc 2 32 0
	#     v = -v;
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 32 0
	#     v = -v;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L202, A, 0
	.loc 2 34 0
	#   }
	.loc 2 33 0
	#     is_negative = 1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 34 0
	#   }
	mov A, 1
	mov B, BP
	add B, 16777215
	store A, B
	.L202:
	.loc 2 40 0
	#   } while (v);
	.L35:
	.loc 2 37 0
	#     c = v % 16;
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 2 38 0
	#     *p = c < 10 ? c + '0' : c - 10 + 'a';
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 38 0
	#     *p = c < 10 ? c + '0' : c - 10 + 'a';
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L203:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 2 39 0
	#     v /= 16;
	.loc 2 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#     v /= 16;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L204, A, 0
	.loc 2 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#     v /= 16;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	jmp .L205
	.L204:
	.loc 2 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#     v /= 16;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	.L205:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 40 0
	#   } while (v);
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 40 0
	#   } while (v);
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L206:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L207, A, 0
	.loc 2 40 0
	#   } while (v);
	jmp .L35
	.L207:
	.L36:
	.loc 2 42 0
	#     *--p = '-';
	.loc 2 29 0
	#   int c;
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L208, A, 0
	.loc 2 42 0
	#     *--p = '-';
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L208:
	.loc 2 44 0
	# }
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isspace:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 3 "/Users/nullpo/dev/elvm/libc/ctype.h"
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L213, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L213:
	mov A, B
	mov B, 1
	jne .L212, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L212:
	mov A, B
	mov B, 1
	jne .L211, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L211:
	mov A, B
	mov B, 1
	jne .L210, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L210:
	mov A, B
	mov B, 1
	jne .L209, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L209:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isdigit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 10 0
	# }
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L214, A, 0
	.loc 3 10 0
	# }
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 10 0
	# }
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L214:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isxdigit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 14 0
	# }
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L217:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L216, A, 0
	.loc 3 14 0
	# }
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L218, A, 0
	.loc 3 14 0
	# }
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 14 0
	# }
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L218:
	mov A, B
	mov B, A
	ne B, 0
	.L216:
	mov A, B
	mov B, 1
	jne .L215, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L219, A, 0
	.loc 3 14 0
	# }
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 14 0
	# }
	mov A, 70
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L219:
	mov A, B
	mov B, A
	ne B, 0
	.L215:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isupper:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 18 0
	# }
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 14 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L220, A, 0
	.loc 3 18 0
	# }
	.loc 3 14 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	# }
	mov A, 90
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L220:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isalpha:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 22 0
	# }
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L222, A, 0
	.loc 3 22 0
	# }
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 22 0
	# }
	mov A, 122
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L222:
	mov A, B
	mov B, 1
	jne .L221, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L223, A, 0
	.loc 3 22 0
	# }
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 22 0
	# }
	mov A, 90
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L223:
	mov A, B
	mov B, A
	ne B, 0
	.L221:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isalnum:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 26 0
	# }
	.loc 3 22 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L225:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L224, A, 0
	.loc 3 26 0
	# }
	.loc 3 22 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L226:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L224:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isprint:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 30 0
	# }
	.loc 3 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L228:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L227, A, 0
	.loc 3 30 0
	# }
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L229, A, 0
	.loc 3 30 0
	# }
	.loc 3 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 30 0
	# }
	mov A, 127
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L229:
	mov A, B
	mov B, A
	ne B, 0
	.L227:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
abort:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 4 "/Users/nullpo/dev/elvm/libc/stdlib.h"
	.loc 4 21 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
malloc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 4 31 0
	# }
	.loc 4 25 0
	#   _edata += n;
	mov A, 0
	mov B, SP
	.loc 3 30 0
	# }
	mov B, _edata
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 26 0
	#   if (r > _edata) {
	.loc 3 30 0
	# }
	mov B, _edata
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 21 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, _edata
	store A, B
	.loc 4 29 0
	#   }
	.loc 4 27 0
	#     print_str("no memory!\n");
	.loc 3 30 0
	# }
	mov B, _edata
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 25 0
	#   _edata += n;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L230, A, 0
	.loc 4 29 0
	#   }
	.loc 4 28 0
	#     exit(1);
.data
	.L231:
	.string "no memory!\n"
.text
	mov A, .L231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L232:
	mov A, B
	add SP, 1
	.loc 4 29 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L230:
	.loc 4 31 0
	# }
	.loc 4 25 0
	#   _edata += n;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
calloc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 35 0
	# }
	.loc 4 31 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L233:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L234:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
free:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 35 0
	# }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtol:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 4 116 0
	# }
	.loc 4 45 0
	#   long acc, cutoff;
	.loc 4 46 0
	#   int c;
	.loc 4 47 0
	#   int neg, any, cutlim;
	.loc 4 48 0
	# 
	.loc 4 57 0
	#   }
	.loc 4 54 0
	#     if (endptr != 0)
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 54 0
	#     if (endptr != 0)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L236, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 54 0
	#     if (endptr != 0)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L236:
	mov A, B
	mov B, 1
	jne .L235, A, 0
	mov A, 36
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L235:
	mov A, B
	jeq .L237, A, 0
	.loc 4 57 0
	#   }
	.loc 4 55 0
	#       *endptr = (char *)nptr;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 55 0
	#       *endptr = (char *)nptr;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L238, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L238:
	.loc 4 57 0
	#   }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L237:
	.loc 4 65 0
	#   do {
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 67 0
	#   } while (isspace(c));
	.L37:
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 67 0
	#   } while (isspace(c));
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L239:
	mov A, B
	add SP, 1
	jeq .L240, A, 0
	.loc 4 67 0
	#   } while (isspace(c));
	jmp .L37
	.L240:
	.L38:
	.loc 4 74 0
	#       c = *s++;
	.loc 4 69 0
	#     neg = 1;
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 69 0
	#     neg = 1;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L241, A, 0
	.loc 4 71 0
	#   } else {
	.loc 4 70 0
	#     c = *s++;
	mov A, 1
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 71 0
	#   } else {
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L242
	.L241:
	.loc 4 74 0
	#       c = *s++;
	.loc 4 73 0
	#     if (c == '+')
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 74 0
	#       c = *s++;
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 74 0
	#       c = *s++;
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L243, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.L243:
	.L242:
	.loc 4 81 0
	#   }
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L246, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L246:
	mov A, B
	mov B, 0
	jeq .L245, A, 0
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L245:
	mov A, B
	mov B, 0
	jeq .L244, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L247, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 88
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L247:
	mov A, B
	mov B, A
	ne B, 0
	.L244:
	mov A, B
	jeq .L248, A, 0
	.loc 4 81 0
	#   }
	.loc 4 79 0
	#     s += 2;
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 79 0
	#     s += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 80 0
	#     base = 16;
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 80 0
	#     base = 16;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 81 0
	#   }
	mov A, 16
	mov B, BP
	add B, 4
	store A, B
	.L248:
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L249, A, 0
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L250, A, 0
	mov A, 8
	jmp .L251
	.L250:
	mov A, 10
	.L251:
	mov B, BP
	add B, 4
	store A, B
	.L249:
	.loc 4 91 0
	#   }
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L252, A, 0
	.loc 4 91 0
	#   }
	.loc 4 89 0
	#     }
	.loc 4 87 0
	#       cutlim -= base;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L253, A, 0
	.loc 4 89 0
	#     }
	.loc 4 88 0
	#       cutoff += 1;
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 4 89 0
	#     }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 89 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.L253:
	.loc 4 91 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777209
	store A, B
	.L252:
	.loc 4 111 0
	#     }
	.loc 4 93 0
	#     if (isdigit(c))
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	mov A, 0
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 111 0
	#     }
	.L39:
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L254:
	mov A, B
	add SP, 1
	jeq .L255, A, 0
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 94 0
	#       c -= '0';
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L256
	.L255:
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L257:
	mov A, B
	add SP, 1
	jeq .L258, A, 0
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isupper
	.L259:
	mov A, B
	add SP, 1
	jeq .L260, A, 0
	.loc 4 94 0
	#       c -= '0';
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L261
	.L260:
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	.L261:
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L262
	.L258:
	jmp .L41
	.L262:
	.L256:
	.loc 4 100 0
	#       break;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L263, A, 0
	.loc 4 100 0
	#       break;
	jmp .L41
	.L263:
	.loc 4 102 0
	#       continue;
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 102 0
	#       continue;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L264, A, 0
	jmp .L40
	.L264:
	.loc 4 111 0
	#     }
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L265, A, 0
	.loc 4 107 0
	#     } else {
	.loc 4 105 0
	#       acc *= base;
	mov A, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 106 0
	#       acc -= c;
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 106 0
	#       acc -= c;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L266:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 107 0
	#     } else {
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 107 0
	#     } else {
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L267
	.L265:
	.loc 4 111 0
	#     }
	.loc 4 109 0
	#       acc *= base;
	mov A, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 110 0
	#       acc += c;
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 110 0
	#       acc += c;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L268:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 111 0
	#     }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 111 0
	#     }
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L267:
	.loc 4 111 0
	#     }
	.L40:
	.loc 4 93 0
	#     if (isdigit(c))
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 111 0
	#     }
	jmp .L39
	.L41:
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	.loc 4 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L269, A, 0
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L270, A, 0
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	jmp .L271
	.L270:
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	.L271:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L269:
	.loc 4 116 0
	# }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoul:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 120 0
	# }
	.loc 4 116 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L272
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L272:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoll:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 124 0
	# }
	.loc 4 120 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L273:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoull:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 128 0
	# }
	.loc 4 124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L274:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
atoi:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 4 138 0
	# }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 136 0
	#   }
	.L42:
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L275, A, 0
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L275:
	mov A, B
	jeq .L276, A, 0
	.loc 4 136 0
	#   }
	.loc 4 135 0
	#     n += s[i++] - '0';
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 135 0
	#     n += s[i++] - '0';
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L277:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 135 0
	#     n += s[i++] - '0';
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L278:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 136 0
	#   }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L279
	.L276:
	jmp .L43
	.L279:
	jmp .L42
	.L43:
	.loc 4 138 0
	# }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
getenv:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 142 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
qsort:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 4 184 0
	#         size, compar);
	.loc 4 147 0
	#     return;
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 147 0
	#     return;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L280, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L280:
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov A, 0
	mov B, SP
	.loc 4 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 150 0
	#   char* left = base;
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L281:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L282:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 4 152 0
	# #if 0
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L283:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 179 0
	#   }
	.L44:
	.loc 4 162 0
	#       left += size;
	.L47:
	mov A, 32768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	mov A, .L284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L284:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L285, A, 0
	.loc 4 162 0
	#       left += size;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L286
	.L285:
	.loc 4 162 0
	#       left += size;
	jmp .L48
	.L286:
	jmp .L47
	.L48:
	.loc 4 164 0
	#       right -= size;
	.L49:
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	mov A, .L287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L287:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 164 0
	#       right -= size;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 32768
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L288, A, 0
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L289
	.L288:
	.loc 4 164 0
	#       right -= size;
	jmp .L50
	.L289:
	jmp .L49
	.L50:
	.loc 4 167 0
	#       break;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L290, A, 0
	.loc 4 167 0
	#       break;
	jmp .L46
	.L290:
	.loc 4 172 0
	#     }
	.loc 4 169 0
	#       char tmp = left[i];
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 172 0
	#     }
	.L51:
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L291, A, 0
	jmp .L292
	.L291:
	.loc 4 172 0
	#     }
	jmp .L53
	.L292:
	.loc 4 170 0
	#       left[i] = right[i];
	mov A, 0
	mov B, SP
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 171 0
	#       right[i] = tmp;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 171 0
	#       right[i] = tmp;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	.loc 4 170 0
	#       left[i] = right[i];
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 172 0
	#     }
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	.L52:
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	jmp .L51
	.L53:
	.loc 4 174 0
	#       pivot = right;
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L293, A, 0
	.loc 4 174 0
	#       pivot = right;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L294
	.L293:
	.loc 4 174 0
	#       pivot = right;
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L295, A, 0
	.loc 4 174 0
	#       pivot = right;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L295:
	.L294:
	.loc 4 178 0
	#     right -= size;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777213
	store A, B
	.loc 4 179 0
	#   }
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 179 0
	#   }
	.L45:
	jmp .L44
	.L46:
	.loc 4 182 0
	#   qsort(base, (size_t)(left - base) / size, size, compar);
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 183 0
	#   qsort(right, (size_t)(base + nmemb * size - right) / size,
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 183 0
	#   qsort(right, (size_t)(base + nmemb * size - right) / size,
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L296:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L297:
	mov A, B
	add SP, 4
	.loc 4 184 0
	#         size, compar);
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L298:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L299:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L300:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
memset:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.file 5 "/Users/nullpo/dev/elvm/libc/string.h"
	.loc 5 13 0
	# }
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	.loc 5 11 0
	#   }
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 11 0
	#   }
	.L54:
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L301, A, 0
	jmp .L302
	.L301:
	.loc 5 11 0
	#   }
	jmp .L56
	.L302:
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 11 0
	#   }
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 11 0
	#   }
	.L55:
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 11 0
	#   }
	jmp .L54
	.L56:
	.loc 5 13 0
	# }
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
memcpy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 21 0
	# }
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	.loc 5 19 0
	#   }
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 19 0
	#   }
	.L57:
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 13 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L303, A, 0
	jmp .L304
	.L303:
	.loc 5 19 0
	#   }
	jmp .L59
	.L304:
	.loc 5 13 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 19 0
	#   }
	.loc 5 13 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 19 0
	#   }
	.L58:
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 19 0
	#   }
	jmp .L57
	.L59:
	.loc 5 21 0
	# }
	.loc 5 13 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strlen:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 27 0
	# }
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	.loc 5 26 0
	#   return r;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.L60:
	.loc 5 21 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	jeq .L305, A, 0
	jmp .L306
	.L305:
	.loc 5 26 0
	#   return r;
	jmp .L62
	.L306:
	.L61:
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 26 0
	#   return r;
	jmp .L60
	.L62:
	.loc 5 27 0
	# }
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcat:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 35 0
	# }
	.loc 5 31 0
	#   for (; *d; d++) {}
	mov A, 0
	mov B, SP
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 32 0
	#   for (; *s; s++, d++)
	.L63:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L307, A, 0
	jmp .L308
	.L307:
	.loc 5 32 0
	#   for (; *s; s++, d++)
	jmp .L65
	.L308:
	.L64:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 32 0
	#   for (; *s; s++, d++)
	jmp .L63
	.L65:
	.loc 5 33 0
	#     *d = *s;
	.L66:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jeq .L309, A, 0
	jmp .L310
	.L309:
	.loc 5 33 0
	#     *d = *s;
	jmp .L68
	.L310:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	.L67:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	jmp .L66
	.L68:
	.loc 5 35 0
	# }
	.loc 5 31 0
	#   for (; *d; d++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcpy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 43 0
	# }
	.loc 5 39 0
	#   for (; *s; s++, d++)
	mov A, 0
	mov B, SP
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 40 0
	#     *d = *s;
	.L69:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jeq .L311, A, 0
	jmp .L312
	.L311:
	.loc 5 40 0
	#     *d = *s;
	jmp .L71
	.L312:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	.L70:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	jmp .L69
	.L71:
	.loc 5 42 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 43 0
	# }
	.loc 5 39 0
	#   for (; *s; s++, d++)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 5 53 0
	# }
	.loc 5 50 0
	#       return 1;
	.L72:
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, 1
	jne .L313, A, 0
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	ne B, 0
	.L313:
	mov A, B
	jeq .L314, A, 0
	jmp .L315
	.L314:
	.loc 5 50 0
	#       return 1;
	jmp .L74
	.L315:
	.loc 5 48 0
	#       return -1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 48 0
	#       return -1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L316, A, 0
	.loc 5 48 0
	#       return -1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L316:
	.loc 5 50 0
	#       return 1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 50 0
	#       return 1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L317, A, 0
	.loc 5 50 0
	#       return 1;
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L317:
	.L73:
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 50 0
	#       return 1;
	jmp .L72
	.L74:
	.loc 5 53 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strchr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 5 61 0
	# }
	.loc 5 58 0
	#       return s;
	.L75:
	.loc 5 57 0
	#     if (*s == c)
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L318, A, 0
	jmp .L319
	.L318:
	.loc 5 58 0
	#       return s;
	jmp .L77
	.L319:
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L320, A, 0
	.loc 5 58 0
	#       return s;
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L320:
	.loc 5 58 0
	#       return s;
	.L76:
	.loc 5 57 0
	#     if (*s == c)
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 58 0
	#       return s;
	jmp .L75
	.L77:
	.loc 5 61 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strdup:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 5 68 0
	# }
	.loc 5 65 0
	#   char* r = malloc(l + 1);
	mov A, 0
	mov B, SP
	.loc 5 61 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L321:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 66 0
	#   strcpy(r, s);
	mov A, 0
	mov B, SP
	.loc 5 65 0
	#   char* r = malloc(l + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 66 0
	#   strcpy(r, s);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L322:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 67 0
	#   return r;
	.loc 5 61 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 66 0
	#   strcpy(r, s);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcpy
	.L323:
	mov A, B
	add SP, 2
	.loc 5 68 0
	# }
	.loc 5 66 0
	#   strcpy(r, s);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtok_r:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 5 112 0
	#       }
	.loc 5 75 0
	#   int c, sc;
	.loc 5 76 0
	#   char *tok;
	.loc 5 77 0
	# 
	.loc 5 79 0
	#     return (NULL);
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 79 0
	#     return (NULL);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L324, A, 0
	.loc 5 68 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 2
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 79 0
	#     return (NULL);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L324:
	mov A, B
	jeq .L325, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L325:
	.loc 5 85 0
	#   c = *s++;
	.L86:
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 88 0
	#       goto cont;
	.loc 5 87 0
	#     if (c == sc)
	.loc 5 68 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 88 0
	#       goto cont;
	.L78:
	.loc 5 87 0
	#     if (c == sc)
	.loc 5 75 0
	#   int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 87 0
	#     if (c == sc)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L326, A, 0
	jmp .L327
	.L326:
	.loc 5 88 0
	#       goto cont;
	jmp .L80
	.L327:
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L328, A, 0
	.loc 5 88 0
	#       goto cont;
	jmp .L86
	.L328:
	.L79:
	jmp .L78
	.L80:
	.loc 5 94 0
	#   }
	.loc 5 92 0
	#     *last = NULL;
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 92 0
	#     *last = NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L329, A, 0
	.loc 5 94 0
	#   }
	.loc 5 93 0
	#     return (NULL);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 68 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 94 0
	#   }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L329:
	.loc 5 96 0
	# 
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 96 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 5 112 0
	#       }
	.L81:
	.loc 5 103 0
	#     spanp = delim;
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 104 0
	#     do {
	.loc 5 68 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 112 0
	#       }
	.L84:
	.loc 5 106 0
	#         if (c == 0)
	.loc 5 75 0
	#   int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L330, A, 0
	.loc 5 112 0
	#       }
	.loc 5 107 0
	#           s = NULL;
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 107 0
	#           s = NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L331, A, 0
	mov A, 0
	mov B, BP
	add B, 2
	store A, B
	jmp .L332
	.L331:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 107 0
	#           s = NULL;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L332:
	.loc 5 111 0
	#         return (tok);
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 112 0
	#       }
	.loc 5 77 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L330:
	.loc 5 112 0
	#       }
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 112 0
	#       }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L333, A, 0
	jmp .L84
	.L333:
	.L85:
	.L82:
	jmp .L81
	.L83:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
charmap:
	.long 0
	.long 1
	.long 2
	.long 3
	.long 4
	.long 5
	.long 6
	.long 7
	.long 8
	.long 9
	.long 10
	.long 11
	.long 12
	.long 13
	.long 14
	.long 15
	.long 16
	.long 17
	.long 18
	.long 19
	.long 20
	.long 21
	.long 22
	.long 23
	.long 24
	.long 25
	.long 26
	.long 27
	.long 28
	.long 29
	.long 30
	.long 31
	.long 32
	.long 33
	.long 34
	.long 35
	.long 36
	.long 37
	.long 38
	.long 39
	.long 40
	.long 41
	.long 42
	.long 43
	.long 44
	.long 45
	.long 46
	.long 47
	.long 48
	.long 49
	.long 50
	.long 51
	.long 52
	.long 53
	.long 54
	.long 55
	.long 56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
	.long 64
	.long 97
	.long 98
	.long 99
	.long 100
	.long 101
	.long 102
	.long 103
	.long 104
	.long 105
	.long 106
	.long 107
	.long 108
	.long 109
	.long 110
	.long 111
	.long 112
	.long 113
	.long 114
	.long 115
	.long 116
	.long 117
	.long 118
	.long 119
	.long 120
	.long 121
	.long 122
	.long 91
	.long 92
	.long 93
	.long 94
	.long 95
	.long 96
	.long 97
	.long 98
	.long 99
	.long 100
	.long 101
	.long 102
	.long 103
	.long 104
	.long 105
	.long 106
	.long 107
	.long 108
	.long 109
	.long 110
	.long 111
	.long 112
	.long 113
	.long 114
	.long 115
	.long 116
	.long 117
	.long 118
	.long 119
	.long 120
	.long 121
	.long 122
	.long 123
	.long 124
	.long 125
	.long 126
	.long 127
	.long -128
	.long -127
	.long -126
	.long -125
	.long -124
	.long -123
	.long -122
	.long -121
	.long -120
	.long -119
	.long -118
	.long -117
	.long -116
	.long -115
	.long -114
	.long -113
	.long -112
	.long -111
	.long -110
	.long -109
	.long -108
	.long -107
	.long -106
	.long -105
	.long -104
	.long -103
	.long -102
	.long -101
	.long -100
	.long -99
	.long -98
	.long -97
	.long -96
	.long -95
	.long -94
	.long -93
	.long -92
	.long -91
	.long -90
	.long -89
	.long -88
	.long -87
	.long -86
	.long -85
	.long -84
	.long -83
	.long -82
	.long -81
	.long -80
	.long -79
	.long -78
	.long -77
	.long -76
	.long -75
	.long -74
	.long -73
	.long -72
	.long -71
	.long -70
	.long -69
	.long -68
	.long -67
	.long -66
	.long -65
	.long -64
	.long -63
	.long -62
	.long -61
	.long -60
	.long -59
	.long -58
	.long -57
	.long -56
	.long -55
	.long -54
	.long -53
	.long -52
	.long -51
	.long -50
	.long -49
	.long -48
	.long -47
	.long -46
	.long -45
	.long -44
	.long -43
	.long -42
	.long -41
	.long -40
	.long -39
	.long -38
	.long -37
	.long -36
	.long -35
	.long -34
	.long -33
	.long -32
	.long -31
	.long -30
	.long -29
	.long -28
	.long -27
	.long -26
	.long -25
	.long -24
	.long -23
	.long -22
	.long -21
	.long -20
	.long -19
	.long -18
	.long -17
	.long -16
	.long -15
	.long -14
	.long -13
	.long -12
	.long -11
	.long -10
	.long -9
	.long -8
	.long -7
	.long -6
	.long -5
	.long -4
	.long -3
	.long -2
	.long -1
	.text
strcasecmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov A, charmap
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 166 0
	# 
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.L87:
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 166 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L334, A, 0
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L335, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L335:
	jmp .L336
	.L334:
	jmp .L88
	.L336:
	jmp .L87
	.L88:
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 166 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	sub A, 1
	mov B, BP
	add B, 16777213
	store A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strncasecmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 190 0
	# }
	.loc 5 186 0
	#         break;
	.loc 5 178 0
	#     const unsigned char *cm = charmap;
	.loc 5 171 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 178 0
	#     const unsigned char *cm = charmap;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L337, A, 0
	.loc 5 186 0
	#         break;
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov A, charmap
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov A, 0
	mov B, SP
	.loc 5 171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 181 0
	# 
	mov A, 0
	mov B, SP
	.loc 5 171 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 5 186 0
	#         break;
	.L89:
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 181 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L338, A, 0
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 181 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	sub A, 1
	mov B, BP
	add B, 16777213
	store A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L338:
	.loc 5 186 0
	#         break;
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 186 0
	#         break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L339, A, 0
	jmp .L90
	.L339:
	.loc 5 171 0
	# }
	mov B, BP
	add B, 4
	load A, B
	sub A, 1
	mov B, BP
	add B, 4
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 186 0
	#         break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L340, A, 0
	jmp .L89
	.L340:
	.L90:
	.L337:
	.loc 5 190 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strpbrk:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 205 0
	# }
	.loc 5 197 0
	# 	int c, sc;
	.loc 5 198 0
	# 
	.loc 5 201 0
	# 			if (sc == c)
	.L91:
	.loc 5 200 0
	# 		for (scanp = s2; (sc = *scanp++) != 0;)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 200 0
	# 		for (scanp = s2; (sc = *scanp++) != 0;)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L341, A, 0
	.loc 5 201 0
	# 			if (sc == c)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 201 0
	# 			if (sc == c)
	.L93:
	.loc 5 197 0
	# 	int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 201 0
	# 			if (sc == c)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L342, A, 0
	jmp .L343
	.L342:
	jmp .L95
	.L343:
	.loc 5 198 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L344, A, 0
	.loc 5 201 0
	# 			if (sc == c)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 201 0
	# 			if (sc == c)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L344:
	.L94:
	jmp .L93
	.L95:
	jmp .L345
	.L341:
	jmp .L92
	.L345:
	jmp .L91
	.L92:
	.loc 5 205 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
puts:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 6 "/Users/nullpo/dev/elvm/libc/stdio.h"
	.loc 6 20 0
	# }
	.loc 6 19 0
	#   putchar('\n');
	.loc 5 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L346:
	mov A, B
	add SP, 1
	.loc 6 20 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vsnprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 38
	.loc 6 87 0
	# }
	.loc 6 24 0
	#   size_t off = 0;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 6 84 0
	#   }
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 20 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 84 0
	#   }
	.L96:
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	jeq .L347, A, 0
	jmp .L348
	.L347:
	.loc 6 84 0
	#   }
	jmp .L98
	.L348:
	.loc 6 38 0
	#     }
	.loc 6 28 0
	#       if (!is_overlow) {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 28 0
	#       if (!is_overlow) {
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L349, A, 0
	.loc 6 38 0
	#     }
	.loc 6 34 0
	#         }
	.loc 6 29 0
	#         if (off + 1 >= size) {
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	jeq .L350, A, 0
	.loc 6 34 0
	#         }
	.loc 6 30 0
	#           is_overlow = 1;
	.loc 6 20 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 30 0
	#           is_overlow = 1;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 30 0
	#           is_overlow = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L351, A, 0
	.loc 6 32 0
	#         } else {
	.loc 6 31 0
	#           buf[off] = 0;
	mov A, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 6 32 0
	#         } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L352
	.L351:
	.loc 6 34 0
	#         }
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 34 0
	#         }
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L352:
	.L350:
	.loc 6 37 0
	#       continue;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 6 38 0
	#     }
	jmp .L97
	.L349:
	.loc 6 41 0
	#     char* cur_p;
	.loc 6 42 0
	#  retry:
	.loc 6 72 0
	#     }
	.loc 6 43 0
	#     switch (*++inp) {
	.L108:
	.loc 6 72 0
	#     }
	.loc 6 43 0
	#     switch (*++inp) {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777179
	store A, B
	.loc 6 72 0
	#     }
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 108
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L353, A, 0
	jmp .L100
	.L353:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 100
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L354, A, 0
	jmp .L101
	.L354:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L355, A, 0
	jmp .L102
	.L355:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L356, A, 0
	jmp .L103
	.L356:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 115
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L357, A, 0
	jmp .L104
	.L357:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 99
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L358, A, 0
	jmp .L105
	.L358:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L359, A, 0
	jmp .L106
	.L359:
	jmp .L107
	.loc 6 45 0
	#         goto retry;
	.L100:
	jmp .L108
	.loc 6 47 0
	#       case 'u':
	.L101:
	.L102:
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 47 0
	#       case 'u':
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_int
	.L360:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 50 0
	#       case 'x':
	jmp .L99
	.loc 6 51 0
	#         cur_p = stringify_hex(va_arg(ap, long), cur_buf + sizeof(cur_buf) - 1);
	.L103:
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 51 0
	#         cur_p = stringify_hex(va_arg(ap, long), cur_buf + sizeof(cur_buf) - 1);
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_hex
	.L361:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 53 0
	#       case 's':
	jmp .L99
	.loc 6 54 0
	#         cur_p = va_arg(ap, char*);
	.L104:
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 56 0
	#       case 'c':
	jmp .L99
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	.L105:
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 59 0
	#         cur_p = cur_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 59 0
	#         cur_p = cur_buf;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 60 0
	#         break;
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 61 0
	#       case '%':
	jmp .L99
	.loc 6 62 0
	#         cur_buf[0] = '%';
	.L106:
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 62 0
	#         cur_buf[0] = '%';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 64 0
	#         cur_p = cur_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 64 0
	#         cur_p = cur_buf;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 65 0
	#         break;
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 66 0
	#       default:
	jmp .L99
	.loc 6 67 0
	#         print_int(*inp);
	.L107:
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_int
	.L362:
	mov A, B
	add SP, 1
	.loc 6 69 0
	#         print_str(fmt);
.data
	.L363:
	.string " in "
.text
	mov A, .L363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L364:
	mov A, B
	add SP, 1
	.loc 6 70 0
	#         print_str(": unknown format!\n");
	.loc 6 20 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L365:
	mov A, B
	add SP, 1
	.loc 6 71 0
	#         exit(1);
.data
	.L366:
	.string ": unknown format!\n"
.text
	mov A, .L366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L367:
	mov A, B
	add SP, 1
	.loc 6 72 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L99:
	.loc 6 75 0
	#     if (!is_overlow) {
	mov A, 0
	mov B, SP
	.loc 6 42 0
	#  retry:
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L368:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777178
	store A, B
	.loc 6 81 0
	#       }
	.loc 6 76 0
	#       if (off + len >= size) {
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	jeq .L369, A, 0
	.loc 6 81 0
	#       }
	.loc 6 77 0
	#         is_overlow = 1;
	.loc 6 20 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 77 0
	#         is_overlow = 1;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 75 0
	#     if (!is_overlow) {
	mov B, BP
	add B, 16777178
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L370, A, 0
	.loc 6 79 0
	#       } else {
	.loc 6 78 0
	#         buf[off] = 0;
	mov A, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 6 79 0
	#       } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L371
	.L370:
	.loc 6 81 0
	#       }
	.loc 6 42 0
	#  retry:
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 81 0
	#       }
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcpy
	.L372:
	mov A, B
	add SP, 2
	.L371:
	.L369:
	.loc 6 84 0
	#   }
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 75 0
	#     if (!is_overlow) {
	mov B, BP
	add B, 16777178
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 84 0
	#   }
	.L97:
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 6 84 0
	#   }
	jmp .L96
	.L98:
	.loc 6 86 0
	#   return off;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 87 0
	# }
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vsprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 91 0
	# }
	.loc 6 87 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 91 0
	# }
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 87 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L373:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
snprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 99 0
	# }
	.loc 6 95 0
	#   va_start(ap, fmt);
	.loc 6 96 0
	#   int r = vsnprintf(buf, size, fmt , ap);
	mov A, BP
	add A, 4
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 97 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 95 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 91 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L374:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 99 0
	# }
	.loc 6 97 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 107 0
	# }
	.loc 6 103 0
	#   va_start(ap, fmt);
	.loc 6 104 0
	#   int r = vsprintf(buf, fmt, ap);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 105 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 103 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 99 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsprintf
	.L375:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 107 0
	# }
	.loc 6 105 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 257
	.loc 6 115 0
	# }
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	.loc 6 112 0
	#   buf[r] = 0;
	mov A, 0
	mov B, SP
	.loc 6 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 112 0
	#   buf[r] = 0;
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L376:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16776959
	store A, B
	.loc 6 113 0
	#   print_str(buf);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 112 0
	#   buf[r] = 0;
	mov B, BP
	add B, 16776959
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 114 0
	#   return r;
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L377:
	mov A, B
	add SP, 1
	.loc 6 115 0
	# }
	.loc 6 112 0
	#   buf[r] = 0;
	mov B, BP
	add B, 16776959
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
printf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 123 0
	# }
	.loc 6 119 0
	#   va_start(ap, fmt);
	.loc 6 120 0
	#   int r = vprintf(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 121 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 119 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 115 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L378:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 123 0
	# }
	.loc 6 121 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
stdin:
	.long 1
	.data 0
stdout:
	.long 1
	.data 0
stderr:
	.long 1
	.text
fprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 6 135 0
	# }
	.loc 6 132 0
	#   va_start(ap, fmt);
	.loc 6 133 0
	#   vprintf(fmt, ap);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 134 0
	#   va_end(ap);
	.loc 6 132 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L379:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vfprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 139 0
	# }
	.loc 6 135 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L380:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fileno:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 143 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fopen:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 147 0
	# }
	.loc 6 123 0
	# }
	mov B, stdin
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fclose:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 151 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fwrite:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 6 159 0
	# }
	.loc 6 155 0
	#   size_t l = (int)s * (int)n;
	mov A, 0
	mov B, SP
	.loc 6 151 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov A, 0
	mov B, SP
	.loc 6 151 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	.loc 6 151 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L381:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 157 0
	#     putchar(str[i]);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.L109:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L382, A, 0
	jmp .L383
	.L382:
	.loc 6 157 0
	#     putchar(str[i]);
	jmp .L111
	.L383:
	.loc 6 155 0
	#   size_t l = (int)s * (int)n;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 157 0
	#     putchar(str[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L110:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	jmp .L109
	.L111:
	.loc 6 159 0
	# }
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fputs:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 163 0
	# }
	.loc 6 159 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L384:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fgets:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 176 0
	# }
	.loc 6 172 0
	#     }
	.loc 6 167 0
	#     int c = getchar();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 6 172 0
	#     }
	.L112:
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 167 0
	#     int c = getchar();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L385, A, 0
	jmp .L386
	.L385:
	.loc 6 172 0
	#     }
	jmp .L114
	.L386:
	.loc 6 168 0
	#     s[i] = c;
	mov A, 0
	mov B, SP
	getc A
	jne .L387, A, 0
	mov A, -1
	.L387:
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 169 0
	#     if (c == '\n' || c == EOF) {
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 169 0
	#     if (c == '\n' || c == EOF) {
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	.loc 6 170 0
	#       s[i + 1] = 0;
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 170 0
	#       s[i + 1] = 0;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L388, A, 0
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 170 0
	#       s[i + 1] = 0;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L388:
	mov A, B
	jeq .L389, A, 0
	.loc 6 172 0
	#     }
	.loc 6 171 0
	#       return i;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 171 0
	#       return i;
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 171 0
	#       return i;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L389:
	.loc 6 172 0
	#     }
	.L113:
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	jmp .L112
	.L114:
	.loc 6 175 0
	#   return size;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 175 0
	#   return size;
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 175 0
	#   return size;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 176 0
	# }
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
g_ungot:
	.long -1
	.data
	eof_seen:

	.long 0
	.text
fgetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 6 195 0
	# }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	.loc 6 191 0
	#   }
	.loc 6 184 0
	#     // A hack for whitespace, in which getchar after EOF is not
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 184 0
	#     // A hack for whitespace, in which getchar after EOF is not
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L390, A, 0
	.loc 6 191 0
	#   }
	.loc 6 187 0
	#       return EOF;
	.loc 6 176 0
	# }
	mov B, eof_seen
	load A, B
	jeq .L391, A, 0
	.loc 6 187 0
	#       return EOF;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L391:
	.loc 6 189 0
	#     eof_seen = r == EOF;
	getc A
	jne .L392, A, 0
	mov A, -1
	.L392:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 190 0
	#     return r;
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 190 0
	#     return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, eof_seen
	store A, B
	.loc 6 191 0
	#   }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L390:
	.loc 6 193 0
	#   g_ungot = EOF;
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 194 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, g_ungot
	store A, B
	.loc 6 195 0
	# }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
getc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 199 0
	# }
	.loc 6 195 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fgetc
	.L393:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ungetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 205 0
	# }
	.loc 6 203 0
	#     return g_ungot = c;
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 203 0
	#     return g_ungot = c;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L394, A, 0
	.loc 6 199 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, g_ungot
	store A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L394:
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
g_buf:
	.long -1
	.text
getChar:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.file 7 "out/lisp.c"
	.loc 7 16 0
	# }
	.loc 7 7 0
	#   if (g_buf != -1) {
	.loc 7 13 0
	#       exit(0);
	.loc 7 8 0
	#     r = g_buf;
	.loc 6 205 0
	# }
	mov B, g_buf
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8 0
	#     r = g_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L395, A, 0
	.loc 7 10 0
	#   } else {
	.loc 7 9 0
	#     g_buf = -1;
	.loc 6 205 0
	# }
	mov B, g_buf
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10 0
	#   } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, g_buf
	store A, B
	jmp .L396
	.L395:
	.loc 7 13 0
	#       exit(0);
	.loc 7 12 0
	#     if (r == -1)
	getc A
	jne .L397, A, 0
	mov A, -1
	.L397:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 13 0
	#       exit(0);
	.loc 7 7 0
	#   if (g_buf != -1) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 13 0
	#       exit(0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L398, A, 0
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L398:
	.L396:
	.loc 7 16 0
	# }
	.loc 7 7 0
	#   if (g_buf != -1) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
peekChar:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 24 0
	# }
	.loc 7 20 0
	#     return g_buf;
	.loc 6 205 0
	# }
	mov B, g_buf
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 20 0
	#     return g_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L399, A, 0
	.loc 6 205 0
	# }
	mov B, g_buf
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L399:
	.loc 7 22 0
	#   g_buf = c;
	mov A, 0
	mov B, SP
	getc A
	jne .L400, A, 0
	mov A, -1
	.L400:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 23 0
	#   return c;
	.loc 7 22 0
	#   g_buf = c;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, g_buf
	store A, B
	.loc 7 24 0
	# }
	.loc 7 22 0
	#   g_buf = c;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ungetChar:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 28 0
	# }
	.loc 7 24 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, g_buf
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
g_close_char:
	.long 41
	.text
printExpr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 97 0
	# }
	.loc 7 67 0
	#   }
	.loc 7 65 0
	#     fputs("nil", stdout);
	.loc 7 28 0
	# }
	mov B, BP
	add B, 2
	load A, B
	eq A, 0
	jeq .L401, A, 0
	.loc 7 67 0
	#   }
	.loc 7 66 0
	#     return;
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 66 0
	#     return;
.data
	.L402:
	.string "nil"
.text
	mov A, .L402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fputs
	.L403:
	mov A, B
	add SP, 2
	.loc 7 67 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L401:
	.loc 7 77 0
	#   }
	.loc 7 70 0
	#     unsigned short v = expr->num;
	.loc 7 28 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L404, A, 0
	.loc 7 77 0
	#   }
	.loc 7 71 0
	#     if (v > 32767) {
	mov A, 0
	mov B, SP
	.loc 7 28 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 74 0
	#     }
	.loc 7 72 0
	#       putchar('-');
	mov A, 32767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 71 0
	#     if (v > 32767) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L405, A, 0
	.loc 7 74 0
	#     }
	.loc 7 73 0
	#       v = -v;
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 74 0
	#     }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 71 0
	#     if (v > 32767) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L405:
	.loc 7 76 0
	#     return;
	.loc 7 71 0
	#     if (v > 32767) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 76 0
	#     return;
.data
	.L406:
	.string "%d"
.text
	mov A, .L406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L407:
	mov A, B
	add SP, 2
	.loc 7 77 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L404:
	.loc 7 82 0
	#   }
	.loc 7 80 0
	#     fputs((char*)expr->str, stdout);
	.loc 7 28 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L408, A, 0
	.loc 7 82 0
	#   }
	.loc 7 81 0
	#     return;
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 81 0
	#     return;
	.loc 7 28 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fputs
	.L409:
	mov A, B
	add SP, 2
	.loc 7 82 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L408:
	.loc 7 85 0
	#   if (expr->type == LAMBDA) {
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 87 0
	#   }
	.loc 7 86 0
	#     fputs("lambda ", stdout);
	.loc 7 28 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L410, A, 0
	.loc 7 87 0
	#   }
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 87 0
	#   }
.data
	.L411:
	.string "lambda "
.text
	mov A, .L411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fputs
	.L412:
	mov A, B
	add SP, 2
	.L410:
	.loc 7 90 0
	#   while (l) {
	mov A, 0
	mov B, SP
	.loc 7 28 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 94 0
	#       putchar(' ');
	.L115:
	.loc 7 90 0
	#   while (l) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L413, A, 0
	.loc 7 94 0
	#       putchar(' ');
	.loc 7 92 0
	#     l = l->tail;
	.loc 7 90 0
	#   while (l) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L414:
	mov A, B
	add SP, 1
	.loc 7 93 0
	#     if (l)
	.loc 7 90 0
	#   while (l) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 94 0
	#       putchar(' ');
	.loc 7 90 0
	#   while (l) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L415, A, 0
	.loc 7 94 0
	#       putchar(' ');
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L415:
	jmp .L416
	.L413:
	jmp .L116
	.L416:
	jmp .L115
	.L116:
	.loc 7 97 0
	# }
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cons:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 104 0
	# }
	.loc 7 101 0
	#   s->head = h;
	mov A, 0
	mov B, SP
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L417:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 102 0
	#   s->tail = t;
	.loc 7 97 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 101 0
	#   s->head = h;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 103 0
	#   return s;
	.loc 7 97 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 101 0
	#   s->head = h;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 104 0
	# }
	.loc 7 101 0
	#   s->head = h;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
createAtom:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 110 0
	# }
	.loc 7 108 0
	#   a->type = type;
	mov A, 0
	mov B, SP
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L418:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 109 0
	#   return a;
	.loc 7 104 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 108 0
	#   a->type = type;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 110 0
	# }
	.loc 7 108 0
	#   a->type = type;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
createInt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 116 0
	# }
	.loc 7 114 0
	#   a->num = n;
	mov A, 0
	mov B, SP
	.loc 7 28 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createAtom
	.L419:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 115 0
	#   return a;
	.loc 7 110 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 114 0
	#   a->num = n;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 116 0
	# }
	.loc 7 114 0
	#   a->num = n;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
createStr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 122 0
	# }
	.loc 7 120 0
	#   a->str = s;
	mov A, 0
	mov B, SP
	.loc 7 28 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createAtom
	.L420:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 121 0
	#   return a;
	.loc 7 116 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 120 0
	#   a->str = s;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 122 0
	# }
	.loc 7 120 0
	#   a->str = s;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
createList:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 130 0
	# }
	.loc 7 126 0
	#     return NULL;
	.loc 7 122 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 126 0
	#     return NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L421, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L421:
	.loc 7 128 0
	#   a->list = l;
	mov A, 0
	mov B, SP
	.loc 7 28 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createAtom
	.L422:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 129 0
	#   return a;
	.loc 7 122 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 128 0
	#   a->list = l;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 130 0
	# }
	.loc 7 128 0
	#   a->list = l;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
createLambda:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 136 0
	# }
	.loc 7 134 0
	#   a->list = l;
	mov A, 0
	mov B, SP
	.loc 7 28 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createAtom
	.L423:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 135 0
	#   return a;
	.loc 7 130 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 134 0
	#   a->list = l;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 136 0
	# }
	.loc 7 134 0
	#   a->list = l;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
atom:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 140 0
	# }
	.loc 7 136 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 140 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L425, A, 0
	.loc 7 136 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L425:
	mov A, B
	mov B, 1
	jne .L424, A, 0
	.loc 7 140 0
	# }
	.loc 7 136 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 140 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L424:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isList:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 144 0
	# }
	.loc 7 140 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 144 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L426, A, 0
	.loc 7 140 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L426:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	g_t:

	.long 0
	.data
	g_val:

	.long 0
	.text
skipWS:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 157 0
	# }
	.loc 7 154 0
	#   while (c == ' ' || c == '\n')
	mov A, 0
	mov B, SP
	mov A, .L427
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getChar
	.L427:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 155 0
	#     c = getChar();
	.L117:
	.loc 7 154 0
	#   while (c == ' ' || c == '\n')
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 155 0
	#     c = getChar();
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L428, A, 0
	.loc 7 154 0
	#   while (c == ' ' || c == '\n')
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 155 0
	#     c = getChar();
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L428:
	mov A, B
	jeq .L429, A, 0
	mov A, .L430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getChar
	.L430:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L431
	.L429:
	jmp .L118
	.L431:
	jmp .L117
	.L118:
	.loc 7 157 0
	# }
	.loc 7 154 0
	#   while (c == ' ' || c == '\n')
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ungetChar
	.L432:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parseList:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 178 0
	# }
	.loc 7 161 0
	#   List* n = NULL;
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 162 0
	#   while (1) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 176 0
	#   }
	.L119:
	.loc 7 163 0
	#     skipWS();
	mov A, 1
	jeq .L433, A, 0
	.loc 7 176 0
	#   }
	.loc 7 164 0
	#     if (peekChar() == g_close_char) {
	mov A, .L434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skipWS
	.L434:
	mov A, B
	.loc 7 167 0
	#     }
	.loc 7 165 0
	#       getChar();
	mov A, .L435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peekChar
	.L435:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov B, g_close_char
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L436, A, 0
	.loc 7 167 0
	#     }
	.loc 7 166 0
	#       break;
	mov A, .L437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getChar
	.L437:
	mov A, B
	.loc 7 167 0
	#     }
	jmp .L120
	.L436:
	.loc 7 169 0
	#     List* t = cons(a, NULL);
	mov A, 0
	mov B, SP
	mov A, .L438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse
	.L438:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 170 0
	#     if (n) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 169 0
	#     List* t = cons(a, NULL);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cons
	.L439:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 174 0
	#     }
	.loc 7 162 0
	#   while (1) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L440, A, 0
	.loc 7 172 0
	#     } else {
	.loc 7 170 0
	#     if (n) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 162 0
	#   while (1) {
	mov B, BP
	add B, 16777214
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	jmp .L441
	.L440:
	.loc 7 174 0
	#     }
	.loc 7 170 0
	#     if (n) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L441:
	.loc 7 176 0
	#   }
	.loc 7 170 0
	#     if (n) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L442
	.L433:
	.loc 7 176 0
	#   }
	jmp .L120
	.L442:
	jmp .L119
	.L120:
	.loc 7 178 0
	# }
	.loc 7 161 0
	#   List* n = NULL;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createList
	.L443:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parseStr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 102
	.loc 7 200 0
	# }
	.loc 7 182 0
	#   int n = 0;
	.loc 7 183 0
	#   while (c != ' ' && c != '\n' && c != '(' && c != ')') {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777116
	mov A, 0
	store A, B
	.loc 7 187 0
	#   }
	.L121:
	.loc 7 184 0
	#     buf[n] = c;
	.loc 7 178 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 184 0
	#     buf[n] = c;
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L446, A, 0
	.loc 7 178 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 184 0
	#     buf[n] = c;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L446:
	mov A, B
	mov B, 0
	jeq .L445, A, 0
	.loc 7 178 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 184 0
	#     buf[n] = c;
	mov A, 40
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L445:
	mov A, B
	mov B, 0
	jeq .L444, A, 0
	.loc 7 178 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 184 0
	#     buf[n] = c;
	mov A, 41
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L444:
	mov A, B
	jeq .L447, A, 0
	.loc 7 187 0
	#   }
	.loc 7 185 0
	#     c = getChar();
	.loc 7 178 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 185 0
	#     c = getChar();
	.loc 7 182 0
	#   int n = 0;
	mov A, BP
	add A, 16777117
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 183 0
	#   while (c != ' ' && c != '\n' && c != '(' && c != ')') {
	mov B, BP
	add B, 16777116
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 186 0
	#     n++;
	mov A, .L448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getChar
	.L448:
	mov A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 187 0
	#   }
	.loc 7 183 0
	#   while (c != ' ' && c != '\n' && c != '(' && c != ')') {
	mov B, BP
	add B, 16777116
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777116
	store A, B
	load A, SP
	add SP, 1
	jmp .L449
	.L447:
	.loc 7 187 0
	#   }
	jmp .L122
	.L449:
	jmp .L121
	.L122:
	.loc 7 189 0
	# 
	.loc 7 178 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ungetChar
	.L450:
	mov A, B
	add SP, 1
	.loc 7 191 0
	#     return NULL;
	.loc 7 183 0
	#   while (c != ' ' && c != '\n' && c != '(' && c != ')') {
	mov B, BP
	add B, 16777116
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 191 0
	#     return NULL;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L453, A, 0
	.loc 7 182 0
	#   int n = 0;
	mov A, BP
	add A, 16777117
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 191 0
	#     return NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 110
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L453:
	mov A, B
	mov B, 0
	jeq .L452, A, 0
	.loc 7 182 0
	#   int n = 0;
	mov A, BP
	add A, 16777117
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 191 0
	#     return NULL;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 105
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L452:
	mov A, B
	mov B, 0
	jeq .L451, A, 0
	.loc 7 182 0
	#   int n = 0;
	mov A, BP
	add A, 16777117
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 191 0
	#     return NULL;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 108
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L451:
	mov A, B
	jeq .L454, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L454:
	.loc 7 194 0
	#   int i;
	mov A, 0
	mov B, SP
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 183 0
	#   while (c != ' ' && c != '\n' && c != '(' && c != ')') {
	mov B, BP
	add B, 16777116
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 194 0
	#   int i;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L455
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L455:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777115
	store A, B
	.loc 7 195 0
	#   for (i = 0; i < n; i++) {
	.loc 7 197 0
	#   }
	.loc 7 196 0
	#     str[i] = buf[i];
	mov A, 0
	mov B, BP
	add B, 16777114
	store A, B
	.loc 7 197 0
	#   }
	.L123:
	.loc 7 196 0
	#     str[i] = buf[i];
	.loc 7 195 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777114
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 183 0
	#   while (c != ' ' && c != '\n' && c != '(' && c != ')') {
	mov B, BP
	add B, 16777116
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L456, A, 0
	jmp .L457
	.L456:
	.loc 7 197 0
	#   }
	jmp .L125
	.L457:
	.loc 7 182 0
	#   int n = 0;
	mov A, BP
	add A, 16777117
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 195 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777114
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 197 0
	#   }
	.loc 7 194 0
	#   int i;
	mov B, BP
	add B, 16777115
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 195 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777114
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 197 0
	#   }
	.L124:
	.loc 7 196 0
	#     str[i] = buf[i];
	.loc 7 195 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777114
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777114
	store A, B
	load A, SP
	add SP, 1
	.loc 7 197 0
	#   }
	jmp .L123
	.L125:
	.loc 7 199 0
	#   return createStr(str);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 194 0
	#   int i;
	mov B, BP
	add B, 16777115
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 195 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777114
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 200 0
	# }
	.loc 7 194 0
	#   int i;
	mov B, BP
	add B, 16777115
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createStr
	.L458:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parseInt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 228 0
	# }
	.loc 7 204 0
	#   int m = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 205 0
	#   if (c == '-') {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 209 0
	#   }
	.loc 7 206 0
	#     m = 1;
	.loc 7 200 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 206 0
	#     m = 1;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L459, A, 0
	.loc 7 207 0
	#   } else {
	mov A, 1
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L460
	.L459:
	.loc 7 209 0
	#   }
	.loc 7 204 0
	#   int m = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 209 0
	#   }
	.loc 7 200 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 209 0
	#   }
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L460:
	.loc 7 219 0
	#     }
	.L126:
	.loc 7 212 0
	#     c = getChar();
	mov A, 1
	jeq .L461, A, 0
	.loc 7 219 0
	#     }
	.loc 7 213 0
	#     if (c >= '0' && c <= '9') {
	mov A, .L462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getChar
	.L462:
	mov A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 219 0
	#     }
	.loc 7 214 0
	#       n *= 10;
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 200 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L463, A, 0
	.loc 7 214 0
	#       n *= 10;
	.loc 7 200 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 214 0
	#       n *= 10;
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L463:
	mov A, B
	jeq .L464, A, 0
	.loc 7 216 0
	#     } else {
	.loc 7 215 0
	#       n += c - '0';
	.loc 7 204 0
	#   int m = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 215 0
	#       n += c - '0';
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L465
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L465:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 216 0
	#     } else {
	.loc 7 204 0
	#   int m = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 216 0
	#     } else {
	.loc 7 200 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 216 0
	#     } else {
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L466
	.L464:
	.loc 7 219 0
	#     }
	.loc 7 218 0
	#       break;
	.loc 7 200 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L467
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ungetChar
	.L467:
	mov A, B
	add SP, 1
	.loc 7 219 0
	#     }
	jmp .L127
	.L466:
	jmp .L468
	.L461:
	jmp .L127
	.L468:
	jmp .L126
	.L127:
	.loc 7 226 0
	#   }
	.loc 7 205 0
	#   if (c == '-') {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L469, A, 0
	.loc 7 226 0
	#   }
	.loc 7 224 0
	#       return parseStr('-');
	.loc 7 204 0
	#   int m = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 224 0
	#       return parseStr('-');
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L470, A, 0
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parseStr
	.L471:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L470:
	.loc 7 226 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 204 0
	#   int m = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L469:
	.loc 7 228 0
	# }
	.loc 7 204 0
	#   int m = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L472
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createInt
	.L472:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
eqStr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 237 0
	# }
	.loc 7 232 0
	#   for (i = 0; l[i] || r[i]; i++) {
	.loc 7 234 0
	#       return 0;
	.loc 7 233 0
	#     if (l[i] != r[i])
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 234 0
	#       return 0;
	.L128:
	.loc 7 233 0
	#     if (l[i] != r[i])
	.loc 7 228 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 232 0
	#   for (i = 0; l[i] || r[i]; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, 1
	jne .L473, A, 0
	.loc 7 233 0
	#     if (l[i] != r[i])
	.loc 7 228 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 232 0
	#   for (i = 0; l[i] || r[i]; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	ne B, 0
	.L473:
	mov A, B
	jeq .L474, A, 0
	jmp .L475
	.L474:
	.loc 7 234 0
	#       return 0;
	jmp .L130
	.L475:
	.loc 7 228 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 232 0
	#   for (i = 0; l[i] || r[i]; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 234 0
	#       return 0;
	.loc 7 228 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 232 0
	#   for (i = 0; l[i] || r[i]; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L476, A, 0
	.loc 7 234 0
	#       return 0;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L476:
	.L129:
	.loc 7 233 0
	#     if (l[i] != r[i])
	.loc 7 232 0
	#   for (i = 0; l[i] || r[i]; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 234 0
	#       return 0;
	jmp .L128
	.L130:
	.loc 7 237 0
	# }
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lookupTable:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 246 0
	# }
	.loc 7 244 0
	#   }
	.L131:
	.loc 7 237 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L477, A, 0
	.loc 7 244 0
	#   }
	.loc 7 242 0
	#       return t;
	.loc 7 237 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 242 0
	#       return t;
	.loc 7 237 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L478
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eqStr
	.L478:
	mov A, B
	add SP, 2
	jeq .L479, A, 0
	.loc 7 242 0
	#       return t;
	.loc 7 237 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L479:
	.loc 7 244 0
	#   }
	.loc 7 237 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 2
	store A, B
	jmp .L480
	.L477:
	.loc 7 244 0
	#   }
	jmp .L132
	.L480:
	jmp .L131
	.L132:
	.loc 7 246 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
addTable:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 257 0
	# }
	.loc 7 250 0
	#   if (!nt) {
	mov A, 0
	mov B, SP
	.loc 7 246 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 250 0
	#   if (!nt) {
	.loc 7 246 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lookupTable
	.L481:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 254 0
	#   }
	.loc 7 251 0
	#     nt = (Table*)ALLOC(sizeof(Table));
	.loc 7 250 0
	#   if (!nt) {
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L482, A, 0
	.loc 7 254 0
	#   }
	.loc 7 252 0
	#     nt->next = *t;
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L483:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 253 0
	#     *t = nt;
	.loc 7 246 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 250 0
	#   if (!nt) {
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 254 0
	#   }
	.loc 7 250 0
	#   if (!nt) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 246 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L482:
	.loc 7 256 0
	#   nt->value = v;
	.loc 7 246 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 250 0
	#   if (!nt) {
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 257 0
	# }
	.loc 7 246 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 250 0
	#   if (!nt) {
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
eqList:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 271 0
	# }
	.loc 7 268 0
	#   }
	.L133:
	.loc 7 263 0
	#     if (!eq(l->head, r->head))
	.loc 7 257 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, 0
	jeq .L484, A, 0
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	ne B, 0
	.L484:
	mov A, B
	jeq .L485, A, 0
	.loc 7 268 0
	#   }
	.loc 7 264 0
	#       return 0;
	.loc 7 257 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 264 0
	#       return 0;
	.loc 7 257 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eq
	.L486:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L487, A, 0
	.loc 7 264 0
	#       return 0;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L487:
	.loc 7 267 0
	#     r = r->tail;
	.loc 7 257 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 268 0
	#   }
	.loc 7 257 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 3
	store A, B
	jmp .L488
	.L485:
	.loc 7 268 0
	#   }
	jmp .L134
	.L488:
	jmp .L133
	.L134:
	.loc 7 271 0
	# }
	.loc 7 257 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 271 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L489, A, 0
	.loc 7 257 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 271 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L489:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
eq:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 290 0
	# }
	.loc 7 275 0
	#     return 1;
	.loc 7 271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L490, A, 0
	.loc 7 275 0
	#     return 1;
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L490:
	.loc 7 278 0
	#     return 0;
	.loc 7 271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 278 0
	#     return 0;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L491, A, 0
	.loc 7 271 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 278 0
	#     return 0;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L491:
	mov A, B
	jeq .L492, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L492:
	.loc 7 281 0
	#     return 0;
	.loc 7 271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 281 0
	#     return 0;
	.loc 7 271 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L493, A, 0
	.loc 7 281 0
	#     return 0;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L493:
	.loc 7 284 0
	#     return l->num == r->num;
	.loc 7 271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L494, A, 0
	.loc 7 284 0
	#     return l->num == r->num;
	.loc 7 271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 284 0
	#     return l->num == r->num;
	.loc 7 271 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L494:
	.loc 7 287 0
	#     return eqStr(l->str, r->str);
	.loc 7 271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L495, A, 0
	.loc 7 287 0
	#     return eqStr(l->str, r->str);
	.loc 7 271 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 287 0
	#     return eqStr(l->str, r->str);
	.loc 7 271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L496
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eqStr
	.L496:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L495:
	.loc 7 290 0
	# }
	.loc 7 271 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 290 0
	# }
	.loc 7 271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eqList
	.L497:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
getListSize:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 299 0
	# }
	.loc 7 294 0
	#   while (l) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 297 0
	#   }
	.L135:
	.loc 7 290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L498, A, 0
	.loc 7 297 0
	#   }
	.loc 7 296 0
	#     n++;
	.loc 7 290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 297 0
	#   }
	.loc 7 294 0
	#   while (l) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L499
	.L498:
	.loc 7 297 0
	#   }
	jmp .L136
	.L499:
	jmp .L135
	.L136:
	.loc 7 299 0
	# }
	.loc 7 294 0
	#   while (l) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
eval:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 24
	.loc 7 478 0
	# }
	.loc 7 312 0
	#   }
	.loc 7 303 0
	#     if (a && a->type == STR) {
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp atom
	.L500:
	mov A, B
	add SP, 1
	jeq .L501, A, 0
	.loc 7 312 0
	#   }
	.loc 7 309 0
	#         return t->value;
	.loc 7 304 0
	#       Table* t = lookupTable(val, a->str);
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, 0
	jeq .L502, A, 0
	.loc 7 304 0
	#       Table* t = lookupTable(val, a->str);
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L502:
	mov A, B
	jeq .L503, A, 0
	.loc 7 309 0
	#         return t->value;
	.loc 7 305 0
	#       if (t)
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lookupTable
	.L504:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 306 0
	#         return t->value;
	.loc 7 305 0
	#       if (t)
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L505, A, 0
	.loc 7 306 0
	#         return t->value;
	.loc 7 305 0
	#       if (t)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L505:
	.loc 7 308 0
	#       if (t)
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 144 0
	# }
	mov B, g_val
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lookupTable
	.L506:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 309 0
	#         return t->value;
	.loc 7 305 0
	#       if (t)
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L507, A, 0
	.loc 7 309 0
	#         return t->value;
	.loc 7 305 0
	#       if (t)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L507:
	.L503:
	.loc 7 312 0
	#   }
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L501:
	.loc 7 315 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 359 0
	#     }
	.loc 7 317 0
	#     int* fn = s->head->str;
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L508, A, 0
	.loc 7 359 0
	#     }
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov A, 0
	mov B, SP
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 359 0
	#     }
	.loc 7 319 0
	#       if (getListSize(s) != 4)
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 319 0
	#       if (getListSize(s) != 4)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 105
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L510, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 319 0
	#       if (getListSize(s) != 4)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L510:
	mov A, B
	mov B, 0
	jeq .L509, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 319 0
	#       if (getListSize(s) != 4)
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L509:
	mov A, B
	jeq .L511, A, 0
	.loc 7 327 0
	#       }
	.loc 7 320 0
	#         ERROR("invalid if");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L512:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 320 0
	#         ERROR("invalid if");
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L513, A, 0
.data
	.L514:
	.string "invalid if"
.text
	mov A, .L514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L515:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L516:
	mov A, B
	add SP, 1
	.loc 7 320 0
	#         ERROR("invalid if");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L513:
	.loc 7 323 0
	#       if (c) {
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 323 0
	#       if (c) {
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L517
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L517:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 327 0
	#       }
	.loc 7 323 0
	#       if (c) {
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L518, A, 0
	.loc 7 325 0
	#       } else {
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 325 0
	#       } else {
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L519:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L520
	.L518:
	.loc 7 327 0
	#       }
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 327 0
	#       }
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L521:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L520:
	jmp .L522
	.L511:
	.loc 7 359 0
	#     }
	.loc 7 327 0
	#       }
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 327 0
	#       }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 113
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L527, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 327 0
	#       }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L527:
	mov A, B
	mov B, 0
	jeq .L526, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 327 0
	#       }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 111
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L526:
	mov A, B
	mov B, 0
	jeq .L525, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 327 0
	#       }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 116
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L525:
	mov A, B
	mov B, 0
	jeq .L524, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 327 0
	#       }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 101
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L524:
	mov A, B
	mov B, 0
	jeq .L523, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 327 0
	#       }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L523:
	mov A, B
	jeq .L528, A, 0
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	.loc 7 331 0
	#         ERROR("invalid quote");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L529:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 331 0
	#         ERROR("invalid quote");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L530, A, 0
.data
	.L531:
	.string "invalid quote"
.text
	mov A, .L531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L532:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L533:
	mov A, B
	add SP, 1
	.loc 7 331 0
	#         ERROR("invalid quote");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L530:
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L534
	.L528:
	.loc 7 359 0
	#     }
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 100
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L540, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 101
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L540:
	mov A, B
	mov B, 0
	jeq .L539, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L539:
	mov A, B
	mov B, 0
	jeq .L538, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 105
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L538:
	mov A, B
	mov B, 0
	jeq .L537, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 110
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L537:
	mov A, B
	mov B, 0
	jeq .L536, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 101
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L536:
	mov A, B
	mov B, 0
	jeq .L535, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 334 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L535:
	mov A, B
	jeq .L541, A, 0
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	.loc 7 338 0
	#         ERROR("invalid define");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L543:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 338 0
	#         ERROR("invalid define");
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 1
	jne .L542, A, 0
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L542:
	mov A, B
	jeq .L544, A, 0
	.loc 7 338 0
	#         ERROR("invalid define");
.data
	.L545:
	.string "invalid define"
.text
	mov A, .L545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L546:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L547:
	mov A, B
	add SP, 1
	.loc 7 338 0
	#         ERROR("invalid define");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L544:
	.loc 7 341 0
	#       addTable(&g_val, s->tail->head->str, e);
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 341 0
	#       addTable(&g_val, s->tail->head->str, e);
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L548:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 342 0
	#       return e;
	.loc 7 341 0
	#       addTable(&g_val, s->tail->head->str, e);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 342 0
	#       return e;
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 342 0
	#       return e;
	mov A, g_val
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp addTable
	.L549:
	mov A, B
	add SP, 3
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	.loc 7 341 0
	#       addTable(&g_val, s->tail->head->str, e);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L550
	.L541:
	.loc 7 359 0
	#     }
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 108
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L556, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L556:
	mov A, B
	mov B, 0
	jeq .L555, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 109
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L555:
	mov A, B
	mov B, 0
	jeq .L554, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 98
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L554:
	mov A, B
	mov B, 0
	jeq .L553, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 100
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L553:
	mov A, B
	mov B, 0
	jeq .L552, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L552:
	mov A, B
	mov B, 0
	jeq .L551, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 343 0
	#     } else if (fn[0] == 'l' && fn[1] == 'a' && fn[2] == 'm' &&
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L551:
	mov A, B
	jeq .L557, A, 0
	.loc 7 350 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	.loc 7 347 0
	#         ERROR("invalid lambda");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L559:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 347 0
	#         ERROR("invalid lambda");
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 1
	jne .L558, A, 0
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isList
	.L560:
	mov A, B
	add SP, 1
	eq A, 0
	mov B, A
	ne B, 0
	.L558:
	mov A, B
	jeq .L561, A, 0
	.loc 7 347 0
	#         ERROR("invalid lambda");
.data
	.L562:
	.string "invalid lambda"
.text
	mov A, .L562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L563:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L564:
	mov A, B
	add SP, 1
	.loc 7 347 0
	#         ERROR("invalid lambda");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L561:
	.loc 7 350 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createLambda
	.L565:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L566
	.L557:
	.loc 7 359 0
	#     }
	.loc 7 350 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 350 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 100
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L571, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 350 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 101
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L571:
	mov A, B
	mov B, 0
	jeq .L570, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 350 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L570:
	mov A, B
	mov B, 0
	jeq .L569, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 350 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L569:
	mov A, B
	mov B, 0
	jeq .L568, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 350 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 110
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L568:
	mov A, B
	mov B, 0
	jeq .L567, A, 0
	.loc 7 318 0
	#     if (fn[0] == 'i' && fn[1] == 'f' && fn[2] == '\0') {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 350 0
	#     } else if (fn[0] == 'd' && fn[1] == 'e' && fn[2] == 'f' &&
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L567:
	mov A, B
	jeq .L572, A, 0
	.loc 7 359 0
	#     }
	.loc 7 353 0
	#           s->tail->head->type != STR || !isList(s->tail->tail->head))
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L575:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 353 0
	#           s->tail->head->type != STR || !isList(s->tail->tail->head))
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 1
	jne .L574, A, 0
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L574:
	mov A, B
	mov B, 1
	jne .L573, A, 0
	.loc 7 353 0
	#           s->tail->head->type != STR || !isList(s->tail->tail->head))
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isList
	.L576:
	mov A, B
	add SP, 1
	eq A, 0
	mov B, A
	ne B, 0
	.L573:
	mov A, B
	jeq .L577, A, 0
	.loc 7 353 0
	#           s->tail->head->type != STR || !isList(s->tail->tail->head))
.data
	.L578:
	.string "invalid defun"
.text
	mov A, .L578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L579:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L580:
	mov A, B
	add SP, 1
	.loc 7 353 0
	#           s->tail->head->type != STR || !isList(s->tail->tail->head))
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L577:
	.loc 7 357 0
	#       addTable(&g_val, s->tail->head->str, e);
	mov A, 0
	mov B, SP
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createLambda
	.L581:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 358 0
	#       return e;
	.loc 7 357 0
	#       addTable(&g_val, s->tail->head->str, e);
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 358 0
	#       return e;
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 358 0
	#       return e;
	mov A, g_val
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp addTable
	.L582:
	mov A, B
	add SP, 3
	.loc 7 359 0
	#     }
	.loc 7 357 0
	#       addTable(&g_val, s->tail->head->str, e);
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L572:
	.L566:
	.L550:
	.L534:
	.L522:
	.L508:
	.loc 7 363 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 363 0
	# 
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L583:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 380 0
	#   }
	.loc 7 365 0
	#     List* args = hd->list->head ? hd->list->head->list : NULL;
	.loc 7 363 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L584, A, 0
	.loc 7 380 0
	#   }
	.loc 7 366 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 363 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	jeq .L585, A, 0
	.loc 7 366 0
	# 
	.loc 7 363 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 1
	load A, B
	jmp .L586
	.L585:
	.loc 7 366 0
	# 
	mov A, 0
	.L586:
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 368 0
	#       ERROR("invalid lambda application");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L587:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 368 0
	#       ERROR("invalid lambda application");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 366 0
	# 
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L588:
	mov A, B
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L589, A, 0
	.loc 7 368 0
	#       ERROR("invalid lambda application");
.data
	.L590:
	.string "invalid lambda application"
.text
	mov A, .L590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L591:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L592:
	mov A, B
	add SP, 1
	.loc 7 368 0
	#       ERROR("invalid lambda application");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L589:
	.loc 7 371 0
	#     List* params = s->tail;
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 372 0
	#     while (args) {
	mov A, 0
	mov B, SP
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 376 0
	#     }
	.L137:
	.loc 7 366 0
	# 
	mov B, BP
	add B, 16777208
	load A, B
	jeq .L593, A, 0
	.loc 7 376 0
	#     }
	.loc 7 374 0
	#       args = args->tail;
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 374 0
	#       args = args->tail;
	.loc 7 372 0
	#     while (args) {
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L594:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 374 0
	#       args = args->tail;
	.loc 7 366 0
	# 
	mov B, BP
	add B, 16777208
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 374 0
	#       args = args->tail;
	mov A, BP
	add A, -9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp addTable
	.L595:
	mov A, B
	add SP, 3
	.loc 7 375 0
	#       params = params->tail;
	.loc 7 366 0
	# 
	mov B, BP
	add B, 16777208
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 376 0
	#     }
	.loc 7 372 0
	#     while (args) {
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	jmp .L596
	.L593:
	.loc 7 376 0
	#     }
	jmp .L138
	.L596:
	jmp .L137
	.L138:
	.loc 7 379 0
	#     return eval(expr, nval);
	mov A, 0
	mov B, SP
	.loc 7 363 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 380 0
	#   }
	.loc 7 371 0
	#     List* params = s->tail;
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 379 0
	#     return eval(expr, nval);
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L597:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L584:
	.loc 7 35 0
	# 
	.loc 7 383 0
	#     int* fn = hd->str;
	.loc 7 363 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L598, A, 0
	.loc 7 35 0
	# 
	.loc 7 384 0
	#     int op = fn[0];
	mov A, 0
	mov B, SP
	.loc 7 363 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777204
	store A, B
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov A, 0
	mov B, SP
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777203
	store A, B
	.loc 7 468 0
	#     }
	.loc 7 386 0
	#          fn[1] == '\0') ||
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#          fn[1] == '\0') ||
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L603, A, 0
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#          fn[1] == '\0') ||
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L603:
	mov A, B
	mov B, 1
	jne .L602, A, 0
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#          fn[1] == '\0') ||
	mov A, 42
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L602:
	mov A, B
	mov B, 1
	jne .L601, A, 0
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#          fn[1] == '\0') ||
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L601:
	mov A, B
	mov B, 0
	jeq .L600, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#          fn[1] == '\0') ||
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L600:
	mov A, B
	mov B, 1
	jne .L599, A, 0
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#          fn[1] == '\0') ||
	mov A, 109
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L606, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#          fn[1] == '\0') ||
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 111
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L606:
	mov A, B
	mov B, 0
	jeq .L605, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#          fn[1] == '\0') ||
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 100
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L605:
	mov A, B
	mov B, 0
	jeq .L604, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 386 0
	#          fn[1] == '\0') ||
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L604:
	mov A, B
	mov B, A
	ne B, 0
	.L599:
	mov A, B
	jeq .L607, A, 0
	.loc 7 401 0
	#     } else if (op == 'e' && fn[1] == 'q' && fn[2] == '\0') {
	.loc 7 389 0
	#         ERROR("invalid arith");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L608:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 389 0
	#         ERROR("invalid arith");
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L609, A, 0
.data
	.L610:
	.string "invalid arith"
.text
	mov A, .L610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L611:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L612:
	mov A, B
	add SP, 1
	.loc 7 389 0
	#         ERROR("invalid arith");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L609:
	.loc 7 391 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 391 0
	#       Atom* r = eval(s->tail->tail->head, val);
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L613:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777202
	store A, B
	.loc 7 392 0
	#       if (l->type != NUM || r->type != NUM)
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 392 0
	#       if (l->type != NUM || r->type != NUM)
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L614
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L614:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777201
	store A, B
	.loc 7 393 0
	#         ERROR("invalid arith");
	.loc 7 391 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 1
	jne .L615, A, 0
	.loc 7 393 0
	#         ERROR("invalid arith");
	.loc 7 392 0
	#       if (l->type != NUM || r->type != NUM)
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L615:
	mov A, B
	jeq .L616, A, 0
	.loc 7 393 0
	#         ERROR("invalid arith");
.data
	.L617:
	.string "invalid arith"
.text
	mov A, .L617
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L618
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L618:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L619
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L619:
	mov A, B
	add SP, 1
	.loc 7 393 0
	#         ERROR("invalid arith");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L616:
	.loc 7 395 0
	#       if (op == '+') result = l->num + r->num;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777200
	mov A, 0
	store A, B
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L620, A, 0
	.loc 7 391 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 392 0
	#       if (l->type != NUM || r->type != NUM)
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777200
	store A, B
	jmp .L621
	.L620:
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L622, A, 0
	.loc 7 391 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 392 0
	#       if (l->type != NUM || r->type != NUM)
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777200
	store A, B
	jmp .L623
	.L622:
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	mov A, 42
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L624, A, 0
	.loc 7 391 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 392 0
	#       if (l->type != NUM || r->type != NUM)
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L625
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L625:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777200
	store A, B
	jmp .L626
	.L624:
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L627, A, 0
	.loc 7 391 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 392 0
	#       if (l->type != NUM || r->type != NUM)
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L628
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L628:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777200
	store A, B
	jmp .L629
	.L627:
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 391 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 396 0
	#       else if (op == '-') result = l->num - r->num;
	.loc 7 392 0
	#       if (l->type != NUM || r->type != NUM)
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L630
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L630:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777200
	store A, B
	.L629:
	.L626:
	.L623:
	.L621:
	.loc 7 401 0
	#     } else if (op == 'e' && fn[1] == 'q' && fn[2] == '\0') {
	.loc 7 395 0
	#       if (op == '+') result = l->num + r->num;
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createInt
	.L631:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L632
	.L607:
	.loc 7 468 0
	#     }
	.loc 7 401 0
	#     } else if (op == 'e' && fn[1] == 'q' && fn[2] == '\0') {
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 401 0
	#     } else if (op == 'e' && fn[1] == 'q' && fn[2] == '\0') {
	mov A, 101
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L634, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 401 0
	#     } else if (op == 'e' && fn[1] == 'q' && fn[2] == '\0') {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 113
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L634:
	mov A, B
	mov B, 0
	jeq .L633, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 401 0
	#     } else if (op == 'e' && fn[1] == 'q' && fn[2] == '\0') {
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L633:
	mov A, B
	jeq .L635, A, 0
	.loc 7 408 0
	#         return g_t;
	.loc 7 403 0
	#         ERROR("invalid eq");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L636:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 403 0
	#         ERROR("invalid eq");
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L637, A, 0
.data
	.L638:
	.string "invalid eq"
.text
	mov A, .L638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L639
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L639:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L640
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L640:
	mov A, B
	add SP, 1
	.loc 7 403 0
	#         ERROR("invalid eq");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L637:
	.loc 7 406 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 406 0
	#       Atom* r = eval(s->tail->tail->head, val);
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L641:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 407 0
	#       if (eq(l, r))
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 407 0
	#       if (eq(l, r))
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L642:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 408 0
	#         return g_t;
	.loc 7 407 0
	#       if (eq(l, r))
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 406 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eq
	.L643:
	mov A, B
	add SP, 2
	jeq .L644, A, 0
	.loc 7 408 0
	#         return g_t;
	.loc 7 144 0
	# }
	mov B, g_t
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L645
	.L644:
	.loc 7 408 0
	#         return g_t;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L645:
	jmp .L646
	.L635:
	.loc 7 468 0
	#     }
	.loc 7 408 0
	#         return g_t;
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 408 0
	#         return g_t;
	mov A, 99
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L649, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 408 0
	#         return g_t;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L650, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 408 0
	#         return g_t;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 100
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L650:
	mov A, B
	mov B, A
	ne B, 0
	.L649:
	mov A, B
	mov B, 0
	jeq .L648, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 408 0
	#         return g_t;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 114
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L648:
	mov A, B
	mov B, 0
	jeq .L647, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 408 0
	#         return g_t;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L647:
	mov A, B
	jeq .L651, A, 0
	.loc 7 422 0
	#         return e->list->head;
	.loc 7 414 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 414 0
	# 
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L652:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777197
	store A, B
	.loc 7 416 0
	#         return NULL;
	.loc 7 414 0
	# 
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 416 0
	#         return NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L653, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L653:
	.loc 7 419 0
	#         ERROR("invalid car/cdr");
	.loc 7 414 0
	# 
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 1
	jne .L654, A, 0
	.loc 7 419 0
	#         ERROR("invalid car/cdr");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L655:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 419 0
	#         ERROR("invalid car/cdr");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L654:
	mov A, B
	jeq .L656, A, 0
.data
	.L657:
	.string "invalid car/cdr"
.text
	mov A, .L657
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L658:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L659
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L659:
	mov A, B
	add SP, 1
	.loc 7 419 0
	#         ERROR("invalid car/cdr");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L656:
	.loc 7 422 0
	#         return e->list->head;
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 422 0
	#         return e->list->head;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L660, A, 0
	.loc 7 414 0
	# 
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L661
	.L660:
	.loc 7 422 0
	#         return e->list->head;
	.loc 7 414 0
	# 
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createList
	.L662:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L661:
	jmp .L663
	.L651:
	.loc 7 468 0
	#     }
	.loc 7 422 0
	#         return e->list->head;
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 422 0
	#         return e->list->head;
	mov A, 99
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L667, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 422 0
	#         return e->list->head;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 111
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L667:
	mov A, B
	mov B, 0
	jeq .L666, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 422 0
	#         return e->list->head;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 110
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L666:
	mov A, B
	mov B, 0
	jeq .L665, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 422 0
	#         return e->list->head;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 115
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L665:
	mov A, B
	mov B, 0
	jeq .L664, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 422 0
	#         return e->list->head;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L664:
	mov A, B
	jeq .L668, A, 0
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	.loc 7 428 0
	#         ERROR("invalid cons");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L669:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 428 0
	#         ERROR("invalid cons");
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L670, A, 0
.data
	.L671:
	.string "invalid cons"
.text
	mov A, .L671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L672:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L673:
	mov A, B
	add SP, 1
	.loc 7 428 0
	#         ERROR("invalid cons");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L670:
	.loc 7 431 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 431 0
	#       Atom* r = eval(s->tail->tail->head, val);
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L674:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777196
	store A, B
	.loc 7 432 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 432 0
	# 
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L675:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777195
	store A, B
	.loc 7 434 0
	#         ERROR("invalid cons");
	.loc 7 432 0
	# 
	mov B, BP
	add B, 16777195
	load A, B
	mov B, 0
	jeq .L676, A, 0
	.loc 7 434 0
	#         ERROR("invalid cons");
	.loc 7 432 0
	# 
	mov B, BP
	add B, 16777195
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L676:
	mov A, B
	jeq .L677, A, 0
	.loc 7 434 0
	#         ERROR("invalid cons");
.data
	.L678:
	.string "invalid cons"
.text
	mov A, .L678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L679:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L680:
	mov A, B
	add SP, 1
	.loc 7 434 0
	#         ERROR("invalid cons");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L677:
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	.loc 7 432 0
	# 
	mov B, BP
	add B, 16777195
	load A, B
	jeq .L681, A, 0
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	.loc 7 432 0
	# 
	mov B, BP
	add B, 16777195
	load A, B
	mov B, A
	add B, 1
	load A, B
	jmp .L682
	.L681:
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	mov A, 0
	.L682:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 431 0
	#       Atom* r = eval(s->tail->tail->head, val);
	mov B, BP
	add B, 16777196
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cons
	.L683:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createList
	.L684:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L685
	.L668:
	.loc 7 468 0
	#     }
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L689, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 116
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L689:
	mov A, B
	mov B, 0
	jeq .L688, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 111
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L688:
	mov A, B
	mov B, 0
	jeq .L687, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 109
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L687:
	mov A, B
	mov B, 0
	jeq .L686, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	#     } else if (op == 'a' && fn[1] == 't' && fn[2] == 'o' &&
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L686:
	mov A, B
	jeq .L690, A, 0
	.loc 7 445 0
	#         return g_t;
	.loc 7 440 0
	#         ERROR("invalid atom");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L691:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 440 0
	#         ERROR("invalid atom");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L692, A, 0
.data
	.L693:
	.string "invalid atom"
.text
	mov A, .L693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L694:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L695:
	mov A, B
	add SP, 1
	.loc 7 440 0
	#         ERROR("invalid atom");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L692:
	.loc 7 443 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 443 0
	# 
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L696:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777194
	store A, B
	.loc 7 445 0
	#         return g_t;
	.loc 7 443 0
	# 
	mov B, BP
	add B, 16777194
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp atom
	.L697:
	mov A, B
	add SP, 1
	jeq .L698, A, 0
	.loc 7 445 0
	#         return g_t;
	.loc 7 144 0
	# }
	mov B, g_t
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L699
	.L698:
	.loc 7 445 0
	#         return g_t;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L699:
	jmp .L700
	.L690:
	.loc 7 468 0
	#     }
	.loc 7 445 0
	#         return g_t;
	.loc 7 385 0
	#     if (((op == '+' || op == '-' || op == '*' || op == '/') &&
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 445 0
	#         return g_t;
	mov A, 110
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L704, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 445 0
	#         return g_t;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 101
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L704:
	mov A, B
	mov B, 0
	jeq .L703, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 445 0
	#         return g_t;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 103
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L703:
	mov A, B
	mov B, 0
	jeq .L702, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 445 0
	#         return g_t;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 63
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L702:
	mov A, B
	mov B, 0
	jeq .L701, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 445 0
	#         return g_t;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L701:
	mov A, B
	jeq .L705, A, 0
	.loc 7 456 0
	#         return g_t;
	.loc 7 451 0
	#         ERROR("invalid neg?");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L706:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 451 0
	#         ERROR("invalid neg?");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L707, A, 0
.data
	.L708:
	.string "invalid neg?"
.text
	mov A, .L708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L709:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L710
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L710:
	mov A, B
	add SP, 1
	.loc 7 451 0
	#         ERROR("invalid neg?");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L707:
	.loc 7 454 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 454 0
	# 
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L711:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777193
	store A, B
	.loc 7 456 0
	#         return g_t;
	.loc 7 454 0
	# 
	mov B, BP
	add B, 16777193
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 28 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L712, A, 0
	.loc 7 456 0
	#         return g_t;
	.loc 7 454 0
	# 
	mov B, BP
	add B, 16777193
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	#         return g_t;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L712:
	mov A, B
	jeq .L713, A, 0
	.loc 7 144 0
	# }
	mov B, g_t
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L714
	.L713:
	.loc 7 456 0
	#         return g_t;
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L714:
	jmp .L715
	.L705:
	.loc 7 468 0
	#     }
	.loc 7 456 0
	#         return g_t;
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	#         return g_t;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 112
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L720, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	#         return g_t;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 114
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L720:
	mov A, B
	mov B, 0
	jeq .L719, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	#         return g_t;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 105
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L719:
	mov A, B
	mov B, 0
	jeq .L718, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	#         return g_t;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 110
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L718:
	mov A, B
	mov B, 0
	jeq .L717, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	#         return g_t;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 116
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L717:
	mov A, B
	mov B, 0
	jeq .L716, A, 0
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	#         return g_t;
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L716:
	mov A, B
	jeq .L721, A, 0
	.loc 7 468 0
	#     }
	.loc 7 462 0
	#         ERROR("invalid print");
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getListSize
	.L722:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 462 0
	#         ERROR("invalid print");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L723, A, 0
.data
	.L724:
	.string "invalid print"
.text
	mov A, .L724
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L725:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L726:
	mov A, B
	add SP, 1
	.loc 7 462 0
	#         ERROR("invalid print");
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L723:
	.loc 7 465 0
	#       printExpr(e);
	mov A, 0
	mov B, SP
	.loc 7 299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 465 0
	#       printExpr(e);
	.loc 7 315 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L727:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777192
	store A, B
	.loc 7 466 0
	#       putchar('\n');
	.loc 7 465 0
	#       printExpr(e);
	mov B, BP
	add B, 16777192
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L728
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L728:
	mov A, B
	add SP, 1
	.loc 7 467 0
	#       return e;
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 468 0
	#     }
	.loc 7 465 0
	#       printExpr(e);
	mov B, BP
	add B, 16777192
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L721:
	.L715:
	.L700:
	.L685:
	.L663:
	.L646:
	.L632:
	.loc 7 471 0
	#     putchar(':');
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 471 0
	#     putchar(':');
	.loc 7 384 0
	#     int op = fn[0];
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L729
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fputs
	.L729:
	mov A, B
	add SP, 2
	.loc 7 472 0
	#     putchar(' ');
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 473 0
	#     ERROR("undefined function");
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 35 0
	# 
.data
	.L730:
	.string "undefined function"
.text
	mov A, .L730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L731
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L731:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L732
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L732:
	mov A, B
	add SP, 1
	.loc 7 35 0
	# 
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L598:
.data
	.L733:
	.string "invalid function application"
.text
	mov A, .L733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L734:
	mov A, B
	add SP, 1
	.loc 7 299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L735
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L735:
	mov A, B
	add SP, 1
	.loc 7 35 0
	# 
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.loc 7 478 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parse:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 494 0
	#   }
	.loc 7 482 0
	#   int c = getChar();
	mov A, .L736
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skipWS
	.L736:
	mov A, B
	.loc 7 483 0
	#   if (c == '(') {
	mov A, 0
	mov B, SP
	mov A, .L737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getChar
	.L737:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 494 0
	#   }
	.loc 7 484 0
	#     return parseList();
	.loc 7 483 0
	#   if (c == '(') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 484 0
	#     return parseList();
	mov A, 40
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L738, A, 0
	.loc 7 485 0
	#   } else if (c == '-' || (c >= '0' && c <= '9')) {
	mov A, .L739
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parseList
	.L739:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L740
	.L738:
	.loc 7 494 0
	#   }
	.loc 7 485 0
	#   } else if (c == '-' || (c >= '0' && c <= '9')) {
	.loc 7 483 0
	#   if (c == '(') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 485 0
	#   } else if (c == '-' || (c >= '0' && c <= '9')) {
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L741, A, 0
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 483 0
	#   if (c == '(') {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L742, A, 0
	.loc 7 485 0
	#   } else if (c == '-' || (c >= '0' && c <= '9')) {
	.loc 7 483 0
	#   if (c == '(') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 485 0
	#   } else if (c == '-' || (c >= '0' && c <= '9')) {
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L742:
	mov A, B
	mov B, A
	ne B, 0
	.L741:
	mov A, B
	jeq .L743, A, 0
	.loc 7 487 0
	#   } else if (c == ';') {
	.loc 7 483 0
	#   if (c == '(') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parseInt
	.L744:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L745
	.L743:
	.loc 7 494 0
	#   }
	.loc 7 487 0
	#   } else if (c == ';') {
	.loc 7 483 0
	#   if (c == '(') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 487 0
	#   } else if (c == ';') {
	mov A, 59
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L746, A, 0
	.loc 7 492 0
	#   } else {
	.loc 7 490 0
	#     }
	.L139:
	.loc 7 489 0
	#       c = getChar();
	.loc 7 483 0
	#   if (c == '(') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 489 0
	#       c = getChar();
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L747, A, 0
	.loc 7 490 0
	#     }
	mov A, .L748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp getChar
	.L748:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L749
	.L747:
	jmp .L140
	.L749:
	jmp .L139
	.L140:
	.loc 7 492 0
	#   } else {
	mov A, .L750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse
	.L750:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L751
	.L746:
	.loc 7 494 0
	#   }
	.loc 7 483 0
	#   if (c == '(') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parseStr
	.L752:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L751:
	.L745:
	.L740:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
main:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 510 0
	#   }
	.loc 7 499 0
	#   buf[0] = 't';
	.loc 7 500 0
	#   buf[1] = '\0';
	mov A, 116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 499 0
	#   buf[0] = 't';
	mov A, BP
	add A, 16777214
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 500 0
	#   buf[1] = '\0';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 501 0
	#   g_t = createStr(buf);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 499 0
	#   buf[0] = 't';
	mov A, BP
	add A, 16777214
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 501 0
	#   g_t = createStr(buf);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 502 0
	# 
	.loc 7 499 0
	#   buf[0] = 't';
	mov A, BP
	add A, 16777214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp createStr
	.L753:
	mov A, B
	add SP, 1
	mov B, g_t
	store A, B
	.loc 7 510 0
	#   }
	.L141:
	.loc 7 504 0
	#     putchar('>');
	mov A, 1
	jeq .L754, A, 0
	.loc 7 510 0
	#   }
	.loc 7 505 0
	#     putchar(' ');
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 506 0
	#     Atom* expr = parse();
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 507 0
	#     Atom* result = eval(expr, NULL);
	mov A, 0
	mov B, SP
	mov A, .L755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse
	.L755:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 508 0
	#     printExpr(result);
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 507 0
	#     Atom* result = eval(expr, NULL);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp eval
	.L756:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 509 0
	#     putchar('\n');
	.loc 7 508 0
	#     printExpr(result);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printExpr
	.L757:
	mov A, B
	add SP, 1
	.loc 7 510 0
	#   }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	jmp .L758
	.L754:
	jmp .L142
	.L758:
	jmp .L141
	.L142:
	exit
