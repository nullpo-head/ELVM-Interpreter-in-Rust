	.text
my_div:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 52
	.file 1 "/Users/nullpo/dev/elvm/libc/_builtin.h"
	.loc 1 35 0
	# }
	.loc 1 11 0
	#   unsigned int r[24];
	.loc 1 12 0
	#   unsigned int i;
	.loc 1 13 0
	#   r[0] = 1;
	.loc 1 14 0
	#   for (i = 0;; i++) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 14 0
	#   for (i = 0;; i++) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 21 0
	#   }
	.loc 1 15 0
	#     d[i] = b;
	mov A, 0
	mov B, BP
	add B, 16777167
	store A, B
	.loc 1 21 0
	#   }
	.L0:
	.loc 1 16 0
	#     unsigned int nb = b + b;
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 11 0
	#   unsigned int r[24];
	mov A, BP
	add A, 16777192
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777166
	store A, B
	.loc 1 18 0
	#       break;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L1827, A, 0
	.loc 1 18 0
	#       break;
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L1827:
	mov A, B
	jeq .L1828, A, 0
	.loc 1 18 0
	#       break;
	jmp .L2
	.L1828:
	.loc 1 20 0
	#     b = nb;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 20 0
	#     b = nb;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 21 0
	#   }
	.loc 1 17 0
	#     if (nb > a || nb < b)
	mov B, BP
	add B, 16777166
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 21 0
	#   }
	.L1:
	.loc 1 15 0
	#     d[i] = b;
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777167
	store A, B
	load A, SP
	add SP, 1
	.loc 1 21 0
	#   }
	jmp .L0
	.L2:
	.loc 1 24 0
	#   for (;; i--) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777165
	mov A, 0
	store A, B
	.loc 1 31 0
	#       break;
	.L3:
	.loc 1 26 0
	#     if (a >= v) {
	mov A, 0
	mov B, SP
	.loc 1 11 0
	#   unsigned int r[24];
	mov A, BP
	add A, 16777192
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777164
	store A, B
	.loc 1 29 0
	#     }
	.loc 1 27 0
	#       q += r[i];
	.loc 1 26 0
	#     if (a >= v) {
	mov B, BP
	add B, 16777164
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1829, A, 0
	.loc 1 29 0
	#     }
	.loc 1 28 0
	#       a -= v;
	.loc 1 24 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777165
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 28 0
	#       a -= v;
	.loc 1 12 0
	#   unsigned int i;
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777165
	store A, B
	.loc 1 29 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 26 0
	#     if (a >= v) {
	mov B, BP
	add B, 16777164
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.L1829:
	.loc 1 31 0
	#       break;
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 31 0
	#       break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1830, A, 0
	jmp .L5
	.L1830:
	.L4:
	.loc 1 25 0
	#     unsigned int v = d[i];
	.loc 1 13 0
	#   r[0] = 1;
	mov B, BP
	add B, 16777167
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777167
	store A, B
	load A, SP
	add SP, 1
	.loc 1 31 0
	#       break;
	jmp .L3
	.L5:
	.loc 1 34 0
	#   o->rem = a;
	.loc 1 24 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777165
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_mul:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 53
	.loc 1 70 0
	# }
	.loc 1 39 0
	#   if (a < b) {
	.loc 1 43 0
	#   }
	.loc 1 40 0
	#     v = a;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1831, A, 0
	.loc 1 43 0
	#   }
	.loc 1 41 0
	#     a = b;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 42 0
	#     b = v;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 43 0
	#   }
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.L1831:
	.loc 1 45 0
	#     return a;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 45 0
	#     return a;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1832, A, 0
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1832:
	.loc 1 47 0
	#     return 0;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 47 0
	#     return 0;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1833, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1833:
	.loc 1 49 0
	#   int r[24];
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	.loc 1 58 0
	#   }
	.loc 1 51 0
	#     d[i] = v;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	mov A, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 58 0
	#   }
	.L6:
	.loc 1 52 0
	#     r[i] = e;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 52 0
	#     r[i] = e;
	.loc 1 49 0
	#   int r[24];
	mov A, BP
	add A, 16777189
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 53 0
	#     v += v;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 53 0
	#     v += v;
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 1 54 0
	#     int ne = e + e;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov A, 0
	mov B, SP
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777164
	store A, B
	.loc 1 56 0
	#       break;
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L1834, A, 0
	.loc 1 56 0
	#       break;
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L1834:
	mov A, B
	jeq .L1835, A, 0
	.loc 1 56 0
	#       break;
	jmp .L8
	.L1835:
	.loc 1 58 0
	#   }
	.loc 1 55 0
	#     if (ne < e || ne > b)
	mov B, BP
	add B, 16777164
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 58 0
	#   }
	.L7:
	.loc 1 51 0
	#     d[i] = v;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 1 58 0
	#   }
	jmp .L6
	.L8:
	.loc 1 61 0
	#   for (;; i--) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777163
	mov A, 0
	store A, B
	.loc 1 67 0
	#       break;
	.L9:
	.loc 1 65 0
	#     }
	.loc 1 63 0
	#       x += d[i];
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1836, A, 0
	.loc 1 65 0
	#     }
	.loc 1 64 0
	#       b -= r[i];
	.loc 1 61 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777163
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 64 0
	#       b -= r[i];
	.loc 1 49 0
	#   int r[24];
	mov A, BP
	add A, 16777189
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777163
	store A, B
	.loc 1 65 0
	#     }
	.loc 1 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 65 0
	#     }
	.loc 1 50 0
	#   for (i = 0, e = 1, v = a;; i++) {
	mov A, BP
	add A, 16777165
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.L1836:
	.loc 1 67 0
	#       break;
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 67 0
	#       break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1837, A, 0
	jmp .L11
	.L1837:
	.L10:
	.loc 1 62 0
	#     if (b >= r[i]) {
	.loc 1 39 0
	#   if (a < b) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 1 67 0
	#       break;
	jmp .L9
	.L11:
	.loc 1 70 0
	# }
	.loc 1 61 0
	#   for (;; i--) {
	mov B, BP
	add B, 16777163
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_div:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 1 78 0
	# }
	.loc 1 74 0
	#     return a;
	.loc 1 70 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 74 0
	#     return a;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1838, A, 0
	.loc 1 70 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1838:
	.loc 1 76 0
	#   my_div(a, b, &r);
	.loc 1 77 0
	#   return r.quot;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 70 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp my_div
	.L1839:
	mov A, B
	add SP, 3
	.loc 1 78 0
	# }
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_mod:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 1 84 0
	# }
	.loc 1 82 0
	#   my_div(a, b, &r);
	.loc 1 83 0
	#   return r.rem;
	mov A, BP
	add A, -2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 78 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp my_div
	.L1840:
	mov A, B
	add SP, 3
	.loc 1 84 0
	# }
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
__builtin_bits_table:
	.long 8388608
	.long 4194304
	.long 2097152
	.long 1048576
	.long 524288
	.long 262144
	.long 131072
	.long 65536
	.long 32768
	.long 16384
	.long 8192
	.long 4096
	.long 2048
	.long 1024
	.long 512
	.long 256
	.long 128
	.long 64
	.long 32
	.long 16
	.long 8
	.long 4
	.long 2
	.long 1
	.text
__builtin_and:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 1 107 0
	# }
	.loc 1 99 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 104 0
	#       r += t;
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 104 0
	#       r += t;
	.L12:
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1841, A, 0
	jmp .L1842
	.L1841:
	.loc 1 104 0
	#       r += t;
	jmp .L14
	.L1842:
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 84 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1843, A, 0
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 84 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L1844
	.L1843:
	mov A, 0
	.L1844:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 103 0
	#     if (a1 && b1)
	mov A, 0
	mov B, SP
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 84 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1845, A, 0
	.loc 1 103 0
	#     if (a1 && b1)
	.loc 1 84 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 103 0
	#     if (a1 && b1)
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 103 0
	#     if (a1 && b1)
	mov A, 1
	jmp .L1846
	.L1845:
	mov A, 0
	.L1846:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 1 104 0
	#       r += t;
	.loc 1 102 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, 0
	jeq .L1847, A, 0
	.loc 1 103 0
	#     if (a1 && b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L1847:
	mov A, B
	jeq .L1848, A, 0
	.loc 1 104 0
	#       r += t;
	.loc 1 99 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 101 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1848:
	.loc 1 104 0
	#       r += t;
	.L13:
	.loc 1 100 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 104 0
	#       r += t;
	jmp .L12
	.L14:
	.loc 1 107 0
	# }
	.loc 1 99 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_or:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 1 119 0
	# }
	.loc 1 111 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 116 0
	#       r += t;
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 116 0
	#       r += t;
	.L15:
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1849, A, 0
	jmp .L1850
	.L1849:
	.loc 1 116 0
	#       r += t;
	jmp .L17
	.L1850:
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 107 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1851, A, 0
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 107 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L1852
	.L1851:
	mov A, 0
	.L1852:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 115 0
	#     if (a1 || b1)
	mov A, 0
	mov B, SP
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1853, A, 0
	.loc 1 115 0
	#     if (a1 || b1)
	.loc 1 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 115 0
	#     if (a1 || b1)
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 115 0
	#     if (a1 || b1)
	mov A, 1
	jmp .L1854
	.L1853:
	mov A, 0
	.L1854:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 1 116 0
	#       r += t;
	.loc 1 114 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov B, 1
	jne .L1855, A, 0
	.loc 1 115 0
	#     if (a1 || b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	ne B, 0
	.L1855:
	mov A, B
	jeq .L1856, A, 0
	.loc 1 116 0
	#       r += t;
	.loc 1 111 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 113 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1856:
	.loc 1 116 0
	#       r += t;
	.L16:
	.loc 1 112 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 116 0
	#       r += t;
	jmp .L15
	.L17:
	.loc 1 119 0
	# }
	.loc 1 111 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_xor:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 1 131 0
	# }
	.loc 1 123 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 128 0
	#       r += t;
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 128 0
	#       r += t;
	.L18:
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1857, A, 0
	jmp .L1858
	.L1857:
	.loc 1 128 0
	#       r += t;
	jmp .L20
	.L1858:
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 0
	mov B, SP
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 119 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1859, A, 0
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 119 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov A, 1
	jmp .L1860
	.L1859:
	mov A, 0
	.L1860:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 127 0
	#     if (a1 != b1)
	mov A, 0
	mov B, SP
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 119 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1861, A, 0
	.loc 1 127 0
	#     if (a1 != b1)
	.loc 1 119 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 127 0
	#     if (a1 != b1)
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 1 127 0
	#     if (a1 != b1)
	mov A, 1
	jmp .L1862
	.L1861:
	mov A, 0
	.L1862:
	mov B, BP
	add B, 16777211
	store A, B
	.loc 1 128 0
	#       r += t;
	.loc 1 126 0
	#     int b1 = __BUILTIN_TO_BIT(b, t);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 127 0
	#     if (a1 != b1)
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1863, A, 0
	.loc 1 128 0
	#       r += t;
	.loc 1 123 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 125 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1863:
	.loc 1 128 0
	#       r += t;
	.L19:
	.loc 1 124 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 128 0
	#       r += t;
	jmp .L18
	.L20:
	.loc 1 131 0
	# }
	.loc 1 123 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_not:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 1 142 0
	# }
	.loc 1 135 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 139 0
	#       r += t;
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 1 139 0
	#       r += t;
	.L21:
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1864, A, 0
	jmp .L1865
	.L1864:
	.loc 1 139 0
	#       r += t;
	jmp .L23
	.L1865:
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 138 0
	#     if (!a1)
	mov A, 0
	mov B, SP
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 131 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1866, A, 0
	.loc 1 138 0
	#     if (!a1)
	.loc 1 131 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 138 0
	#     if (!a1)
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 138 0
	#     if (!a1)
	mov A, 1
	jmp .L1867
	.L1866:
	mov A, 0
	.L1867:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 139 0
	#       r += t;
	.loc 1 138 0
	#     if (!a1)
	mov B, BP
	add B, 16777212
	load A, B
	eq A, 0
	jeq .L1868, A, 0
	.loc 1 139 0
	#       r += t;
	.loc 1 135 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 137 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1868:
	.loc 1 139 0
	#       r += t;
	.L22:
	.loc 1 136 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 139 0
	#       r += t;
	jmp .L21
	.L23:
	.loc 1 142 0
	# }
	.loc 1 135 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_shl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 1 153 0
	# }
	.loc 1 146 0
	#   for (int i = b; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov A, 0
	mov B, SP
	.loc 1 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.L24:
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1869, A, 0
	jmp .L1870
	.L1869:
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	jmp .L26
	.L1870:
	.loc 1 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 149 0
	#     if (a1)
	mov A, 0
	mov B, SP
	.loc 1 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1871, A, 0
	.loc 1 149 0
	#     if (a1)
	.loc 1 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 149 0
	#     if (a1)
	.loc 1 148 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 149 0
	#     if (a1)
	mov A, 1
	jmp .L1872
	.L1871:
	mov A, 0
	.L1872:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 149 0
	#     if (a1)
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L1873, A, 0
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 146 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1873:
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	.L25:
	.loc 1 147 0
	#     int t = __builtin_bits_table[i];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 150 0
	#       r += __builtin_bits_table[i-b];
	jmp .L24
	.L26:
	.loc 1 153 0
	# }
	.loc 1 146 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
__builtin_shr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 1 164 0
	# }
	.loc 1 157 0
	#   for (int i = b; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov A, 0
	mov B, SP
	.loc 1 153 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.L27:
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1874, A, 0
	jmp .L1875
	.L1874:
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	jmp .L29
	.L1875:
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov A, 0
	mov B, SP
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 153 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 1 160 0
	#     if (a1)
	mov A, 0
	mov B, SP
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1876, A, 0
	.loc 1 160 0
	#     if (a1)
	.loc 1 153 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 160 0
	#     if (a1)
	.loc 1 159 0
	#     int a1 = __BUILTIN_TO_BIT(a, t);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 1 160 0
	#     if (a1)
	mov A, 1
	jmp .L1877
	.L1876:
	mov A, 0
	.L1877:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 160 0
	#     if (a1)
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L1878, A, 0
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 157 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.loc 1 84 0
	# }
	mov A, __builtin_bits_table
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L1878:
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	.L28:
	.loc 1 158 0
	#     int t = __builtin_bits_table[i-b];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 1 161 0
	#       r += __builtin_bits_table[i];
	jmp .L27
	.L29:
	.loc 1 164 0
	# }
	.loc 1 157 0
	#   for (int i = b; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
print_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 2 "/Users/nullpo/dev/elvm/libc/_raw_print.h"
	.loc 2 9 0
	#     putchar(*p);
	.L30:
	.loc 1 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L1879, A, 0
	jmp .L1880
	.L1879:
	.loc 2 9 0
	#     putchar(*p);
	jmp .L32
	.L1880:
	.loc 1 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 2 9 0
	#     putchar(*p);
	.L31:
	.loc 1 164 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 2 9 0
	#     putchar(*p);
	jmp .L30
	.L32:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stringify_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 2 20 0
	# }
	.loc 2 14 0
	#   do {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 18 0
	#   } while (v);
	.L33:
	.loc 2 16 0
	#     *p = v % 10 + '0';
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 2 17 0
	#     v /= 10;
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 17 0
	#     v /= 10;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1881
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L1881:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 18 0
	#   } while (v);
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 18 0
	#   } while (v);
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1882:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 2
	load A, B
	jeq .L1883, A, 0
	.loc 2 18 0
	#   } while (v);
	jmp .L33
	.L1883:
	.L34:
	.loc 2 20 0
	# }
	.loc 2 9 0
	#     putchar(*p);
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
print_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 32
	.loc 2 25 0
	# }
	.loc 2 24 0
	#   print_str(stringify_int(v, buf + sizeof(buf) - 1));
	.loc 2 25 0
	# }
	.loc 2 24 0
	#   print_str(stringify_int(v, buf + sizeof(buf) - 1));
	mov A, BP
	add A, 16777184
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1884
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_int
	.L1884:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1885:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
stringify_hex:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 2 44 0
	# }
	.loc 2 29 0
	#   int c;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 2 30 0
	#   *p = '\0';
	.loc 2 31 0
	#   if (v < 0) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 34 0
	#   }
	.loc 2 32 0
	#     v = -v;
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 32 0
	#     v = -v;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1886, A, 0
	.loc 2 34 0
	#   }
	.loc 2 33 0
	#     is_negative = 1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 2 34 0
	#   }
	mov A, 1
	mov B, BP
	add B, 16777215
	store A, B
	.L1886:
	.loc 2 40 0
	#   } while (v);
	.L35:
	.loc 2 37 0
	#     c = v % 16;
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 2 38 0
	#     *p = c < 10 ? c + '0' : c - 10 + 'a';
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 38 0
	#     *p = c < 10 ? c + '0' : c - 10 + 'a';
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L1887:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 2 39 0
	#     v /= 16;
	.loc 2 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#     v /= 16;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1888, A, 0
	.loc 2 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#     v /= 16;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	jmp .L1889
	.L1888:
	.loc 2 30 0
	#   *p = '\0';
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 39 0
	#     v /= 16;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 97
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	.L1889:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 2 40 0
	#   } while (v);
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 40 0
	#   } while (v);
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1890
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1890:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 2 25 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L1891, A, 0
	.loc 2 40 0
	#   } while (v);
	jmp .L35
	.L1891:
	.L36:
	.loc 2 42 0
	#     *--p = '-';
	.loc 2 29 0
	#   int c;
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L1892, A, 0
	.loc 2 42 0
	#     *--p = '-';
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	sub A, 1
	mov B, BP
	add B, 3
	store A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1892:
	.loc 2 44 0
	# }
	.loc 2 25 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isspace:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 3 "/Users/nullpo/dev/elvm/libc/ctype.h"
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L1897, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1897:
	mov A, B
	mov B, 1
	jne .L1896, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1896:
	mov A, B
	mov B, 1
	jne .L1895, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1895:
	mov A, B
	mov B, 1
	jne .L1894, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1894:
	mov A, B
	mov B, 1
	jne .L1893, A, 0
	.loc 2 44 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1893:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isdigit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 10 0
	# }
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1898, A, 0
	.loc 3 10 0
	# }
	.loc 3 5 0
	#           c == '\t' || c == '\v' || c == ' ');
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 10 0
	# }
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1898:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isxdigit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 14 0
	# }
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1901
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L1901:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L1900, A, 0
	.loc 3 14 0
	# }
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1902, A, 0
	.loc 3 14 0
	# }
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 14 0
	# }
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1902:
	mov A, B
	mov B, A
	ne B, 0
	.L1900:
	mov A, B
	mov B, 1
	jne .L1899, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1903, A, 0
	.loc 3 14 0
	# }
	.loc 3 10 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 14 0
	# }
	mov A, 70
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1903:
	mov A, B
	mov B, A
	ne B, 0
	.L1899:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isupper:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 18 0
	# }
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 14 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1904, A, 0
	.loc 3 18 0
	# }
	.loc 3 14 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	# }
	mov A, 90
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1904:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isalpha:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 22 0
	# }
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1906, A, 0
	.loc 3 22 0
	# }
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 22 0
	# }
	mov A, 122
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1906:
	mov A, B
	mov B, 1
	jne .L1905, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1907, A, 0
	.loc 3 22 0
	# }
	.loc 3 18 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 22 0
	# }
	mov A, 90
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1907:
	mov A, B
	mov B, A
	ne B, 0
	.L1905:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isalnum:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 26 0
	# }
	.loc 3 22 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L1909:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L1908, A, 0
	.loc 3 26 0
	# }
	.loc 3 22 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L1910:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L1908:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
isprint:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 3 30 0
	# }
	.loc 3 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L1912:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L1911, A, 0
	.loc 3 30 0
	# }
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1913, A, 0
	.loc 3 30 0
	# }
	.loc 3 26 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 3 30 0
	# }
	mov A, 127
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L1913:
	mov A, B
	mov B, A
	ne B, 0
	.L1911:
	mov A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
abort:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 4 "/Users/nullpo/dev/elvm/libc/stdlib.h"
	.loc 4 21 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
malloc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 4 31 0
	# }
	.loc 4 25 0
	#   _edata += n;
	mov A, 0
	mov B, SP
	.loc 3 30 0
	# }
	mov B, _edata
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 26 0
	#   if (r > _edata) {
	.loc 3 30 0
	# }
	mov B, _edata
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 21 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, _edata
	store A, B
	.loc 4 29 0
	#   }
	.loc 4 27 0
	#     print_str("no memory!\n");
	.loc 3 30 0
	# }
	mov B, _edata
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 25 0
	#   _edata += n;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1914, A, 0
	.loc 4 29 0
	#   }
	.loc 4 28 0
	#     exit(1);
.data
	.L1915:
	.string "no memory!\n"
.text
	mov A, .L1915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L1916:
	mov A, B
	add SP, 1
	.loc 4 29 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L1914:
	.loc 4 31 0
	# }
	.loc 4 25 0
	#   _edata += n;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
calloc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 35 0
	# }
	.loc 4 31 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1917:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L1918:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
free:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 35 0
	# }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtol:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 4 116 0
	# }
	.loc 4 45 0
	#   long acc, cutoff;
	.loc 4 46 0
	#   int c;
	.loc 4 47 0
	#   int neg, any, cutlim;
	.loc 4 48 0
	# 
	.loc 4 57 0
	#   }
	.loc 4 54 0
	#     if (endptr != 0)
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 54 0
	#     if (endptr != 0)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L1920, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 54 0
	#     if (endptr != 0)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1920:
	mov A, B
	mov B, 1
	jne .L1919, A, 0
	mov A, 36
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L1919:
	mov A, B
	jeq .L1921, A, 0
	.loc 4 57 0
	#   }
	.loc 4 55 0
	#       *endptr = (char *)nptr;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 55 0
	#       *endptr = (char *)nptr;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1922, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1922:
	.loc 4 57 0
	#   }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1921:
	.loc 4 65 0
	#   do {
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 67 0
	#   } while (isspace(c));
	.L37:
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 67 0
	#   } while (isspace(c));
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L1923:
	mov A, B
	add SP, 1
	jeq .L1924, A, 0
	.loc 4 67 0
	#   } while (isspace(c));
	jmp .L37
	.L1924:
	.L38:
	.loc 4 74 0
	#       c = *s++;
	.loc 4 69 0
	#     neg = 1;
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 69 0
	#     neg = 1;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1925, A, 0
	.loc 4 71 0
	#   } else {
	.loc 4 70 0
	#     c = *s++;
	mov A, 1
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 71 0
	#   } else {
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L1926
	.L1925:
	.loc 4 74 0
	#       c = *s++;
	.loc 4 73 0
	#     if (c == '+')
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 74 0
	#       c = *s++;
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 74 0
	#       c = *s++;
	mov A, 43
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1927, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.L1927:
	.L1926:
	.loc 4 81 0
	#   }
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L1930, A, 0
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1930:
	mov A, B
	mov B, 0
	jeq .L1929, A, 0
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1929:
	mov A, B
	mov B, 0
	jeq .L1928, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L1931, A, 0
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 77 0
	#       c == '0' && (*s == 'x' || *s == 'X')) {
	mov A, 88
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L1931:
	mov A, B
	mov B, A
	ne B, 0
	.L1928:
	mov A, B
	jeq .L1932, A, 0
	.loc 4 81 0
	#   }
	.loc 4 79 0
	#     s += 2;
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 79 0
	#     s += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 80 0
	#     base = 16;
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 80 0
	#     base = 16;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 81 0
	#   }
	mov A, 16
	mov B, BP
	add B, 4
	store A, B
	.L1932:
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1933, A, 0
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 83 0
	#     base = c == '0' ? 8 : 10;
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1934, A, 0
	mov A, 8
	jmp .L1935
	.L1934:
	mov A, 10
	.L1935:
	mov B, BP
	add B, 4
	store A, B
	.L1933:
	.loc 4 91 0
	#   }
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L1936, A, 0
	.loc 4 91 0
	#   }
	.loc 4 89 0
	#     }
	.loc 4 87 0
	#       cutlim -= base;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1937, A, 0
	.loc 4 89 0
	#     }
	.loc 4 88 0
	#       cutoff += 1;
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 4 89 0
	#     }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 89 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.L1937:
	.loc 4 91 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777209
	store A, B
	.L1936:
	.loc 4 111 0
	#     }
	.loc 4 93 0
	#     if (isdigit(c))
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	mov A, 0
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 111 0
	#     }
	.L39:
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L1938:
	mov A, B
	add SP, 1
	jeq .L1939, A, 0
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 94 0
	#       c -= '0';
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L1940
	.L1939:
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L1941:
	mov A, B
	add SP, 1
	jeq .L1942, A, 0
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 94 0
	#       c -= '0';
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isupper
	.L1943:
	mov A, B
	add SP, 1
	jeq .L1944, A, 0
	.loc 4 94 0
	#       c -= '0';
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L1945
	.L1944:
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	.L1945:
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L1946
	.L1942:
	jmp .L41
	.L1946:
	.L1940:
	.loc 4 100 0
	#       break;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1947, A, 0
	.loc 4 100 0
	#       break;
	jmp .L41
	.L1947:
	.loc 4 102 0
	#       continue;
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 102 0
	#       continue;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1948, A, 0
	jmp .L40
	.L1948:
	.loc 4 111 0
	#     }
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L1949, A, 0
	.loc 4 107 0
	#     } else {
	.loc 4 105 0
	#       acc *= base;
	mov A, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 106 0
	#       acc -= c;
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 106 0
	#       acc -= c;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1950:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 107 0
	#     } else {
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 107 0
	#     } else {
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1951
	.L1949:
	.loc 4 111 0
	#     }
	.loc 4 109 0
	#       acc *= base;
	mov A, 1
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 110 0
	#       acc += c;
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 110 0
	#       acc += c;
	.loc 4 35 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1952:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 111 0
	#     }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 111 0
	#     }
	.loc 4 47 0
	#   int neg, any, cutlim;
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L1951:
	.loc 4 111 0
	#     }
	.L40:
	.loc 4 93 0
	#     if (isdigit(c))
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 111 0
	#     }
	jmp .L39
	.L41:
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	.loc 4 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L1953, A, 0
	.loc 4 48 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L1954, A, 0
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	.loc 4 45 0
	#   long acc, cutoff;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 114 0
	#     *endptr = (char *) (any ? s - 1 : nptr);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	jmp .L1955
	.L1954:
	.loc 4 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	.L1955:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1953:
	.loc 4 116 0
	# }
	.loc 4 46 0
	#   int c;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoul:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 120 0
	# }
	.loc 4 116 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1956
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L1956:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoll:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 124 0
	# }
	.loc 4 120 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1957
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L1957:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtoull:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 128 0
	# }
	.loc 4 124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1958
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtol
	.L1958:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
atoi:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 4 138 0
	# }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 136 0
	#   }
	.L42:
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L1959, A, 0
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 134 0
	#     n = (n << 3) + (n << 1);
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L1959:
	mov A, B
	jeq .L1960, A, 0
	.loc 4 136 0
	#   }
	.loc 4 135 0
	#     n += s[i++] - '0';
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 135 0
	#     n += s[i++] - '0';
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1961
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L1961:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 135 0
	#     n += s[i++] - '0';
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1962
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L1962:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 136 0
	#   }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	.loc 4 128 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	.loc 4 133 0
	#   while (s[i] >= '0' && s[i] <= '9') {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 136 0
	#   }
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L1963
	.L1960:
	jmp .L43
	.L1963:
	jmp .L42
	.L43:
	.loc 4 138 0
	# }
	.loc 4 132 0
	#   unsigned long i = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
getenv:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 4 142 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
qsort:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 4 184 0
	#         size, compar);
	.loc 4 147 0
	#     return;
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 147 0
	#     return;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1964, A, 0
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L1964:
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov A, 0
	mov B, SP
	.loc 4 142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 4 150 0
	#   char* left = base;
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1965:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1966:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777214
	store A, B
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 4 152 0
	# #if 0
	mov A, 0
	mov B, SP
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1967:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 179 0
	#   }
	.L44:
	.loc 4 162 0
	#       left += size;
	.L47:
	mov A, 32768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	mov A, .L1968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L1968:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1969, A, 0
	.loc 4 162 0
	#       left += size;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777213
	store A, B
	jmp .L1970
	.L1969:
	.loc 4 162 0
	#       left += size;
	jmp .L48
	.L1970:
	jmp .L47
	.L48:
	.loc 4 164 0
	#       right -= size;
	.L49:
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	mov A, .L1971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L1971:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 164 0
	#       right -= size;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 32768
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1972, A, 0
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L1973
	.L1972:
	.loc 4 164 0
	#       right -= size;
	jmp .L50
	.L1973:
	jmp .L49
	.L50:
	.loc 4 167 0
	#       break;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L1974, A, 0
	.loc 4 167 0
	#       break;
	jmp .L46
	.L1974:
	.loc 4 172 0
	#     }
	.loc 4 169 0
	#       char tmp = left[i];
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 4 172 0
	#     }
	.L51:
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1975, A, 0
	jmp .L1976
	.L1975:
	.loc 4 172 0
	#     }
	jmp .L53
	.L1976:
	.loc 4 170 0
	#       left[i] = right[i];
	mov A, 0
	mov B, SP
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 4 171 0
	#       right[i] = tmp;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 171 0
	#       right[i] = tmp;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	.loc 4 170 0
	#       left[i] = right[i];
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 172 0
	#     }
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	.L52:
	.loc 4 169 0
	#       char tmp = left[i];
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 4 172 0
	#     }
	jmp .L51
	.L53:
	.loc 4 174 0
	#       pivot = right;
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1977, A, 0
	.loc 4 174 0
	#       pivot = right;
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1978
	.L1977:
	.loc 4 174 0
	#       pivot = right;
	.loc 4 150 0
	#   char* left = base;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L1979, A, 0
	.loc 4 174 0
	#       pivot = right;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.L1979:
	.L1978:
	.loc 4 178 0
	#     right -= size;
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777213
	store A, B
	.loc 4 179 0
	#   }
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 179 0
	#   }
	.L45:
	jmp .L44
	.L46:
	.loc 4 182 0
	#   qsort(base, (size_t)(left - base) / size, size, compar);
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 4 183 0
	#   qsort(right, (size_t)(base + nmemb * size - right) / size,
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 183 0
	#   qsort(right, (size_t)(base + nmemb * size - right) / size,
	.loc 4 151 0
	#   char* right = base + (nmemb - 1) * size;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1980:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L1981:
	mov A, B
	add SP, 4
	.loc 4 184 0
	#         size, compar);
	.loc 4 142 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	.loc 4 149 0
	#   char* pivot = base + (nmemb / 2) * size;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	.loc 4 142 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L1982:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 142 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L1983:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 152 0
	# #if 0
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L1984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp qsort
	.L1984:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
memset:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.file 5 "/Users/nullpo/dev/elvm/libc/string.h"
	.loc 5 13 0
	# }
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	.loc 5 11 0
	#   }
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 11 0
	#   }
	.L54:
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1985, A, 0
	jmp .L1986
	.L1985:
	.loc 5 11 0
	#   }
	jmp .L56
	.L1986:
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 11 0
	#   }
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 11 0
	#   }
	.L55:
	.loc 5 10 0
	#     ((char*)d)[i] = c;
	.loc 5 9 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 11 0
	#   }
	jmp .L54
	.L56:
	.loc 5 13 0
	# }
	.loc 4 184 0
	#         size, compar);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
memcpy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 21 0
	# }
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	.loc 5 19 0
	#   }
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 19 0
	#   }
	.L57:
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 13 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L1987, A, 0
	jmp .L1988
	.L1987:
	.loc 5 19 0
	#   }
	jmp .L59
	.L1988:
	.loc 5 13 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 19 0
	#   }
	.loc 5 13 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 19 0
	#   }
	.L58:
	.loc 5 18 0
	#     ((char*)d)[i] = ((char*)s)[i];
	.loc 5 17 0
	#   for (i = 0; i < n; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 19 0
	#   }
	jmp .L57
	.L59:
	.loc 5 21 0
	# }
	.loc 5 13 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strlen:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 27 0
	# }
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	.loc 5 26 0
	#   return r;
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.L60:
	.loc 5 21 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	jeq .L1989, A, 0
	jmp .L1990
	.L1989:
	.loc 5 26 0
	#   return r;
	jmp .L62
	.L1990:
	.L61:
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 5 26 0
	#   return r;
	jmp .L60
	.L62:
	.loc 5 27 0
	# }
	.loc 5 25 0
	#   for (r = 0; s[r]; r++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcat:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 35 0
	# }
	.loc 5 31 0
	#   for (; *d; d++) {}
	mov A, 0
	mov B, SP
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 32 0
	#   for (; *s; s++, d++)
	.L63:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L1991, A, 0
	jmp .L1992
	.L1991:
	.loc 5 32 0
	#   for (; *s; s++, d++)
	jmp .L65
	.L1992:
	.L64:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 32 0
	#   for (; *s; s++, d++)
	jmp .L63
	.L65:
	.loc 5 33 0
	#     *d = *s;
	.L66:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jeq .L1993, A, 0
	jmp .L1994
	.L1993:
	.loc 5 33 0
	#     *d = *s;
	jmp .L68
	.L1994:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	.L67:
	.loc 5 27 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	.loc 5 27 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 33 0
	#     *d = *s;
	jmp .L66
	.L68:
	.loc 5 35 0
	# }
	.loc 5 31 0
	#   for (; *d; d++) {}
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcpy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 5 43 0
	# }
	.loc 5 39 0
	#   for (; *s; s++, d++)
	mov A, 0
	mov B, SP
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 40 0
	#     *d = *s;
	.L69:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	jeq .L1995, A, 0
	jmp .L1996
	.L1995:
	.loc 5 40 0
	#     *d = *s;
	jmp .L71
	.L1996:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	.L70:
	.loc 5 35 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 40 0
	#     *d = *s;
	jmp .L69
	.L71:
	.loc 5 42 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 35 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 43 0
	# }
	.loc 5 39 0
	#   for (; *s; s++, d++)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strcmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 5 53 0
	# }
	.loc 5 50 0
	#       return 1;
	.L72:
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, 1
	jne .L1997, A, 0
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	ne B, 0
	.L1997:
	mov A, B
	jeq .L1998, A, 0
	jmp .L1999
	.L1998:
	.loc 5 50 0
	#       return 1;
	jmp .L74
	.L1999:
	.loc 5 48 0
	#       return -1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 48 0
	#       return -1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2000, A, 0
	.loc 5 48 0
	#       return -1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2000:
	.loc 5 50 0
	#       return 1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 50 0
	#       return 1;
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2001, A, 0
	.loc 5 50 0
	#       return 1;
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2001:
	.L73:
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 47 0
	#     if (*a < *b)
	.loc 5 43 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 5 50 0
	#       return 1;
	jmp .L72
	.L74:
	.loc 5 53 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strchr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 5 61 0
	# }
	.loc 5 58 0
	#       return s;
	.L75:
	.loc 5 57 0
	#     if (*s == c)
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L2002, A, 0
	jmp .L2003
	.L2002:
	.loc 5 58 0
	#       return s;
	jmp .L77
	.L2003:
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2004, A, 0
	.loc 5 58 0
	#       return s;
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2004:
	.loc 5 58 0
	#       return s;
	.L76:
	.loc 5 57 0
	#     if (*s == c)
	.loc 5 53 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 5 58 0
	#       return s;
	jmp .L75
	.L77:
	.loc 5 61 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strdup:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 5 68 0
	# }
	.loc 5 65 0
	#   char* r = malloc(l + 1);
	mov A, 0
	mov B, SP
	.loc 5 61 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L2005:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 66 0
	#   strcpy(r, s);
	mov A, 0
	mov B, SP
	.loc 5 65 0
	#   char* r = malloc(l + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 66 0
	#   strcpy(r, s);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L2006:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 67 0
	#   return r;
	.loc 5 61 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 66 0
	#   strcpy(r, s);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcpy
	.L2007:
	mov A, B
	add SP, 2
	.loc 5 68 0
	# }
	.loc 5 66 0
	#   strcpy(r, s);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strtok_r:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 5 112 0
	#       }
	.loc 5 75 0
	#   int c, sc;
	.loc 5 76 0
	#   char *tok;
	.loc 5 77 0
	# 
	.loc 5 79 0
	#     return (NULL);
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 79 0
	#     return (NULL);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L2008, A, 0
	.loc 5 68 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 2
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 79 0
	#     return (NULL);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L2008:
	mov A, B
	jeq .L2009, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2009:
	.loc 5 85 0
	#   c = *s++;
	.L86:
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 88 0
	#       goto cont;
	.loc 5 87 0
	#     if (c == sc)
	.loc 5 68 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 88 0
	#       goto cont;
	.L78:
	.loc 5 87 0
	#     if (c == sc)
	.loc 5 75 0
	#   int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 87 0
	#     if (c == sc)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2010, A, 0
	jmp .L2011
	.L2010:
	.loc 5 88 0
	#       goto cont;
	jmp .L80
	.L2011:
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2012, A, 0
	.loc 5 88 0
	#       goto cont;
	jmp .L86
	.L2012:
	.L79:
	jmp .L78
	.L80:
	.loc 5 94 0
	#   }
	.loc 5 92 0
	#     *last = NULL;
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 92 0
	#     *last = NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2013, A, 0
	.loc 5 94 0
	#   }
	.loc 5 93 0
	#     return (NULL);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 68 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 94 0
	#   }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2013:
	.loc 5 96 0
	# 
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 96 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, BP
	add B, 16777212
	store A, B
	.loc 5 112 0
	#       }
	.L81:
	.loc 5 103 0
	#     spanp = delim;
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 104 0
	#     do {
	.loc 5 68 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 112 0
	#       }
	.L84:
	.loc 5 106 0
	#         if (c == 0)
	.loc 5 75 0
	#   int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2014, A, 0
	.loc 5 112 0
	#       }
	.loc 5 107 0
	#           s = NULL;
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 107 0
	#           s = NULL;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2015, A, 0
	mov A, 0
	mov B, BP
	add B, 2
	store A, B
	jmp .L2016
	.L2015:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 107 0
	#           s = NULL;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L2016:
	.loc 5 111 0
	#         return (tok);
	.loc 5 68 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 5 112 0
	#       }
	.loc 5 77 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2014:
	.loc 5 112 0
	#       }
	.loc 5 76 0
	#   char *tok;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 112 0
	#       }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2017, A, 0
	jmp .L84
	.L2017:
	.L85:
	.L82:
	jmp .L81
	.L83:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
charmap:
	.long 0
	.long 1
	.long 2
	.long 3
	.long 4
	.long 5
	.long 6
	.long 7
	.long 8
	.long 9
	.long 10
	.long 11
	.long 12
	.long 13
	.long 14
	.long 15
	.long 16
	.long 17
	.long 18
	.long 19
	.long 20
	.long 21
	.long 22
	.long 23
	.long 24
	.long 25
	.long 26
	.long 27
	.long 28
	.long 29
	.long 30
	.long 31
	.long 32
	.long 33
	.long 34
	.long 35
	.long 36
	.long 37
	.long 38
	.long 39
	.long 40
	.long 41
	.long 42
	.long 43
	.long 44
	.long 45
	.long 46
	.long 47
	.long 48
	.long 49
	.long 50
	.long 51
	.long 52
	.long 53
	.long 54
	.long 55
	.long 56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
	.long 64
	.long 97
	.long 98
	.long 99
	.long 100
	.long 101
	.long 102
	.long 103
	.long 104
	.long 105
	.long 106
	.long 107
	.long 108
	.long 109
	.long 110
	.long 111
	.long 112
	.long 113
	.long 114
	.long 115
	.long 116
	.long 117
	.long 118
	.long 119
	.long 120
	.long 121
	.long 122
	.long 91
	.long 92
	.long 93
	.long 94
	.long 95
	.long 96
	.long 97
	.long 98
	.long 99
	.long 100
	.long 101
	.long 102
	.long 103
	.long 104
	.long 105
	.long 106
	.long 107
	.long 108
	.long 109
	.long 110
	.long 111
	.long 112
	.long 113
	.long 114
	.long 115
	.long 116
	.long 117
	.long 118
	.long 119
	.long 120
	.long 121
	.long 122
	.long 123
	.long 124
	.long 125
	.long 126
	.long 127
	.long -128
	.long -127
	.long -126
	.long -125
	.long -124
	.long -123
	.long -122
	.long -121
	.long -120
	.long -119
	.long -118
	.long -117
	.long -116
	.long -115
	.long -114
	.long -113
	.long -112
	.long -111
	.long -110
	.long -109
	.long -108
	.long -107
	.long -106
	.long -105
	.long -104
	.long -103
	.long -102
	.long -101
	.long -100
	.long -99
	.long -98
	.long -97
	.long -96
	.long -95
	.long -94
	.long -93
	.long -92
	.long -91
	.long -90
	.long -89
	.long -88
	.long -87
	.long -86
	.long -85
	.long -84
	.long -83
	.long -82
	.long -81
	.long -80
	.long -79
	.long -78
	.long -77
	.long -76
	.long -75
	.long -74
	.long -73
	.long -72
	.long -71
	.long -70
	.long -69
	.long -68
	.long -67
	.long -66
	.long -65
	.long -64
	.long -63
	.long -62
	.long -61
	.long -60
	.long -59
	.long -58
	.long -57
	.long -56
	.long -55
	.long -54
	.long -53
	.long -52
	.long -51
	.long -50
	.long -49
	.long -48
	.long -47
	.long -46
	.long -45
	.long -44
	.long -43
	.long -42
	.long -41
	.long -40
	.long -39
	.long -38
	.long -37
	.long -36
	.long -35
	.long -34
	.long -33
	.long -32
	.long -31
	.long -30
	.long -29
	.long -28
	.long -27
	.long -26
	.long -25
	.long -24
	.long -23
	.long -22
	.long -21
	.long -20
	.long -19
	.long -18
	.long -17
	.long -16
	.long -15
	.long -14
	.long -13
	.long -12
	.long -11
	.long -10
	.long -9
	.long -8
	.long -7
	.long -6
	.long -5
	.long -4
	.long -3
	.long -2
	.long -1
	.text
strcasecmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov A, charmap
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 166 0
	# 
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.L87:
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 166 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2018, A, 0
	.loc 5 168 0
	#     if (*us1++ == '\0')
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 168 0
	#     if (*us1++ == '\0')
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2019, A, 0
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2019:
	jmp .L2020
	.L2018:
	jmp .L88
	.L2020:
	jmp .L87
	.L88:
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 165 0
	#   const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 164 0
	#   const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 171 0
	# }
	.loc 5 166 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	sub A, 1
	mov B, BP
	add B, 16777213
	store A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strncasecmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 190 0
	# }
	.loc 5 186 0
	#         break;
	.loc 5 178 0
	#     const unsigned char *cm = charmap;
	.loc 5 171 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 178 0
	#     const unsigned char *cm = charmap;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2021, A, 0
	.loc 5 186 0
	#         break;
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov A, 0
	mov B, SP
	.loc 5 112 0
	#       }
	mov A, charmap
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov A, 0
	mov B, SP
	.loc 5 171 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 5 181 0
	# 
	mov A, 0
	mov B, SP
	.loc 5 171 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 5 186 0
	#         break;
	.L89:
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 181 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2022, A, 0
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 179 0
	#     const unsigned char *us1 = (const unsigned char *)s1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 184 0
	#         return (cm[*us1] - cm[*--us2]);
	.loc 5 181 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	sub A, 1
	mov B, BP
	add B, 16777213
	store A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2022:
	.loc 5 186 0
	#         break;
	.loc 5 180 0
	#     const unsigned char *us2 = (const unsigned char *)s2;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 186 0
	#         break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2023, A, 0
	jmp .L90
	.L2023:
	.loc 5 171 0
	# }
	mov B, BP
	add B, 4
	load A, B
	sub A, 1
	mov B, BP
	add B, 4
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 186 0
	#         break;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2024, A, 0
	jmp .L89
	.L2024:
	.L90:
	.L2021:
	.loc 5 190 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
strpbrk:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 5 205 0
	# }
	.loc 5 197 0
	# 	int c, sc;
	.loc 5 198 0
	# 
	.loc 5 201 0
	# 			if (sc == c)
	.L91:
	.loc 5 200 0
	# 		for (scanp = s2; (sc = *scanp++) != 0;)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 200 0
	# 		for (scanp = s2; (sc = *scanp++) != 0;)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2025, A, 0
	.loc 5 201 0
	# 			if (sc == c)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 5 201 0
	# 			if (sc == c)
	.L93:
	.loc 5 197 0
	# 	int c, sc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 201 0
	# 			if (sc == c)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2026, A, 0
	jmp .L2027
	.L2026:
	jmp .L95
	.L2027:
	.loc 5 198 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2028, A, 0
	.loc 5 201 0
	# 			if (sc == c)
	.loc 5 190 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 5 201 0
	# 			if (sc == c)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2028:
	.L94:
	jmp .L93
	.L95:
	jmp .L2029
	.L2025:
	jmp .L92
	.L2029:
	jmp .L91
	.L92:
	.loc 5 205 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
puts:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 6 "/Users/nullpo/dev/elvm/libc/stdio.h"
	.loc 6 20 0
	# }
	.loc 6 19 0
	#   putchar('\n');
	.loc 5 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L2030:
	mov A, B
	add SP, 1
	.loc 6 20 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vsnprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 38
	.loc 6 87 0
	# }
	.loc 6 24 0
	#   size_t off = 0;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 6 84 0
	#   }
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 20 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 84 0
	#   }
	.L96:
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	jeq .L2031, A, 0
	jmp .L2032
	.L2031:
	.loc 6 84 0
	#   }
	jmp .L98
	.L2032:
	.loc 6 38 0
	#     }
	.loc 6 28 0
	#       if (!is_overlow) {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 28 0
	#       if (!is_overlow) {
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2033, A, 0
	.loc 6 38 0
	#     }
	.loc 6 34 0
	#         }
	.loc 6 29 0
	#         if (off + 1 >= size) {
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	jeq .L2034, A, 0
	.loc 6 34 0
	#         }
	.loc 6 30 0
	#           is_overlow = 1;
	.loc 6 20 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 30 0
	#           is_overlow = 1;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 30 0
	#           is_overlow = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L2035, A, 0
	.loc 6 32 0
	#         } else {
	.loc 6 31 0
	#           buf[off] = 0;
	mov A, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 6 32 0
	#         } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L2036
	.L2035:
	.loc 6 34 0
	#         }
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 34 0
	#         }
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L2036:
	.L2034:
	.loc 6 37 0
	#       continue;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 6 38 0
	#     }
	jmp .L97
	.L2033:
	.loc 6 41 0
	#     char* cur_p;
	.loc 6 42 0
	#  retry:
	.loc 6 72 0
	#     }
	.loc 6 43 0
	#     switch (*++inp) {
	.L108:
	.loc 6 72 0
	#     }
	.loc 6 43 0
	#     switch (*++inp) {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777179
	store A, B
	.loc 6 72 0
	#     }
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 108
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2037, A, 0
	jmp .L100
	.L2037:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 100
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2038, A, 0
	jmp .L101
	.L2038:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 117
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2039, A, 0
	jmp .L102
	.L2039:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2040, A, 0
	jmp .L103
	.L2040:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 115
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2041, A, 0
	jmp .L104
	.L2041:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 99
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2042, A, 0
	jmp .L105
	.L2042:
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 37
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2043, A, 0
	jmp .L106
	.L2043:
	jmp .L107
	.loc 6 45 0
	#         goto retry;
	.L100:
	jmp .L108
	.loc 6 47 0
	#       case 'u':
	.L101:
	.L102:
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 47 0
	#       case 'u':
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2044
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_int
	.L2044:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 50 0
	#       case 'x':
	jmp .L99
	.loc 6 51 0
	#         cur_p = stringify_hex(va_arg(ap, long), cur_buf + sizeof(cur_buf) - 1);
	.L103:
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 51 0
	#         cur_p = stringify_hex(va_arg(ap, long), cur_buf + sizeof(cur_buf) - 1);
	mov A, 32
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp stringify_hex
	.L2045:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 53 0
	#       case 's':
	jmp .L99
	.loc 6 54 0
	#         cur_p = va_arg(ap, char*);
	.L104:
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 56 0
	#       case 'c':
	jmp .L99
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	.L105:
	.loc 6 20 0
	# }
	mov B, BP
	add B, 5
	load A, B
	add A, 1
	mov B, BP
	add B, 5
	store A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 57 0
	#         cur_buf[0] = va_arg(ap, char);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 59 0
	#         cur_p = cur_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 59 0
	#         cur_p = cur_buf;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 60 0
	#         break;
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 61 0
	#       case '%':
	jmp .L99
	.loc 6 62 0
	#         cur_buf[0] = '%';
	.L106:
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 62 0
	#         cur_buf[0] = '%';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 64 0
	#         cur_p = cur_buf;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 64 0
	#         cur_p = cur_buf;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 65 0
	#         break;
	.loc 6 41 0
	#     char* cur_p;
	mov A, BP
	add A, 16777181
	mov B, BP
	add B, 16777180
	store A, B
	.loc 6 66 0
	#       default:
	jmp .L99
	.loc 6 67 0
	#         print_int(*inp);
	.L107:
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_int
	.L2046:
	mov A, B
	add SP, 1
	.loc 6 69 0
	#         print_str(fmt);
.data
	.L2047:
	.string " in "
.text
	mov A, .L2047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2048
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L2048:
	mov A, B
	add SP, 1
	.loc 6 70 0
	#         print_str(": unknown format!\n");
	.loc 6 20 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L2049:
	mov A, B
	add SP, 1
	.loc 6 71 0
	#         exit(1);
.data
	.L2050:
	.string ": unknown format!\n"
.text
	mov A, .L2050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L2051:
	mov A, B
	add SP, 1
	.loc 6 72 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L99:
	.loc 6 75 0
	#     if (!is_overlow) {
	mov A, 0
	mov B, SP
	.loc 6 42 0
	#  retry:
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L2052:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777178
	store A, B
	.loc 6 81 0
	#       }
	.loc 6 76 0
	#       if (off + len >= size) {
	.loc 6 26 0
	#   for (inp = fmt; *inp; inp++) {
	mov B, BP
	add B, 16777213
	load A, B
	eq A, 0
	jeq .L2053, A, 0
	.loc 6 81 0
	#       }
	.loc 6 77 0
	#         is_overlow = 1;
	.loc 6 20 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 77 0
	#         is_overlow = 1;
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 75 0
	#     if (!is_overlow) {
	mov B, BP
	add B, 16777178
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L2054, A, 0
	.loc 6 79 0
	#       } else {
	.loc 6 78 0
	#         buf[off] = 0;
	mov A, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 6 79 0
	#       } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L2055
	.L2054:
	.loc 6 81 0
	#       }
	.loc 6 42 0
	#  retry:
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 81 0
	#       }
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcpy
	.L2056:
	mov A, B
	add SP, 2
	.L2055:
	.L2053:
	.loc 6 84 0
	#   }
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 75 0
	#     if (!is_overlow) {
	mov B, BP
	add B, 16777178
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 84 0
	#   }
	.L97:
	.loc 6 27 0
	#     if (*inp != '%') {
	.loc 6 24 0
	#   size_t off = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 6 84 0
	#   }
	jmp .L96
	.L98:
	.loc 6 86 0
	#   return off;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 20 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 87 0
	# }
	.loc 6 25 0
	#   int is_overlow = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vsprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 91 0
	# }
	.loc 6 87 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 91 0
	# }
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 87 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L2057:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
snprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 99 0
	# }
	.loc 6 95 0
	#   va_start(ap, fmt);
	.loc 6 96 0
	#   int r = vsnprintf(buf, size, fmt , ap);
	mov A, BP
	add A, 4
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 97 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 95 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 91 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2058
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L2058:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 99 0
	# }
	.loc 6 97 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 107 0
	# }
	.loc 6 103 0
	#   va_start(ap, fmt);
	.loc 6 104 0
	#   int r = vsprintf(buf, fmt, ap);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 105 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 103 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 99 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsprintf
	.L2059:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 107 0
	# }
	.loc 6 105 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 257
	.loc 6 115 0
	# }
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	.loc 6 112 0
	#   buf[r] = 0;
	mov A, 0
	mov B, SP
	.loc 6 107 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 112 0
	#   buf[r] = 0;
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2060
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L2060:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16776959
	store A, B
	.loc 6 113 0
	#   print_str(buf);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 112 0
	#   buf[r] = 0;
	mov B, BP
	add B, 16776959
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 114 0
	#   return r;
	.loc 6 111 0
	#   int r = vsnprintf(buf, 256, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L2061:
	mov A, B
	add SP, 1
	.loc 6 115 0
	# }
	.loc 6 112 0
	#   buf[r] = 0;
	mov B, BP
	add B, 16776959
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
printf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 123 0
	# }
	.loc 6 119 0
	#   va_start(ap, fmt);
	.loc 6 120 0
	#   int r = vprintf(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 121 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 6 119 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 115 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L2062:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 123 0
	# }
	.loc 6 121 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
stdin:
	.long 1
	.data 0
stdout:
	.long 1
	.data 0
stderr:
	.long 1
	.text
fprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 6 135 0
	# }
	.loc 6 132 0
	#   va_start(ap, fmt);
	.loc 6 133 0
	#   vprintf(fmt, ap);
	mov A, BP
	add A, 3
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 134 0
	#   va_end(ap);
	.loc 6 132 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L2063:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vfprintf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 139 0
	# }
	.loc 6 135 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L2064:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fileno:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 143 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fopen:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 147 0
	# }
	.loc 6 123 0
	# }
	mov B, stdin
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fclose:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 151 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fwrite:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 6 159 0
	# }
	.loc 6 155 0
	#   size_t l = (int)s * (int)n;
	mov A, 0
	mov B, SP
	.loc 6 151 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov A, 0
	mov B, SP
	.loc 6 151 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	.loc 6 151 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2065:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 157 0
	#     putchar(str[i]);
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.L109:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2066, A, 0
	jmp .L2067
	.L2066:
	.loc 6 157 0
	#     putchar(str[i]);
	jmp .L111
	.L2067:
	.loc 6 155 0
	#   size_t l = (int)s * (int)n;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 157 0
	#     putchar(str[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L110:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	jmp .L109
	.L111:
	.loc 6 159 0
	# }
	.loc 6 156 0
	#   for (size_t i = 0; i < l; i++)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fputs:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 163 0
	# }
	.loc 6 159 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L2068:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fgets:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 6 176 0
	# }
	.loc 6 172 0
	#     }
	.loc 6 167 0
	#     int c = getchar();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 6 172 0
	#     }
	.L112:
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 167 0
	#     int c = getchar();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2069, A, 0
	jmp .L2070
	.L2069:
	.loc 6 172 0
	#     }
	jmp .L114
	.L2070:
	.loc 6 168 0
	#     s[i] = c;
	mov A, 0
	mov B, SP
	getc A
	jne .L2071, A, 0
	mov A, -1
	.L2071:
	mov B, BP
	add B, 16777214
	store A, B
	.loc 6 169 0
	#     if (c == '\n' || c == EOF) {
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 169 0
	#     if (c == '\n' || c == EOF) {
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	.loc 6 170 0
	#       s[i + 1] = 0;
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 170 0
	#       s[i + 1] = 0;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L2072, A, 0
	.loc 6 168 0
	#     s[i] = c;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 170 0
	#       s[i + 1] = 0;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L2072:
	mov A, B
	jeq .L2073, A, 0
	.loc 6 172 0
	#     }
	.loc 6 171 0
	#       return i;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 171 0
	#       return i;
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 171 0
	#       return i;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2073:
	.loc 6 172 0
	#     }
	.L113:
	.loc 6 167 0
	#     int c = getchar();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 6 172 0
	#     }
	jmp .L112
	.L114:
	.loc 6 175 0
	#   return size;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 163 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 175 0
	#   return size;
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 175 0
	#   return size;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 6 176 0
	# }
	.loc 6 163 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
g_ungot:
	.long -1
	.data
	eof_seen:

	.long 0
	.text
fgetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 6 195 0
	# }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	.loc 6 191 0
	#   }
	.loc 6 184 0
	#     // A hack for whitespace, in which getchar after EOF is not
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 184 0
	#     // A hack for whitespace, in which getchar after EOF is not
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2074, A, 0
	.loc 6 191 0
	#   }
	.loc 6 187 0
	#       return EOF;
	.loc 6 176 0
	# }
	mov B, eof_seen
	load A, B
	jeq .L2075, A, 0
	.loc 6 187 0
	#       return EOF;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2075:
	.loc 6 189 0
	#     eof_seen = r == EOF;
	getc A
	jne .L2076, A, 0
	mov A, -1
	.L2076:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 190 0
	#     return r;
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 190 0
	#     return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, eof_seen
	store A, B
	.loc 6 191 0
	#   }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2074:
	.loc 6 193 0
	#   g_ungot = EOF;
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 6 194 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, g_ungot
	store A, B
	.loc 6 195 0
	# }
	.loc 6 183 0
	#   if (g_ungot == EOF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
getc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 199 0
	# }
	.loc 6 195 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2077
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fgetc
	.L2077:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ungetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 6 205 0
	# }
	.loc 6 203 0
	#     return g_ungot = c;
	.loc 6 176 0
	# }
	mov B, g_ungot
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 203 0
	#     return g_ungot = c;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2078, A, 0
	.loc 6 199 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, g_ungot
	store A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2078:
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
ELF_TEXT_START:
	.long 1048576
	.data 0
ELF_HEADER_SIZE:
	.long 84
	.data
	reg_names:

	.long 0
	.text
get_target_func:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.file 7 "out/elc.c"
	.loc 7 87 0
	# }
	.loc 7 48 0
	#   if (!strcmp(ext, "bef")) return target_bef;
.data
	.L2079:
	.string "arm"
.text
	mov A, .L2079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2080:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2081, A, 0
	.loc 7 48 0
	#   if (!strcmp(ext, "bef")) return target_bef;
	mov A, target_arm
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2081:
	.loc 7 49 0
	#   if (!strcmp(ext, "bf")) {
.data
	.L2082:
	.string "bef"
.text
	mov A, .L2082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2083:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2084, A, 0
	.loc 7 49 0
	#   if (!strcmp(ext, "bf")) {
	mov A, target_bef
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2084:
	.loc 7 52 0
	#   }
	.loc 7 50 0
	#     split_basic_block_by_mem();
.data
	.L2085:
	.string "bf"
.text
	mov A, .L2085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2086:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2087, A, 0
	.loc 7 52 0
	#   }
	.loc 7 51 0
	#     return target_bf;
	mov A, .L2088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp split_basic_block_by_mem
	.L2088:
	mov A, B
	.loc 7 52 0
	#   }
	mov A, target_bf
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2087:
	.loc 7 54 0
	#   if (!strcmp(ext, "cl")) return target_cl;
.data
	.L2089:
	.string "c"
.text
	mov A, .L2089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2090:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2091, A, 0
	.loc 7 54 0
	#   if (!strcmp(ext, "cl")) return target_cl;
	mov A, target_c
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2091:
	.loc 7 55 0
	#   if (!strcmp(ext, "cpp")) return target_cpp;
.data
	.L2092:
	.string "cl"
.text
	mov A, .L2092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2093:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2094, A, 0
	.loc 7 55 0
	#   if (!strcmp(ext, "cpp")) return target_cpp;
	mov A, target_cl
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2094:
	.loc 7 56 0
	#   if (!strcmp(ext, "cpp_template")) return target_cpp_template;
.data
	.L2095:
	.string "cpp"
.text
	mov A, .L2095
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2096:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2097, A, 0
	.loc 7 56 0
	#   if (!strcmp(ext, "cpp_template")) return target_cpp_template;
	mov A, target_cpp
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2097:
	.loc 7 57 0
	#   if (!strcmp(ext, "cr")) return target_cr;
.data
	.L2098:
	.string "cpp_template"
.text
	mov A, .L2098
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2099:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2100, A, 0
	.loc 7 57 0
	#   if (!strcmp(ext, "cr")) return target_cr;
	mov A, target_cpp_template
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2100:
	.loc 7 58 0
	#   if (!strcmp(ext, "cs")) return target_cs;
.data
	.L2101:
	.string "cr"
.text
	mov A, .L2101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2102:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2103, A, 0
	.loc 7 58 0
	#   if (!strcmp(ext, "cs")) return target_cs;
	mov A, target_cr
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2103:
	.loc 7 59 0
	#   if (!strcmp(ext, "el")) return target_el;
.data
	.L2104:
	.string "cs"
.text
	mov A, .L2104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2105:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2106, A, 0
	.loc 7 59 0
	#   if (!strcmp(ext, "el")) return target_el;
	mov A, target_cs
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2106:
	.loc 7 60 0
	#   if (!strcmp(ext, "forth")) return target_forth;
.data
	.L2107:
	.string "el"
.text
	mov A, .L2107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2108:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2109, A, 0
	.loc 7 60 0
	#   if (!strcmp(ext, "forth")) return target_forth;
	mov A, target_el
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2109:
	.loc 7 61 0
	#   if (!strcmp(ext, "fs")) return target_fs;
.data
	.L2110:
	.string "forth"
.text
	mov A, .L2110
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2111:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2112, A, 0
	.loc 7 61 0
	#   if (!strcmp(ext, "fs")) return target_fs;
	mov A, target_forth
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2112:
	.loc 7 62 0
	#   if (!strcmp(ext, "go")) return target_go;
.data
	.L2113:
	.string "fs"
.text
	mov A, .L2113
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2114
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2114:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2115, A, 0
	.loc 7 62 0
	#   if (!strcmp(ext, "go")) return target_go;
	mov A, target_fs
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2115:
	.loc 7 63 0
	#   if (!strcmp(ext, "i")) return target_i;
.data
	.L2116:
	.string "go"
.text
	mov A, .L2116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2117:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2118, A, 0
	.loc 7 63 0
	#   if (!strcmp(ext, "i")) return target_i;
	mov A, target_go
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2118:
	.loc 7 64 0
	#   if (!strcmp(ext, "java")) return target_java;
.data
	.L2119:
	.string "i"
.text
	mov A, .L2119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2120
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2120:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2121, A, 0
	.loc 7 64 0
	#   if (!strcmp(ext, "java")) return target_java;
	mov A, target_i
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2121:
	.loc 7 65 0
	#   if (!strcmp(ext, "js")) return target_js;
.data
	.L2122:
	.string "java"
.text
	mov A, .L2122
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2123:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2124, A, 0
	.loc 7 65 0
	#   if (!strcmp(ext, "js")) return target_js;
	mov A, target_java
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2124:
	.loc 7 66 0
	#   if (!strcmp(ext, "lua")) return target_lua;
.data
	.L2125:
	.string "js"
.text
	mov A, .L2125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2126:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2127, A, 0
	.loc 7 66 0
	#   if (!strcmp(ext, "lua")) return target_lua;
	mov A, target_js
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2127:
	.loc 7 67 0
	#   if (!strcmp(ext, "ll")) return target_ll;
.data
	.L2128:
	.string "lua"
.text
	mov A, .L2128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2129:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2130, A, 0
	.loc 7 67 0
	#   if (!strcmp(ext, "ll")) return target_ll;
	mov A, target_lua
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2130:
	.loc 7 68 0
	#   if (!strcmp(ext, "php")) return target_php;
.data
	.L2131:
	.string "ll"
.text
	mov A, .L2131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2132:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2133, A, 0
	.loc 7 68 0
	#   if (!strcmp(ext, "php")) return target_php;
	mov A, target_ll
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2133:
	.loc 7 69 0
	#   if (!strcmp(ext, "piet")) return target_piet;
.data
	.L2134:
	.string "php"
.text
	mov A, .L2134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2135:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2136, A, 0
	.loc 7 69 0
	#   if (!strcmp(ext, "piet")) return target_piet;
	mov A, target_php
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2136:
	.loc 7 70 0
	#   if (!strcmp(ext, "pietasm")) return target_pietasm;
.data
	.L2137:
	.string "piet"
.text
	mov A, .L2137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2138:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2139, A, 0
	.loc 7 70 0
	#   if (!strcmp(ext, "pietasm")) return target_pietasm;
	mov A, target_piet
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2139:
	.loc 7 71 0
	#   if (!strcmp(ext, "pl")) return target_pl;
.data
	.L2140:
	.string "pietasm"
.text
	mov A, .L2140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2141:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2142, A, 0
	.loc 7 71 0
	#   if (!strcmp(ext, "pl")) return target_pl;
	mov A, target_pietasm
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2142:
	.loc 7 72 0
	#   if (!strcmp(ext, "py")) return target_py;
.data
	.L2143:
	.string "pl"
.text
	mov A, .L2143
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2144:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2145, A, 0
	.loc 7 72 0
	#   if (!strcmp(ext, "py")) return target_py;
	mov A, target_pl
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2145:
	.loc 7 73 0
	#   if (!strcmp(ext, "ps")) return target_ps;
.data
	.L2146:
	.string "py"
.text
	mov A, .L2146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2147:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2148, A, 0
	.loc 7 73 0
	#   if (!strcmp(ext, "ps")) return target_ps;
	mov A, target_py
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2148:
	.loc 7 74 0
	#   if (!strcmp(ext, "rb")) return target_rb;
.data
	.L2149:
	.string "ps"
.text
	mov A, .L2149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2150
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2150:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2151, A, 0
	.loc 7 74 0
	#   if (!strcmp(ext, "rb")) return target_rb;
	mov A, target_ps
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2151:
	.loc 7 75 0
	#   if (!strcmp(ext, "sed")) return target_sed;
.data
	.L2152:
	.string "rb"
.text
	mov A, .L2152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2153:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2154, A, 0
	.loc 7 75 0
	#   if (!strcmp(ext, "sed")) return target_sed;
	mov A, target_rb
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2154:
	.loc 7 76 0
	#   if (!strcmp(ext, "sh")) return target_sh;
.data
	.L2155:
	.string "sed"
.text
	mov A, .L2155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2156:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2157, A, 0
	.loc 7 76 0
	#   if (!strcmp(ext, "sh")) return target_sh;
	mov A, target_sed
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2157:
	.loc 7 77 0
	#   if (!strcmp(ext, "sqlite3")) return target_sqlite3;
.data
	.L2158:
	.string "sh"
.text
	mov A, .L2158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2159:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2160, A, 0
	.loc 7 77 0
	#   if (!strcmp(ext, "sqlite3")) return target_sqlite3;
	mov A, target_sh
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2160:
	.loc 7 78 0
	#   if (!strcmp(ext, "swift")) return target_swift;
.data
	.L2161:
	.string "sqlite3"
.text
	mov A, .L2161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2162:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2163, A, 0
	.loc 7 78 0
	#   if (!strcmp(ext, "swift")) return target_swift;
	mov A, target_sqlite3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2163:
	.loc 7 79 0
	#   if (!strcmp(ext, "tex")) return target_tex;
.data
	.L2164:
	.string "swift"
.text
	mov A, .L2164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2165:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2166, A, 0
	.loc 7 79 0
	#   if (!strcmp(ext, "tex")) return target_tex;
	mov A, target_swift
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2166:
	.loc 7 80 0
	#   if (!strcmp(ext, "tf")) return target_tf;
.data
	.L2167:
	.string "tex"
.text
	mov A, .L2167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2168
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2168:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2169, A, 0
	.loc 7 80 0
	#   if (!strcmp(ext, "tf")) return target_tf;
	mov A, target_tex
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2169:
	.loc 7 81 0
	#   if (!strcmp(ext, "tm")) return target_tm;
.data
	.L2170:
	.string "tf"
.text
	mov A, .L2170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2171:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2172, A, 0
	.loc 7 81 0
	#   if (!strcmp(ext, "tm")) return target_tm;
	mov A, target_tf
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2172:
	.loc 7 82 0
	#   if (!strcmp(ext, "unl")) return target_unl;
.data
	.L2173:
	.string "tm"
.text
	mov A, .L2173
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2174:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2175, A, 0
	.loc 7 82 0
	#   if (!strcmp(ext, "unl")) return target_unl;
	mov A, target_tm
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2175:
	.loc 7 83 0
	#   if (!strcmp(ext, "vim")) return target_vim;
.data
	.L2176:
	.string "unl"
.text
	mov A, .L2176
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2177:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2178, A, 0
	.loc 7 83 0
	#   if (!strcmp(ext, "vim")) return target_vim;
	mov A, target_unl
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2178:
	.loc 7 84 0
	#   if (!strcmp(ext, "ws")) return target_ws;
.data
	.L2179:
	.string "vim"
.text
	mov A, .L2179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2180:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2181, A, 0
	.loc 7 84 0
	#   if (!strcmp(ext, "ws")) return target_ws;
	mov A, target_vim
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2181:
	.loc 7 85 0
	#   if (!strcmp(ext, "x86")) return target_x86;
.data
	.L2182:
	.string "ws"
.text
	mov A, .L2182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2183:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2184, A, 0
	.loc 7 85 0
	#   if (!strcmp(ext, "x86")) return target_x86;
	mov A, target_ws
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2184:
	.loc 7 86 0
	#   error("unknown flag: %s", ext);
.data
	.L2185:
	.string "x86"
.text
	mov A, .L2185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L2186:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L2187, A, 0
	.loc 7 86 0
	#   error("unknown flag: %s", ext);
	mov A, target_x86
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2187:
	.loc 7 87 0
	# }
	.loc 6 205 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 87 0
	# }
.data
	.L2188:
	.string "unknown flag: %s"
.text
	mov A, .L2188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L2189:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
main:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 36
	.loc 7 124 0
	# }
	.loc 7 92 0
	#   for (int i = 0;; i++) {
	.loc 7 99 0
	#   }
	.loc 7 93 0
	#     int c = getchar();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777183
	mov A, 0
	store A, B
	.loc 7 99 0
	#   }
	.L115:
	.loc 7 94 0
	#     if (c == '\n' || c == EOF) {
	mov A, 0
	mov B, SP
	getc A
	jne .L2190, A, 0
	mov A, -1
	.L2190:
	mov B, BP
	add B, 16777182
	store A, B
	.loc 7 97 0
	#     }
	.loc 7 95 0
	#       buf[i] = 0;
	.loc 7 94 0
	#     if (c == '\n' || c == EOF) {
	mov B, BP
	add B, 16777182
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 95 0
	#       buf[i] = 0;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L2191, A, 0
	.loc 7 94 0
	#     if (c == '\n' || c == EOF) {
	mov B, BP
	add B, 16777182
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 95 0
	#       buf[i] = 0;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L2191:
	mov A, B
	jeq .L2192, A, 0
	.loc 7 97 0
	#     }
	.loc 7 96 0
	#       break;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 92 0
	#   for (int i = 0;; i++) {
	mov A, BP
	add A, 16777184
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 93 0
	#     int c = getchar();
	mov B, BP
	add B, 16777183
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 97 0
	#     }
	jmp .L117
	.L2192:
	.loc 7 99 0
	#   }
	.loc 7 94 0
	#     if (c == '\n' || c == EOF) {
	mov B, BP
	add B, 16777182
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 99 0
	#   }
	.loc 7 92 0
	#   for (int i = 0;; i++) {
	mov A, BP
	add A, 16777184
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 93 0
	#     int c = getchar();
	mov B, BP
	add B, 16777183
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 99 0
	#   }
	.L116:
	.loc 7 93 0
	#     int c = getchar();
	mov B, BP
	add B, 16777183
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777183
	store A, B
	load A, SP
	add SP, 1
	.loc 7 99 0
	#   }
	jmp .L115
	.L117:
	.loc 7 101 0
	#   Module* module = load_eir(stdin);
	mov A, 0
	mov B, SP
	.loc 7 92 0
	#   for (int i = 0;; i++) {
	mov A, BP
	add A, 16777184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_target_func
	.L2193:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777181
	store A, B
	.loc 7 102 0
	# #else
	mov A, 0
	mov B, SP
	.loc 6 123 0
	# }
	mov B, stdin
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp load_eir
	.L2194:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777180
	store A, B
	.loc 7 124 0
	# }
	.loc 7 102 0
	# #else
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 101 0
	#   Module* module = load_eir(stdin);
	mov B, BP
	add B, 16777181
	load A, B
	mov C, A
	mov A, .L2195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L2195:
	mov A, B
	add SP, 1
	exit
	.text
vformat:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 256
	.loc 7 138 0
	# }
	.loc 7 135 0
	#   vsnprintf(buf, 255, fmt, ap);
	.loc 7 136 0
	#   buf[255] = 0;
	.loc 7 124 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 136 0
	#   buf[255] = 0;
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 135 0
	#   vsnprintf(buf, 255, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vsnprintf
	.L2196:
	mov A, B
	add SP, 4
	.loc 7 137 0
	#   return strdup(buf);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 135 0
	#   vsnprintf(buf, 255, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 137 0
	#   return strdup(buf);
	mov A, 255
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 138 0
	# }
	.loc 7 135 0
	#   vsnprintf(buf, 255, fmt, ap);
	mov A, BP
	add A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strdup
	.L2197:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
format:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 146 0
	# }
	.loc 7 142 0
	#   va_start(ap, fmt);
	.loc 7 143 0
	#   char* r = vformat(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 144 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 7 142 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 138 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vformat
	.L2198:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 146 0
	# }
	.loc 7 144 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
error:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 155 0
	# }
	.loc 7 150 0
	#   va_start(ap, fmt);
	.loc 7 151 0
	#   char* r = vformat(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 152 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 7 150 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 146 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vformat
	.L2199:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 154 0
	#   exit(1);
	.loc 7 152 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 154 0
	#   exit(1);
.data
	.L2200:
	.string "%s\n"
.text
	mov A, .L2200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L2201:
	mov A, B
	add SP, 3
	.loc 7 155 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	g_indent:

	.long 0
	.text
inc_indent:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 161 0
	# }
	.loc 7 155 0
	# }
	mov B, g_indent
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, g_indent
	store A, B
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
dec_indent:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 165 0
	# }
	.loc 7 155 0
	# }
	mov B, g_indent
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, g_indent
	store A, B
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_line:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 177 0
	# }
	.loc 7 175 0
	#   }
	.loc 7 169 0
	#     for (int i = 0; i < g_indent; i++)
	.loc 7 165 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 169 0
	#     for (int i = 0; i < g_indent; i++)
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	jeq .L2202, A, 0
	.loc 7 175 0
	#   }
	.loc 7 170 0
	#       putchar(' ');
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L118:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 155 0
	# }
	mov B, g_indent
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2203, A, 0
	jmp .L2204
	.L2203:
	.loc 7 170 0
	#       putchar(' ');
	jmp .L120
	.L2204:
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L119:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L118
	.L120:
	.loc 7 172 0
	#     va_start(ap, fmt);
	.loc 7 173 0
	#     vprintf(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 174 0
	#     va_end(ap);
	.loc 7 172 0
	#     va_start(ap, fmt);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 165 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vprintf
	.L2205:
	mov A, B
	add SP, 2
	.L2202:
	.loc 7 177 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
DEFAULT_REG_NAMES:
	.data 1
	.L2206:
	.string "a"
	.data 0
	.long .L2206
	.data 1
	.L2207:
	.string "b"
	.data 0
	.long .L2207
	.data 1
	.L2208:
	.string "c"
	.data 0
	.long .L2208
	.data 1
	.L2209:
	.string "d"
	.data 0
	.long .L2209
	.data 1
	.L2210:
	.string "bp"
	.data 0
	.long .L2210
	.data 1
	.L2211:
	.string "sp"
	.data 0
	.long .L2211
	.data 1
	.L2212:
	.string "pc"
	.data 0
	.long .L2212
	.data 0
reg_names:
	.long DEFAULT_REG_NAMES
	.text
value_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 192 0
	#   }
	.loc 7 187 0
	#     return reg_names[v->reg];
	.loc 7 177 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2213, A, 0
	.loc 7 188 0
	#   } else if (v->type == IMM) {
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 188 0
	#   } else if (v->type == IMM) {
	.loc 7 177 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L2214
	.L2213:
	.loc 7 192 0
	#   }
	.loc 7 188 0
	#   } else if (v->type == IMM) {
	.loc 7 177 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2215, A, 0
	.loc 7 190 0
	#   } else {
	.loc 7 177 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 190 0
	#   } else {
.data
	.L2216:
	.string "%d"
.text
	mov A, .L2216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2217:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L2218
	.L2215:
	.loc 7 192 0
	#   }
.data
	.L2219:
	.string "invalid value"
.text
	mov A, .L2219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2220
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L2220:
	mov A, B
	add SP, 1
	.L2218:
	.L2214:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
src_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 197 0
	# }
	.loc 7 192 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L2221:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S0.TBL:
	.long 9
	.long 8
	.long 13
	.long 12
	.long 11
	.long 10
	.long 14
	.text
normalize_cond:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 209 0
	# }
	.loc 7 201 0
	#     op -= 8;
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 197 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L2222, A, 0
	.loc 7 201 0
	#     op -= 8;
	.loc 7 197 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 201 0
	#     op -= 8;
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 2
	store A, B
	.L2222:
	.loc 7 207 0
	#   }
	.loc 7 197 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L2223, A, 0
	.loc 7 207 0
	#   }
	.loc 7 204 0
	#       JNE, JEQ, JGE, JLE, JGT, JLT, JMP
	mov A, .S0.TBL
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 207 0
	#   }
	.loc 7 197 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.L2223:
	.loc 7 209 0
	# }
	.loc 7 197 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cmp_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 233 0
	# }
	.loc 7 213 0
	#   const char* op_str;
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 209 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L2224:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 214 0
	#   switch (op) {
	.loc 7 230 0
	#       error("oops");
	.loc 7 213 0
	#   const char* op_str;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 230 0
	#       error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2225, A, 0
	jmp .L122
	.L2225:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2226, A, 0
	jmp .L123
	.L2226:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2227, A, 0
	jmp .L124
	.L2227:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2228, A, 0
	jmp .L125
	.L2228:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2229, A, 0
	jmp .L126
	.L2229:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2230, A, 0
	jmp .L127
	.L2230:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2231, A, 0
	jmp .L128
	.L2231:
	jmp .L129
	.loc 7 216 0
	#       op_str = "=="; break;
	.L122:
.data
	.L2232:
	.string "=="
.text
	mov A, .L2232
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 217 0
	#     case JNE:
	jmp .L121
	.loc 7 218 0
	#       op_str = "!="; break;
	.L123:
.data
	.L2233:
	.string "!="
.text
	mov A, .L2233
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 219 0
	#     case JLT:
	jmp .L121
	.loc 7 220 0
	#       op_str = "<"; break;
	.L124:
.data
	.L2234:
	.string "<"
.text
	mov A, .L2234
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 221 0
	#     case JGT:
	jmp .L121
	.loc 7 222 0
	#       op_str = ">"; break;
	.L125:
.data
	.L2235:
	.string ">"
.text
	mov A, .L2235
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 223 0
	#     case JLE:
	jmp .L121
	.loc 7 224 0
	#       op_str = "<="; break;
	.L126:
.data
	.L2236:
	.string "<="
.text
	mov A, .L2236
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 225 0
	#     case JGE:
	jmp .L121
	.loc 7 226 0
	#       op_str = ">="; break;
	.L127:
.data
	.L2237:
	.string ">="
.text
	mov A, .L2237
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 227 0
	#     case JMP:
	jmp .L121
	.loc 7 228 0
	#       return true_str;
	.L128:
	.loc 7 209 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 230 0
	#       error("oops");
	.L129:
.data
	.L2238:
	.string "oops"
.text
	mov A, .L2238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L2239:
	mov A, B
	add SP, 1
	.L121:
	.loc 7 233 0
	# }
	.loc 7 209 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L2240:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 214 0
	#   switch (op) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 233 0
	# }
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 233 0
	# }
	.loc 7 209 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 233 0
	# }
.data
	.L2241:
	.string "%s %s %s"
.text
	mov A, .L2241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L2242:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	g_emit_cnt:

	.long 0
	.data
	g_emit_started:

	.long 0
	.text
emit_cnt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 240 0
	# }
	.loc 7 233 0
	# }
	mov B, g_emit_cnt
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_reset:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 245 0
	# }
	.loc 7 244 0
	#   g_emit_started = false;
	mov A, 0
	mov B, g_emit_cnt
	store A, B
	.loc 7 245 0
	# }
	mov A, 0
	ne A, 0
	ne A, 0
	ne A, 0
	mov B, g_emit_started
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_start:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 249 0
	# }
	mov A, 1
	ne A, 0
	ne A, 0
	ne A, 0
	mov B, g_emit_started
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_1:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 254 0
	#     putchar(a);
	.loc 7 253 0
	#   if (g_emit_started)
	.loc 7 233 0
	# }
	mov B, g_emit_cnt
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, g_emit_cnt
	store A, B
	load A, SP
	add SP, 1
	.loc 7 254 0
	#     putchar(a);
	.loc 7 233 0
	# }
	mov B, g_emit_started
	load A, B
	jeq .L2243, A, 0
	.loc 7 254 0
	#     putchar(a);
	.loc 7 249 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L2243:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_2:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 260 0
	# }
	.loc 7 259 0
	#   emit_1(b);
	.loc 7 254 0
	#     putchar(a);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2244:
	mov A, B
	add SP, 1
	.loc 7 260 0
	# }
	.loc 7 254 0
	#     putchar(a);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2245:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_3:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 266 0
	# }
	.loc 7 264 0
	#   emit_1(b);
	.loc 7 260 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2246:
	mov A, B
	add SP, 1
	.loc 7 265 0
	#   emit_1(c);
	.loc 7 260 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2247:
	mov A, B
	add SP, 1
	.loc 7 266 0
	# }
	.loc 7 260 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2248:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_4:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 273 0
	# }
	.loc 7 270 0
	#   emit_1(b);
	.loc 7 266 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2249:
	mov A, B
	add SP, 1
	.loc 7 271 0
	#   emit_1(c);
	.loc 7 266 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2250:
	mov A, B
	add SP, 1
	.loc 7 272 0
	#   emit_1(d);
	.loc 7 266 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2251:
	mov A, B
	add SP, 1
	.loc 7 273 0
	# }
	.loc 7 266 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2252:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_5:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 281 0
	# }
	.loc 7 277 0
	#   emit_1(b);
	.loc 7 273 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2253:
	mov A, B
	add SP, 1
	.loc 7 278 0
	#   emit_1(c);
	.loc 7 273 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2254:
	mov A, B
	add SP, 1
	.loc 7 279 0
	#   emit_1(d);
	.loc 7 273 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2255:
	mov A, B
	add SP, 1
	.loc 7 280 0
	#   emit_1(e);
	.loc 7 273 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2256:
	mov A, B
	add SP, 1
	.loc 7 281 0
	# }
	.loc 7 273 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2257:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_6:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 290 0
	# }
	.loc 7 285 0
	#   emit_1(b);
	.loc 7 281 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2258:
	mov A, B
	add SP, 1
	.loc 7 286 0
	#   emit_1(c);
	.loc 7 281 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2259:
	mov A, B
	add SP, 1
	.loc 7 287 0
	#   emit_1(d);
	.loc 7 281 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2260
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2260:
	mov A, B
	add SP, 1
	.loc 7 288 0
	#   emit_1(e);
	.loc 7 281 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2261:
	mov A, B
	add SP, 1
	.loc 7 289 0
	#   emit_1(f);
	.loc 7 281 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2262:
	mov A, B
	add SP, 1
	.loc 7 290 0
	# }
	.loc 7 281 0
	# }
	mov B, BP
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2263:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_le:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 300 0
	# }
	.loc 7 294 0
	#   a /= 256;
	.loc 7 290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 294 0
	#   a /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2264:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2265
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2265:
	mov A, B
	add SP, 1
	.loc 7 295 0
	#   emit_1(a % 256);
	.loc 7 290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 295 0
	#   emit_1(a % 256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2266:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 296 0
	#   a /= 256;
	.loc 7 290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 296 0
	#   a /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2267:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2268:
	mov A, B
	add SP, 1
	.loc 7 297 0
	#   emit_1(a % 256);
	.loc 7 290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 297 0
	#   emit_1(a % 256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2269
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2269:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 298 0
	#   a /= 256;
	.loc 7 290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 298 0
	#   a /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2270:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2271
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2271:
	mov A, B
	add SP, 1
	.loc 7 299 0
	#   emit_1(a);
	.loc 7 290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 299 0
	#   emit_1(a);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2272
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2272:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 300 0
	# }
	.loc 7 290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2273:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_diff:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 310 0
	# }
	.loc 7 304 0
	#   emit_1(v % 256);
	mov A, 0
	mov B, SP
	.loc 7 300 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 305 0
	#   v /= 256;
	.loc 7 304 0
	#   emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 305 0
	#   v /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2274:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2275:
	mov A, B
	add SP, 1
	.loc 7 306 0
	#   emit_1(v % 256);
	.loc 7 304 0
	#   emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 306 0
	#   emit_1(v % 256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2276:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 307 0
	#   v /= 256;
	.loc 7 304 0
	#   emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 307 0
	#   v /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2277:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2278:
	mov A, B
	add SP, 1
	.loc 7 308 0
	#   emit_1(v % 256);
	.loc 7 304 0
	#   emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 308 0
	#   emit_1(v % 256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2279:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 309 0
	#   emit_1(a >= b ? 0 : 0xff);
	.loc 7 304 0
	#   emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 309 0
	#   emit_1(a >= b ? 0 : 0xff);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2280:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2281:
	mov A, B
	add SP, 1
	.loc 7 310 0
	# }
	.loc 7 300 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L2282, A, 0
	.loc 7 310 0
	# }
	mov A, 0
	jmp .L2283
	.L2282:
	mov A, 255
	.L2283:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2284:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
CHUNKED_FUNC_SIZE:
	.long 512
	.text
emit_chunked_main_loop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 340 0
	# }
	.loc 7 320 0
	#   int prev_func_id = -1;
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 321 0
	#   for (; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 337 0
	#   }
	.L130:
	.loc 7 310 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L2285, A, 0
	jmp .L2286
	.L2285:
	.loc 7 337 0
	#   }
	jmp .L132
	.L2286:
	.loc 7 323 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 310 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2287:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 332 0
	#     }
	.loc 7 324 0
	#       if (prev_func_id != func_id) {
	.loc 7 320 0
	#   int prev_func_id = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 324 0
	#       if (prev_func_id != func_id) {
	.loc 7 310 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2288, A, 0
	.loc 7 332 0
	#     }
	.loc 7 329 0
	#       }
	.loc 7 325 0
	#         if (prev_func_id != -1) {
	.loc 7 321 0
	#   for (; inst; inst = inst->next) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 323 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2289, A, 0
	.loc 7 329 0
	#       }
	.loc 7 327 0
	#         }
	.loc 7 326 0
	#           emit_func_epilogue();
	.loc 7 321 0
	#   for (; inst; inst = inst->next) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 326 0
	#           emit_func_epilogue();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2290, A, 0
	.loc 7 327 0
	#         }
	.loc 7 310 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	mov A, .L2291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L2291:
	mov A, B
	.L2290:
	.loc 7 329 0
	#       }
	.loc 7 323 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	mov A, .L2292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L2292:
	mov A, B
	add SP, 1
	.L2289:
	.loc 7 332 0
	#     }
	.loc 7 310 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	mov A, .L2293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L2293:
	mov A, B
	add SP, 1
	.L2288:
	.loc 7 334 0
	#     prev_func_id = func_id;
	.loc 7 310 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 335 0
	# 
	.loc 7 323 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 337 0
	#   }
	.loc 7 310 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 6
	load A, B
	mov C, A
	mov A, .L2294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L2294:
	mov A, B
	add SP, 1
	.loc 7 337 0
	#   }
	.L131:
	.loc 7 322 0
	#     int func_id = inst->pc / CHUNKED_FUNC_SIZE;
	.loc 7 310 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 337 0
	#   }
	jmp .L130
	.L132:
	.loc 7 339 0
	#   return prev_func_id + 1;
	.loc 7 310 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	mov A, .L2295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp C
	.L2295:
	mov A, B
	.loc 7 340 0
	# }
	.loc 7 321 0
	#   for (; inst; inst = inst->next) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 340 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_elf_header:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 84
	.loc 7 376 0
	# }
	.loc 7 347 0
	#     // e_ident
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777164
	mov A, 127
	store A, B
	mov B, BP
	add B, 16777165
	mov A, 69
	store A, B
	mov B, BP
	add B, 16777166
	mov A, 76
	store A, B
	mov B, BP
	add B, 16777167
	mov A, 70
	store A, B
	mov B, BP
	add B, 16777168
	mov A, 1
	store A, B
	mov B, BP
	add B, 16777169
	mov A, 1
	store A, B
	mov B, BP
	add B, 16777170
	mov A, 1
	store A, B
	mov B, BP
	add B, 16777171
	mov A, 0
	store A, B
	mov B, BP
	add B, 16777172
	mov A, 0
	store A, B
	mov B, BP
	add B, 16777173
	mov A, 0
	store A, B
	mov B, BP
	add B, 16777174
	mov A, 0
	store A, B
	mov B, BP
	add B, 16777175
	mov A, 0
	store A, B
	mov B, BP
	add B, 16777176
	mov A, 0
	store A, B
	mov B, BP
	add B, 16777177
	mov A, 0
	store A, B
	mov B, BP
	add B, 16777178
	mov A, 0
	store A, B
	mov B, BP
	add B, 16777179
	mov A, 0
	store A, B
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2296:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777180
	store A, B
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2297:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777181
	store A, B
	.loc 7 340 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 347 0
	#     // e_ident
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2298:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777182
	store A, B
	.loc 7 340 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 347 0
	#     // e_ident
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2299:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777183
	store A, B
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2300:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777184
	store A, B
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2301:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2302:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777185
	store A, B
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2303:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777186
	store A, B
	mov B, BP
	add B, 16777187
	mov A, 0
	store A, B
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 347 0
	#     // e_ident
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2304:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777188
	store A, B
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 347 0
	#     // e_ident
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2305:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2306:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777189
	store A, B
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 347 0
	#     // e_ident
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2307:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777190
	store A, B
	mov B, BP
	add B, 16777191
	mov A, 0
	store A, B
	mov A, 52
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2308:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777192
	store A, B
	mov A, 52
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2309:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2310:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777193
	store A, B
	mov A, 52
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2311:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777194
	store A, B
	mov B, BP
	add B, 16777195
	mov A, 0
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2312:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777196
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2313:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2314:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777197
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2315:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777198
	store A, B
	mov B, BP
	add B, 16777199
	mov A, 0
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2316:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777200
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2317:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2318:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777201
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2319:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777202
	store A, B
	mov B, BP
	add B, 16777203
	mov A, 0
	store A, B
	mov A, 52
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2320:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777204
	store A, B
	mov A, 52
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2321:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777205
	store A, B
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2322:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777206
	store A, B
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2323:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777207
	store A, B
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2324:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777208
	store A, B
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2325:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777209
	store A, B
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2326:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777210
	store A, B
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2327:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2328:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2329:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2330:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2331:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2332
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2332:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777132
	store A, B
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2333:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2334:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777133
	store A, B
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2335:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777134
	store A, B
	mov B, BP
	add B, 16777135
	mov A, 0
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2336:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777136
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2337:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2338:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777137
	store A, B
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2339:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777138
	store A, B
	mov B, BP
	add B, 16777139
	mov A, 0
	store A, B
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2340:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777140
	store A, B
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2341:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2342:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777141
	store A, B
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2343:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777142
	store A, B
	mov B, BP
	add B, 16777143
	mov A, 0
	store A, B
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2344:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777144
	store A, B
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2345:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2346:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777145
	store A, B
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2347:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777146
	store A, B
	mov B, BP
	add B, 16777147
	mov A, 0
	store A, B
	.loc 7 340 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2348:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777148
	store A, B
	.loc 7 340 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2349:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2350:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777149
	store A, B
	.loc 7 340 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2351:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777150
	store A, B
	mov B, BP
	add B, 16777151
	mov A, 0
	store A, B
	.loc 7 340 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2352:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777152
	store A, B
	.loc 7 340 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2353:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2354:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777153
	store A, B
	.loc 7 340 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2355:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777154
	store A, B
	mov B, BP
	add B, 16777155
	mov A, 0
	store A, B
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2356:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777156
	store A, B
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2357
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2357:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2358:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777157
	store A, B
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2359:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777158
	store A, B
	mov B, BP
	add B, 16777159
	mov A, 0
	store A, B
	mov A, 4096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2360:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777160
	store A, B
	mov A, 4096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2361:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2362:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777161
	store A, B
	mov A, 4096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2363:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777162
	store A, B
	mov B, BP
	add B, 16777163
	mov A, 0
	store A, B
	.loc 7 375 0
	#   fwrite(phdr, 32, 1, stdout);
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 375 0
	#   fwrite(phdr, 32, 1, stdout);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 52
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 347 0
	#     // e_ident
	mov A, BP
	add A, 16777164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fwrite
	.L2364:
	mov A, B
	add SP, 4
	.loc 7 376 0
	# }
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 376 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 365 0
	#     PACK4(1),  // p_type
	mov A, BP
	add A, 16777132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fwrite
	.L2365:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
ARMREG:
	.long 4
	.long 5
	.long 6
	.long 7
	.long 8
	.long 9
	.long 0
	.long 1
	.long 2
	.long 3
	.long 10
	.long 11
	.long 12
	.long 13
	.long 14
	.long 15
	.text
emit_4le:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 423 0
	# }
	.loc 7 420 0
	#   emit_1(c);
	.loc 7 376 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2366:
	mov A, B
	add SP, 1
	.loc 7 421 0
	#   emit_1(b);
	.loc 7 376 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2367:
	mov A, B
	add SP, 1
	.loc 7 422 0
	#   emit_1(a);
	.loc 7 376 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2368:
	mov A, B
	add SP, 1
	.loc 7 423 0
	# }
	.loc 7 376 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2369:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_svc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 427 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2370:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_reg2op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 437 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 427 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 427 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2371:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 427 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 427 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	# }
	mov A, 224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2372:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_mov_reg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 448 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 448 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 437 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 448 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2373:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2374:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_mov_imm8:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 452 0
	# }
	.loc 7 448 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 452 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 448 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 452 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2375:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 448 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 452 0
	# }
	mov A, 160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2376:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_mvn_imm8:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 456 0
	# }
	.loc 7 452 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 452 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2377:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 452 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	# }
	mov A, 224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2378:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_add_imm8:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 460 0
	# }
	.loc 7 456 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 460 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 460 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2379:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 460 0
	# }
	.loc 7 427 0
	# }
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 460 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 456 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 460 0
	# }
	mov A, 226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2380:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_sub_imm8:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 464 0
	# }
	.loc 7 460 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 464 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 460 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 464 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2381:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 460 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 464 0
	# }
	.loc 7 427 0
	# }
	mov A, 64
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 464 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 460 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 464 0
	# }
	mov A, 226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2382:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_mov_imm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 476 0
	# }
	.loc 7 468 0
	#   imm /= 256;
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 468 0
	#   imm /= 256;
	.loc 7 464 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 468 0
	#   imm /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2383:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 464 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2384:
	mov A, B
	add SP, 3
	.loc 7 469 0
	#   if (!imm)
	.loc 7 464 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 469 0
	#   if (!imm)
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2385:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 470 0
	#     return;
	.loc 7 464 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	jeq .L2386, A, 0
	.loc 7 470 0
	#     return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2386:
	.loc 7 472 0
	#   imm /= 256;
	.loc 7 437 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 472 0
	#   imm /= 256;
	.loc 7 464 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 472 0
	#   imm /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2387
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2387:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 464 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2388
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_add_imm8
	.L2388:
	mov A, B
	add SP, 3
	.loc 7 473 0
	#   if (!imm)
	.loc 7 464 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 473 0
	#   if (!imm)
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2389:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 474 0
	#     return;
	.loc 7 464 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	jeq .L2390, A, 0
	.loc 7 474 0
	#     return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2390:
	.loc 7 476 0
	# }
	.loc 7 437 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 476 0
	# }
	.loc 7 464 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 476 0
	# }
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2391:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 464 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_add_imm8
	.L2392:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_add_imm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 493 0
	# }
	.loc 7 482 0
	#   }
	.loc 7 480 0
	#     emit_arm_sub_imm8(dst, 0x1000000 - imm, Shl0);
	mov A, 16776960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 476 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2393, A, 0
	.loc 7 482 0
	#   }
	.loc 7 481 0
	#     return;
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 481 0
	#     return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 476 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_sub_imm8
	.L2394:
	mov A, B
	add SP, 3
	.loc 7 482 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2393:
	.loc 7 485 0
	#   imm /= 256;
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 485 0
	#   imm /= 256;
	.loc 7 476 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 485 0
	#   imm /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2395:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 476 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_add_imm8
	.L2396:
	mov A, B
	add SP, 3
	.loc 7 486 0
	#   if (!imm)
	.loc 7 476 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 486 0
	#   if (!imm)
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2397:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 487 0
	#     return;
	.loc 7 476 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	jeq .L2398, A, 0
	.loc 7 487 0
	#     return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2398:
	.loc 7 489 0
	#   imm /= 256;
	.loc 7 437 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 489 0
	#   imm /= 256;
	.loc 7 476 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 489 0
	#   imm /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2399:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 476 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_add_imm8
	.L2400:
	mov A, B
	add SP, 3
	.loc 7 490 0
	#   if (!imm)
	.loc 7 476 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 490 0
	#   if (!imm)
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2401:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 491 0
	#     return;
	.loc 7 476 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	jeq .L2402, A, 0
	.loc 7 491 0
	#     return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2402:
	.loc 7 493 0
	# }
	.loc 7 437 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 476 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_add_imm8
	.L2403:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_sub_imm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 505 0
	# }
	.loc 7 497 0
	#   imm /= 256;
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 497 0
	#   imm /= 256;
	.loc 7 493 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 497 0
	#   imm /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2404:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 493 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_sub_imm8
	.L2405:
	mov A, B
	add SP, 3
	.loc 7 498 0
	#   if (!imm)
	.loc 7 493 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 498 0
	#   if (!imm)
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2406:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 499 0
	#     return;
	.loc 7 493 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	jeq .L2407, A, 0
	.loc 7 499 0
	#     return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2407:
	.loc 7 501 0
	#   imm /= 256;
	.loc 7 437 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 501 0
	#   imm /= 256;
	.loc 7 493 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 501 0
	#   imm /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2408:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 493 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_sub_imm8
	.L2409:
	mov A, B
	add SP, 3
	.loc 7 502 0
	#   if (!imm)
	.loc 7 493 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 502 0
	#   if (!imm)
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2410
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2410:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 503 0
	#     return;
	.loc 7 493 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	jeq .L2411, A, 0
	.loc 7 503 0
	#     return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2411:
	.loc 7 505 0
	# }
	.loc 7 437 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 493 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_sub_imm8
	.L2412:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_mem:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 514 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 505 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 514 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 505 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 514 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2413:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 505 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 514 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 505 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 514 0
	# }
	mov A, 231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2414:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 525 0
	# }
	.loc 7 518 0
	#   if (inst->src.type == REG) {
	.loc 7 523 0
	#   }
	.loc 7 519 0
	#     reg = inst->src.reg;
	.loc 7 514 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2415, A, 0
	.loc 7 520 0
	#   } else {
	.loc 7 514 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L2416
	.L2415:
	.loc 7 523 0
	#   }
	.loc 7 522 0
	#     emit_arm_mov_imm(reg, inst->src.imm);
	mov A, 6
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 523 0
	#   }
	.loc 7 514 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 518 0
	#   if (inst->src.type == REG) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm
	.L2417:
	mov A, B
	add SP, 2
	.L2416:
	.loc 7 525 0
	# }
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 518 0
	#   if (inst->src.type == REG) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 525 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 525 0
	# }
	.loc 7 514 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 525 0
	# }
	mov A, 225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2418:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_setcc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 531 0
	# }
	.loc 7 529 0
	#   emit_arm_mov_imm8(inst->dst.reg, 0, Shl0);
	.loc 7 525 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_cmp
	.L2419:
	mov A, B
	add SP, 1
	.loc 7 530 0
	#   emit_4le(op, 0xa0, ARMREG[inst->dst.reg] * 16, 0x01);
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 530 0
	#   emit_4le(op, 0xa0, ARMREG[inst->dst.reg] * 16, 0x01);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 525 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2420:
	mov A, B
	add SP, 3
	.loc 7 531 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 531 0
	# }
	.loc 7 525 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 531 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2421:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 525 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2422:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_arm_jcc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 548 0
	#   }
	.loc 7 536 0
	#   }
	.loc 7 535 0
	#     emit_arm_cmp(inst);
	.loc 7 531 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2423, A, 0
	.loc 7 536 0
	#   }
	.loc 7 531 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_cmp
	.L2424:
	mov A, B
	add SP, 1
	.L2423:
	.loc 7 548 0
	#   }
	.loc 7 539 0
	#     emit_arm_mem(MEM_LOAD, ARM_PC, RODATA, inst->jmp.reg);
	.loc 7 531 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2425, A, 0
	.loc 7 540 0
	#   } else {
	.loc 7 531 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 540 0
	#   } else {
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 505 0
	# }
	mov A, 144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mem
	.L2426:
	mov A, B
	add SP, 4
	jmp .L2427
	.L2425:
	.loc 7 548 0
	#   }
	.loc 7 542 0
	#     emit_1(v % 256);
	mov A, 0
	mov B, SP
	.loc 7 531 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 542 0
	#     emit_1(v % 256);
	.loc 7 531 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 542 0
	#     emit_1(v % 256);
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2428:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cnt
	.L2429:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2430:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 543 0
	#     v /= 256;
	.loc 7 542 0
	#     emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 543 0
	#     v /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2431:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2432:
	mov A, B
	add SP, 1
	.loc 7 544 0
	#     emit_1(v % 256);
	.loc 7 542 0
	#     emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 544 0
	#     emit_1(v % 256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2433:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 545 0
	#     v /= 256;
	.loc 7 542 0
	#     emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 545 0
	#     v /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2434:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2435:
	mov A, B
	add SP, 1
	.loc 7 546 0
	#     emit_1(v % 256);
	.loc 7 542 0
	#     emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 546 0
	#     emit_1(v % 256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2436:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 547 0
	#     emit_1(op);
	.loc 7 542 0
	#     emit_1(v % 256);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 547 0
	#     emit_1(op);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2437:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2438:
	mov A, B
	add SP, 1
	.loc 7 548 0
	#   }
	.loc 7 531 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L2439:
	mov A, B
	add SP, 1
	.L2427:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_state_arm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 590 0
	# }
	.loc 7 553 0
	#   emit_arm_mov_imm8(R1, 4, Shl24);
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 553 0
	#   emit_arm_mov_imm8(R1, 4, Shl24);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2440:
	mov A, B
	add SP, 3
	.loc 7 554 0
	#   emit_arm_mov_imm8(R2, 3, Shl0);  // PROT_READ | PROT_WRITE
	.loc 7 437 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 554 0
	#   emit_arm_mov_imm8(R2, 3, Shl0);  // PROT_READ | PROT_WRITE
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2441:
	mov A, B
	add SP, 3
	.loc 7 555 0
	#   emit_arm_mov_imm8(R3, 0x22, Shl0);  // MAP_PRIVATE | MAP_ANONYMOUS
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 555 0
	#   emit_arm_mov_imm8(R3, 0x22, Shl0);  // MAP_PRIVATE | MAP_ANONYMOUS
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2442:
	mov A, B
	add SP, 3
	.loc 7 556 0
	#   emit_arm_mvn_imm8(R4, 0, Shl0);  // 0xffffffff
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 556 0
	#   emit_arm_mvn_imm8(R4, 0, Shl0);  // 0xffffffff
	mov A, 34
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2443:
	mov A, B
	add SP, 3
	.loc 7 557 0
	#   emit_arm_mov_imm8(R5, 0, Shl0);
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 557 0
	#   emit_arm_mov_imm8(R5, 0, Shl0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mvn_imm8
	.L2444:
	mov A, B
	add SP, 3
	.loc 7 558 0
	#   emit_arm_mov_imm8(R7, 192, Shl0);  // mmap2
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 558 0
	#   emit_arm_mov_imm8(R7, 192, Shl0);  // mmap2
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2445:
	mov A, B
	add SP, 3
	.loc 7 559 0
	#   emit_svc();
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 559 0
	#   emit_svc();
	mov A, 192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2446:
	mov A, B
	add SP, 3
	.loc 7 560 0
	# 
	mov A, .L2447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_svc
	.L2447:
	mov A, B
	.loc 7 562 0
	# 
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_reg
	.L2448:
	mov A, B
	add SP, 2
	.loc 7 564 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 575 0
	#   }
	.loc 7 565 0
	#     if (!data->v)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 575 0
	#   }
	.L133:
	.loc 7 548 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	jeq .L2449, A, 0
	jmp .L2450
	.L2449:
	.loc 7 575 0
	#   }
	jmp .L135
	.L2450:
	.loc 7 566 0
	#       continue;
	.loc 7 548 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	eq A, 0
	jeq .L2451, A, 0
	.loc 7 566 0
	#       continue;
	jmp .L134
	.L2451:
	.loc 7 568 0
	#     if (d >= 4096) {
	mov A, 0
	mov B, SP
	.loc 7 565 0
	#     if (!data->v)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 564 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 568 0
	#     if (d >= 4096) {
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2452
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2452:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 571 0
	#     }
	.loc 7 569 0
	#       emit_arm_add_imm(R0, d);
	mov A, 4096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 568 0
	#     if (d >= 4096) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L2453, A, 0
	.loc 7 571 0
	#     }
	.loc 7 570 0
	#       d = 0;
	.loc 7 568 0
	#     if (d >= 4096) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 570 0
	#       d = 0;
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_add_imm
	.L2454:
	mov A, B
	add SP, 2
	.loc 7 571 0
	#     }
	mov A, 0
	mov B, BP
	add B, 16777213
	store A, B
	.L2453:
	.loc 7 573 0
	#     emit_4le(0xe5, 0xa0, 0x10 + d / 256, d % 256);
	.loc 7 548 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 573 0
	#     emit_4le(0xe5, 0xa0, 0x10 + d / 256, d % 256);
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2455
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm
	.L2455:
	mov A, B
	add SP, 2
	.loc 7 574 0
	#     prev = mp;
	.loc 7 568 0
	#     if (d >= 4096) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 574 0
	#     prev = mp;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2456
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2456:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 568 0
	#     if (d >= 4096) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 574 0
	#     prev = mp;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2457:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2458:
	mov A, B
	add SP, 4
	.loc 7 575 0
	#   }
	.loc 7 565 0
	#     if (!data->v)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 575 0
	#   }
	.L134:
	.loc 7 565 0
	#     if (!data->v)
	.loc 7 548 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 565 0
	#     if (!data->v)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 575 0
	#   }
	jmp .L133
	.L135:
	.loc 7 578 0
	#   rodata_addr /= 256;
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 578 0
	#   rodata_addr /= 256;
	.loc 7 548 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 578 0
	#   rodata_addr /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2459
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2459:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2460
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2460:
	mov A, B
	add SP, 3
	.loc 7 579 0
	#   emit_arm_add_imm8(RODATA, rodata_addr % 256, Shl8);
	.loc 7 548 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 579 0
	#   emit_arm_add_imm8(RODATA, rodata_addr % 256, Shl8);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2461
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2461:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 580 0
	#   rodata_addr /= 256;
	.loc 7 437 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 580 0
	#   rodata_addr /= 256;
	.loc 7 548 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 580 0
	#   rodata_addr /= 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2462:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_add_imm8
	.L2463:
	mov A, B
	add SP, 3
	.loc 7 581 0
	#   emit_arm_add_imm8(RODATA, rodata_addr % 256, Shl16);
	.loc 7 548 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 581 0
	#   emit_arm_add_imm8(RODATA, rodata_addr % 256, Shl16);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2464
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2464:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 582 0
	#   emit_arm_mvn_imm8(FFFFFF, 0xff, Shl24);
	.loc 7 437 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 582 0
	#   emit_arm_mvn_imm8(FFFFFF, 0xff, Shl24);
	.loc 7 548 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 582 0
	#   emit_arm_mvn_imm8(FFFFFF, 0xff, Shl24);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2465
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2465:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2466
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_add_imm8
	.L2466:
	mov A, B
	add SP, 3
	.loc 7 583 0
	# 
	.loc 7 437 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 583 0
	# 
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2467
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mvn_imm8
	.L2467:
	mov A, B
	add SP, 3
	.loc 7 585 0
	#   emit_arm_mov_imm8(B, 0, Shl0);
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 585 0
	#   emit_arm_mov_imm8(B, 0, Shl0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2468
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2468:
	mov A, B
	add SP, 3
	.loc 7 586 0
	#   emit_arm_mov_imm8(C, 0, Shl0);
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 586 0
	#   emit_arm_mov_imm8(C, 0, Shl0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2469:
	mov A, B
	add SP, 3
	.loc 7 587 0
	#   emit_arm_mov_imm8(D, 0, Shl0);
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 587 0
	#   emit_arm_mov_imm8(D, 0, Shl0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2470:
	mov A, B
	add SP, 3
	.loc 7 588 0
	#   emit_arm_mov_imm8(BP, 0, Shl0);
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 588 0
	#   emit_arm_mov_imm8(BP, 0, Shl0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2471:
	mov A, B
	add SP, 3
	.loc 7 589 0
	#   emit_arm_mov_imm8(SP, 0, Shl0);
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 589 0
	#   emit_arm_mov_imm8(SP, 0, Shl0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2472
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2472:
	mov A, B
	add SP, 3
	.loc 7 590 0
	# }
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2473:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
arm_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 722 0
	#     error("oops");
	.loc 7 594 0
	# 
	.loc 7 722 0
	#     error("oops");
	.loc 7 596 0
	#   case MOV:
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 722 0
	#     error("oops");
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2474, A, 0
	jmp .L137
	.L2474:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2475, A, 0
	jmp .L138
	.L2475:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2476, A, 0
	jmp .L139
	.L2476:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2477, A, 0
	jmp .L140
	.L2477:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2478, A, 0
	jmp .L141
	.L2478:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2479, A, 0
	jmp .L142
	.L2479:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2480, A, 0
	jmp .L143
	.L2480:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2481, A, 0
	jmp .L144
	.L2481:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2482, A, 0
	jmp .L145
	.L2482:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2483, A, 0
	jmp .L146
	.L2483:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2484, A, 0
	jmp .L147
	.L2484:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2485, A, 0
	jmp .L148
	.L2485:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2486, A, 0
	jmp .L149
	.L2486:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2487, A, 0
	jmp .L150
	.L2487:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2488, A, 0
	jmp .L151
	.L2488:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2489, A, 0
	jmp .L152
	.L2489:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2490, A, 0
	jmp .L153
	.L2490:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2491, A, 0
	jmp .L154
	.L2491:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2492, A, 0
	jmp .L155
	.L2492:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2493, A, 0
	jmp .L156
	.L2493:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2494, A, 0
	jmp .L157
	.L2494:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2495, A, 0
	jmp .L158
	.L2495:
	jmp .L159
	.loc 7 601 0
	#     }
	.loc 7 597 0
	#     if (inst->src.type == REG) {
	.L137:
	.loc 7 601 0
	#     }
	.loc 7 597 0
	#     if (inst->src.type == REG) {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2496, A, 0
	.loc 7 599 0
	#     } else {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 599 0
	#     } else {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_reg
	.L2497:
	mov A, B
	add SP, 2
	jmp .L2498
	.L2496:
	.loc 7 601 0
	#     }
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 601 0
	#     }
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2499
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm
	.L2499:
	mov A, B
	add SP, 2
	.L2498:
	.loc 7 603 0
	# 
	jmp .L136
	.loc 7 609 0
	#     }
	.loc 7 605 0
	#     if (inst->src.type == REG) {
	.L138:
	.loc 7 609 0
	#     }
	.loc 7 605 0
	#     if (inst->src.type == REG) {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2500, A, 0
	.loc 7 607 0
	#     } else {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 607 0
	#     } else {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 427 0
	# }
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reg2op
	.L2501:
	mov A, B
	add SP, 3
	jmp .L2502
	.L2500:
	.loc 7 609 0
	#     }
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 609 0
	#     }
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2503
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_add_imm
	.L2503:
	mov A, B
	add SP, 2
	.L2502:
	.loc 7 611 0
	#     break;
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 427 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reg2op
	.L2504:
	mov A, B
	add SP, 3
	.loc 7 612 0
	# 
	jmp .L136
	.loc 7 618 0
	#     }
	.loc 7 614 0
	#     if (inst->src.type == REG) {
	.L139:
	.loc 7 618 0
	#     }
	.loc 7 614 0
	#     if (inst->src.type == REG) {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2505, A, 0
	.loc 7 616 0
	#     } else {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 616 0
	#     } else {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 427 0
	# }
	mov A, 64
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reg2op
	.L2506:
	mov A, B
	add SP, 3
	jmp .L2507
	.L2505:
	.loc 7 618 0
	#     }
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 618 0
	#     }
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_sub_imm
	.L2508:
	mov A, B
	add SP, 2
	.L2507:
	.loc 7 620 0
	#     break;
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 427 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reg2op
	.L2509:
	mov A, B
	add SP, 3
	.loc 7 621 0
	# 
	jmp .L136
	.loc 7 629 0
	#     }
	.loc 7 623 0
	#   case STORE:
	.L140:
	.loc 7 629 0
	#     }
	.loc 7 623 0
	#   case STORE:
	.L141:
	.loc 7 629 0
	#     }
	.loc 7 623 0
	#   case STORE:
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2510, A, 0
	.loc 7 626 0
	#     } else {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L2511
	.L2510:
	.loc 7 629 0
	#     }
	.loc 7 628 0
	#       reg = R0;
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 628 0
	#       reg = R0;
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm
	.L2512:
	mov A, B
	add SP, 2
	.loc 7 629 0
	#     }
	mov A, 6
	mov B, BP
	add B, 16777215
	store A, B
	.L2511:
	.loc 7 631 0
	# 		 inst->dst.reg, ARM_MEM, reg);
	.loc 7 594 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 631 0
	# 		 inst->dst.reg, ARM_MEM, reg);
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 631 0
	# 		 inst->dst.reg, ARM_MEM, reg);
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2513, A, 0
	.loc 7 505 0
	# }
	mov A, 144
	jmp .L2514
	.L2513:
	mov A, 128
	.L2514:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mem
	.L2515:
	mov A, B
	add SP, 4
	.loc 7 633 0
	# 
	jmp .L136
	.loc 7 640 0
	#     }
	.loc 7 635 0
	#     if (inst->src.type == REG) {
	.L142:
	.loc 7 640 0
	#     }
	.loc 7 635 0
	#     if (inst->src.type == REG) {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2516, A, 0
	.loc 7 637 0
	#     } else {
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L2517
	.L2516:
	.loc 7 640 0
	#     }
	.loc 7 639 0
	#       emit_arm_mov_imm8(reg, inst->src.imm, Shl0);
	mov A, 6
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 640 0
	#     }
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 640 0
	#     }
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 594 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2518
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2518:
	mov A, B
	add SP, 3
	.L2517:
	.loc 7 642 0
	#     emit_arm_mov_imm8(R0, 1, Shl0);  // stdout
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 594 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 642 0
	#     emit_arm_mov_imm8(R0, 1, Shl0);  // stdout
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2519:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2520
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2520:
	mov A, B
	add SP, 4
	.loc 7 643 0
	#     emit_arm_mov_reg(R1, ARM_SP);
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 643 0
	#     emit_arm_mov_reg(R1, ARM_SP);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2521:
	mov A, B
	add SP, 3
	.loc 7 644 0
	#     emit_arm_mov_imm8(R2, 1, Shl0);
	mov A, 13
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_reg
	.L2522:
	mov A, B
	add SP, 2
	.loc 7 645 0
	#     emit_arm_mov_imm8(R7, 4, Shl0);  // write
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 645 0
	#     emit_arm_mov_imm8(R7, 4, Shl0);  // write
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2523:
	mov A, B
	add SP, 3
	.loc 7 646 0
	#     emit_svc();
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 646 0
	#     emit_svc();
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2524:
	mov A, B
	add SP, 3
	.loc 7 647 0
	#     emit_4le(0xe4, 0x9d, ARMREG[R0] * 16, 0x04);  // pop R0
	mov A, .L2525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_svc
	.L2525:
	mov A, B
	.loc 7 648 0
	#     break;
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 648 0
	#     break;
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2526:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2527:
	mov A, B
	add SP, 4
	.loc 7 649 0
	# 
	jmp .L136
	.loc 7 651 0
	#     emit_arm_mov_imm8(R0, 0, Shl0);  // stdin
	.L143:
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 651 0
	#     emit_arm_mov_imm8(R0, 0, Shl0);  // stdin
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2528:
	mov A, B
	add SP, 3
	.loc 7 653 0
	#     emit_arm_mov_reg(R1, ARM_SP);
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 653 0
	#     emit_arm_mov_reg(R1, ARM_SP);
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2529:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2530:
	mov A, B
	add SP, 4
	.loc 7 654 0
	#     emit_arm_mov_imm8(R2, 1, Shl0);
	mov A, 13
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_reg
	.L2531:
	mov A, B
	add SP, 2
	.loc 7 655 0
	#     emit_arm_mov_imm8(R7, 3, Shl0);  // read
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 655 0
	#     emit_arm_mov_imm8(R7, 3, Shl0);  // read
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2532:
	mov A, B
	add SP, 3
	.loc 7 656 0
	#     emit_svc();
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 656 0
	#     emit_svc();
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2533:
	mov A, B
	add SP, 3
	.loc 7 657 0
	#     emit_4le(0xe4, 0x9d, ARMREG[inst->dst.reg] * 16, 0x04);  // pop dst
	mov A, .L2534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_svc
	.L2534:
	mov A, B
	.loc 7 658 0
	#     break;
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 376 0
	# }
	mov A, ARMREG
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 658 0
	#     break;
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 658 0
	#     break;
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2535:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4le
	.L2536:
	mov A, B
	add SP, 4
	.loc 7 659 0
	# 
	jmp .L136
	.loc 7 661 0
	#     emit_arm_mov_imm8(R0, 0, Shl0);
	.L144:
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 661 0
	#     emit_arm_mov_imm8(R0, 0, Shl0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2537:
	mov A, B
	add SP, 3
	.loc 7 663 0
	#     emit_svc();
	.loc 7 437 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 663 0
	#     emit_svc();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_mov_imm8
	.L2538:
	mov A, B
	add SP, 3
	.loc 7 664 0
	#     break;
	mov A, .L2539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_svc
	.L2539:
	mov A, B
	.loc 7 665 0
	# 
	jmp .L136
	.loc 7 667 0
	#     break;
	.L145:
	jmp .L136
	.loc 7 670 0
	#     emit_arm_setcc(inst, 0x03);
	.L146:
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_setcc
	.L2540:
	mov A, B
	add SP, 2
	.loc 7 672 0
	# 
	jmp .L136
	.loc 7 674 0
	#     emit_arm_setcc(inst, 0x13);
	.L147:
	mov A, 19
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_setcc
	.L2541:
	mov A, B
	add SP, 2
	.loc 7 676 0
	# 
	jmp .L136
	.loc 7 678 0
	#     emit_arm_setcc(inst, 0xb3);
	.L148:
	mov A, 179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_setcc
	.L2542:
	mov A, B
	add SP, 2
	.loc 7 680 0
	# 
	jmp .L136
	.loc 7 682 0
	#     emit_arm_setcc(inst, 0xc3);
	.L149:
	mov A, 195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_setcc
	.L2543:
	mov A, B
	add SP, 2
	.loc 7 684 0
	# 
	jmp .L136
	.loc 7 686 0
	#     emit_arm_setcc(inst, 0xd3);
	.L150:
	mov A, 211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_setcc
	.L2544:
	mov A, B
	add SP, 2
	.loc 7 688 0
	# 
	jmp .L136
	.loc 7 690 0
	#     emit_arm_setcc(inst, 0xa3);
	.L151:
	mov A, 163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_setcc
	.L2545:
	mov A, B
	add SP, 2
	.loc 7 692 0
	# 
	jmp .L136
	.loc 7 694 0
	#     emit_arm_jcc(inst, 0x0a, pc2addr);
	.L152:
	.loc 7 590 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 694 0
	#     emit_arm_jcc(inst, 0x0a, pc2addr);
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_jcc
	.L2546:
	mov A, B
	add SP, 3
	.loc 7 696 0
	# 
	jmp .L136
	.loc 7 698 0
	#     emit_arm_jcc(inst, 0x1a, pc2addr);
	.L153:
	.loc 7 590 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 698 0
	#     emit_arm_jcc(inst, 0x1a, pc2addr);
	mov A, 26
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_jcc
	.L2547:
	mov A, B
	add SP, 3
	.loc 7 700 0
	# 
	jmp .L136
	.loc 7 702 0
	#     emit_arm_jcc(inst, 0xba, pc2addr);
	.L154:
	.loc 7 590 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 702 0
	#     emit_arm_jcc(inst, 0xba, pc2addr);
	mov A, 186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_jcc
	.L2548:
	mov A, B
	add SP, 3
	.loc 7 704 0
	# 
	jmp .L136
	.loc 7 706 0
	#     emit_arm_jcc(inst, 0xca, pc2addr);
	.L155:
	.loc 7 590 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 706 0
	#     emit_arm_jcc(inst, 0xca, pc2addr);
	mov A, 202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_jcc
	.L2549:
	mov A, B
	add SP, 3
	.loc 7 708 0
	# 
	jmp .L136
	.loc 7 710 0
	#     emit_arm_jcc(inst, 0xda, pc2addr);
	.L156:
	.loc 7 590 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 710 0
	#     emit_arm_jcc(inst, 0xda, pc2addr);
	mov A, 218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_jcc
	.L2550:
	mov A, B
	add SP, 3
	.loc 7 712 0
	# 
	jmp .L136
	.loc 7 714 0
	#     emit_arm_jcc(inst, 0xaa, pc2addr);
	.L157:
	.loc 7 590 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 714 0
	#     emit_arm_jcc(inst, 0xaa, pc2addr);
	mov A, 170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_jcc
	.L2551:
	mov A, B
	add SP, 3
	.loc 7 716 0
	# 
	jmp .L136
	.loc 7 718 0
	#     emit_arm_jcc(inst, 0xea, pc2addr);
	.L158:
	.loc 7 590 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 718 0
	#     emit_arm_jcc(inst, 0xea, pc2addr);
	mov A, 234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 590 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_arm_jcc
	.L2552:
	mov A, B
	add SP, 3
	.loc 7 720 0
	# 
	jmp .L136
	.loc 7 722 0
	#     error("oops");
	.L159:
.data
	.L2553:
	.string "oops"
.text
	mov A, .L2553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L2554:
	mov A, B
	add SP, 1
	.L136:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_arm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 8
	.loc 7 759 0
	#   }
	.loc 7 728 0
	#   init_state_arm(module->data, 0);
	mov A, .L2555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reset
	.L2555:
	mov A, B
	.loc 7 729 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 722 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_arm
	.L2556:
	mov A, B
	add SP, 2
	.loc 7 731 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 733 0
	#   }
	.loc 7 732 0
	#     pc_cnt++;
	mov A, 0
	mov B, SP
	.loc 7 722 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 733 0
	#   }
	.L160:
	.loc 7 732 0
	#     pc_cnt++;
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L2557, A, 0
	jmp .L2558
	.L2557:
	.loc 7 733 0
	#   }
	jmp .L162
	.L2558:
	.loc 7 731 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 733 0
	#   }
	.L161:
	.loc 7 732 0
	#     pc_cnt++;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 733 0
	#   }
	jmp .L160
	.L162:
	.loc 7 736 0
	#   int prev_pc = -1;
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 731 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L2559:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 737 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 743 0
	#   }
	.loc 7 738 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 722 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 743 0
	#   }
	.L163:
	.loc 7 738 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L2560, A, 0
	jmp .L2561
	.L2560:
	.loc 7 743 0
	#   }
	jmp .L165
	.L2561:
	.loc 7 740 0
	#     }
	.loc 7 739 0
	#       pc2addr[inst->pc] = emit_cnt();
	.loc 7 737 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 739 0
	#       pc2addr[inst->pc] = emit_cnt();
	.loc 7 738 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2562, A, 0
	.loc 7 740 0
	#     }
	mov A, .L2563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cnt
	.L2563:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 736 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 740 0
	#     }
	.loc 7 738 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L2562:
	.loc 7 742 0
	#     arm_emit_inst(inst, pc2addr);
	.loc 7 738 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 743 0
	#   }
	.loc 7 736 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 738 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp arm_emit_inst
	.L2564:
	mov A, B
	add SP, 2
	.loc 7 743 0
	#   }
	.L164:
	.loc 7 738 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 743 0
	#   }
	jmp .L163
	.L165:
	.loc 7 746 0
	# 
	mov A, 0
	mov B, SP
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 746 0
	# 
	mov A, .L2565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cnt
	.L2565:
	mov A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 748 0
	# 
	mov A, .L2566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cnt
	.L2566:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 731 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 748 0
	# 
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2567:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 40
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_elf_header
	.L2568:
	mov A, B
	add SP, 2
	.loc 7 750 0
	#   emit_start();
	mov A, .L2569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reset
	.L2569:
	mov A, B
	.loc 7 751 0
	#   init_state_arm(module->data, rodata_addr);
	mov A, .L2570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_start
	.L2570:
	mov A, B
	.loc 7 752 0
	# 
	.loc 7 746 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 752 0
	# 
	.loc 7 722 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_arm
	.L2571:
	mov A, B
	add SP, 2
	.loc 7 755 0
	#   }
	.loc 7 754 0
	#     arm_emit_inst(inst, pc2addr);
	mov A, 0
	mov B, SP
	.loc 7 722 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 755 0
	#   }
	.L166:
	.loc 7 754 0
	#     arm_emit_inst(inst, pc2addr);
	mov B, BP
	add B, 16777209
	load A, B
	jeq .L2572, A, 0
	jmp .L2573
	.L2572:
	.loc 7 755 0
	#   }
	jmp .L168
	.L2573:
	.loc 7 736 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 754 0
	#     arm_emit_inst(inst, pc2addr);
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp arm_emit_inst
	.L2574:
	mov A, B
	add SP, 2
	.loc 7 755 0
	#   }
	.L167:
	.loc 7 754 0
	#     arm_emit_inst(inst, pc2addr);
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 755 0
	#   }
	jmp .L166
	.L168:
	.loc 7 759 0
	#   }
	.loc 7 758 0
	#     emit_le(ELF_TEXT_START + pc2addr[i] + ELF_HEADER_SIZE);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777208
	mov A, 0
	store A, B
	.loc 7 759 0
	#   }
	.L169:
	.loc 7 758 0
	#     emit_le(ELF_TEXT_START + pc2addr[i] + ELF_HEADER_SIZE);
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 731 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2575, A, 0
	jmp .L2576
	.L2575:
	.loc 7 759 0
	#   }
	jmp .L171
	.L2576:
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 759 0
	#   }
	.loc 7 736 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 758 0
	#     emit_le(ELF_TEXT_START + pc2addr[i] + ELF_HEADER_SIZE);
	mov B, BP
	add B, 16777208
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2577
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L2577:
	mov A, B
	add SP, 1
	.loc 7 759 0
	#   }
	.L170:
	.loc 7 758 0
	#     emit_le(ELF_TEXT_START + pc2addr[i] + ELF_HEADER_SIZE);
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777208
	store A, B
	load A, SP
	add SP, 1
	.loc 7 759 0
	#   }
	jmp .L169
	.L171:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
BEF_MEM:
	.long 4782969
	.data
	g_bef:

	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.text
bef_clear_block_line:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 788 0
	# }
	.file 8 "/Users/nullpo/dev/elvm/libc/assert.h"
	.loc 8 12 0
	#     }                                           \
	.L172:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 759 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 297
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L2578, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L2579:
	.string "assertion failed: y < 297\n"
.text
	mov A, .L2579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L2580:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L2578:
	mov A, 0
	jeq .L2581, A, 0
	jmp .L172
	.L2581:
	.L173:
	.loc 7 786 0
	#     g_bef.block[y][i] = ' ';
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L174:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 78
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2582, A, 0
	jmp .L2583
	.L2582:
	jmp .L176
	.L2583:
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 759 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2584:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 786 0
	#     g_bef.block[y][i] = ' ';
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L175:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L174
	.L176:
	.loc 7 788 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 759 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2585:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 788 0
	# }
	mov A, 79
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_block_init:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 803 0
	# }
	.loc 7 794 0
	#     }
	.loc 7 792 0
	#     for (uint i = 0; i <= g_bef.y; i++) {
	mov B, g_bef
	add B, 23920
	load A, B
	jeq .L2586, A, 0
	.loc 7 794 0
	#     }
	.loc 7 793 0
	#       puts(g_bef.block[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 794 0
	#     }
	.L177:
	.loc 7 793 0
	#       puts(g_bef.block[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L2587, A, 0
	jmp .L2588
	.L2587:
	.loc 7 794 0
	#     }
	jmp .L179
	.L2588:
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 793 0
	#       puts(g_bef.block[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2589:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp puts
	.L2590:
	mov A, B
	add SP, 1
	.loc 7 794 0
	#     }
	.L178:
	.loc 7 793 0
	#       puts(g_bef.block[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 794 0
	#     }
	jmp .L177
	.L179:
	.L2586:
	.loc 7 798 0
	#   g_bef.y = 0;
	mov A, 10
	mov B, g_bef
	add B, 23920
	store A, B
	.loc 7 799 0
	#   g_bef.vx = 1;
	mov A, 0
	mov B, g_bef
	add B, 23921
	store A, B
	.loc 7 800 0
	#   g_bef.was_jmp = false;
	mov A, 1
	mov B, g_bef
	add B, 23922
	store A, B
	.loc 7 801 0
	#   bef_clear_block_line(0);
	mov A, 0
	ne A, 0
	ne A, 0
	ne A, 0
	mov B, g_bef
	add B, 23923
	store A, B
	.loc 7 802 0
	#   bef_emit('>');
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_clear_block_line
	.L2591:
	mov A, B
	add SP, 1
	.loc 7 803 0
	# }
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2592:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 814 0
	#   }
	.loc 7 807 0
	#   g_bef.x += g_bef.vx;
	.loc 7 803 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 807 0
	#   g_bef.x += g_bef.vx;
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2593:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23920
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 808 0
	#   if (g_bef.x == 10 || g_bef.x == 78) {
	mov B, g_bef
	add B, 23920
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23922
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, g_bef
	add B, 23920
	store A, B
	.loc 7 814 0
	#   }
	.loc 7 809 0
	#     g_bef.block[g_bef.y][g_bef.x] = 'v';
	mov B, g_bef
	add B, 23920
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L2594, A, 0
	mov B, g_bef
	add B, 23920
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 78
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L2594:
	mov A, B
	jeq .L2595, A, 0
	.loc 7 814 0
	#   }
	.loc 7 810 0
	#     g_bef.y++;
	mov A, 118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2596:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23920
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 811 0
	#     g_bef.vx *= -1;
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, g_bef
	add B, 23921
	store A, B
	load A, SP
	add SP, 1
	.loc 7 812 0
	#     bef_clear_block_line(g_bef.y);
	mov B, g_bef
	add B, 23922
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2597:
	mov A, B
	add SP, 2
	mov B, g_bef
	add B, 23922
	store A, B
	.loc 7 813 0
	#     bef_emit(g_bef.vx == 1 ? '>' : '<');
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_clear_block_line
	.L2598:
	mov A, B
	add SP, 1
	.loc 7 814 0
	#   }
	mov B, g_bef
	add B, 23922
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2599, A, 0
	mov A, 62
	jmp .L2600
	.L2599:
	mov A, 60
	.L2600:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2601:
	mov A, B
	add SP, 1
	.L2595:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_s:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 819 0
	#     bef_emit(*s);
	.L180:
	.loc 7 814 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L2602, A, 0
	jmp .L2603
	.L2602:
	.loc 7 819 0
	#     bef_emit(*s);
	jmp .L182
	.L2603:
	.loc 7 814 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2604:
	mov A, B
	add SP, 1
	.loc 7 819 0
	#     bef_emit(*s);
	.L181:
	.loc 7 814 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 7 819 0
	#     bef_emit(*s);
	jmp .L180
	.L182:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_num_base9:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 14
	.loc 7 848 0
	# }
	.loc 7 824 0
	#   char b9[10];
	mov A, 0
	mov B, SP
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 825 0
	#   int b9l = 0;
	.loc 7 826 0
	#   do {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777204
	mov A, 0
	store A, B
	.loc 7 829 0
	#   } while(v);
	.L183:
	.loc 7 828 0
	#     v /= 9;
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 828 0
	#     v /= 9;
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2605:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 825 0
	#   int b9l = 0;
	mov A, BP
	add A, 16777205
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 828 0
	#     v /= 9;
	.loc 7 826 0
	#   do {
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777204
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 829 0
	#   } while(v);
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 829 0
	#   } while(v);
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2606:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 2
	load A, B
	jeq .L2607, A, 0
	.loc 7 829 0
	#   } while(v);
	jmp .L183
	.L2607:
	.L184:
	.loc 7 844 0
	#       }
	.loc 7 831 0
	#     if (i == 0 && b9[b9l - 1] == 1) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777203
	mov A, 0
	store A, B
	.loc 7 844 0
	#       }
	.L185:
	.loc 7 831 0
	#     if (i == 0 && b9[b9l - 1] == 1) {
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 826 0
	#   do {
	mov B, BP
	add B, 16777204
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2608, A, 0
	jmp .L2609
	.L2608:
	.loc 7 844 0
	#       }
	jmp .L187
	.L2609:
	.loc 7 838 0
	#     }
	.loc 7 832 0
	#       *c++ = '9';
	.loc 7 831 0
	#     if (i == 0 && b9[b9l - 1] == 1) {
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 832 0
	#       *c++ = '9';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L2610, A, 0
	.loc 7 825 0
	#   int b9l = 0;
	mov A, BP
	add A, 16777205
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 832 0
	#       *c++ = '9';
	.loc 7 826 0
	#   do {
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 832 0
	#       *c++ = '9';
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L2610:
	mov A, B
	jeq .L2611, A, 0
	.loc 7 835 0
	#     } else if (i != 0) {
	.loc 7 833 0
	#       if (b9l == 1) return 1;
	mov A, 57
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 834 0
	#       i++;
	.loc 7 826 0
	#   do {
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 834 0
	#       i++;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2612, A, 0
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2612:
	.loc 7 835 0
	#     } else if (i != 0) {
	.loc 7 831 0
	#     if (i == 0 && b9[b9l - 1] == 1) {
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777203
	store A, B
	load A, SP
	add SP, 1
	jmp .L2613
	.L2611:
	.loc 7 838 0
	#     }
	.loc 7 835 0
	#     } else if (i != 0) {
	.loc 7 831 0
	#     if (i == 0 && b9[b9l - 1] == 1) {
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 835 0
	#     } else if (i != 0) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2614, A, 0
	.loc 7 838 0
	#     }
	.loc 7 837 0
	#       *c++ = '*';
	mov A, 57
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 838 0
	#     }
	mov A, 42
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L2614:
	.L2613:
	.loc 7 840 0
	#     if (n) {
	mov A, 0
	mov B, SP
	.loc 7 825 0
	#   int b9l = 0;
	mov A, BP
	add A, 16777205
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 840 0
	#     if (n) {
	.loc 7 826 0
	#   do {
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 831 0
	#     if (i == 0 && b9[b9l - 1] == 1) {
	mov B, BP
	add B, 16777203
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 840 0
	#     if (n) {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777202
	store A, B
	.loc 7 844 0
	#       }
	.loc 7 840 0
	#     if (n) {
	mov B, BP
	add B, 16777202
	load A, B
	jeq .L2615, A, 0
	.loc 7 844 0
	#       }
	.loc 7 842 0
	#       if (i != 0) {
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 840 0
	#     if (n) {
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 842 0
	#       if (i != 0) {
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 844 0
	#       }
	.loc 7 843 0
	#         *c++ = '+';
	.loc 7 831 0
	#     if (i == 0 && b9[b9l - 1] == 1) {
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 843 0
	#         *c++ = '+';
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2616, A, 0
	.loc 7 844 0
	#       }
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L2616:
	.L2615:
	.loc 7 844 0
	#       }
	.L186:
	.loc 7 831 0
	#     if (i == 0 && b9[b9l - 1] == 1) {
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777203
	store A, B
	load A, SP
	add SP, 1
	.loc 7 844 0
	#       }
	jmp .L185
	.L187:
	.loc 7 848 0
	# }
	.loc 7 819 0
	#     bef_emit(*s);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 824 0
	#   char b9[10];
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
befnumcache:
	.data 1
	.L2617:
	.string "0"
	.data 0
	.long .L2617
	.data 1
	.L2618:
	.string "1"
	.data 0
	.long .L2618
	.data 1
	.L2619:
	.string "2"
	.data 0
	.long .L2619
	.data 1
	.L2620:
	.string "3"
	.data 0
	.long .L2620
	.data 1
	.L2621:
	.string "4"
	.data 0
	.long .L2621
	.data 1
	.L2622:
	.string "5"
	.data 0
	.long .L2622
	.data 1
	.L2623:
	.string "6"
	.data 0
	.long .L2623
	.data 1
	.L2624:
	.string "7"
	.data 0
	.long .L2624
	.data 1
	.L2625:
	.string "8"
	.data 0
	.long .L2625
	.data 1
	.L2626:
	.string "9"
	.data 0
	.long .L2626
	.data 1
	.L2627:
	.string "19+"
	.data 0
	.long .L2627
	.data 1
	.L2628:
	.string "29+"
	.data 0
	.long .L2628
	.data 1
	.L2629:
	.string "39+"
	.data 0
	.long .L2629
	.data 1
	.L2630:
	.string "49+"
	.data 0
	.long .L2630
	.data 1
	.L2631:
	.string "59+"
	.data 0
	.long .L2631
	.data 1
	.L2632:
	.string "69+"
	.data 0
	.long .L2632
	.data 1
	.L2633:
	.string "79+"
	.data 0
	.long .L2633
	.data 1
	.L2634:
	.string "89+"
	.data 0
	.long .L2634
	.data 1
	.L2635:
	.string "99+"
	.data 0
	.long .L2635
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.text
bef_num_factor_core:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 79
	.loc 7 883 0
	# }
	.loc 7 863 0
	#   int incr = 1 + (v&1); // Skip even numbers for odd numbers
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 36
	store A, B
	.loc 7 864 0
	#   for (uint i = 1 + incr; i*i <= v; i += incr) {
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 848 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 864 0
	#   for (uint i = 1 + incr; i*i <= v; i += incr) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L2636:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 879 0
	#       }
	.loc 7 865 0
	#     if (v % i == 0) {
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 864 0
	#   for (uint i = 1 + incr; i*i <= v; i += incr) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 879 0
	#       }
	.L188:
	.loc 7 865 0
	#     if (v % i == 0) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2637:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 848 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L2638, A, 0
	jmp .L2639
	.L2638:
	.loc 7 879 0
	#       }
	jmp .L190
	.L2639:
	.loc 7 866 0
	#       char ijs[74];
	.loc 7 848 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 865 0
	#     if (v % i == 0) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2640
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2640:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 866 0
	#       char ijs[74];
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2641, A, 0
	.loc 7 879 0
	#       }
	.loc 7 867 0
	#       uint j = v / i;
	.loc 7 868 0
	#       int ijlen = bef_num_digits(i, ijs);
	mov A, 0
	mov B, SP
	.loc 7 848 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 865 0
	#     if (v % i == 0) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2642:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777138
	store A, B
	.loc 7 869 0
	#       if (i == j && i > 9) {
	mov A, 0
	mov B, SP
	.loc 7 867 0
	#       uint j = v / i;
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 865 0
	#     if (v % i == 0) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_num_digits
	.L2643:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777137
	store A, B
	.loc 7 873 0
	#       }
	.loc 7 870 0
	#         ijs[ijlen++] = ':';
	.loc 7 865 0
	#     if (v % i == 0) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 868 0
	#       int ijlen = bef_num_digits(i, ijs);
	mov B, BP
	add B, 16777138
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L2644, A, 0
	.loc 7 870 0
	#         ijs[ijlen++] = ':';
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 865 0
	#     if (v % i == 0) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L2644:
	mov A, B
	jeq .L2645, A, 0
	.loc 7 871 0
	#       } else {
	mov A, 58
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 867 0
	#       uint j = v / i;
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 871 0
	#       } else {
	.loc 7 869 0
	#       if (i == j && i > 9) {
	mov B, BP
	add B, 16777137
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777137
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L2646
	.L2645:
	.loc 7 873 0
	#       }
	.loc 7 869 0
	#       if (i == j && i > 9) {
	mov B, BP
	add B, 16777137
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 873 0
	#       }
	.loc 7 867 0
	#       uint j = v / i;
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 869 0
	#       if (i == j && i > 9) {
	mov B, BP
	add B, 16777137
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 868 0
	#       int ijlen = bef_num_digits(i, ijs);
	mov B, BP
	add B, 16777138
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_num_digits
	.L2647:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777137
	store A, B
	.L2646:
	.loc 7 879 0
	#       }
	.loc 7 875 0
	#         shortlen = ijlen;
	.loc 7 869 0
	#       if (i == j && i > 9) {
	mov B, BP
	add B, 16777137
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 863 0
	#   int incr = 1 + (v&1); // Skip even numbers for odd numbers
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2648, A, 0
	.loc 7 879 0
	#       }
	.loc 7 876 0
	#         memcpy(c, ijs, ijlen);
	.loc 7 869 0
	#       if (i == j && i > 9) {
	mov B, BP
	add B, 16777137
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 877 0
	#         c[ijlen] = '*';
	.loc 7 869 0
	#       if (i == j && i > 9) {
	mov B, BP
	add B, 16777137
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 877 0
	#         c[ijlen] = '*';
	.loc 7 867 0
	#       uint j = v / i;
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 848 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L2649:
	mov A, B
	add SP, 3
	.loc 7 878 0
	#         if (ijlen == 2) return 3;
	mov A, 42
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 848 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 869 0
	#       if (i == j && i > 9) {
	mov B, BP
	add B, 16777137
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 879 0
	#       }
	.loc 7 869 0
	#       if (i == j && i > 9) {
	mov B, BP
	add B, 16777137
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 879 0
	#       }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2650, A, 0
	mov A, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2650:
	.L2648:
	.L2641:
	.L189:
	.loc 7 865 0
	#     if (v % i == 0) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 864 0
	#   for (uint i = 1 + incr; i*i <= v; i += incr) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 879 0
	#       }
	jmp .L188
	.L190:
	.loc 7 883 0
	# }
	.loc 7 863 0
	#   int incr = 1 + (v&1); // Skip even numbers for odd numbers
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 883 0
	# }
	mov A, 36
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2651, A, 0
	.loc 7 863 0
	#   int incr = 1 + (v&1); // Skip even numbers for odd numbers
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 883 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	jmp .L2652
	.L2651:
	mov A, 99
	.L2652:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_num_factor:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 40
	.loc 7 902 0
	# }
	.loc 7 887 0
	#   for (int off = 0; off < 19; off++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 99
	store A, B
	.loc 7 899 0
	#     }
	.loc 7 888 0
	#     char cs[37];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 899 0
	#     }
	.L191:
	.loc 7 888 0
	#     char cs[37];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2653, A, 0
	jmp .L2654
	.L2653:
	.loc 7 899 0
	#     }
	jmp .L193
	.L2654:
	.loc 7 889 0
	#     int len = bef_num_factor_core(v + off - 9, cs);
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	mov A, 0
	mov B, SP
	.loc 7 889 0
	#     int len = bef_num_factor_core(v + off - 9, cs);
	mov A, BP
	add A, 16777177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	.loc 7 883 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	.loc 7 888 0
	#     char cs[37];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_num_factor_core
	.L2655:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777176
	store A, B
	.loc 7 899 0
	#     }
	.loc 7 891 0
	#       if (off != 9) {
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	mov B, BP
	add B, 16777176
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 891 0
	#       if (off != 9) {
	.loc 7 888 0
	#     char cs[37];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 891 0
	#       if (off != 9) {
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2656, A, 0
	.loc 7 887 0
	#   for (int off = 0; off < 19; off++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 891 0
	#       if (off != 9) {
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L2657
	.L2656:
	.loc 7 887 0
	#   for (int off = 0; off < 19; off++) {
	mov B, BP
	add B, 16777215
	load A, B
	.L2657:
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2658, A, 0
	.loc 7 899 0
	#     }
	.loc 7 895 0
	#       }
	.loc 7 892 0
	#         cs[len] = off < 9 ? '9' - off : '0' + (off - 9);
	.loc 7 888 0
	#     char cs[37];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 892 0
	#         cs[len] = off < 9 ? '9' - off : '0' + (off - 9);
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2659, A, 0
	.loc 7 895 0
	#       }
	.loc 7 893 0
	#         cs[len+1] = off < 9 ? '+' : '-';
	.loc 7 888 0
	#     char cs[37];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 893 0
	#         cs[len+1] = off < 9 ? '+' : '-';
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2660, A, 0
	mov A, 57
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 888 0
	#     char cs[37];
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L2661
	.L2660:
	.loc 7 893 0
	#         cs[len+1] = off < 9 ? '+' : '-';
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 888 0
	#     char cs[37];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 893 0
	#         cs[len+1] = off < 9 ? '+' : '-';
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	.L2661:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 889 0
	#     int len = bef_num_factor_core(v + off - 9, cs);
	mov A, BP
	add A, 16777177
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	mov B, BP
	add B, 16777176
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 894 0
	#         len += 2;
	.loc 7 888 0
	#     char cs[37];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 894 0
	#         len += 2;
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2662, A, 0
	mov A, 43
	jmp .L2663
	.L2662:
	mov A, 45
	.L2663:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 889 0
	#     int len = bef_num_factor_core(v + off - 9, cs);
	mov A, BP
	add A, 16777177
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 894 0
	#         len += 2;
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	mov B, BP
	add B, 16777176
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 894 0
	#         len += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 895 0
	#       }
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	mov B, BP
	add B, 16777176
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 895 0
	#       }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777176
	store A, B
	.L2659:
	.loc 7 897 0
	#       memcpy(c, cs, len);
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	mov B, BP
	add B, 16777176
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 898 0
	#       if (len == 3) return 3;
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	mov B, BP
	add B, 16777176
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 898 0
	#       if (len == 3) return 3;
	.loc 7 889 0
	#     int len = bef_num_factor_core(v + off - 9, cs);
	mov A, BP
	add A, 16777177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 883 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L2664:
	mov A, B
	add SP, 3
	.loc 7 899 0
	#     }
	.loc 7 890 0
	#     if (len < (off != 9 ? shortlen-2 : shortlen)) {
	mov B, BP
	add B, 16777176
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 899 0
	#     }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2665, A, 0
	mov A, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2665:
	.L2658:
	.L192:
	.loc 7 888 0
	#     char cs[37];
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 899 0
	#     }
	jmp .L191
	.L193:
	.loc 7 902 0
	# }
	.loc 7 887 0
	#   for (int off = 0; off < 19; off++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_num_digits:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 40
	.loc 7 934 0
	# }
	.loc 7 913 0
	#   }
	.loc 7 906 0
	#     char *code = befnumcache[v];
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 906 0
	#     char *code = befnumcache[v];
	mov A, 6562
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2666, A, 0
	.loc 7 910 0
	#     }
	.loc 7 907 0
	#     if (code != NULL) {
	mov A, 0
	mov B, SP
	.loc 7 848 0
	# }
	mov A, befnumcache
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 910 0
	#     }
	.loc 7 908 0
	#       strcpy(c, code);
	.loc 7 907 0
	#     if (code != NULL) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 908 0
	#       strcpy(c, code);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2667, A, 0
	.loc 7 910 0
	#     }
	.loc 7 909 0
	#       return strlen(code);
	.loc 7 907 0
	#     if (code != NULL) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcpy
	.L2668:
	mov A, B
	add SP, 2
	.loc 7 910 0
	#     }
	.loc 7 907 0
	#     if (code != NULL) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strlen
	.L2669:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2667:
	jmp .L2670
	.L2666:
	.loc 7 913 0
	#   }
	.loc 7 910 0
	#     }
	mov A, 59049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2671, A, 0
	.loc 7 913 0
	#   }
	.loc 7 902 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_num_base9
	.L2672:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2671:
	.L2670:
	.loc 7 915 0
	#   if (0 && f9l > 3) {
	mov A, 0
	mov B, SP
	.loc 7 902 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_num_factor
	.L2673:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 926 0
	#     }
	.loc 7 916 0
	#     char b9[37];
	mov A, 0
	mov B, 0
	jeq .L2674, A, 0
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 915 0
	#   if (0 && f9l > 3) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L2674:
	mov A, B
	jeq .L2675, A, 0
	.loc 7 926 0
	#     }
	.loc 7 917 0
	#     int b9l = bef_num_base9(v, b9);
	.loc 7 918 0
	#     if (b9l <= f9l) {
	mov A, 0
	mov B, SP
	.loc 7 917 0
	#     int b9l = bef_num_base9(v, b9);
	mov A, BP
	add A, 16777177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_num_base9
	.L2676:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777176
	store A, B
	.loc 7 926 0
	#     }
	.loc 7 919 0
	#       memcpy(c, b9, b9l);
	.loc 7 918 0
	#     if (b9l <= f9l) {
	mov B, BP
	add B, 16777176
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 915 0
	#   if (0 && f9l > 3) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L2677, A, 0
	.loc 7 926 0
	#     }
	.loc 7 920 0
	#       if (v < BEFNUMCACHESIZE) {
	.loc 7 918 0
	#     if (b9l <= f9l) {
	mov B, BP
	add B, 16777176
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 920 0
	#       if (v < BEFNUMCACHESIZE) {
	.loc 7 917 0
	#     int b9l = bef_num_base9(v, b9);
	mov A, BP
	add A, 16777177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L2678:
	mov A, B
	add SP, 3
	.loc 7 924 0
	#       }
	.loc 7 921 0
	#         befnumcache[v] = malloc(b9l+1);
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 921 0
	#         befnumcache[v] = malloc(b9l+1);
	mov A, 6562
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2679, A, 0
	.loc 7 924 0
	#       }
	.loc 7 922 0
	#         memcpy(befnumcache[v], b9, b9l);
	.loc 7 918 0
	#     if (b9l <= f9l) {
	mov B, BP
	add B, 16777176
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 922 0
	#         memcpy(befnumcache[v], b9, b9l);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L2680:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 848 0
	# }
	mov A, befnumcache
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 923 0
	#         befnumcache[v][b9l] = 0;
	.loc 7 918 0
	#     if (b9l <= f9l) {
	mov B, BP
	add B, 16777176
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 923 0
	#         befnumcache[v][b9l] = 0;
	.loc 7 917 0
	#     int b9l = bef_num_base9(v, b9);
	mov A, BP
	add A, 16777177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 923 0
	#         befnumcache[v][b9l] = 0;
	.loc 7 848 0
	# }
	mov A, befnumcache
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L2681:
	mov A, B
	add SP, 3
	.loc 7 924 0
	#       }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 848 0
	# }
	mov A, befnumcache
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 918 0
	#     if (b9l <= f9l) {
	mov B, BP
	add B, 16777176
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L2679:
	.loc 7 926 0
	#     }
	.loc 7 918 0
	#     if (b9l <= f9l) {
	mov B, BP
	add B, 16777176
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L2677:
	.L2675:
	.loc 7 932 0
	#   }
	.loc 7 929 0
	#     befnumcache[v] = malloc(f9l+1);
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 929 0
	#     befnumcache[v] = malloc(f9l+1);
	mov A, 6562
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2682, A, 0
	.loc 7 932 0
	#   }
	.loc 7 930 0
	#     memcpy(befnumcache[v], c, f9l);
	.loc 7 915 0
	#   if (0 && f9l > 3) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 930 0
	#     memcpy(befnumcache[v], c, f9l);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L2683:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 848 0
	# }
	mov A, befnumcache
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 931 0
	#     befnumcache[v][f9l] = 0;
	.loc 7 915 0
	#   if (0 && f9l > 3) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 931 0
	#     befnumcache[v][f9l] = 0;
	.loc 7 848 0
	# }
	mov A, befnumcache
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L2684:
	mov A, B
	add SP, 3
	.loc 7 932 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 848 0
	# }
	mov A, befnumcache
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 915 0
	#   if (0 && f9l > 3) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L2682:
	.loc 7 934 0
	# }
	.loc 7 915 0
	#   if (0 && f9l > 3) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_num:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 39
	.loc 7 941 0
	#   }
	.loc 7 938 0
	#   int clen = bef_num_digits(v, c);
	.loc 7 939 0
	#   for (int i = 0; i < clen; i++) {
	mov A, 0
	mov B, SP
	.loc 7 938 0
	#   int clen = bef_num_digits(v, c);
	mov A, BP
	add A, 16777179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 934 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_num_digits
	.L2685:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777178
	store A, B
	.loc 7 941 0
	#   }
	.loc 7 940 0
	#     bef_emit(c[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777177
	mov A, 0
	store A, B
	.loc 7 941 0
	#   }
	.L194:
	.loc 7 940 0
	#     bef_emit(c[i]);
	mov B, BP
	add B, 16777177
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 939 0
	#   for (int i = 0; i < clen; i++) {
	mov B, BP
	add B, 16777178
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2686, A, 0
	jmp .L2687
	.L2686:
	.loc 7 941 0
	#   }
	jmp .L196
	.L2687:
	.loc 7 938 0
	#   int clen = bef_num_digits(v, c);
	mov A, BP
	add A, 16777179
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 940 0
	#     bef_emit(c[i]);
	mov B, BP
	add B, 16777177
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2688:
	mov A, B
	add SP, 1
	.loc 7 941 0
	#   }
	.L195:
	.loc 7 940 0
	#     bef_emit(c[i]);
	mov B, BP
	add B, 16777177
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777177
	store A, B
	load A, SP
	add SP, 1
	.loc 7 941 0
	#   }
	jmp .L194
	.L196:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_uint_mod:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 946 0
	# }
.data
	.L2689:
	.string "88*:*:*"
.text
	mov A, .L2689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_s
	.L2690:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_value:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 955 0
	#   }
	.loc 7 950 0
	#     bef_emit('0' + v->reg);
	.loc 7 946 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2691, A, 0
	.loc 7 953 0
	#   } else {
	.loc 7 951 0
	#     bef_emit('0');
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 946 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2692:
	mov A, B
	add SP, 1
	.loc 7 952 0
	#     bef_emit('g');
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2693:
	mov A, B
	add SP, 1
	.loc 7 953 0
	#   } else {
	mov A, 103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2694:
	mov A, B
	add SP, 1
	jmp .L2695
	.L2691:
	.loc 7 955 0
	#   }
	.loc 7 946 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_num
	.L2696:
	mov A, B
	add SP, 1
	.L2695:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_src:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 960 0
	# }
	.loc 7 955 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_value
	.L2697:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_dst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 964 0
	# }
	.loc 7 960 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_value
	.L2698:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_store_reg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 970 0
	# }
	.loc 7 968 0
	#   bef_emit('0');
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 964 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2699:
	mov A, B
	add SP, 1
	.loc 7 969 0
	#   bef_emit('p');
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2700:
	mov A, B
	add SP, 1
	.loc 7 970 0
	# }
	mov A, 112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2701:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_make_room:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 977 0
	#       bef_emit(' ');
	.loc 7 974 0
	#   if (r < 10) {
	mov A, 0
	mov B, SP
	mov B, g_bef
	add B, 23922
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2702, A, 0
	mov A, 79
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23920
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L2703
	.L2702:
	mov B, g_bef
	add B, 23920
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	.L2703:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 977 0
	#       bef_emit(' ');
	.loc 7 975 0
	#     uint y = g_bef.y;
	.loc 7 974 0
	#   if (r < 10) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 975 0
	#     uint y = g_bef.y;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2704, A, 0
	.loc 7 977 0
	#       bef_emit(' ');
	.loc 7 976 0
	#     while (y == g_bef.y)
	mov A, 0
	mov B, SP
	mov B, g_bef
	add B, 23921
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 977 0
	#       bef_emit(' ');
	.L197:
	.loc 7 976 0
	#     while (y == g_bef.y)
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 977 0
	#       bef_emit(' ');
	mov B, g_bef
	add B, 23921
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2705, A, 0
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2706:
	mov A, B
	add SP, 1
	jmp .L2707
	.L2705:
	jmp .L198
	.L2707:
	jmp .L197
	.L198:
	.L2704:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1005 0
	#   }
	.loc 7 983 0
	#   if (op == JLT || op == JGE) {
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 977 0
	#       bef_emit(' ');
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L2708:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 990 0
	#   }
	.loc 7 984 0
	#     bef_emit_src(inst);
	.loc 7 983 0
	#   if (op == JLT || op == JGE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 984 0
	#     bef_emit_src(inst);
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L2709, A, 0
	.loc 7 984 0
	#     bef_emit_src(inst);
	.loc 7 983 0
	#   if (op == JLT || op == JGE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 984 0
	#     bef_emit_src(inst);
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L2709:
	mov A, B
	jeq .L2710, A, 0
	.loc 7 987 0
	#   } else {
	.loc 7 985 0
	#     bef_emit_dst(inst);
	.loc 7 977 0
	#       bef_emit(' ');
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_src
	.L2711:
	mov A, B
	add SP, 1
	.loc 7 986 0
	#     op = op == JLT ? JGT : JLE;
	.loc 7 977 0
	#       bef_emit(' ');
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_dst
	.L2712:
	mov A, B
	add SP, 1
	.loc 7 987 0
	#   } else {
	.loc 7 983 0
	#   if (op == JLT || op == JGE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 987 0
	#   } else {
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2713, A, 0
	mov A, 11
	jmp .L2714
	.L2713:
	mov A, 12
	.L2714:
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L2715
	.L2710:
	.loc 7 990 0
	#   }
	.loc 7 989 0
	#     bef_emit_src(inst);
	.loc 7 977 0
	#       bef_emit(' ');
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2716
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_dst
	.L2716:
	mov A, B
	add SP, 1
	.loc 7 990 0
	#   }
	.loc 7 977 0
	#       bef_emit(' ');
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_src
	.L2717:
	mov A, B
	add SP, 1
	.L2715:
	.loc 7 1000 0
	#   }
	.loc 7 983 0
	#   if (op == JLT || op == JGE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1000 0
	#   }
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2718, A, 0
	jmp .L200
	.L2718:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2719, A, 0
	jmp .L201
	.L2719:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2720, A, 0
	jmp .L202
	.L2720:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2721, A, 0
	jmp .L203
	.L2721:
	jmp .L199
	.loc 7 993 0
	#     case JNE:
	.L200:
	.L201:
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2722:
	mov A, B
	add SP, 1
	.loc 7 996 0
	#     case JGT:
	jmp .L199
	.loc 7 997 0
	#     case JLE:
	.L202:
	.L203:
	mov A, 96
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2723:
	mov A, B
	add SP, 1
	.loc 7 1000 0
	#   }
	jmp .L199
	.L199:
	.loc 7 1005 0
	#   }
	.loc 7 1002 0
	#     bef_emit('!');
	.loc 7 983 0
	#   if (op == JLT || op == JGE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1002 0
	#     bef_emit('!');
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L2724, A, 0
	.loc 7 1002 0
	#     bef_emit('!');
	.loc 7 983 0
	#   if (op == JLT || op == JGE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1002 0
	#     bef_emit('!');
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L2724:
	mov A, B
	jeq .L2725, A, 0
	.loc 7 1003 0
	#   } else if (op == JNE && boolify) {
	mov A, 33
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2726:
	mov A, B
	add SP, 1
	jmp .L2727
	.L2725:
	.loc 7 1005 0
	#   }
	.loc 7 1003 0
	#   } else if (op == JNE && boolify) {
	.loc 7 983 0
	#   if (op == JLT || op == JGE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1003 0
	#   } else if (op == JNE && boolify) {
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L2728, A, 0
	.loc 7 977 0
	#       bef_emit(' ');
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	ne B, 0
	.L2728:
	mov A, B
	jeq .L2729, A, 0
	.loc 7 1005 0
	#   }
.data
	.L2730:
	.string "!!"
.text
	mov A, .L2730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2731
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_s
	.L2731:
	mov A, B
	add SP, 1
	.L2729:
	.L2727:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_jmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1034 0
	# }
	.loc 7 1010 0
	#   bef_make_room();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1005 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2732
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_cmp
	.L2732:
	mov A, B
	add SP, 2
	.loc 7 1011 0
	#   bef_emit_s("#v_v");
	mov A, .L2733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_make_room
	.L2733:
	mov A, B
	.loc 7 1012 0
	# 
.data
	.L2734:
	.string "#v_v"
.text
	mov A, .L2734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2735
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_s
	.L2735:
	mov A, B
	add SP, 1
	.loc 7 1014 0
	#   int y = g_bef.y;
	mov A, 0
	mov B, SP
	mov B, g_bef
	add B, 23920
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1015 0
	#   bef_clear_block_line(y + 1);
	mov A, 0
	mov B, SP
	mov B, g_bef
	add B, 23921
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1016 0
	#   bef_clear_block_line(y + 2);
	.loc 7 1015 0
	#   bef_clear_block_line(y + 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1016 0
	#   bef_clear_block_line(y + 2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2736
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_clear_block_line
	.L2736:
	mov A, B
	add SP, 1
	.loc 7 1017 0
	# 
	.loc 7 1015 0
	#   bef_clear_block_line(y + 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1017 0
	# 
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_clear_block_line
	.L2737:
	mov A, B
	add SP, 1
	.loc 7 1022 0
	#   }
	.loc 7 1019 0
	#     x -= 1;
	mov B, g_bef
	add B, 23922
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2738, A, 0
	.loc 7 1020 0
	#   } else {
	.loc 7 1014 0
	#   int y = g_bef.y;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1020 0
	#   } else {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L2739
	.L2738:
	.loc 7 1022 0
	#   }
	.loc 7 1014 0
	#   int y = g_bef.y;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1022 0
	#   }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L2739:
	.loc 7 1025 0
	#   g_bef.block[y + 2][x - 1] = '$';
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1015 0
	#   bef_clear_block_line(y + 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1025 0
	#   g_bef.block[y + 2][x - 1] = '$';
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2740
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2740:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1014 0
	#   int y = g_bef.y;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1026 0
	# 
	mov A, 36
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1015 0
	#   bef_clear_block_line(y + 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1026 0
	# 
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2741:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1014 0
	#   int y = g_bef.y;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1026 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1028 0
	#   g_bef.block[y + 1][x] = '<';
	.loc 7 1014 0
	#   int y = g_bef.y;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1028 0
	#   g_bef.block[y + 1][x] = '<';
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1029 0
	#   g_bef.block[y + 1][6] = '^';
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1015 0
	#   bef_clear_block_line(y + 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1029 0
	#   g_bef.block[y + 1][6] = '^';
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2742:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1014 0
	#   int y = g_bef.y;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1030 0
	# 
	mov A, 94
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1015 0
	#   bef_clear_block_line(y + 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1030 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2743:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1032 0
	#   g_bef.y = y + 2;
	.loc 7 1014 0
	#   int y = g_bef.y;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1032 0
	#   g_bef.y = y + 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, g_bef
	add B, 23920
	store A, B
	.loc 7 1033 0
	#   g_bef.vx = -1;
	.loc 7 1015 0
	#   bef_clear_block_line(y + 1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1033 0
	#   g_bef.vx = -1;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, g_bef
	add B, 23921
	store A, B
	.loc 7 1034 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, g_bef
	add B, 23922
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1134 0
	#       error("oops");
	.loc 7 1038 0
	#     case MOV:
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1134 0
	#       error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2744, A, 0
	jmp .L205
	.L2744:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2745, A, 0
	jmp .L206
	.L2745:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2746, A, 0
	jmp .L207
	.L2746:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2747, A, 0
	jmp .L208
	.L2747:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2748, A, 0
	jmp .L209
	.L2748:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2749, A, 0
	jmp .L210
	.L2749:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2750, A, 0
	jmp .L211
	.L2750:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2751, A, 0
	jmp .L212
	.L2751:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2752, A, 0
	jmp .L213
	.L2752:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2753, A, 0
	jmp .L214
	.L2753:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2754, A, 0
	jmp .L215
	.L2754:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2755, A, 0
	jmp .L216
	.L2755:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2756, A, 0
	jmp .L217
	.L2756:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2757, A, 0
	jmp .L218
	.L2757:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2758, A, 0
	jmp .L219
	.L2758:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2759, A, 0
	jmp .L220
	.L2759:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2760, A, 0
	jmp .L221
	.L2760:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2761, A, 0
	jmp .L222
	.L2761:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2762, A, 0
	jmp .L223
	.L2762:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2763, A, 0
	jmp .L224
	.L2763:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2764, A, 0
	jmp .L225
	.L2764:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2765, A, 0
	jmp .L226
	.L2765:
	jmp .L227
	.loc 7 1039 0
	#       bef_emit_src(inst);
	.L205:
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_src
	.L2766:
	mov A, B
	add SP, 1
	.loc 7 1041 0
	#       break;
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_store_reg
	.L2767:
	mov A, B
	add SP, 1
	.loc 7 1042 0
	# 
	jmp .L204
	.loc 7 1044 0
	#       bef_emit_dst(inst);
	.L206:
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_dst
	.L2768:
	mov A, B
	add SP, 1
	.loc 7 1046 0
	#       bef_emit('+');
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_src
	.L2769:
	mov A, B
	add SP, 1
	.loc 7 1047 0
	#       bef_emit_uint_mod();
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2770:
	mov A, B
	add SP, 1
	.loc 7 1048 0
	#       bef_emit('%');
	mov A, .L2771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_uint_mod
	.L2771:
	mov A, B
	.loc 7 1049 0
	#       bef_emit_store_reg(inst->dst.reg);
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2772:
	mov A, B
	add SP, 1
	.loc 7 1050 0
	#       break;
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_store_reg
	.L2773:
	mov A, B
	add SP, 1
	.loc 7 1051 0
	# 
	jmp .L204
	.loc 7 1053 0
	#       bef_emit_dst(inst);
	.L207:
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_dst
	.L2774:
	mov A, B
	add SP, 1
	.loc 7 1055 0
	#       bef_emit('-');
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_src
	.L2775:
	mov A, B
	add SP, 1
	.loc 7 1056 0
	#       bef_emit_uint_mod();
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2776:
	mov A, B
	add SP, 1
	.loc 7 1057 0
	#       bef_emit('+');
	mov A, .L2777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_uint_mod
	.L2777:
	mov A, B
	.loc 7 1058 0
	#       bef_emit_uint_mod();
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2778:
	mov A, B
	add SP, 1
	.loc 7 1059 0
	#       bef_emit('%');
	mov A, .L2779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_uint_mod
	.L2779:
	mov A, B
	.loc 7 1060 0
	#       bef_emit_store_reg(inst->dst.reg);
	mov A, 37
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2780:
	mov A, B
	add SP, 1
	.loc 7 1061 0
	#       break;
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_store_reg
	.L2781:
	mov A, B
	add SP, 1
	.loc 7 1062 0
	# 
	jmp .L204
	.loc 7 1064 0
	#       bef_emit('0');
	.L208:
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2782:
	mov A, B
	add SP, 1
	.loc 7 1066 0
	#       bef_emit_num(BEF_MEM);
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_src
	.L2783:
	mov A, B
	add SP, 1
	.loc 7 1067 0
	#       bef_emit('+');
	.loc 7 759 0
	#   }
	mov B, BEF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_num
	.L2784:
	mov A, B
	add SP, 1
	.loc 7 1068 0
	#       bef_emit('g');
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2785:
	mov A, B
	add SP, 1
	.loc 7 1069 0
	#       bef_emit_store_reg(inst->dst.reg);
	mov A, 103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2786:
	mov A, B
	add SP, 1
	.loc 7 1070 0
	#       break;
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_store_reg
	.L2787:
	mov A, B
	add SP, 1
	.loc 7 1071 0
	# 
	jmp .L204
	.loc 7 1073 0
	#       bef_emit_dst(inst);
	.L209:
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_dst
	.L2788:
	mov A, B
	add SP, 1
	.loc 7 1075 0
	#       bef_emit_src(inst);
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2789:
	mov A, B
	add SP, 1
	.loc 7 1076 0
	#       bef_emit_num(BEF_MEM);
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_src
	.L2790:
	mov A, B
	add SP, 1
	.loc 7 1077 0
	#       bef_emit('+');
	.loc 7 759 0
	#   }
	mov B, BEF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_num
	.L2791:
	mov A, B
	add SP, 1
	.loc 7 1078 0
	#       bef_emit('p');
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2792:
	mov A, B
	add SP, 1
	.loc 7 1079 0
	#       break;
	mov A, 112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2793:
	mov A, B
	add SP, 1
	.loc 7 1080 0
	# 
	jmp .L204
	.loc 7 1082 0
	#       bef_emit_src(inst);
	.L210:
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_src
	.L2794:
	mov A, B
	add SP, 1
	.loc 7 1084 0
	#       break;
	mov A, 44
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2795:
	mov A, B
	add SP, 1
	.loc 7 1085 0
	# 
	jmp .L204
	.loc 7 1099 0
	#     }
	.loc 7 1087 0
	#       bef_make_room();
	.L211:
	.loc 7 1099 0
	#     }
	.loc 7 1088 0
	#       bef_emit_s("#v~v");
	mov A, .L2796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_make_room
	.L2796:
	mov A, B
	.loc 7 1089 0
	#       g_bef.y++;
.data
	.L2797:
	.string "#v~v"
.text
	mov A, .L2797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_s
	.L2798:
	mov A, B
	add SP, 1
	.loc 7 1090 0
	#       bef_clear_block_line(g_bef.y);
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, g_bef
	add B, 23921
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1091 0
	#       g_bef.x += g_bef.vx == 1 ? -3 : 3;
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_clear_block_line
	.L2799:
	mov A, B
	add SP, 1
	.loc 7 1092 0
	#       bef_emit(g_bef.vx == 1 ? '>' : '<');
	mov B, g_bef
	add B, 23920
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23922
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2800, A, 0
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L2801
	.L2800:
	mov A, 3
	.L2801:
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, g_bef
	add B, 23920
	store A, B
	.loc 7 1093 0
	#       bef_emit('0');
	mov B, g_bef
	add B, 23922
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2802, A, 0
	mov A, 62
	jmp .L2803
	.L2802:
	mov A, 60
	.L2803:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2804:
	mov A, B
	add SP, 1
	.loc 7 1094 0
	#       bef_emit(g_bef.vx == 1 ? '>' : '<');
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2805:
	mov A, B
	add SP, 1
	.loc 7 1095 0
	#       // To support implementations which return -1 on EOF.
	mov B, g_bef
	add B, 23922
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2806, A, 0
	mov A, 62
	jmp .L2807
	.L2806:
	mov A, 60
	.L2807:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2808:
	mov A, B
	add SP, 1
	.loc 7 1097 0
	#       bef_emit_store_reg(inst->dst.reg);
.data
	.L2809:
	.string ":1+!+"
.text
	mov A, .L2809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_s
	.L2810:
	mov A, B
	add SP, 1
	.loc 7 1098 0
	#       break;
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_store_reg
	.L2811:
	mov A, B
	add SP, 1
	.loc 7 1099 0
	#     }
	jmp .L204
	.loc 7 1102 0
	#       bef_emit('@');
	.L212:
	mov A, 64
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2812:
	mov A, B
	add SP, 1
	.loc 7 1104 0
	# 
	jmp .L204
	.loc 7 1106 0
	#       break;
	.L213:
	jmp .L204
	.loc 7 1109 0
	#     case NE:
	.L214:
	.L215:
	.L216:
	.L217:
	.L218:
	.L219:
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_cmp
	.L2813:
	mov A, B
	add SP, 2
	.loc 7 1116 0
	#       break;
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_store_reg
	.L2814:
	mov A, B
	add SP, 1
	.loc 7 1117 0
	# 
	jmp .L204
	.loc 7 1119 0
	#     case JNE:
	.L220:
	.L221:
	.L222:
	.L223:
	.L224:
	.L225:
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_value
	.L2815:
	mov A, B
	add SP, 1
	.loc 7 1126 0
	#       break;
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_jmp
	.L2816:
	mov A, B
	add SP, 1
	.loc 7 1127 0
	# 
	jmp .L204
	.loc 7 1129 0
	#       bef_emit_value(&inst->jmp);
	.L226:
	.loc 7 1034 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_value
	.L2817:
	mov A, B
	add SP, 1
	.loc 7 1131 0
	#       break;
	mov A, 1
	ne A, 0
	ne A, 0
	ne A, 0
	mov B, g_bef
	add B, 23923
	store A, B
	.loc 7 1132 0
	# 
	jmp .L204
	.loc 7 1134 0
	#       error("oops");
	.L227:
.data
	.L2818:
	.string "oops"
.text
	mov A, .L2818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L2819:
	mov A, B
	add SP, 1
	.L204:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_flush_code_block:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1154 0
	# }
	.loc 7 1144 0
	#   }
	.loc 7 1140 0
	#     g_bef.block[g_bef.y][g_bef.x] = 'v';
	mov B, g_bef
	add B, 23922
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2820, A, 0
	.loc 7 1144 0
	#   }
	.loc 7 1141 0
	#     g_bef.y++;
	mov A, 118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2821:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23920
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1142 0
	#     bef_clear_block_line(g_bef.y);
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, g_bef
	add B, 23921
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1143 0
	#     g_bef.block[g_bef.y][g_bef.x] = '<';
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_clear_block_line
	.L2822:
	mov A, B
	add SP, 1
	.loc 7 1144 0
	#   }
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2823
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2823:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23920
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L2820:
	.loc 7 1149 0
	#   }
	.loc 7 1146 0
	#     g_bef.block[g_bef.y][6] = '^';
	mov B, g_bef
	add B, 23923
	load A, B
	jeq .L2824, A, 0
	.loc 7 1147 0
	#   } else {
	mov A, 94
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2825
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2825:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L2826
	.L2824:
	.loc 7 1149 0
	#   }
	mov A, 118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2827
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2827:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L2826:
	.loc 7 1152 0
	#   memcpy(g_bef.block[1], "v-1<> ", 6);
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2828:
	.string ">:#v_$"
.text
	mov A, .L2828
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2829:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L2830:
	mov A, B
	add SP, 3
	.loc 7 1153 0
	#   bef_block_init();
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L2831:
	.string "v-1<> "
.text
	mov A, .L2831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2832:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp memcpy
	.L2833:
	mov A, B
	add SP, 3
	.loc 7 1154 0
	# }
	mov A, .L2834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_block_init
	.L2834:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bef_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1185 0
	# }
	.loc 7 1158 0
	#   for (uint mp = 0; data; data = data->next, mp++) {
	mov A, .L2835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_block_init
	.L2835:
	mov A, B
	.loc 7 1169 0
	#       }
	.loc 7 1159 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 1169 0
	#       }
	.L228:
	.loc 7 1154 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L2836, A, 0
	jmp .L2837
	.L2836:
	.loc 7 1169 0
	#       }
	jmp .L230
	.L2837:
	.loc 7 1160 0
	#       bef_emit_num(data->v);
	.loc 7 1154 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L2838, A, 0
	.loc 7 1169 0
	#       }
	.loc 7 1161 0
	#       bef_emit('0');
	.loc 7 1154 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_num
	.L2839:
	mov A, B
	add SP, 1
	.loc 7 1162 0
	#       bef_emit_num(mp);
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2840:
	mov A, B
	add SP, 1
	.loc 7 1163 0
	#       bef_emit_num(BEF_MEM);
	.loc 7 1159 0
	#     if (data->v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_num
	.L2841:
	mov A, B
	add SP, 1
	.loc 7 1164 0
	#       bef_emit('+');
	.loc 7 759 0
	#   }
	mov B, BEF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_num
	.L2842:
	mov A, B
	add SP, 1
	.loc 7 1165 0
	#       bef_emit('p');
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2843:
	mov A, B
	add SP, 1
	.loc 7 1166 0
	# 
	mov A, 112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2844:
	mov A, B
	add SP, 1
	.loc 7 1169 0
	#       }
	.loc 7 1168 0
	#         bef_flush_code_block();
	mov A, 90
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2845, A, 0
	.loc 7 1169 0
	#       }
	mov A, .L2846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_flush_code_block
	.L2846:
	mov A, B
	.L2845:
	.L2838:
	.L229:
	.loc 7 1159 0
	#     if (data->v) {
	.loc 7 1154 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 1159 0
	#     if (data->v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1169 0
	#       }
	jmp .L228
	.L230:
	.loc 7 1176 0
	#   }
	.loc 7 1174 0
	#     bef_emit('0');
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 1176 0
	#   }
	.L231:
	.loc 7 1174 0
	#     bef_emit('0');
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2847, A, 0
	jmp .L2848
	.L2847:
	.loc 7 1176 0
	#   }
	jmp .L233
	.L2848:
	.loc 7 1175 0
	#     bef_emit_store_reg(i);
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2849
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2849:
	mov A, B
	add SP, 1
	.loc 7 1176 0
	#   }
	.loc 7 1174 0
	#     bef_emit('0');
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_store_reg
	.L2850:
	mov A, B
	add SP, 1
	.loc 7 1176 0
	#   }
	.L232:
	.loc 7 1174 0
	#     bef_emit('0');
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1176 0
	#   }
	jmp .L231
	.L233:
	.loc 7 1179 0
	# 
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2851:
	mov A, B
	add SP, 1
	.loc 7 1182 0
	#   }
	.L234:
	.loc 7 1181 0
	#     bef_emit(' ');
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2852, A, 0
	.loc 7 1182 0
	#   }
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit
	.L2853:
	mov A, B
	add SP, 1
	jmp .L2854
	.L2852:
	jmp .L235
	.L2854:
	jmp .L234
	.L235:
	.loc 7 1184 0
	#   g_bef.block[g_bef.y][6] = '<';
	mov A, 118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2855:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1185 0
	# }
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, g_bef
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, g_bef
	add B, 23921
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2856:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_bef:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1203 0
	# }
	.loc 7 1189 0
	# 
	.loc 7 1185 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_init_state
	.L2857:
	mov A, B
	add SP, 1
	.loc 7 1191 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1200 0
	#   }
	.loc 7 1192 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 1185 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1200 0
	#   }
	.L236:
	.loc 7 1192 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L2858, A, 0
	jmp .L2859
	.L2858:
	.loc 7 1200 0
	#   }
	jmp .L238
	.L2859:
	.loc 7 1194 0
	#         bef_block_init();
	.loc 7 1193 0
	#       if (prev_pc == -1)
	.loc 7 1191 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1193 0
	#       if (prev_pc == -1)
	.loc 7 1192 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L2860, A, 0
	.loc 7 1194 0
	#         bef_block_init();
	.loc 7 1191 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1194 0
	#         bef_block_init();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2861, A, 0
	mov A, .L2862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_block_init
	.L2862:
	mov A, B
	jmp .L2863
	.L2861:
	mov A, .L2864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_flush_code_block
	.L2864:
	mov A, B
	.L2863:
	.L2860:
	.loc 7 1199 0
	#     bef_emit_inst(inst);
	.loc 7 1192 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1200 0
	#   }
	.loc 7 1192 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_emit_inst
	.L2865:
	mov A, B
	add SP, 1
	.loc 7 1200 0
	#   }
	.L237:
	.loc 7 1192 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1200 0
	#   }
	jmp .L236
	.L238:
	.loc 7 1203 0
	# }
	mov A, .L2866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bef_flush_code_block
	.L2866:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	bf:

	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data 0
BF_RUNNING:
	.long 0
	.data 0
BF_PC:
	.long 2
	.data 0
BF_NPC:
	.long 8
	.data 0
BF_A:
	.long 14
	.data 0
BF_B:
	.long 20
	.data 0
BF_C:
	.long 26
	.data 0
BF_D:
	.long 32
	.data 0
BF_BP:
	.long 38
	.data 0
BF_SP:
	.long 44
	.data 0
BF_OP:
	.long 50
	.data 0
BF_DBG:
	.long 58
	.data 0
BF_WRK:
	.long 60
	.data 0
BF_LOAD_REQ:
	.long 67
	.data 0
BF_STORE_REQ:
	.long 68
	.data 0
BF_MEM:
	.long 70
	.data 0
BF_MEM_V:
	.long 1
	.data 0
BF_MEM_A:
	.long 4
	.data 0
BF_MEM_WRK:
	.long 7
	.data 0
BF_MEM_USE:
	.long 13
	.data 0
BF_MEM_BLK_LEN:
	.long 784
	.text
bf_emit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1248 0
	# }
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fputs
	.L2867:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_comment:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1252 0
	# }
	.loc 7 1248 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1252 0
	# }
.data
	.L2868:
	.string "\n# %s\n"
.text
	mov A, .L2868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2869
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L2869:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_rep:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1256 0
	#     putchar(c);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L239:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1252 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2870, A, 0
	jmp .L2871
	.L2870:
	.loc 7 1256 0
	#     putchar(c);
	jmp .L241
	.L2871:
	.loc 7 1252 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 1256 0
	#     putchar(c);
	.L240:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L239
	.L241:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_set_ptr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1261 0
	# }
	.loc 7 1256 0
	#     putchar(c);
	mov B, BP
	add B, 2
	load A, B
	mov B, bf
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_move_ptr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1270 0
	# }
	.loc 7 1268 0
	#   }
	.loc 7 1265 0
	#     bf_rep('>', ptr - bf.mp);
	mov B, bf
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2872, A, 0
	.loc 7 1266 0
	#   } else {
	.loc 7 1261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1266 0
	#   } else {
	mov B, bf
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2873
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_rep
	.L2873:
	mov A, B
	add SP, 2
	jmp .L2874
	.L2872:
	.loc 7 1268 0
	#   }
	mov B, bf
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1268 0
	#   }
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2875
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_rep
	.L2875:
	mov A, B
	add SP, 2
	.L2874:
	.loc 7 1270 0
	# }
	.loc 7 1261 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, bf
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_move_neg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1279 0
	# }
	.loc 7 1274 0
	#   bf_emit("[-");
	.loc 7 1270 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2876:
	mov A, B
	add SP, 1
	.loc 7 1275 0
	#   bf_move_ptr(to);
.data
	.L2877:
	.string "[-"
.text
	mov A, .L2877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2878
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2878:
	mov A, B
	add SP, 1
	.loc 7 1276 0
	#   putchar('-');
	.loc 7 1270 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2879:
	mov A, B
	add SP, 1
	.loc 7 1277 0
	#   bf_move_ptr(from);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 1278 0
	#   bf_emit("]");
	.loc 7 1270 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2880:
	mov A, B
	add SP, 1
	.loc 7 1279 0
	# }
.data
	.L2881:
	.string "]"
.text
	mov A, .L2881
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2882:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_move:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1288 0
	# }
	.loc 7 1283 0
	#   bf_emit("[-");
	.loc 7 1279 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2883
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2883:
	mov A, B
	add SP, 1
	.loc 7 1284 0
	#   bf_move_ptr(to);
.data
	.L2884:
	.string "[-"
.text
	mov A, .L2884
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2885:
	mov A, B
	add SP, 1
	.loc 7 1285 0
	#   putchar('+');
	.loc 7 1279 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2886
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2886:
	mov A, B
	add SP, 1
	.loc 7 1286 0
	#   bf_move_ptr(from);
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 1287 0
	#   bf_emit("]");
	.loc 7 1279 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2887:
	mov A, B
	add SP, 1
	.loc 7 1288 0
	# }
.data
	.L2888:
	.string "]"
.text
	mov A, .L2888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2889
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2889:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_move2:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1299 0
	# }
	.loc 7 1292 0
	#   bf_emit("[-");
	.loc 7 1288 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2890
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2890:
	mov A, B
	add SP, 1
	.loc 7 1293 0
	#   bf_move_ptr(to);
.data
	.L2891:
	.string "[-"
.text
	mov A, .L2891
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2892
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2892:
	mov A, B
	add SP, 1
	.loc 7 1294 0
	#   putchar('+');
	.loc 7 1288 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2893
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2893:
	mov A, B
	add SP, 1
	.loc 7 1295 0
	#   bf_move_ptr(to2);
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 1296 0
	#   putchar('+');
	.loc 7 1288 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2894
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2894:
	mov A, B
	add SP, 1
	.loc 7 1297 0
	#   bf_move_ptr(from);
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 1298 0
	#   bf_emit("]");
	.loc 7 1288 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2895
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2895:
	mov A, B
	add SP, 1
	.loc 7 1299 0
	# }
.data
	.L2896:
	.string "]"
.text
	mov A, .L2896
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2897:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_move_word:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1305 0
	# }
	.loc 7 1303 0
	#   bf_move(from, to);
	.loc 7 1299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1303 0
	#   bf_move(from, to);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1303 0
	#   bf_move(from, to);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2898
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move
	.L2898:
	mov A, B
	add SP, 2
	.loc 7 1304 0
	#   bf_move(from+1, to+1);
	.loc 7 1299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move
	.L2899:
	mov A, B
	add SP, 2
	.loc 7 1305 0
	# }
	.loc 7 1299 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1305 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1299 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1305 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move
	.L2900:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_move_word2:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1311 0
	# }
	.loc 7 1309 0
	#   bf_move2(from, to, to2);
	.loc 7 1305 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1309 0
	#   bf_move2(from, to, to2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1305 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1309 0
	#   bf_move2(from, to, to2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1305 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1309 0
	#   bf_move2(from, to, to2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2901
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move2
	.L2901:
	mov A, B
	add SP, 3
	.loc 7 1310 0
	#   bf_move2(from+1, to+1, to2+1);
	.loc 7 1305 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2902
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move2
	.L2902:
	mov A, B
	add SP, 3
	.loc 7 1311 0
	# }
	.loc 7 1305 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1311 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1305 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1311 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1305 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1311 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2903
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move2
	.L2903:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_copy_word:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1323 0
	# }
	.loc 7 1322 0
	#   bf_move_word(wrk, from);
	.loc 7 1311 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word2
	.L2904:
	mov A, B
	add SP, 3
	.loc 7 1323 0
	# }
	.loc 7 1311 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L2905:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_add:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1336 0
	#   }
	.loc 7 1327 0
	# #ifdef __eir__
	.loc 7 1323 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2906:
	mov A, B
	add SP, 1
	.loc 7 1329 0
	# #else
	.loc 7 1323 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1329 0
	# #else
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2907:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 1336 0
	#   }
	.loc 7 1333 0
	#     bf_rep('-', 256 - v);
	mov A, 127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1323 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L2908, A, 0
	.loc 7 1334 0
	#   } else {
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1323 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1334 0
	#   } else {
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_rep
	.L2909:
	mov A, B
	add SP, 2
	jmp .L2910
	.L2908:
	.loc 7 1336 0
	#   }
	.loc 7 1323 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1336 0
	#   }
	mov A, 43
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_rep
	.L2911:
	mov A, B
	add SP, 2
	.L2910:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_add_word:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1343 0
	# }
	.loc 7 1341 0
	#   bf_add(ptr, v / 256 % 256);
	.loc 7 1336 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1341 0
	#   bf_add(ptr, v / 256 % 256);
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2912:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1336 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1341 0
	#   bf_add(ptr, v / 256 % 256);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L2913:
	mov A, B
	add SP, 2
	.loc 7 1342 0
	#   bf_add(ptr + 1, v % 256);
	.loc 7 1336 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1342 0
	#   bf_add(ptr + 1, v % 256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2914
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2914:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2915:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1336 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L2916:
	mov A, B
	add SP, 2
	.loc 7 1343 0
	# }
	.loc 7 1336 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1343 0
	# }
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2917:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1336 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1343 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L2918:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_clear:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1348 0
	# }
	.loc 7 1347 0
	#   bf_emit("[-]");
	.loc 7 1343 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2919:
	mov A, B
	add SP, 1
	.loc 7 1348 0
	# }
.data
	.L2920:
	.string "[-]"
.text
	mov A, .L2920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2921
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2921:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_clear_word:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1354 0
	# }
	.loc 7 1352 0
	#   bf_clear(ptr);
	.loc 7 1348 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1352 0
	#   bf_clear(ptr);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2922
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L2922:
	mov A, B
	add SP, 1
	.loc 7 1353 0
	#   bf_clear(ptr+1);
	.loc 7 1348 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L2923:
	mov A, B
	add SP, 1
	.loc 7 1354 0
	# }
	.loc 7 1348 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1354 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L2924:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_regpos:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1365 0
	#     error("unknown reg: %d", r);
	.loc 7 1354 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1365 0
	#     error("unknown reg: %d", r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2925, A, 0
	jmp .L243
	.L2925:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2926, A, 0
	jmp .L244
	.L2926:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2927, A, 0
	jmp .L245
	.L2927:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2928, A, 0
	jmp .L246
	.L2928:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2929, A, 0
	jmp .L247
	.L2929:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L2930, A, 0
	jmp .L248
	.L2930:
	jmp .L249
	.loc 7 1359 0
	#   case B: return BF_B;
	.L243:
	.loc 7 1203 0
	# }
	mov B, BF_A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1360 0
	#   case C: return BF_C;
	.L244:
	.loc 7 1203 0
	# }
	mov B, BF_B
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1361 0
	#   case D: return BF_D;
	.L245:
	.loc 7 1203 0
	# }
	mov B, BF_C
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1362 0
	#   case BP: return BF_BP;
	.L246:
	.loc 7 1203 0
	# }
	mov B, BF_D
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1363 0
	#   case SP: return BF_SP;
	.L247:
	.loc 7 1203 0
	# }
	mov B, BF_BP
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1364 0
	#   default:
	.L248:
	.loc 7 1203 0
	# }
	mov B, BF_SP
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 1365 0
	#     error("unknown reg: %d", r);
	.L249:
	.loc 7 1354 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1365 0
	#     error("unknown reg: %d", r);
.data
	.L2931:
	.string "unknown reg: %d"
.text
	mov A, .L2931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2932
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L2932:
	mov A, B
	add SP, 2
	.L242:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_dbg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1376 0
	# }
	.loc 7 1374 0
	#   }
	.L250:
	.loc 7 1371 0
	#     bf_clear(BF_DBG);
	.loc 7 1365 0
	#     error("unknown reg: %d", r);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L2933, A, 0
	jmp .L2934
	.L2933:
	.loc 7 1374 0
	#   }
	jmp .L252
	.L2934:
	.loc 7 1372 0
	#     bf_add(BF_DBG, *s);
	.loc 7 1203 0
	# }
	mov B, BF_DBG
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2935
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L2935:
	mov A, B
	add SP, 1
	.loc 7 1373 0
	#     bf_emit(".");
	.loc 7 1365 0
	#     error("unknown reg: %d", r);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_DBG
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L2936:
	mov A, B
	add SP, 2
	.loc 7 1374 0
	#   }
.data
	.L2937:
	.string "."
.text
	mov A, .L2937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2938:
	mov A, B
	add SP, 1
	.L251:
	.loc 7 1371 0
	#     bf_clear(BF_DBG);
	.loc 7 1365 0
	#     error("unknown reg: %d", r);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1374 0
	#   }
	jmp .L250
	.L252:
	.loc 7 1376 0
	# }
	.loc 7 1203 0
	# }
	mov B, BF_DBG
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L2939:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_interpreter_check:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1396 0
	# }
	.loc 7 1380 0
	# 
.data
	.L2940:
	.string "interpreter check"
.text
	mov A, .L2940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_comment
	.L2941:
	mov A, B
	add SP, 1
	.loc 7 1383 0
	# 
.data
	.L2942:
	.string ">[-]<[-]++++++++[>++++++++<-]>[<++++>-]<[>>"
.text
	mov A, .L2942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L2943:
	mov A, B
	add SP, 1
	.loc 7 1386 0
	#   emit_line("-------.+++..+++++++.>--.<-----.<++.+.>-.>.<---.++.---.<--.>+++.");
.data
	.L2944:
	.string ">++++[<++++>-]<+[>++++++>+++++++>++>+++>+++++<<<<<-]>>>>>--.<<<-"
.text
	mov A, .L2944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L2945:
	mov A, B
	add SP, 1
	.loc 7 1387 0
	#   emit_line("<------.>-----.>.<+.<++++..-.>+++++.>.<<---.>-----.>.>+++++.<<<+");
.data
	.L2946:
	.string "-------.+++..+++++++.>--.<-----.<++.+.>-.>.<---.++.---.<--.>+++."
.text
	mov A, .L2946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L2947:
	mov A, B
	add SP, 1
	.loc 7 1388 0
	#   emit_line(".>-----.+++++++++++.>.<<+++++++.+++++.>.<---------.>--.--.++.<.>");
.data
	.L2948:
	.string "<------.>-----.>.<+.<++++..-.>+++++.>.<<---.>-----.>.>+++++.<<<+"
.text
	mov A, .L2948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2949
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L2949:
	mov A, B
	add SP, 1
	.loc 7 1389 0
	#   emit_line("++.<.>--.<<++++++++++.");
.data
	.L2950:
	.string ".>-----.+++++++++++.>.<<+++++++.+++++.>.<---------.>--.--.++.<.>"
.text
	mov A, .L2950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2951
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L2951:
	mov A, B
	add SP, 1
	.loc 7 1390 0
	# 
.data
	.L2952:
	.string "++.<.>--.<<++++++++++."
.text
	mov A, .L2952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L2953:
	mov A, B
	add SP, 1
	.loc 7 1393 0
	# 
.data
	.L2954:
	.string "<<[-]]"
.text
	mov A, .L2954
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L2955:
	mov A, B
	add SP, 1
	.loc 7 1396 0
	# }
.data
	.L2956:
	.string ">[-]<[-]++++++++[>++++++++<-]>[<++++>-]+<[>-<[-]]>[-<"
.text
	mov A, .L2956
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2957
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L2957:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 1408 0
	#     }
	.loc 7 1400 0
	# 
	mov A, .L2958
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_interpreter_check
	.L2958:
	mov A, B
	.loc 7 1402 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L2959:
	.string "init data"
.text
	mov A, .L2959
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_comment
	.L2960:
	mov A, B
	add SP, 1
	.loc 7 1408 0
	#     }
	.loc 7 1403 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 1408 0
	#     }
	.L253:
	.loc 7 1396 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L2961, A, 0
	jmp .L2962
	.L2961:
	.loc 7 1408 0
	#     }
	jmp .L255
	.L2962:
	.loc 7 1404 0
	#       int hi = mp / 256;
	.loc 7 1396 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L2963, A, 0
	.loc 7 1408 0
	#     }
	.loc 7 1405 0
	#       int lo = mp % 256;
	mov A, 0
	mov B, SP
	.loc 7 1403 0
	#     if (data->v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1405 0
	#       int lo = mp % 256;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2964
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L2964:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1406 0
	#       int ptr = BF_MEM + BF_MEM_BLK_LEN * hi + BF_MEM_CTL_LEN + lo * 3;
	mov A, 0
	mov B, SP
	.loc 7 1403 0
	#     if (data->v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1406 0
	#       int ptr = BF_MEM + BF_MEM_BLK_LEN * hi + BF_MEM_CTL_LEN + lo * 3;
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L2965:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 1407 0
	#       bf_add_word(ptr, data->v);
	mov A, 0
	mov B, SP
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1407 0
	#       bf_add_word(ptr, data->v);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1405 0
	#       int lo = mp % 256;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2966:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1407 0
	#       bf_add_word(ptr, data->v);
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1406 0
	#       int ptr = BF_MEM + BF_MEM_BLK_LEN * hi + BF_MEM_CTL_LEN + lo * 3;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1407 0
	#       bf_add_word(ptr, data->v);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2967:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 1408 0
	#     }
	.loc 7 1396 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1407 0
	#       bf_add_word(ptr, data->v);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add_word
	.L2968:
	mov A, B
	add SP, 2
	.L2963:
	.loc 7 1408 0
	#     }
	.L254:
	.loc 7 1403 0
	#     if (data->v) {
	.loc 7 1396 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 1403 0
	#     if (data->v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1408 0
	#     }
	jmp .L253
	.L255:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_loop_begin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1418 0
	# }
	.loc 7 1414 0
	#   bf_emit("[");
	.loc 7 1408 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2969:
	mov A, B
	add SP, 1
	.loc 7 1415 0
	#   if (c)
.data
	.L2970:
	.string "["
.text
	mov A, .L2970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2971:
	mov A, B
	add SP, 1
	.loc 7 1416 0
	#     putchar(c);
	.loc 7 1408 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	jeq .L2972, A, 0
	.loc 7 1416 0
	#     putchar(c);
	.loc 7 1408 0
	#     }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L2972:
	.loc 7 1418 0
	# }
	.loc 7 1408 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, bf
	add B, 1
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_loop_end:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1423 0
	# }
	.loc 7 1422 0
	#   bf_emit("]");
	mov B, bf
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2973:
	mov A, B
	add SP, 1
	.loc 7 1423 0
	# }
.data
	.L2974:
	.string "]"
.text
	mov A, .L2974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2975:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_ifzero_begin_impl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1443 0
	# }
	.loc 7 1427 0
	#   bf.mp = 0;
	mov B, bf
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, bf
	add A, 7
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, bf
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1428 0
	# 
	mov A, 0
	mov B, bf
	store A, B
	.loc 7 1430 0
	#   bf_move_ptr(0);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1423 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1430 0
	#   bf_move_ptr(0);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2976:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L2977:
	mov A, B
	add SP, 2
	.loc 7 1431 0
	#   bf_emit("[");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2978:
	mov A, B
	add SP, 1
	.loc 7 1432 0
	#   if (reset)
.data
	.L2979:
	.string "["
.text
	mov A, .L2979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2980:
	mov A, B
	add SP, 1
	.loc 7 1433 0
	#     bf_emit("[-]");
	.loc 7 1423 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L2981, A, 0
	.loc 7 1433 0
	#     bf_emit("[-]");
.data
	.L2982:
	.string "[-]"
.text
	mov A, .L2982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2983:
	mov A, B
	add SP, 1
	.L2981:
	.loc 7 1435 0
	#   bf_move_ptr(off);
	.loc 7 1423 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2984:
	mov A, B
	add SP, 1
	.loc 7 1436 0
	#   bf_emit("]");
	.loc 7 1423 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2985:
	mov A, B
	add SP, 1
	.loc 7 1437 0
	#   bf_move_ptr(off * 2);
.data
	.L2986:
	.string "]"
.text
	mov A, .L2986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2987:
	mov A, B
	add SP, 1
	.loc 7 1438 0
	#   bf_emit("+[-");
	.loc 7 1423 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1438 0
	#   bf_emit("+[-");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2988:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2989:
	mov A, B
	add SP, 1
	.loc 7 1439 0
	# 
.data
	.L2990:
	.string "+[-"
.text
	mov A, .L2990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2991:
	mov A, B
	add SP, 1
	.loc 7 1441 0
	#   bf.ifzero_off[bf.ifzero_cnt] = off;
	mov A, bf
	add A, 7
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, bf
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1423 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, bf
	store A, B
	.loc 7 1442 0
	#   bf.ifzero_cnt++;
	.loc 7 1423 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1442 0
	#   bf.ifzero_cnt++;
	mov A, bf
	add A, 3
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, bf
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 1443 0
	# }
	mov B, bf
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, bf
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_ifzero_begin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1447 0
	# }
.data
	.L2992:
	.string ""
.text
	mov A, .L2992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1443 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin_impl
	.L2993:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_ifzero_end:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1461 0
	# }
	.loc 7 1451 0
	#   int off = bf.ifzero_off[bf.ifzero_cnt];
	mov B, bf
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, bf
	add B, 2
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1452 0
	#   int omp = bf.ifzero_omp[bf.ifzero_cnt];
	mov A, 0
	mov B, SP
	mov A, bf
	add A, 3
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, bf
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1453 0
	# 
	mov A, 0
	mov B, SP
	mov A, bf
	add A, 7
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, bf
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1455 0
	# 
	.loc 7 1453 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1452 0
	#   int omp = bf.ifzero_omp[bf.ifzero_cnt];
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2994:
	mov A, B
	add SP, 1
	.loc 7 1457 0
	#   bf_move_ptr(off);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L2995:
	mov A, B
	add SP, 1
	.loc 7 1458 0
	#   bf_emit("+]");
	.loc 7 1452 0
	#   int omp = bf.ifzero_omp[bf.ifzero_cnt];
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2996
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L2996:
	mov A, B
	add SP, 1
	.loc 7 1459 0
	# 
.data
	.L2997:
	.string "+]"
.text
	mov A, .L2997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L2998:
	mov A, B
	add SP, 1
	.loc 7 1461 0
	# }
	.loc 7 1453 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1461 0
	# }
	.loc 7 1452 0
	#   int omp = bf.ifzero_omp[bf.ifzero_cnt];
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1461 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L2999
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L2999:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, bf
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_emit_addsub_prep:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 1472 0
	# }
	.loc 7 1465 0
	#   if (inst->src.type == REG) {
	mov A, 0
	mov B, SP
	.loc 7 1461 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3000:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1470 0
	#   }
	.loc 7 1466 0
	#     int src = bf_regpos(inst->src.reg);
	.loc 7 1461 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3001, A, 0
	.loc 7 1468 0
	#   } else {
	.loc 7 1467 0
	#     bf_copy_word(src, BF_WRK, BF_WRK+3);
	mov A, 0
	mov B, SP
	.loc 7 1461 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3002:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1468 0
	#   } else {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1468 0
	#   } else {
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1467 0
	#     bf_copy_word(src, BF_WRK, BF_WRK+3);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_copy_word
	.L3003:
	mov A, B
	add SP, 3
	jmp .L3004
	.L3001:
	.loc 7 1470 0
	#   }
	.loc 7 1461 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add_word
	.L3005:
	mov A, B
	add SP, 2
	.L3004:
	.loc 7 1472 0
	# }
	.loc 7 1465 0
	#   if (inst->src.type == REG) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_emit_add:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1502 0
	# }
	.loc 7 1476 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 1472 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_addsub_prep
	.L3006:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1479 0
	#     // Increment.
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1479 0
	#     // Increment.
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3007:
	mov A, B
	add SP, 2
	.loc 7 1490 0
	#   }; bf_loop_end();
	.loc 7 1481 0
	#     bf_emit("+");
	.loc 7 1476 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1481 0
	#     bf_emit("+");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3008:
	mov A, B
	add SP, 1
	.loc 7 1482 0
	#     // Carry?
.data
	.L3009:
	.string "+"
.text
	mov A, .L3009
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3010:
	mov A, B
	add SP, 1
	.loc 7 1484 0
	#       bf_add(dst, 1);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3011:
	mov A, B
	add SP, 1
	.loc 7 1489 0
	#     }; bf_ifzero_end();
	.loc 7 1485 0
	#       bf_move_ptr(dst);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1476 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3012:
	mov A, B
	add SP, 2
	.loc 7 1486 0
	#       bf_ifzero_begin(2); {
	.loc 7 1476 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3013:
	mov A, B
	add SP, 1
	.loc 7 1487 0
	#         bf_add(dst-1, 1);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3014:
	mov A, B
	add SP, 1
	.loc 7 1488 0
	#       }; bf_ifzero_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1476 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1488 0
	#       }; bf_ifzero_end();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3015:
	mov A, B
	add SP, 2
	.loc 7 1489 0
	#     }; bf_ifzero_end();
	mov A, .L3016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3016:
	mov A, B
	.loc 7 1490 0
	#   }; bf_loop_end();
	mov A, .L3017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3017:
	mov A, B
	.loc 7 1491 0
	# 
	mov A, .L3018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3018:
	mov A, B
	.loc 7 1493 0
	#     // Increment.
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3019:
	mov A, B
	add SP, 2
	.loc 7 1500 0
	#   }; bf_loop_end();
	.loc 7 1495 0
	#     bf_emit("+");
	.loc 7 1476 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3020:
	mov A, B
	add SP, 1
	.loc 7 1496 0
	#     // Carry?
.data
	.L3021:
	.string "+"
.text
	mov A, .L3021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3022:
	mov A, B
	add SP, 1
	.loc 7 1498 0
	#       bf_add(dst-1, 1);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3023:
	mov A, B
	add SP, 1
	.loc 7 1499 0
	#     }; bf_ifzero_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1476 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1499 0
	#     }; bf_ifzero_end();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3024:
	mov A, B
	add SP, 2
	.loc 7 1500 0
	#   }; bf_loop_end();
	mov A, .L3025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3025:
	mov A, B
	.loc 7 1501 0
	#   bf_move(BF_WRK-1, dst-1);
	mov A, .L3026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3026:
	mov A, B
	.loc 7 1502 0
	# }
	.loc 7 1476 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1502 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1502 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move
	.L3027:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_emit_sub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1532 0
	# }
	.loc 7 1506 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 1502 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_addsub_prep
	.L3028:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1509 0
	#     bf_move_ptr(dst+1);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1509 0
	#     bf_move_ptr(dst+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3029:
	mov A, B
	add SP, 2
	.loc 7 1520 0
	#   }; bf_loop_end();
	.loc 7 1510 0
	#     // Carry?
	.loc 7 1506 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1510 0
	#     // Carry?
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3030:
	mov A, B
	add SP, 1
	.loc 7 1512 0
	#       bf_move_ptr(dst);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3031:
	mov A, B
	add SP, 1
	.loc 7 1517 0
	#     }; bf_ifzero_end();
	.loc 7 1513 0
	#       bf_ifzero_begin(2); {
	.loc 7 1506 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3032
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3032:
	mov A, B
	add SP, 1
	.loc 7 1514 0
	#         bf_add(dst-1, -1);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3033:
	mov A, B
	add SP, 1
	.loc 7 1515 0
	#       }; bf_ifzero_end();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1506 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1515 0
	#       }; bf_ifzero_end();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3034:
	mov A, B
	add SP, 2
	.loc 7 1516 0
	#       bf_add(dst, -1);
	mov A, .L3035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3035:
	mov A, B
	.loc 7 1517 0
	#     }; bf_ifzero_end();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1506 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3036
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3036:
	mov A, B
	add SP, 2
	.loc 7 1518 0
	#     // Decrement.
	mov A, .L3037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3037:
	mov A, B
	.loc 7 1520 0
	#   }; bf_loop_end();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1506 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1520 0
	#   }; bf_loop_end();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3038:
	mov A, B
	add SP, 2
	.loc 7 1521 0
	# 
	mov A, .L3039
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3039:
	mov A, B
	.loc 7 1523 0
	#     bf_move_ptr(dst);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3040
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3040:
	mov A, B
	add SP, 2
	.loc 7 1530 0
	#   }; bf_loop_end();
	.loc 7 1524 0
	#     // Carry?
	.loc 7 1506 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3041
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3041:
	mov A, B
	add SP, 1
	.loc 7 1526 0
	#       bf_add(dst-1, -1);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3042:
	mov A, B
	add SP, 1
	.loc 7 1527 0
	#     }; bf_ifzero_end();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1506 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1527 0
	#     }; bf_ifzero_end();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3043
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3043:
	mov A, B
	add SP, 2
	.loc 7 1528 0
	#     // Decrement.
	mov A, .L3044
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3044:
	mov A, B
	.loc 7 1530 0
	#   }; bf_loop_end();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1506 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3045:
	mov A, B
	add SP, 2
	.loc 7 1531 0
	#   bf_move_neg(BF_WRK-1, dst-1);
	mov A, .L3046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3046:
	mov A, B
	.loc 7 1532 0
	# }
	.loc 7 1506 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1532 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1532 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_neg
	.L3047:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_emit_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 1639 0
	#   }
	.loc 7 1538 0
	#   }
	.loc 7 1536 0
	#     bf_add(BF_WRK, 1);
	.loc 7 1532 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3048, A, 0
	.loc 7 1538 0
	#   }
	.loc 7 1537 0
	#     return;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3049:
	mov A, B
	add SP, 2
	.loc 7 1538 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3048:
	.loc 7 1540 0
	# 
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1532 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L3050:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1542 0
	#   int rhspos = BF_WRK+3;
	mov A, 0
	mov B, SP
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1543 0
	#   if (op == JGT || op == JLE) {
	mov A, 0
	mov B, SP
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1543 0
	#   if (op == JGT || op == JLE) {
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 1546 0
	#   }
	.loc 7 1544 0
	#     lhspos = BF_WRK+3;
	.loc 7 1540 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3051, A, 0
	.loc 7 1544 0
	#     lhspos = BF_WRK+3;
	.loc 7 1540 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3051:
	mov A, B
	jeq .L3052, A, 0
	.loc 7 1546 0
	#   }
	.loc 7 1545 0
	#     rhspos = BF_WRK;
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1545 0
	#     rhspos = BF_WRK;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1546 0
	#   }
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.L3052:
	.loc 7 1549 0
	#   if (inst->src.type == REG) {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1549 0
	#   if (inst->src.type == REG) {
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1542 0
	#   int rhspos = BF_WRK+3;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1549 0
	#   if (inst->src.type == REG) {
	.loc 7 1532 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3053:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_copy_word
	.L3054:
	mov A, B
	add SP, 3
	.loc 7 1553 0
	#   }
	.loc 7 1550 0
	#     bf_copy_word(bf_regpos(inst->src.reg), rhspos, BF_WRK+6);
	.loc 7 1532 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3055, A, 0
	.loc 7 1551 0
	#   } else {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1551 0
	#   } else {
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1543 0
	#   if (op == JGT || op == JLE) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1551 0
	#   } else {
	.loc 7 1532 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3056:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_copy_word
	.L3057:
	mov A, B
	add SP, 3
	jmp .L3058
	.L3055:
	.loc 7 1553 0
	#   }
	.loc 7 1532 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1543 0
	#   if (op == JGT || op == JLE) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add_word
	.L3059:
	mov A, B
	add SP, 2
	.L3058:
	.loc 7 1577 0
	#   }
	.loc 7 1556 0
	#     bf_move_neg(BF_WRK-1, BF_WRK+3-1);
	.loc 7 1540 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3060, A, 0
	.loc 7 1556 0
	#     bf_move_neg(BF_WRK-1, BF_WRK+3-1);
	.loc 7 1540 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3060:
	mov A, B
	jeq .L3061, A, 0
	.loc 7 1577 0
	#   }
	.loc 7 1557 0
	#     bf_move_neg(BF_WRK, BF_WRK+3);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1557 0
	#     bf_move_neg(BF_WRK, BF_WRK+3);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1557 0
	#     bf_move_neg(BF_WRK, BF_WRK+3);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_neg
	.L3062:
	mov A, B
	add SP, 2
	.loc 7 1558 0
	#     bf_move_neg(BF_WRK+1, BF_WRK+3+1);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1558 0
	#     bf_move_neg(BF_WRK+1, BF_WRK+3+1);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_neg
	.L3063:
	mov A, B
	add SP, 2
	.loc 7 1559 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1559 0
	# 
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1559 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_neg
	.L3064:
	mov A, B
	add SP, 2
	.loc 7 1574 0
	#       }
	.loc 7 1561 0
	#       bf_add(BF_WRK, 1);
	.loc 7 1540 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3065, A, 0
	.loc 7 1567 0
	#       }
	.loc 7 1562 0
	#       for (int i = 2; i < 5; i++) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3066:
	mov A, B
	add SP, 2
	.loc 7 1567 0
	#       }
	.loc 7 1563 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 2
	store A, B
	.loc 7 1567 0
	#       }
	.L256:
	.loc 7 1563 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3067, A, 0
	jmp .L3068
	.L3067:
	.loc 7 1567 0
	#       }
	jmp .L258
	.L3068:
	.loc 7 1564 0
	#           bf_clear(BF_WRK+i);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1563 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3069
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3069:
	mov A, B
	add SP, 2
	.loc 7 1566 0
	#         }; bf_loop_end();
	.loc 7 1565 0
	#           bf_clear(BF_WRK);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1563 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3070
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3070:
	mov A, B
	add SP, 1
	.loc 7 1566 0
	#         }; bf_loop_end();
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3071
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3071:
	mov A, B
	add SP, 1
	.loc 7 1567 0
	#       }
	mov A, .L3072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3072:
	mov A, B
	.L257:
	.loc 7 1563 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1567 0
	#       }
	jmp .L256
	.L258:
	jmp .L3073
	.L3065:
	.loc 7 1574 0
	#       }
	.loc 7 1570 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 2
	store A, B
	.loc 7 1574 0
	#       }
	.L259:
	.loc 7 1570 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3074, A, 0
	jmp .L3075
	.L3074:
	.loc 7 1574 0
	#       }
	jmp .L261
	.L3075:
	.loc 7 1571 0
	#           bf_clear(BF_WRK+i);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1570 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3076:
	mov A, B
	add SP, 2
	.loc 7 1573 0
	#         }; bf_loop_end();
	.loc 7 1572 0
	#           bf_add(BF_WRK, 1);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1570 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3077
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3077:
	mov A, B
	add SP, 1
	.loc 7 1573 0
	#         }; bf_loop_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3078
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3078:
	mov A, B
	add SP, 2
	.loc 7 1574 0
	#       }
	mov A, .L3079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3079:
	mov A, B
	.L260:
	.loc 7 1570 0
	#         bf_loop_begin(BF_WRK+i, 0); {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1574 0
	#       }
	jmp .L259
	.L261:
	.L3073:
	.loc 7 1577 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L3061:
	.loc 7 1580 0
	#     bf_move_ptr(BF_WRK+2);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1580 0
	#     bf_move_ptr(BF_WRK+2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3080:
	mov A, B
	add SP, 2
	.loc 7 1592 0
	#   }; bf_loop_end();
	.loc 7 1581 0
	#     // If the RHS becomes zero at this moment, LHS >=
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1581 0
	#     // If the RHS becomes zero at this moment, LHS >=
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3081:
	mov A, B
	add SP, 1
	.loc 7 1584 0
	#       bf_clear(BF_WRK-1);
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3082:
	mov A, B
	add SP, 1
	.loc 7 1590 0
	#     }; bf_ifzero_end();
	.loc 7 1585 0
	#       bf_clear(BF_WRK);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1585 0
	#       bf_clear(BF_WRK);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3083:
	mov A, B
	add SP, 1
	.loc 7 1586 0
	#       bf_clear(BF_WRK+1);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3084:
	mov A, B
	add SP, 1
	.loc 7 1587 0
	#       bf_clear(BF_WRK+3);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1587 0
	#       bf_clear(BF_WRK+3);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3085:
	mov A, B
	add SP, 1
	.loc 7 1588 0
	#       bf_clear(BF_WRK+4);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1588 0
	#       bf_clear(BF_WRK+4);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3086:
	mov A, B
	add SP, 1
	.loc 7 1589 0
	#       bf_add(BF_WRK+2, 1);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1589 0
	#       bf_add(BF_WRK+2, 1);
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3087:
	mov A, B
	add SP, 1
	.loc 7 1590 0
	#     }; bf_ifzero_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1590 0
	#     }; bf_ifzero_end();
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3088:
	mov A, B
	add SP, 2
	.loc 7 1591 0
	#     bf_add(BF_WRK+2, -1);
	mov A, .L3089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3089:
	mov A, B
	.loc 7 1592 0
	#   }; bf_loop_end();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1592 0
	#   }; bf_loop_end();
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3090:
	mov A, B
	add SP, 2
	.loc 7 1593 0
	# 
	mov A, .L3091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3091:
	mov A, B
	.loc 7 1595 0
	#   bf_ifzero_begin_impl(4, true, "<<[-]>>"); {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1595 0
	#   bf_ifzero_begin_impl(4, true, "<<[-]>>"); {
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3092:
	mov A, B
	add SP, 1
	.loc 7 1596 0
	#     // Compare the higher byte first.
.data
	.L3093:
	.string "<<[-]>>"
.text
	mov A, .L3093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3094
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin_impl
	.L3094:
	mov A, B
	add SP, 3
	.loc 7 1627 0
	#   }; bf_ifzero_end();
	.loc 7 1598 0
	#       bf_move_ptr(BF_WRK+3);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3095
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3095:
	mov A, B
	add SP, 2
	.loc 7 1607 0
	#     }; bf_loop_end();
	.loc 7 1599 0
	#       // If the RHS becomes zero at this moment, LHS >=
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1599 0
	#       // If the RHS becomes zero at this moment, LHS >=
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3096:
	mov A, B
	add SP, 1
	.loc 7 1602 0
	#         bf_clear(BF_WRK+4);
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3097
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3097:
	mov A, B
	add SP, 1
	.loc 7 1605 0
	#       }; bf_ifzero_end();
	.loc 7 1603 0
	#         bf_add(BF_WRK+3, 1);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1603 0
	#         bf_add(BF_WRK+3, 1);
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3098
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3098:
	mov A, B
	add SP, 1
	.loc 7 1604 0
	#         bf_clear(BF_WRK);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1604 0
	#         bf_clear(BF_WRK);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3099:
	mov A, B
	add SP, 2
	.loc 7 1605 0
	#       }; bf_ifzero_end();
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3100:
	mov A, B
	add SP, 1
	.loc 7 1606 0
	#       bf_add(BF_WRK+3, -1);
	mov A, .L3101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3101:
	mov A, B
	.loc 7 1607 0
	#     }; bf_loop_end();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1607 0
	#     }; bf_loop_end();
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3102:
	mov A, B
	add SP, 2
	.loc 7 1608 0
	# 
	mov A, .L3103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3103:
	mov A, B
	.loc 7 1611 0
	#     bf_ifzero_begin_impl(3, true, ""); {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1611 0
	#     bf_ifzero_begin_impl(3, true, ""); {
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3104:
	mov A, B
	add SP, 1
	.loc 7 1612 0
	#       // Compare the lower byte.
.data
	.L3105:
	.string ""
.text
	mov A, .L3105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin_impl
	.L3106:
	mov A, B
	add SP, 3
	.loc 7 1626 0
	#     }; bf_ifzero_end();
	.loc 7 1614 0
	#         bf_move_ptr(BF_WRK+4);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1614 0
	#         bf_move_ptr(BF_WRK+4);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3107:
	mov A, B
	add SP, 2
	.loc 7 1619 0
	#       }; bf_loop_end();
	.loc 7 1615 0
	#         bf_ifzero_begin(1); {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1615 0
	#         bf_ifzero_begin(1); {
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3108:
	mov A, B
	add SP, 1
	.loc 7 1616 0
	#           bf_add(BF_WRK, 1);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3109
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3109:
	mov A, B
	add SP, 1
	.loc 7 1617 0
	#         }; bf_ifzero_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3110
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3110:
	mov A, B
	add SP, 2
	.loc 7 1618 0
	#         bf_add(BF_WRK+4, -1);
	mov A, .L3111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3111:
	mov A, B
	.loc 7 1619 0
	#       }; bf_loop_end();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1619 0
	#       }; bf_loop_end();
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3112:
	mov A, B
	add SP, 2
	.loc 7 1620 0
	# 
	mov A, .L3113
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3113:
	mov A, B
	.loc 7 1623 0
	#       bf_ifzero_begin_impl(1, true, ""); {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1623 0
	#       bf_ifzero_begin_impl(1, true, ""); {
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3114
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3114:
	mov A, B
	add SP, 1
	.loc 7 1624 0
	#         bf_add(BF_WRK, 1);
.data
	.L3115:
	.string ""
.text
	mov A, .L3115
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin_impl
	.L3116:
	mov A, B
	add SP, 3
	.loc 7 1625 0
	#       }; bf_ifzero_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3117:
	mov A, B
	add SP, 2
	.loc 7 1626 0
	#     }; bf_ifzero_end();
	mov A, .L3118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3118:
	mov A, B
	.loc 7 1627 0
	#   }; bf_ifzero_end();
	mov A, .L3119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3119:
	mov A, B
	.loc 7 1628 0
	# 
	mov A, .L3120
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3120:
	mov A, B
	.loc 7 1630 0
	#   bf_clear_word(BF_WRK+3);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1630 0
	#   bf_clear_word(BF_WRK+3);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3121
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3121:
	mov A, B
	add SP, 1
	.loc 7 1631 0
	#   bf_clear_word(BF_WRK+6);
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1631 0
	#   bf_clear_word(BF_WRK+6);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3122
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3122:
	mov A, B
	add SP, 1
	.loc 7 1632 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1632 0
	# 
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3123:
	mov A, B
	add SP, 1
	.loc 7 1639 0
	#   }
	.loc 7 1635 0
	#     bf_move_ptr(BF_WRK);
	.loc 7 1540 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L3124, A, 0
	.loc 7 1635 0
	#     bf_move_ptr(BF_WRK);
	.loc 7 1540 0
	# 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3124:
	mov A, B
	jeq .L3125, A, 0
	.loc 7 1639 0
	#   }
	.loc 7 1636 0
	#     bf_ifzero_begin_impl(1, true, ""); {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3126:
	mov A, B
	add SP, 1
	.loc 7 1637 0
	#       bf_add(BF_WRK, 1);
.data
	.L3127:
	.string ""
.text
	mov A, .L3127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin_impl
	.L3128:
	mov A, B
	add SP, 3
	.loc 7 1638 0
	#     }; bf_ifzero_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3129:
	mov A, B
	add SP, 2
	.loc 7 1639 0
	#   }
	mov A, .L3130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3130:
	mov A, B
	.L3125:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_emit_op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 7 1756 0
	#     error("oops");
	.loc 7 1644 0
	#   case MOV: {
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 1756 0
	#     error("oops");
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3131, A, 0
	jmp .L263
	.L3131:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3132, A, 0
	jmp .L264
	.L3132:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3133, A, 0
	jmp .L265
	.L3133:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3134, A, 0
	jmp .L266
	.L3134:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3135, A, 0
	jmp .L267
	.L3135:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3136, A, 0
	jmp .L268
	.L3136:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3137, A, 0
	jmp .L269
	.L3137:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3138, A, 0
	jmp .L270
	.L3138:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3139, A, 0
	jmp .L271
	.L3139:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3140, A, 0
	jmp .L272
	.L3140:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3141, A, 0
	jmp .L273
	.L3141:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3142, A, 0
	jmp .L274
	.L3142:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3143, A, 0
	jmp .L275
	.L3143:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3144, A, 0
	jmp .L276
	.L3144:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3145, A, 0
	jmp .L277
	.L3145:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3146, A, 0
	jmp .L278
	.L3146:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3147, A, 0
	jmp .L279
	.L3147:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3148, A, 0
	jmp .L280
	.L3148:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3149, A, 0
	jmp .L281
	.L3149:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3150, A, 0
	jmp .L282
	.L3150:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3151, A, 0
	jmp .L283
	.L3151:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3152, A, 0
	jmp .L284
	.L3152:
	jmp .L285
	.loc 7 1657 0
	#   }
	.loc 7 1645 0
	#     int dst = bf_regpos(inst->dst.reg);
	.L263:
	.loc 7 1657 0
	#   }
	.loc 7 1646 0
	#     if (inst->src.type == REG) {
	mov A, 0
	mov B, SP
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3153:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 1655 0
	#     }
	.loc 7 1647 0
	#       int src = bf_regpos(inst->src.reg);
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3154, A, 0
	.loc 7 1651 0
	#       }
	.loc 7 1648 0
	#       if (src != dst) {
	mov A, 0
	mov B, SP
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3155:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 1651 0
	#       }
	.loc 7 1649 0
	#         bf_clear_word(dst);
	.loc 7 1648 0
	#       if (src != dst) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1646 0
	#     if (inst->src.type == REG) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3156, A, 0
	.loc 7 1651 0
	#       }
	.loc 7 1650 0
	#         bf_copy_word(src, dst, BF_WRK);
	.loc 7 1646 0
	#     if (inst->src.type == REG) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3157:
	mov A, B
	add SP, 1
	.loc 7 1651 0
	#       }
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1646 0
	#     if (inst->src.type == REG) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1648 0
	#       if (src != dst) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_copy_word
	.L3158:
	mov A, B
	add SP, 3
	.L3156:
	jmp .L3159
	.L3154:
	.loc 7 1655 0
	#     }
	.loc 7 1654 0
	#       bf_add_word(dst, inst->src.imm);
	.loc 7 1646 0
	#     if (inst->src.type == REG) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3160:
	mov A, B
	add SP, 1
	.loc 7 1655 0
	#     }
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1646 0
	#     if (inst->src.type == REG) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add_word
	.L3161:
	mov A, B
	add SP, 2
	.L3159:
	.loc 7 1657 0
	#   }
	jmp .L262
	.loc 7 1660 0
	#     bf_emit_add(inst);
	.L264:
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_add
	.L3162:
	mov A, B
	add SP, 1
	.loc 7 1662 0
	# 
	jmp .L262
	.loc 7 1664 0
	#     bf_emit_sub(inst);
	.L265:
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_sub
	.L3163:
	mov A, B
	add SP, 1
	.loc 7 1666 0
	# 
	jmp .L262
	.loc 7 1668 0
	#     bf_add(BF_LOAD_REQ, 1);
	.L266:
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_LOAD_REQ
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3164:
	mov A, B
	add SP, 2
	.loc 7 1670 0
	#       error("only \"load a, X\" is supported");
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3165, A, 0
	.loc 7 1670 0
	#       error("only \"load a, X\" is supported");
.data
	.L3166:
	.string "only \"load a, X\" is supported"
.text
	mov A, .L3166
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L3167:
	mov A, B
	add SP, 1
	.L3165:
	.loc 7 1676 0
	#     }
	.loc 7 1673 0
	#       bf_copy_word(bf_regpos(inst->src.reg), BF_MEM + BF_MEM_A, BF_WRK);
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3168, A, 0
	.loc 7 1674 0
	#     } else {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1674 0
	#     } else {
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1674 0
	#     } else {
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3169:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_copy_word
	.L3170:
	mov A, B
	add SP, 3
	jmp .L3171
	.L3168:
	.loc 7 1676 0
	#     }
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1676 0
	#     }
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add_word
	.L3172:
	mov A, B
	add SP, 2
	.L3171:
	.loc 7 1678 0
	# 
	jmp .L262
	.loc 7 1680 0
	#     bf_add(BF_STORE_REQ, 1);
	.L267:
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_STORE_REQ
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3173
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3173:
	mov A, B
	add SP, 2
	.loc 7 1682 0
	#     if (inst->src.type == REG) {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1682 0
	#     if (inst->src.type == REG) {
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_V
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1682 0
	#     if (inst->src.type == REG) {
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3174:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3175
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_copy_word
	.L3175:
	mov A, B
	add SP, 3
	.loc 7 1686 0
	#     }
	.loc 7 1683 0
	#       bf_copy_word(bf_regpos(inst->src.reg), BF_MEM + BF_MEM_A, BF_WRK);
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3176, A, 0
	.loc 7 1684 0
	#     } else {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1684 0
	#     } else {
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1684 0
	#     } else {
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3177:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_copy_word
	.L3178:
	mov A, B
	add SP, 3
	jmp .L3179
	.L3176:
	.loc 7 1686 0
	#     }
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1686 0
	#     }
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add_word
	.L3180:
	mov A, B
	add SP, 2
	.L3179:
	.loc 7 1688 0
	# 
	jmp .L262
	.loc 7 1700 0
	#   }
	.loc 7 1690 0
	#   case NE:
	.L268:
	.loc 7 1700 0
	#   }
	.loc 7 1690 0
	#   case NE:
	.L269:
	.loc 7 1700 0
	#   }
	.loc 7 1690 0
	#   case NE:
	.L270:
	.loc 7 1700 0
	#   }
	.loc 7 1690 0
	#   case NE:
	.L271:
	.loc 7 1700 0
	#   }
	.loc 7 1690 0
	#   case NE:
	.L272:
	.loc 7 1700 0
	#   }
	.loc 7 1690 0
	#   case NE:
	.L273:
	.loc 7 1700 0
	#   }
	.loc 7 1696 0
	#     int dst = bf_regpos(inst->dst.reg);
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_cmp
	.L3181:
	mov A, B
	add SP, 1
	.loc 7 1697 0
	#     bf_clear_word(dst);
	mov A, 0
	mov B, SP
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3182:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 1698 0
	#     bf_move_word(BF_WRK, dst+1);
	.loc 7 1697 0
	#     bf_clear_word(dst);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3183:
	mov A, B
	add SP, 1
	.loc 7 1699 0
	#     break;
	.loc 7 1697 0
	#     bf_clear_word(dst);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1699 0
	#     break;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3184:
	mov A, B
	add SP, 2
	.loc 7 1700 0
	#   }
	jmp .L262
	.loc 7 1711 0
	#     }
	.loc 7 1703 0
	#     if (inst->src.type == REG) {
	.L274:
	.loc 7 1711 0
	#     }
	.loc 7 1703 0
	#     if (inst->src.type == REG) {
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3185, A, 0
	.loc 7 1707 0
	#     } else {
	.loc 7 1705 0
	#       bf_move_ptr(src + 1);
	mov A, 0
	mov B, SP
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3186:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 1706 0
	#       bf_emit(".");
	.loc 7 1705 0
	#       bf_move_ptr(src + 1);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1706 0
	#       bf_emit(".");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3187:
	mov A, B
	add SP, 1
	.loc 7 1707 0
	#     } else {
.data
	.L3188:
	.string "."
.text
	mov A, .L3188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3189:
	mov A, B
	add SP, 1
	jmp .L3190
	.L3185:
	.loc 7 1711 0
	#     }
	.loc 7 1709 0
	#       bf_emit(".");
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1709 0
	#       bf_emit(".");
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3191
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L3191:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3192:
	mov A, B
	add SP, 2
	.loc 7 1710 0
	#       bf_clear(BF_WRK);
.data
	.L3193:
	.string "."
.text
	mov A, .L3193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3194:
	mov A, B
	add SP, 1
	.loc 7 1711 0
	#     }
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3195:
	mov A, B
	add SP, 1
	.L3190:
	.loc 7 1713 0
	# 
	jmp .L262
	.loc 7 1725 0
	#   }
	.loc 7 1715 0
	#     int src = bf_regpos(inst->dst.reg);
	.L275:
	.loc 7 1725 0
	#   }
	.loc 7 1716 0
	#     bf_clear_word(src);
	mov A, 0
	mov B, SP
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3196:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 1717 0
	#     bf_move_ptr(src+1);
	.loc 7 1716 0
	#     bf_clear_word(src);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3197:
	mov A, B
	add SP, 1
	.loc 7 1718 0
	#     bf_emit(",");
	.loc 7 1716 0
	#     bf_clear_word(src);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1718 0
	#     bf_emit(",");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3198:
	mov A, B
	add SP, 1
	.loc 7 1719 0
	#     bf_emit("+");
.data
	.L3199:
	.string ","
.text
	mov A, .L3199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3200:
	mov A, B
	add SP, 1
	.loc 7 1720 0
	#     bf_ifzero_begin(1); {
.data
	.L3201:
	.string "+"
.text
	mov A, .L3201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3202:
	mov A, B
	add SP, 1
	.loc 7 1721 0
	#       bf_add(src + 1, 1);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3203:
	mov A, B
	add SP, 1
	.loc 7 1722 0
	#     }; bf_ifzero_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1716 0
	#     bf_clear_word(src);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1722 0
	#     }; bf_ifzero_end();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3204:
	mov A, B
	add SP, 2
	.loc 7 1723 0
	#     bf_add(src + 1, -1);
	mov A, .L3205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3205:
	mov A, B
	.loc 7 1724 0
	#     break;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1716 0
	#     bf_clear_word(src);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1724 0
	#     break;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3206:
	mov A, B
	add SP, 2
	.loc 7 1725 0
	#   }
	jmp .L262
	.loc 7 1728 0
	#     bf_clear(BF_RUNNING);
	.L276:
	.loc 7 1203 0
	# }
	mov B, BF_RUNNING
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3207:
	mov A, B
	add SP, 1
	.loc 7 1730 0
	# 
	jmp .L262
	.loc 7 1732 0
	#     break;
	.L277:
	jmp .L262
	.loc 7 1753 0
	#   }
	.loc 7 1735 0
	#   case JNE:
	.L278:
	.loc 7 1753 0
	#   }
	.loc 7 1735 0
	#   case JNE:
	.L279:
	.loc 7 1753 0
	#   }
	.loc 7 1735 0
	#   case JNE:
	.L280:
	.loc 7 1753 0
	#   }
	.loc 7 1735 0
	#   case JNE:
	.L281:
	.loc 7 1753 0
	#   }
	.loc 7 1735 0
	#   case JNE:
	.L282:
	.loc 7 1753 0
	#   }
	.loc 7 1735 0
	#   case JNE:
	.L283:
	.loc 7 1753 0
	#   }
	.loc 7 1735 0
	#   case JNE:
	.L284:
	.loc 7 1753 0
	#   }
	.loc 7 1742 0
	#     bf_move_ptr(BF_WRK);
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_cmp
	.L3208:
	mov A, B
	add SP, 1
	.loc 7 1743 0
	#     bf_emit("[[-]");
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3209:
	mov A, B
	add SP, 1
	.loc 7 1744 0
	#     bf_clear_word(BF_NPC);
.data
	.L3210:
	.string "[[-]"
.text
	mov A, .L3210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3211:
	mov A, B
	add SP, 1
	.loc 7 1745 0
	#     if (inst->jmp.type == REG) {
	.loc 7 1203 0
	# }
	mov B, BF_NPC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3212:
	mov A, B
	add SP, 1
	.loc 7 1749 0
	#     }
	.loc 7 1746 0
	#       bf_copy_word(bf_regpos(inst->jmp.reg), BF_NPC, BF_WRK);
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3213, A, 0
	.loc 7 1747 0
	#     } else {
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_NPC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1747 0
	#     } else {
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_regpos
	.L3214:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_copy_word
	.L3215:
	mov A, B
	add SP, 3
	jmp .L3216
	.L3213:
	.loc 7 1749 0
	#     }
	.loc 7 1639 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_NPC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add_word
	.L3217:
	mov A, B
	add SP, 2
	.L3216:
	.loc 7 1751 0
	#     bf_emit("]");
	.loc 7 1203 0
	# }
	mov B, BF_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3218:
	mov A, B
	add SP, 1
	.loc 7 1752 0
	#     break;
.data
	.L3219:
	.string "]"
.text
	mov A, .L3219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3220
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3220:
	mov A, B
	add SP, 1
	.loc 7 1753 0
	#   }
	jmp .L262
	.loc 7 1756 0
	#     error("oops");
	.L285:
.data
	.L3221:
	.string "oops"
.text
	mov A, .L3221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3222
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L3222:
	mov A, B
	add SP, 1
	.L262:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_emit_code:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 1817 0
	# }
	.loc 7 1762 0
	#   bf_move_word2(BF_PC, BF_NPC, BF_OP);
.data
	.L3223:
	.string "fetch pc"
.text
	mov A, .L3223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_comment
	.L3224:
	mov A, B
	add SP, 1
	.loc 7 1763 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_NPC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_PC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word2
	.L3225:
	mov A, B
	add SP, 3
	.loc 7 1765 0
	#   bf_move_ptr(BF_NPC+3);
.data
	.L3226:
	.string "increment pc"
.text
	mov A, .L3226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_comment
	.L3227:
	mov A, B
	add SP, 1
	.loc 7 1766 0
	#   bf_emit("-");
	.loc 7 1203 0
	# }
	mov B, BF_NPC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1766 0
	#   bf_emit("-");
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3228:
	mov A, B
	add SP, 1
	.loc 7 1767 0
	#   bf_move_ptr(BF_NPC+1);
.data
	.L3229:
	.string "-"
.text
	mov A, .L3229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3230
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3230:
	mov A, B
	add SP, 1
	.loc 7 1768 0
	#   bf_emit("+");
	.loc 7 1203 0
	# }
	mov B, BF_NPC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1768 0
	#   bf_emit("+");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3231:
	mov A, B
	add SP, 1
	.loc 7 1769 0
	#   bf_emit("[>]>+");
.data
	.L3232:
	.string "+"
.text
	mov A, .L3232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3233:
	mov A, B
	add SP, 1
	.loc 7 1770 0
	#   // if 0
.data
	.L3234:
	.string "[>]>+"
.text
	mov A, .L3234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3235
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3235:
	mov A, B
	add SP, 1
	.loc 7 1772 0
	#   bf_set_ptr(BF_NPC+3);
.data
	.L3236:
	.string "[-<<+>>>+]"
.text
	mov A, .L3236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3237:
	mov A, B
	add SP, 1
	.loc 7 1773 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_NPC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1773 0
	# 
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3238:
	mov A, B
	add SP, 1
	.loc 7 1814 0
	#   }
	.loc 7 1775 0
	#     printf("\n# pc_h=%d\n", pc_h);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 1814 0
	#   }
	.L286:
	.loc 7 1775 0
	#     printf("\n# pc_h=%d\n", pc_h);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3239, A, 0
	jmp .L3240
	.L3239:
	.loc 7 1814 0
	#   }
	jmp .L288
	.L3240:
	.loc 7 1776 0
	# 
	.loc 7 1775 0
	#     printf("\n# pc_h=%d\n", pc_h);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1776 0
	# 
.data
	.L3241:
	.string "\n# pc_h=%d\n"
.text
	mov A, .L3241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L3242:
	mov A, B
	add SP, 2
	.loc 7 1778 0
	#     bf_move_ptr(BF_OP);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1778 0
	#     bf_move_ptr(BF_OP);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3243:
	mov A, B
	add SP, 2
	.loc 7 1779 0
	#     bf_emit("[<]<+[-<+");
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3244:
	mov A, B
	add SP, 1
	.loc 7 1780 0
	#     bf_set_ptr(BF_OP-2);
.data
	.L3245:
	.string "[<]<+[-<+"
.text
	mov A, .L3245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3246:
	mov A, B
	add SP, 1
	.loc 7 1781 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1781 0
	# 
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3247:
	mov A, B
	add SP, 1
	.loc 7 1809 0
	#     }
	.loc 7 1783 0
	#       int pc = pc_h * 256 + pc_l;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 1809 0
	#     }
	.L289:
	.loc 7 1783 0
	#       int pc = pc_h * 256 + pc_l;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3248, A, 0
	jmp .L3249
	.L3248:
	.loc 7 1809 0
	#     }
	jmp .L291
	.L3249:
	.loc 7 1784 0
	#       if (!inst)
	mov A, 0
	mov B, SP
	.loc 7 1775 0
	#     printf("\n# pc_h=%d\n", pc_h);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1784 0
	#       if (!inst)
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3250:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1783 0
	#       int pc = pc_h * 256 + pc_l;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 1785 0
	#         break;
	.loc 7 1756 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	eq A, 0
	jeq .L3251, A, 0
	.loc 7 1785 0
	#         break;
	jmp .L291
	.L3251:
	.loc 7 1788 0
	#       bf_move_ptr(BF_OP+1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1788 0
	#       bf_move_ptr(BF_OP+1);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3252:
	mov A, B
	add SP, 2
	.loc 7 1789 0
	#       bf_emit("[>]>+[->+");
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1789 0
	#       bf_emit("[>]>+[->+");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3253:
	mov A, B
	add SP, 1
	.loc 7 1790 0
	#       bf_set_ptr(BF_OP+3);
.data
	.L3254:
	.string "[>]>+[->+"
.text
	mov A, .L3254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3255:
	mov A, B
	add SP, 1
	.loc 7 1791 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1791 0
	# 
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3256:
	mov A, B
	add SP, 1
	.loc 7 1793 0
	# 
	.loc 7 1783 0
	#       int pc = pc_h * 256 + pc_l;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1793 0
	# 
.data
	.L3257:
	.string "\n# pc_l=%d\n"
.text
	mov A, .L3257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L3258:
	mov A, B
	add SP, 2
	.loc 7 1804 0
	#       }
	.L292:
	.loc 7 1795 0
	#         printf("\n# ");
	.loc 7 1756 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, 0
	jeq .L3259, A, 0
	.loc 7 1795 0
	#         printf("\n# ");
	.loc 7 1756 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1784 0
	#       if (!inst)
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L3259:
	mov A, B
	jeq .L3260, A, 0
	jmp .L3261
	.L3260:
	.loc 7 1804 0
	#       }
	jmp .L294
	.L3261:
	.loc 7 1796 0
	#         dump_inst_fp(inst, stdout);
.data
	.L3262:
	.string "\n# "
.text
	mov A, .L3262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L3263:
	mov A, B
	add SP, 1
	.loc 7 1797 0
	# 
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1756 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_inst_fp
	.L3264:
	mov A, B
	add SP, 2
	.loc 7 1801 0
	#         }
	.loc 7 1799 0
	#           bf_emit("@");
	mov A, 0
	jeq .L3265, A, 0
	.loc 7 1801 0
	#         }
	.loc 7 1800 0
	#           bf_dbg(format("%d pc=%d\n", inst->op, pc));
.data
	.L3266:
	.string "@"
.text
	mov A, .L3266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3267:
	mov A, B
	add SP, 1
	.loc 7 1801 0
	#         }
	.loc 7 1784 0
	#       if (!inst)
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1801 0
	#         }
	.loc 7 1756 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1801 0
	#         }
.data
	.L3268:
	.string "%d pc=%d\n"
.text
	mov A, .L3268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3269
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L3269:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_dbg
	.L3270:
	mov A, B
	add SP, 1
	.L3265:
	.loc 7 1804 0
	#       }
	.loc 7 1756 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3271
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_op
	.L3271:
	mov A, B
	add SP, 1
	.loc 7 1804 0
	#       }
	.L293:
	.loc 7 1795 0
	#         printf("\n# ");
	.loc 7 1756 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 1804 0
	#       }
	jmp .L292
	.L294:
	.loc 7 1807 0
	#       bf_emit("]");
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1807 0
	#       bf_emit("]");
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3272
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3272:
	mov A, B
	add SP, 1
	.loc 7 1808 0
	#       bf_add(BF_OP+1, -1);
.data
	.L3273:
	.string "]"
.text
	mov A, .L3273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3274:
	mov A, B
	add SP, 1
	.loc 7 1809 0
	#     }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1809 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3275:
	mov A, B
	add SP, 2
	.L290:
	.loc 7 1783 0
	#       int pc = pc_h * 256 + pc_l;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1809 0
	#     }
	jmp .L289
	.L291:
	.loc 7 1812 0
	#     bf_emit("]");
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1812 0
	#     bf_emit("]");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3276:
	mov A, B
	add SP, 1
	.loc 7 1813 0
	#     bf_add(BF_OP, -1);
.data
	.L3277:
	.string "]"
.text
	mov A, .L3277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3278:
	mov A, B
	add SP, 1
	.loc 7 1814 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3279:
	mov A, B
	add SP, 2
	.loc 7 1814 0
	#   }
	.L287:
	.loc 7 1775 0
	#     printf("\n# pc_h=%d\n", pc_h);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1814 0
	#   }
	jmp .L286
	.L288:
	.loc 7 1817 0
	# }
	.loc 7 1203 0
	# }
	mov B, BF_OP
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3280:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_emit_mem_load:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1870 0
	# }
	.loc 7 1821 0
	# 
.data
	.L3281:
	.string "memory (load)"
.text
	mov A, .L3281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_comment
	.L3282:
	mov A, B
	add SP, 1
	.loc 7 1823 0
	#   bf_emit("[-");
	.loc 7 1203 0
	# }
	mov B, BF_LOAD_REQ
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3283:
	mov A, B
	add SP, 1
	.loc 7 1824 0
	# 
.data
	.L3284:
	.string "[-"
.text
	mov A, .L3284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3285:
	mov A, B
	add SP, 1
	.loc 7 1826 0
	#   bf_set_ptr(0);
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3286:
	mov A, B
	add SP, 1
	.loc 7 1827 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3287:
	mov A, B
	add SP, 1
	.loc 7 1829 0
	#     bf_move_word(BF_MEM_A, BF_MEM_A + BF_MEM_BLK_LEN*256);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1829 0
	#     bf_move_word(BF_MEM_A, BF_MEM_A + BF_MEM_BLK_LEN*256);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3288:
	mov A, B
	add SP, 2
	.loc 7 1833 0
	#   }; bf_loop_end();
	.loc 7 1830 0
	#     bf_move_ptr(BF_MEM_A + BF_MEM_BLK_LEN*256);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1830 0
	#     bf_move_ptr(BF_MEM_A + BF_MEM_BLK_LEN*256);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1830 0
	#     bf_move_ptr(BF_MEM_A + BF_MEM_BLK_LEN*256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3289:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3290:
	mov A, B
	add SP, 2
	.loc 7 1831 0
	#     bf_set_ptr(BF_MEM_A);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1831 0
	#     bf_set_ptr(BF_MEM_A);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1831 0
	#     bf_set_ptr(BF_MEM_A);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3291:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3292:
	mov A, B
	add SP, 1
	.loc 7 1832 0
	#     bf_add(BF_MEM_USE+1, 1);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3293:
	mov A, B
	add SP, 1
	.loc 7 1833 0
	#   }; bf_loop_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_USE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1833 0
	#   }; bf_loop_end();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3294:
	mov A, B
	add SP, 2
	.loc 7 1834 0
	# 
	mov A, .L3295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3295:
	mov A, B
	.loc 7 1836 0
	#     bf_move_word(BF_MEM_A, BF_MEM_A + BF_MEM_BLK_LEN);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3296:
	mov A, B
	add SP, 2
	.loc 7 1840 0
	#   }; bf_loop_end();
	.loc 7 1837 0
	#     bf_move_ptr(BF_MEM_A + BF_MEM_BLK_LEN);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3297:
	mov A, B
	add SP, 2
	.loc 7 1838 0
	#     bf_set_ptr(BF_MEM_A);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3298:
	mov A, B
	add SP, 1
	.loc 7 1839 0
	#     bf_add(BF_MEM_USE, 1);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3299:
	mov A, B
	add SP, 1
	.loc 7 1840 0
	#   }; bf_loop_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_USE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3300:
	mov A, B
	add SP, 2
	.loc 7 1841 0
	# 
	mov A, .L3301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3301:
	mov A, B
	.loc 7 1848 0
	#   }
	.loc 7 1843 0
	#     bf_move_ptr(BF_MEM_A + 1);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 1848 0
	#   }
	.L295:
	.loc 7 1843 0
	#     bf_move_ptr(BF_MEM_A + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3302, A, 0
	jmp .L3303
	.L3302:
	.loc 7 1848 0
	#   }
	jmp .L297
	.L3303:
	.loc 7 1844 0
	#     bf_ifzero_begin(1); {
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1844 0
	#     bf_ifzero_begin(1); {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3304:
	mov A, B
	add SP, 1
	.loc 7 1845 0
	#       bf_copy_word(BF_MEM_CTL_LEN + al * 3, BF_MEM_V, BF_MEM_WRK + 2);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3305:
	mov A, B
	add SP, 1
	.loc 7 1846 0
	#     }; bf_ifzero_end();
	.loc 7 1203 0
	# }
	mov B, BF_MEM_WRK
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1846 0
	#     }; bf_ifzero_end();
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1846 0
	#     }; bf_ifzero_end();
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1843 0
	#     bf_move_ptr(BF_MEM_A + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1846 0
	#     }; bf_ifzero_end();
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3306:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_copy_word
	.L3307:
	mov A, B
	add SP, 3
	.loc 7 1847 0
	#     bf_add(BF_MEM_A + 1, -1);
	mov A, .L3308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3308:
	mov A, B
	.loc 7 1848 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1848 0
	#   }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3309:
	mov A, B
	add SP, 2
	.L296:
	.loc 7 1843 0
	#     bf_move_ptr(BF_MEM_A + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1848 0
	#   }
	jmp .L295
	.L297:
	.loc 7 1850 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1850 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3310:
	mov A, B
	add SP, 1
	.loc 7 1852 0
	#     bf_move_ptr(BF_MEM_V);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_USE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3311:
	mov A, B
	add SP, 2
	.loc 7 1855 0
	#   }; bf_loop_end();
	.loc 7 1853 0
	#     bf_set_ptr(BF_MEM_V + BF_MEM_BLK_LEN);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3312:
	mov A, B
	add SP, 1
	.loc 7 1854 0
	#     bf_move_word(BF_MEM_V + BF_MEM_BLK_LEN, BF_MEM_V);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3313:
	mov A, B
	add SP, 1
	.loc 7 1855 0
	#   }; bf_loop_end();
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1855 0
	#   }; bf_loop_end();
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3314:
	mov A, B
	add SP, 2
	.loc 7 1856 0
	# 
	mov A, .L3315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3315:
	mov A, B
	.loc 7 1858 0
	#     bf_move_ptr(BF_MEM_V);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_USE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1858 0
	#     bf_move_ptr(BF_MEM_V);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3316:
	mov A, B
	add SP, 2
	.loc 7 1861 0
	#   }; bf_loop_end();
	.loc 7 1859 0
	#     bf_set_ptr(BF_MEM_V + BF_MEM_BLK_LEN * 256);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3317:
	mov A, B
	add SP, 1
	.loc 7 1860 0
	#     bf_move_word(BF_MEM_V + BF_MEM_BLK_LEN * 256, BF_MEM_V);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1860 0
	#     bf_move_word(BF_MEM_V + BF_MEM_BLK_LEN * 256, BF_MEM_V);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1860 0
	#     bf_move_word(BF_MEM_V + BF_MEM_BLK_LEN * 256, BF_MEM_V);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3318:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3319:
	mov A, B
	add SP, 1
	.loc 7 1861 0
	#   }; bf_loop_end();
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1861 0
	#   }; bf_loop_end();
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1861 0
	#   }; bf_loop_end();
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1861 0
	#   }; bf_loop_end();
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3320:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3321:
	mov A, B
	add SP, 2
	.loc 7 1862 0
	# 
	mov A, .L3322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3322:
	mov A, B
	.loc 7 1864 0
	#   bf_set_ptr(BF_MEM);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3323:
	mov A, B
	add SP, 1
	.loc 7 1865 0
	#   bf_clear_word(BF_A);
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3324:
	mov A, B
	add SP, 1
	.loc 7 1866 0
	#   bf_move_word(BF_MEM + BF_MEM_V, BF_A);
	.loc 7 1203 0
	# }
	mov B, BF_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3325:
	mov A, B
	add SP, 1
	.loc 7 1867 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1867 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_V
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3326:
	mov A, B
	add SP, 2
	.loc 7 1869 0
	#   bf_emit("]");
	.loc 7 1203 0
	# }
	mov B, BF_LOAD_REQ
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3327:
	mov A, B
	add SP, 1
	.loc 7 1870 0
	# }
.data
	.L3328:
	.string "]"
.text
	mov A, .L3328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3329:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
bf_emit_mem_store:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 1925 0
	# }
	.loc 7 1874 0
	# 
.data
	.L3330:
	.string "memory (store)"
.text
	mov A, .L3330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_comment
	.L3331:
	mov A, B
	add SP, 1
	.loc 7 1876 0
	#   bf_emit("[-");
	.loc 7 1203 0
	# }
	mov B, BF_STORE_REQ
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3332
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3332:
	mov A, B
	add SP, 1
	.loc 7 1877 0
	# 
.data
	.L3333:
	.string "[-"
.text
	mov A, .L3333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3334:
	mov A, B
	add SP, 1
	.loc 7 1879 0
	#   bf_set_ptr(0);
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3335:
	mov A, B
	add SP, 1
	.loc 7 1880 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3336:
	mov A, B
	add SP, 1
	.loc 7 1882 0
	#     bf_move_word(BF_MEM_V, BF_MEM_V + BF_MEM_BLK_LEN*256);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1882 0
	#     bf_move_word(BF_MEM_V, BF_MEM_V + BF_MEM_BLK_LEN*256);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3337:
	mov A, B
	add SP, 2
	.loc 7 1887 0
	#   }; bf_loop_end();
	.loc 7 1883 0
	#     bf_move_word(BF_MEM_A, BF_MEM_A + BF_MEM_BLK_LEN*256);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1883 0
	#     bf_move_word(BF_MEM_A, BF_MEM_A + BF_MEM_BLK_LEN*256);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1883 0
	#     bf_move_word(BF_MEM_A, BF_MEM_A + BF_MEM_BLK_LEN*256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3338:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3339:
	mov A, B
	add SP, 2
	.loc 7 1884 0
	#     bf_move_ptr(BF_MEM_A + BF_MEM_BLK_LEN*256);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1884 0
	#     bf_move_ptr(BF_MEM_A + BF_MEM_BLK_LEN*256);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1884 0
	#     bf_move_ptr(BF_MEM_A + BF_MEM_BLK_LEN*256);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3340:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3341:
	mov A, B
	add SP, 2
	.loc 7 1885 0
	#     bf_set_ptr(BF_MEM_A);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1885 0
	#     bf_set_ptr(BF_MEM_A);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1885 0
	#     bf_set_ptr(BF_MEM_A);
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3342:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3343:
	mov A, B
	add SP, 1
	.loc 7 1886 0
	#     bf_add(BF_MEM_USE+1, 1);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3344:
	mov A, B
	add SP, 1
	.loc 7 1887 0
	#   }; bf_loop_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_USE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1887 0
	#   }; bf_loop_end();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3345:
	mov A, B
	add SP, 2
	.loc 7 1888 0
	# 
	mov A, .L3346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3346:
	mov A, B
	.loc 7 1890 0
	#     bf_move_word(BF_MEM_V, BF_MEM_V + BF_MEM_BLK_LEN);
	mov A, 45
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_begin
	.L3347:
	mov A, B
	add SP, 2
	.loc 7 1895 0
	#   }; bf_loop_end();
	.loc 7 1891 0
	#     bf_move_word(BF_MEM_A, BF_MEM_A + BF_MEM_BLK_LEN);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3348:
	mov A, B
	add SP, 2
	.loc 7 1892 0
	#     bf_move_ptr(BF_MEM_A + BF_MEM_BLK_LEN);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3349:
	mov A, B
	add SP, 2
	.loc 7 1893 0
	#     bf_set_ptr(BF_MEM_A);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3350:
	mov A, B
	add SP, 1
	.loc 7 1894 0
	#     bf_add(BF_MEM_USE, 1);
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3351:
	mov A, B
	add SP, 1
	.loc 7 1895 0
	#   }; bf_loop_end();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_USE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3352:
	mov A, B
	add SP, 2
	.loc 7 1896 0
	# 
	mov A, .L3353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_loop_end
	.L3353:
	mov A, B
	.loc 7 1905 0
	#   }
	.loc 7 1899 0
	#     bf_move_ptr(BF_MEM_A + 1);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 1905 0
	#   }
	.L298:
	.loc 7 1899 0
	#     bf_move_ptr(BF_MEM_A + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3354, A, 0
	jmp .L3355
	.L3354:
	.loc 7 1905 0
	#   }
	jmp .L300
	.L3355:
	.loc 7 1900 0
	#     bf_ifzero_begin(1); {
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1900 0
	#     bf_ifzero_begin(1); {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3356:
	mov A, B
	add SP, 1
	.loc 7 1901 0
	#       bf_clear_word(BF_MEM_CTL_LEN + al * 3);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3357
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_begin
	.L3357:
	mov A, B
	add SP, 1
	.loc 7 1903 0
	#     }; bf_ifzero_end();
	.loc 7 1902 0
	#       bf_move_word(BF_MEM_V, BF_MEM_CTL_LEN + al * 3);
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1899 0
	#     bf_move_ptr(BF_MEM_A + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1902 0
	#       bf_move_word(BF_MEM_V, BF_MEM_CTL_LEN + al * 3);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3358:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear_word
	.L3359:
	mov A, B
	add SP, 1
	.loc 7 1903 0
	#     }; bf_ifzero_end();
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1899 0
	#     bf_move_ptr(BF_MEM_A + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1903 0
	#     }; bf_ifzero_end();
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3360:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_V
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3361:
	mov A, B
	add SP, 2
	.loc 7 1904 0
	#     bf_add(BF_MEM_A + 1, -1);
	mov A, .L3362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_ifzero_end
	.L3362:
	mov A, B
	.loc 7 1905 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1905 0
	#   }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3363:
	mov A, B
	add SP, 2
	.L299:
	.loc 7 1899 0
	#     bf_move_ptr(BF_MEM_A + 1);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1905 0
	#   }
	jmp .L298
	.L300:
	.loc 7 1907 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_MEM_A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1907 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_clear
	.L3364:
	mov A, B
	add SP, 1
	.loc 7 1909 0
	#   bf_emit("[-");
	.loc 7 1203 0
	# }
	mov B, BF_MEM_USE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3365:
	mov A, B
	add SP, 1
	.loc 7 1910 0
	#   for (int i = 0; i < BF_MEM_BLK_LEN; i++)
.data
	.L3366:
	.string "[-"
.text
	mov A, .L3366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3367:
	mov A, B
	add SP, 1
	.loc 7 1911 0
	#     putchar('<');
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.L301:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3368, A, 0
	jmp .L3369
	.L3368:
	.loc 7 1911 0
	#     putchar('<');
	jmp .L303
	.L3369:
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L302:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	jmp .L301
	.L303:
	.loc 7 1913 0
	# 
.data
	.L3370:
	.string "]"
.text
	mov A, .L3370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3371:
	mov A, B
	add SP, 1
	.loc 7 1915 0
	#   bf_emit("[-");
	.loc 7 1203 0
	# }
	mov B, BF_MEM_USE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1915 0
	#   bf_emit("[-");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3372:
	mov A, B
	add SP, 1
	.loc 7 1916 0
	#   for (int i = 0; i < BF_MEM_BLK_LEN*256; i++)
.data
	.L3373:
	.string "[-"
.text
	mov A, .L3373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3374:
	mov A, B
	add SP, 1
	.loc 7 1917 0
	#     putchar('<');
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.L304:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_MEM_BLK_LEN
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1917 0
	#     putchar('<');
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3375:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3376, A, 0
	jmp .L3377
	.L3376:
	jmp .L306
	.L3377:
	mov A, 60
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L305:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	jmp .L304
	.L306:
	.loc 7 1919 0
	# 
.data
	.L3378:
	.string "]"
.text
	mov A, .L3378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3379:
	mov A, B
	add SP, 1
	.loc 7 1921 0
	#   bf_set_ptr(BF_MEM);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3380:
	mov A, B
	add SP, 1
	.loc 7 1922 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_set_ptr
	.L3381:
	mov A, B
	add SP, 1
	.loc 7 1924 0
	#   bf_emit("]");
	.loc 7 1203 0
	# }
	mov B, BF_STORE_REQ
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3382:
	mov A, B
	add SP, 1
	.loc 7 1925 0
	# }
.data
	.L3383:
	.string "]"
.text
	mov A, .L3383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit
	.L3384:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_bf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1947 0
	# }
	.loc 7 1929 0
	# 
	.loc 7 1925 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_init_state
	.L3385:
	mov A, B
	add SP, 1
	.loc 7 1931 0
	#   bf_add(BF_RUNNING, 1);
.data
	.L3386:
	.string "prologue"
.text
	mov A, .L3386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3387
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_comment
	.L3387:
	mov A, B
	add SP, 1
	.loc 7 1932 0
	#   emit_line("[");
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1203 0
	# }
	mov B, BF_RUNNING
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3388
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_add
	.L3388:
	mov A, B
	add SP, 2
	.loc 7 1933 0
	# 
.data
	.L3389:
	.string "["
.text
	mov A, .L3389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3390
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3390:
	mov A, B
	add SP, 1
	.loc 7 1935 0
	#   bf_emit_mem_load();
	.loc 7 1925 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_code
	.L3391:
	mov A, B
	add SP, 1
	.loc 7 1936 0
	#   bf_emit_mem_store();
	mov A, .L3392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_mem_load
	.L3392:
	mov A, B
	.loc 7 1937 0
	#   bf_move_word(BF_NPC, BF_PC);
	mov A, .L3393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_emit_mem_store
	.L3393:
	mov A, B
	.loc 7 1938 0
	# 
	.loc 7 1203 0
	# }
	mov B, BF_PC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BF_NPC
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_word
	.L3394:
	mov A, B
	add SP, 2
	.loc 7 1940 0
	#   bf_move_ptr(BF_RUNNING);
.data
	.L3395:
	.string "epilogue"
.text
	mov A, .L3395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_comment
	.L3396:
	mov A, B
	add SP, 1
	.loc 7 1941 0
	#   emit_line("]");
	.loc 7 1203 0
	# }
	mov B, BF_RUNNING
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp bf_move_ptr
	.L3397:
	mov A, B
	add SP, 1
	.loc 7 1942 0
	# 
.data
	.L3398:
	.string "]"
.text
	mov A, .L3398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3399:
	mov A, B
	add SP, 1
	.loc 7 1945 0
	#   // EOL at EOF
.data
	.L3400:
	.string "]"
.text
	mov A, .L3400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3401:
	mov A, B
	add SP, 1
	.loc 7 1947 0
	# }
.data
	.L3402:
	.string "[...THE END...]"
.text
	mov A, .L3402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3403:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
c_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 1959 0
	# }
	.loc 7 1953 0
	#   emit_line("#include <stdlib.h>");
.data
	.L3404:
	.string "#include <stdio.h>"
.text
	mov A, .L3404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3405:
	mov A, B
	add SP, 1
	.loc 7 1954 0
	# 
.data
	.L3406:
	.string "#include <stdlib.h>"
.text
	mov A, .L3406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3407:
	mov A, B
	add SP, 1
	.loc 7 1957 0
	#   }
	.loc 7 1956 0
	#     emit_line("unsigned int %s;", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 1957 0
	#   }
	.L307:
	.loc 7 1956 0
	#     emit_line("unsigned int %s;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3408, A, 0
	jmp .L3409
	.L3408:
	.loc 7 1957 0
	#   }
	jmp .L309
	.L3409:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1956 0
	#     emit_line("unsigned int %s;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1957 0
	#   }
.data
	.L3410:
	.string "unsigned int %s;"
.text
	mov A, .L3410
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3411:
	mov A, B
	add SP, 2
	.L308:
	.loc 7 1956 0
	#     emit_line("unsigned int %s;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 1957 0
	#   }
	jmp .L307
	.L309:
	.loc 7 1959 0
	# }
.data
	.L3412:
	.string "unsigned int mem[1<<24];"
.text
	mov A, .L3412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3413:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
c_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1971 0
	# }
	.loc 7 1963 0
	#   emit_line("void func%d() {", func_id);
.data
	.L3414:
	.string ""
.text
	mov A, .L3414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3415:
	mov A, B
	add SP, 1
	.loc 7 1964 0
	#   inc_indent();
	.loc 7 1959 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1964 0
	#   inc_indent();
.data
	.L3416:
	.string "void func%d() {"
.text
	mov A, .L3416
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3417:
	mov A, B
	add SP, 2
	.loc 7 1965 0
	#   emit_line("while (%d <= pc && pc < %d) {",
	mov A, .L3418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3418:
	mov A, B
	.loc 7 1966 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 1959 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1966 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3419:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1966 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 1959 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3420:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1966 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L3421:
	.string "while (%d <= pc && pc < %d) {"
.text
	mov A, .L3421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3422:
	mov A, B
	add SP, 3
	.loc 7 1968 0
	#   emit_line("switch (pc) {");
	mov A, .L3423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3423:
	mov A, B
	.loc 7 1969 0
	#   emit_line("case -1:  /* dummy */");
.data
	.L3424:
	.string "switch (pc) {"
.text
	mov A, .L3424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3425:
	mov A, B
	add SP, 1
	.loc 7 1970 0
	#   inc_indent();
.data
	.L3426:
	.string "case -1:  /* dummy */"
.text
	mov A, .L3426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3427
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3427:
	mov A, B
	add SP, 1
	.loc 7 1971 0
	# }
	mov A, .L3428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3428:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
c_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1981 0
	# }
	.loc 7 1975 0
	#   emit_line("}");
	mov A, .L3429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3429:
	mov A, B
	.loc 7 1976 0
	#   emit_line("pc++;");
.data
	.L3430:
	.string "}"
.text
	mov A, .L3430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3431:
	mov A, B
	add SP, 1
	.loc 7 1977 0
	#   dec_indent();
.data
	.L3432:
	.string "pc++;"
.text
	mov A, .L3432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3433:
	mov A, B
	add SP, 1
	.loc 7 1978 0
	#   emit_line("}");
	mov A, .L3434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3434:
	mov A, B
	.loc 7 1979 0
	#   dec_indent();
.data
	.L3435:
	.string "}"
.text
	mov A, .L3435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3436:
	mov A, B
	add SP, 1
	.loc 7 1980 0
	#   emit_line("}");
	mov A, .L3437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3437:
	mov A, B
	.loc 7 1981 0
	# }
.data
	.L3438:
	.string "}"
.text
	mov A, .L3438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3439:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
c_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 1989 0
	# }
	.loc 7 1985 0
	#   emit_line("");
.data
	.L3440:
	.string "break;"
.text
	mov A, .L3440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3441:
	mov A, B
	add SP, 1
	.loc 7 1986 0
	#   dec_indent();
.data
	.L3442:
	.string ""
.text
	mov A, .L3442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3443:
	mov A, B
	add SP, 1
	.loc 7 1987 0
	#   emit_line("case %d:", pc);
	mov A, .L3444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3444:
	mov A, B
	.loc 7 1988 0
	#   inc_indent();
	.loc 7 1981 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1988 0
	#   inc_indent();
.data
	.L3445:
	.string "case %d:"
.text
	mov A, .L3445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3446:
	mov A, B
	add SP, 2
	.loc 7 1989 0
	# }
	mov A, .L3447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3447:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
c_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2055 0
	#     error("oops");
	.loc 7 1993 0
	#   case MOV:
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2055 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3448, A, 0
	jmp .L311
	.L3448:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3449, A, 0
	jmp .L312
	.L3449:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3450, A, 0
	jmp .L313
	.L3450:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3451, A, 0
	jmp .L314
	.L3451:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3452, A, 0
	jmp .L315
	.L3452:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3453, A, 0
	jmp .L316
	.L3453:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3454, A, 0
	jmp .L317
	.L3454:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3455, A, 0
	jmp .L318
	.L3455:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3456, A, 0
	jmp .L319
	.L3456:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3457, A, 0
	jmp .L320
	.L3457:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3458, A, 0
	jmp .L321
	.L3458:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3459, A, 0
	jmp .L322
	.L3459:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3460, A, 0
	jmp .L323
	.L3460:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3461, A, 0
	jmp .L324
	.L3461:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3462, A, 0
	jmp .L325
	.L3462:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3463, A, 0
	jmp .L326
	.L3463:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3464, A, 0
	jmp .L327
	.L3464:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3465, A, 0
	jmp .L328
	.L3465:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3466, A, 0
	jmp .L329
	.L3466:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3467, A, 0
	jmp .L330
	.L3467:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3468, A, 0
	jmp .L331
	.L3468:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3469, A, 0
	jmp .L332
	.L3469:
	jmp .L333
	.loc 7 1994 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.L311:
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3470:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1994 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1994 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1994 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
.data
	.L3471:
	.string "%s = %s;"
.text
	mov A, .L3471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3472
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3472:
	mov A, B
	add SP, 3
	.loc 7 1996 0
	# 
	jmp .L310
	.loc 7 1998 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.L312:
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3473:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1998 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1998 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1998 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1998 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1998 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
.data
	.L3474:
	.string "%s = (%s + %s) & 16777215;"
.text
	mov A, .L3474
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3475
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3475:
	mov A, B
	add SP, 4
	.loc 7 2002 0
	# 
	jmp .L310
	.loc 7 2004 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.L313:
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3476
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3476:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2004 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2004 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2004 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2004 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2004 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
.data
	.L3477:
	.string "%s = (%s - %s) & 16777215;"
.text
	mov A, .L3477
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3478
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3478:
	mov A, B
	add SP, 4
	.loc 7 2008 0
	# 
	jmp .L310
	.loc 7 2010 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.L314:
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3479
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3479:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2010 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2010 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2010 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
.data
	.L3480:
	.string "%s = mem[%s];"
.text
	mov A, .L3480
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3481:
	mov A, B
	add SP, 3
	.loc 7 2012 0
	# 
	jmp .L310
	.loc 7 2014 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.L315:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2014 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2014 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3482
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3482:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2014 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L3483:
	.string "mem[%s] = %s;"
.text
	mov A, .L3483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3484:
	mov A, B
	add SP, 3
	.loc 7 2016 0
	# 
	jmp .L310
	.loc 7 2018 0
	#     emit_line("putchar(%s);", src_str(inst));
	.L316:
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3485:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2018 0
	#     emit_line("putchar(%s);", src_str(inst));
.data
	.L3486:
	.string "putchar(%s);"
.text
	mov A, .L3486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3487:
	mov A, B
	add SP, 2
	.loc 7 2020 0
	# 
	jmp .L310
	.loc 7 2022 0
	#     emit_line("{ int _ = getchar(); %s = _ != EOF ? _ : 0; }",
	.L317:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2022 0
	#     emit_line("{ int _ = getchar(); %s = _ != EOF ? _ : 0; }",
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2022 0
	#     emit_line("{ int _ = getchar(); %s = _ != EOF ? _ : 0; }",
.data
	.L3488:
	.string "{ int _ = getchar(); %s = _ != EOF ? _ : 0; }"
.text
	mov A, .L3488
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3489
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3489:
	mov A, B
	add SP, 2
	.loc 7 2025 0
	# 
	jmp .L310
	.loc 7 2027 0
	#     emit_line("exit(0);");
	.L318:
.data
	.L3490:
	.string "exit(0);"
.text
	mov A, .L3490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3491:
	mov A, B
	add SP, 1
	.loc 7 2029 0
	# 
	jmp .L310
	.loc 7 2031 0
	#     break;
	.L319:
	jmp .L310
	.loc 7 2034 0
	#   case NE:
	.L320:
	.L321:
	.L322:
	.L323:
	.L324:
	.L325:
.data
	.L3492:
	.string "1"
.text
	mov A, .L3492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3493
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L3493:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2034 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2034 0
	#   case NE:
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2034 0
	#   case NE:
.data
	.L3494:
	.string "%s = %s;"
.text
	mov A, .L3494
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3495
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3495:
	mov A, B
	add SP, 3
	.loc 7 2042 0
	# 
	jmp .L310
	.loc 7 2044 0
	#   case JNE:
	.L326:
	.L327:
	.L328:
	.L329:
	.L330:
	.L331:
	.L332:
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3496
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L3496:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2044 0
	#   case JNE:
.data
	.L3497:
	.string "1"
.text
	mov A, .L3497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 1989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3498
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L3498:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2044 0
	#   case JNE:
.data
	.L3499:
	.string "if (%s) pc = %s - 1;"
.text
	mov A, .L3499
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3500:
	mov A, B
	add SP, 3
	.loc 7 2053 0
	# 
	jmp .L310
	.loc 7 2055 0
	#     error("oops");
	.L333:
.data
	.L3501:
	.string "oops"
.text
	mov A, .L3501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L3502:
	mov A, B
	add SP, 1
	.L310:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_c:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 2094 0
	# }
	.loc 7 2061 0
	# 
	mov A, .L3503
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp c_init_state
	.L3503:
	mov A, B
	.loc 7 2063 0
	#                                          c_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, c_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, c_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, c_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, c_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2055 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L3504:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2069 0
	#   inc_indent();
.data
	.L3505:
	.string "int main() {"
.text
	mov A, .L3505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3506:
	mov A, B
	add SP, 1
	.loc 7 2070 0
	# 
	mov A, .L3507
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3507:
	mov A, B
	.loc 7 2072 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov A, 0
	mov B, SP
	.loc 7 2055 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 2075 0
	#     }
	.loc 7 2073 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 2075 0
	#     }
	.L334:
	.loc 7 2072 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L3508, A, 0
	jmp .L3509
	.L3508:
	.loc 7 2075 0
	#     }
	jmp .L336
	.L3509:
	.loc 7 2074 0
	#       emit_line("mem[%d] = %d;", mp, data->v);
	.loc 7 2072 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	jeq .L3510, A, 0
	.loc 7 2075 0
	#     }
	.loc 7 2072 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2073 0
	#     if (data->v) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2075 0
	#     }
.data
	.L3511:
	.string "mem[%d] = %d;"
.text
	mov A, .L3511
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3512:
	mov A, B
	add SP, 3
	.L3510:
	.L335:
	.loc 7 2073 0
	#     if (data->v) {
	.loc 7 2072 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 2073 0
	#     if (data->v) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2075 0
	#     }
	jmp .L334
	.L336:
	.loc 7 2079 0
	#   emit_line("while (1) {");
.data
	.L3513:
	.string ""
.text
	mov A, .L3513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3514:
	mov A, B
	add SP, 1
	.loc 7 2080 0
	#   inc_indent();
.data
	.L3515:
	.string "while (1) {"
.text
	mov A, .L3515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3516:
	mov A, B
	add SP, 1
	.loc 7 2081 0
	#   emit_line("switch (pc / %d | 0) {", CHUNKED_FUNC_SIZE);
	mov A, .L3517
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3517:
	mov A, B
	.loc 7 2082 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2082 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L3518:
	.string "switch (pc / %d | 0) {"
.text
	mov A, .L3518
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3519:
	mov A, B
	add SP, 2
	.loc 7 2086 0
	#   }
	.loc 7 2083 0
	#     emit_line("case %d:", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 2086 0
	#   }
	.L337:
	.loc 7 2083 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2063 0
	#                                          c_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3520, A, 0
	jmp .L3521
	.L3520:
	.loc 7 2086 0
	#   }
	jmp .L339
	.L3521:
	.loc 7 2084 0
	#     emit_line(" func%d();", i);
	.loc 7 2083 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2084 0
	#     emit_line(" func%d();", i);
.data
	.L3522:
	.string "case %d:"
.text
	mov A, .L3522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3523:
	mov A, B
	add SP, 2
	.loc 7 2085 0
	#     emit_line(" break;");
	.loc 7 2083 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2085 0
	#     emit_line(" break;");
.data
	.L3524:
	.string " func%d();"
.text
	mov A, .L3524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3525:
	mov A, B
	add SP, 2
	.loc 7 2086 0
	#   }
.data
	.L3526:
	.string " break;"
.text
	mov A, .L3526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3527:
	mov A, B
	add SP, 1
	.L338:
	.loc 7 2083 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2086 0
	#   }
	jmp .L337
	.L339:
	.loc 7 2088 0
	#   dec_indent();
.data
	.L3528:
	.string "}"
.text
	mov A, .L3528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3529:
	mov A, B
	add SP, 1
	.loc 7 2089 0
	#   emit_line("}");
	mov A, .L3530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3530:
	mov A, B
	.loc 7 2090 0
	# 
.data
	.L3531:
	.string "}"
.text
	mov A, .L3531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3532:
	mov A, B
	add SP, 1
	.loc 7 2092 0
	#   dec_indent();
.data
	.L3533:
	.string "return 1;"
.text
	mov A, .L3533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3534:
	mov A, B
	add SP, 1
	.loc 7 2093 0
	#   emit_line("}");
	mov A, .L3535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3535:
	mov A, B
	.loc 7 2094 0
	# }
.data
	.L3536:
	.string "}"
.text
	mov A, .L3536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3537:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_state_cl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 2121 0
	# }
	.loc 7 2100 0
	#   emit_line("(defpackage #:elvm-compiled (:use #:cl) (:export #:elvm-main))");
.data
	.L3538:
	.string "(declaim (optimize (debug 0) (safety 0) (speed 3)))"
.text
	mov A, .L3538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3539:
	mov A, B
	add SP, 1
	.loc 7 2101 0
	#   emit_line("(in-package #:elvm-compiled)");
.data
	.L3540:
	.string "(defpackage #:elvm-compiled (:use #:cl) (:export #:elvm-main))"
.text
	mov A, .L3540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3541:
	mov A, B
	add SP, 1
	.loc 7 2102 0
	#   for (int i = 0; i < 7; i++) {
.data
	.L3542:
	.string "(in-package #:elvm-compiled)"
.text
	mov A, .L3542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3543:
	mov A, B
	add SP, 1
	.loc 7 2104 0
	#   }
	.loc 7 2103 0
	#     emit_line("(defvar %s 0)", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 2104 0
	#   }
	.L340:
	.loc 7 2103 0
	#     emit_line("(defvar %s 0)", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3544, A, 0
	jmp .L3545
	.L3544:
	.loc 7 2104 0
	#   }
	jmp .L342
	.L3545:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2103 0
	#     emit_line("(defvar %s 0)", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2104 0
	#   }
.data
	.L3546:
	.string "(defvar %s 0)"
.text
	mov A, .L3546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3547:
	mov A, B
	add SP, 2
	.L341:
	.loc 7 2103 0
	#     emit_line("(defvar %s 0)", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2104 0
	#   }
	jmp .L340
	.L342:
	.loc 7 2106 0
	#   for (int i = 0; i < 7; i++) {
.data
	.L3548:
	.string "(declaim (type fixnum"
.text
	mov A, .L3548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3549:
	mov A, B
	add SP, 1
	.loc 7 2108 0
	#   }
	.loc 7 2107 0
	#     emit_line(" %s", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 2108 0
	#   }
	.L343:
	.loc 7 2107 0
	#     emit_line(" %s", reg_names[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3550, A, 0
	jmp .L3551
	.L3550:
	.loc 7 2108 0
	#   }
	jmp .L345
	.L3551:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2107 0
	#     emit_line(" %s", reg_names[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2108 0
	#   }
.data
	.L3552:
	.string " %s"
.text
	mov A, .L3552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3553:
	mov A, B
	add SP, 2
	.L344:
	.loc 7 2107 0
	#     emit_line(" %s", reg_names[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2108 0
	#   }
	jmp .L343
	.L345:
	.loc 7 2110 0
	#   emit_line("(defvar mem nil)");
.data
	.L3554:
	.string "))"
.text
	mov A, .L3554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3555:
	mov A, B
	add SP, 1
	.loc 7 2111 0
	#   emit_line("(defparameter mem-init '(");
.data
	.L3556:
	.string "(defvar mem nil)"
.text
	mov A, .L3556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3557:
	mov A, B
	add SP, 1
	.loc 7 2112 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L3558:
	.string "(defparameter mem-init '("
.text
	mov A, .L3558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3559:
	mov A, B
	add SP, 1
	.loc 7 2115 0
	#     }
	.loc 7 2113 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 2115 0
	#     }
	.L346:
	.loc 7 2094 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L3560, A, 0
	jmp .L3561
	.L3560:
	.loc 7 2115 0
	#     }
	jmp .L348
	.L3561:
	.loc 7 2114 0
	#       emit_line("  (%d . %d)", mp, data->v);
	.loc 7 2094 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L3562, A, 0
	.loc 7 2115 0
	#     }
	.loc 7 2094 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2113 0
	#     if (data->v) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2115 0
	#     }
.data
	.L3563:
	.string "  (%d . %d)"
.text
	mov A, .L3563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3564:
	mov A, B
	add SP, 3
	.L3562:
	.L347:
	.loc 7 2113 0
	#     if (data->v) {
	.loc 7 2094 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 2113 0
	#     if (data->v) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2115 0
	#     }
	jmp .L346
	.L348:
	.loc 7 2118 0
	#   emit_line("(defvar elvm-running nil)");
.data
	.L3565:
	.string "))"
.text
	mov A, .L3565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3566:
	mov A, B
	add SP, 1
	.loc 7 2119 0
	#   emit_line("(defvar elvm-input nil)");
.data
	.L3567:
	.string "(defvar elvm-running nil)"
.text
	mov A, .L3567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3568:
	mov A, B
	add SP, 1
	.loc 7 2120 0
	#   emit_line("(defvar elvm-output nil)");
.data
	.L3569:
	.string "(defvar elvm-input nil)"
.text
	mov A, .L3569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3570:
	mov A, B
	add SP, 1
	.loc 7 2121 0
	# }
.data
	.L3571:
	.string "(defvar elvm-output nil)"
.text
	mov A, .L3571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3572:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cl_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2133 0
	# }
	.loc 7 2125 0
	#   emit_line("(defun elvm-func%d ()", func_id);
.data
	.L3573:
	.string ""
.text
	mov A, .L3573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3574:
	mov A, B
	add SP, 1
	.loc 7 2126 0
	#   inc_indent();
	.loc 7 2121 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2126 0
	#   inc_indent();
.data
	.L3575:
	.string "(defun elvm-func%d ()"
.text
	mov A, .L3575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3576:
	mov A, B
	add SP, 2
	.loc 7 2127 0
	#   emit_line("(loop while (and (<= %d pc) (< pc %d) elvm-running) do",
	mov A, .L3577
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3577:
	mov A, B
	.loc 7 2128 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 2121 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2128 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3578:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2128 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 2121 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L3579:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2128 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L3580:
	.string "(loop while (and (<= %d pc) (< pc %d) elvm-running) do"
.text
	mov A, .L3580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3581:
	mov A, B
	add SP, 3
	.loc 7 2130 0
	#   emit_line("(case pc");
	mov A, .L3582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3582:
	mov A, B
	.loc 7 2131 0
	#   emit_line("(-1 nil");
.data
	.L3583:
	.string "(case pc"
.text
	mov A, .L3583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3584:
	mov A, B
	add SP, 1
	.loc 7 2132 0
	#   inc_indent();
.data
	.L3585:
	.string "(-1 nil"
.text
	mov A, .L3585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3586:
	mov A, B
	add SP, 1
	.loc 7 2133 0
	# }
	mov A, .L3587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3587:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cl_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2143 0
	# }
	.loc 7 2137 0
	#   emit_line("))");
	mov A, .L3588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3588:
	mov A, B
	.loc 7 2138 0
	#   emit_line("(setq pc (+ pc 1))");
.data
	.L3589:
	.string "))"
.text
	mov A, .L3589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3590:
	mov A, B
	add SP, 1
	.loc 7 2139 0
	#   dec_indent();
.data
	.L3591:
	.string "(setq pc (+ pc 1))"
.text
	mov A, .L3591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3592:
	mov A, B
	add SP, 1
	.loc 7 2140 0
	#   emit_line(")");
	mov A, .L3593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3593:
	mov A, B
	.loc 7 2141 0
	#   dec_indent();
.data
	.L3594:
	.string ")"
.text
	mov A, .L3594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3595:
	mov A, B
	add SP, 1
	.loc 7 2142 0
	#   emit_line(")");
	mov A, .L3596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3596:
	mov A, B
	.loc 7 2143 0
	# }
.data
	.L3597:
	.string ")"
.text
	mov A, .L3597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3598:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cl_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2151 0
	# }
	.loc 7 2147 0
	#   emit_line("");
.data
	.L3599:
	.string ")"
.text
	mov A, .L3599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3600:
	mov A, B
	add SP, 1
	.loc 7 2148 0
	#   dec_indent();
.data
	.L3601:
	.string ""
.text
	mov A, .L3601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3602
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3602:
	mov A, B
	add SP, 1
	.loc 7 2149 0
	#   emit_line("(%d", pc);
	mov A, .L3603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3603:
	mov A, B
	.loc 7 2150 0
	#   inc_indent();
	.loc 7 2143 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2150 0
	#   inc_indent();
.data
	.L3604:
	.string "(%d"
.text
	mov A, .L3604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3605:
	mov A, B
	add SP, 2
	.loc 7 2151 0
	# }
	mov A, .L3606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3606:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cl_cmp_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 2167 0
	# }
	.loc 7 2155 0
	#   const char* fmt;
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2151 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3607
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L3607:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2156 0
	#   switch (op) {
	.loc 7 2164 0
	#       error("oops");
	.loc 7 2155 0
	#   const char* fmt;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 2164 0
	#       error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3608, A, 0
	jmp .L350
	.L3608:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3609, A, 0
	jmp .L351
	.L3609:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3610, A, 0
	jmp .L352
	.L3610:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3611, A, 0
	jmp .L353
	.L3611:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3612, A, 0
	jmp .L354
	.L3612:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3613, A, 0
	jmp .L355
	.L3613:
	jmp .L356
	.loc 7 2158 0
	#     case JNE: fmt = "(/= %s %s)"; break;
	.L350:
.data
	.L3614:
	.string "(= %s %s)"
.text
	mov A, .L3614
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L349
	.loc 7 2159 0
	#     case JLT: fmt = "(< %s %s)"; break;
	.L351:
.data
	.L3615:
	.string "(/= %s %s)"
.text
	mov A, .L3615
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L349
	.loc 7 2160 0
	#     case JGT: fmt = "(> %s %s)"; break;
	.L352:
.data
	.L3616:
	.string "(< %s %s)"
.text
	mov A, .L3616
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L349
	.loc 7 2161 0
	#     case JLE: fmt = "(<= %s %s)"; break;
	.L353:
.data
	.L3617:
	.string "(> %s %s)"
.text
	mov A, .L3617
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L349
	.loc 7 2162 0
	#     case JGE: fmt = "(>= %s %s)"; break;
	.L354:
.data
	.L3618:
	.string "(<= %s %s)"
.text
	mov A, .L3618
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L349
	.loc 7 2163 0
	#     default:
	.L355:
.data
	.L3619:
	.string "(>= %s %s)"
.text
	mov A, .L3619
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L349
	.loc 7 2164 0
	#       error("oops");
	.L356:
.data
	.L3620:
	.string "oops"
.text
	mov A, .L3620
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3621
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L3621:
	mov A, B
	add SP, 1
	.L349:
	.loc 7 2167 0
	# }
	.loc 7 2151 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3622
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3622:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2167 0
	# }
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2167 0
	# }
	.loc 7 2151 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2156 0
	#   switch (op) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3623
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L3623:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cl_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2237 0
	#     error("oops");
	.loc 7 2171 0
	#   case MOV:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2237 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3624, A, 0
	jmp .L358
	.L3624:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3625, A, 0
	jmp .L359
	.L3625:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3626, A, 0
	jmp .L360
	.L3626:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3627, A, 0
	jmp .L361
	.L3627:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3628, A, 0
	jmp .L362
	.L3628:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3629, A, 0
	jmp .L363
	.L3629:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3630, A, 0
	jmp .L364
	.L3630:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3631, A, 0
	jmp .L365
	.L3631:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3632, A, 0
	jmp .L366
	.L3632:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3633, A, 0
	jmp .L367
	.L3633:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3634, A, 0
	jmp .L368
	.L3634:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3635, A, 0
	jmp .L369
	.L3635:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3636, A, 0
	jmp .L370
	.L3636:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3637, A, 0
	jmp .L371
	.L3637:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3638, A, 0
	jmp .L372
	.L3638:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3639, A, 0
	jmp .L373
	.L3639:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3640, A, 0
	jmp .L374
	.L3640:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3641, A, 0
	jmp .L375
	.L3641:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3642, A, 0
	jmp .L376
	.L3642:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3643, A, 0
	jmp .L377
	.L3643:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3644, A, 0
	jmp .L378
	.L3644:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3645, A, 0
	jmp .L379
	.L3645:
	jmp .L380
	.loc 7 2172 0
	#     emit_line("(setq %s %s)", reg_names[inst->dst.reg], src_str(inst));
	.L358:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3646:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2172 0
	#     emit_line("(setq %s %s)", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2172 0
	#     emit_line("(setq %s %s)", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2172 0
	#     emit_line("(setq %s %s)", reg_names[inst->dst.reg], src_str(inst));
.data
	.L3647:
	.string "(setq %s %s)"
.text
	mov A, .L3647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3648
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3648:
	mov A, B
	add SP, 3
	.loc 7 2174 0
	# 
	jmp .L357
	.loc 7 2176 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.L359:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3649:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2176 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2176 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2176 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2176 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2176 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
.data
	.L3650:
	.string "(setq %s (logand (+ %s %s) 16777215))"
.text
	mov A, .L3650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3651:
	mov A, B
	add SP, 4
	.loc 7 2180 0
	# 
	jmp .L357
	.loc 7 2182 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.L360:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3652:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2182 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2182 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2182 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2182 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2182 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
.data
	.L3653:
	.string "(setq %s (logand (- %s %s) 16777215))"
.text
	mov A, .L3653
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3654:
	mov A, B
	add SP, 4
	.loc 7 2186 0
	# 
	jmp .L357
	.loc 7 2188 0
	#     emit_line("(setq %s (aref mem %s))",
	.L361:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3655:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2188 0
	#     emit_line("(setq %s (aref mem %s))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2188 0
	#     emit_line("(setq %s (aref mem %s))",
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2188 0
	#     emit_line("(setq %s (aref mem %s))",
.data
	.L3656:
	.string "(setq %s (aref mem %s))"
.text
	mov A, .L3656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3657
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3657:
	mov A, B
	add SP, 3
	.loc 7 2191 0
	# 
	jmp .L357
	.loc 7 2193 0
	#     emit_line("(setf (aref mem %s) %s)", src_str(inst), reg_names[inst->dst.reg]);
	.L362:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2193 0
	#     emit_line("(setf (aref mem %s) %s)", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2193 0
	#     emit_line("(setf (aref mem %s) %s)", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3658:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2193 0
	#     emit_line("(setf (aref mem %s) %s)", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L3659:
	.string "(setf (aref mem %s) %s)"
.text
	mov A, .L3659
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3660
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3660:
	mov A, B
	add SP, 3
	.loc 7 2195 0
	# 
	jmp .L357
	.loc 7 2197 0
	#     emit_line("(putchar %s)", src_str(inst));
	.L363:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3661
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3661:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2197 0
	#     emit_line("(putchar %s)", src_str(inst));
.data
	.L3662:
	.string "(putchar %s)"
.text
	mov A, .L3662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3663:
	mov A, B
	add SP, 2
	.loc 7 2199 0
	# 
	jmp .L357
	.loc 7 2201 0
	#     emit_line("(setq %s (getchar))",
	.L364:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2201 0
	#     emit_line("(setq %s (getchar))",
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2201 0
	#     emit_line("(setq %s (getchar))",
.data
	.L3664:
	.string "(setq %s (getchar))"
.text
	mov A, .L3664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3665:
	mov A, B
	add SP, 2
	.loc 7 2204 0
	# 
	jmp .L357
	.loc 7 2206 0
	#     emit_line("(setq elvm-running nil)");
	.L365:
.data
	.L3666:
	.string "(setq elvm-running nil)"
.text
	mov A, .L3666
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3667:
	mov A, B
	add SP, 1
	.loc 7 2208 0
	# 
	jmp .L357
	.loc 7 2210 0
	#     break;
	.L366:
	jmp .L357
	.loc 7 2213 0
	#   case NE:
	.L367:
	.L368:
	.L369:
	.L370:
	.L371:
	.L372:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cl_cmp_str
	.L3668:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2213 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2213 0
	#   case NE:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2213 0
	#   case NE:
.data
	.L3669:
	.string "(setq %s (if %s 1 0))"
.text
	mov A, .L3669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3670:
	mov A, B
	add SP, 3
	.loc 7 2221 0
	# 
	jmp .L357
	.loc 7 2223 0
	#   case JNE:
	.L373:
	.L374:
	.L375:
	.L376:
	.L377:
	.L378:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L3671:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2223 0
	#   case JNE:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cl_cmp_str
	.L3672:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2223 0
	#   case JNE:
.data
	.L3673:
	.string "(if %s (setq pc (- %s 1)))"
.text
	mov A, .L3673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3674:
	mov A, B
	add SP, 3
	.loc 7 2231 0
	# 
	jmp .L357
	.loc 7 2233 0
	#     emit_line("(setq pc (- %s 1))", value_str(&inst->jmp));
	.L379:
	.loc 7 2167 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L3675:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2233 0
	#     emit_line("(setq pc (- %s 1))", value_str(&inst->jmp));
.data
	.L3676:
	.string "(setq pc (- %s 1))"
.text
	mov A, .L3676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3677
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3677:
	mov A, B
	add SP, 2
	.loc 7 2235 0
	# 
	jmp .L357
	.loc 7 2237 0
	#     error("oops");
	.L380:
.data
	.L3678:
	.string "oops"
.text
	mov A, .L3678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L3679:
	mov A, B
	add SP, 1
	.L357:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_cl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 2279 0
	# }
	.loc 7 2243 0
	#   emit_line("(defun getchar ()");
	.loc 7 2237 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_cl
	.L3680:
	mov A, B
	add SP, 1
	.loc 7 2244 0
	#   emit_line(" (if (listen elvm-input)");
.data
	.L3681:
	.string "(defun getchar ()"
.text
	mov A, .L3681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3682:
	mov A, B
	add SP, 1
	.loc 7 2245 0
	#   emit_line("  (char-code (read-char elvm-input))");
.data
	.L3683:
	.string " (if (listen elvm-input)"
.text
	mov A, .L3683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3684:
	mov A, B
	add SP, 1
	.loc 7 2246 0
	#   emit_line("  0))");
.data
	.L3685:
	.string "  (char-code (read-char elvm-input))"
.text
	mov A, .L3685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3686:
	mov A, B
	add SP, 1
	.loc 7 2247 0
	#   emit_line("(defun putchar (c)");
.data
	.L3687:
	.string "  0))"
.text
	mov A, .L3687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3688:
	mov A, B
	add SP, 1
	.loc 7 2248 0
	#   emit_line(" (princ (code-char c) elvm-output))");
.data
	.L3689:
	.string "(defun putchar (c)"
.text
	mov A, .L3689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3690:
	mov A, B
	add SP, 1
	.loc 7 2249 0
	# 
.data
	.L3691:
	.string " (princ (code-char c) elvm-output))"
.text
	mov A, .L3691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3692:
	mov A, B
	add SP, 1
	.loc 7 2251 0
	#                                          cl_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, cl_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, cl_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, cl_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, cl_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2237 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L3693:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2257 0
	#   inc_indent();
.data
	.L3694:
	.string "(defun elvm-main (&optional (input-stream *standard-input*) (output-stream *standard-output*))"
.text
	mov A, .L3694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3695:
	mov A, B
	add SP, 1
	.loc 7 2258 0
	#   emit_line("(setq elvm-input input-stream)");
	mov A, .L3696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3696:
	mov A, B
	.loc 7 2259 0
	#   emit_line("(setq elvm-output output-stream)");
.data
	.L3697:
	.string "(setq elvm-input input-stream)"
.text
	mov A, .L3697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3698:
	mov A, B
	add SP, 1
	.loc 7 2260 0
	#   for (int i = 0; i < 7; i++) {
.data
	.L3699:
	.string "(setq elvm-output output-stream)"
.text
	mov A, .L3699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3700:
	mov A, B
	add SP, 1
	.loc 7 2262 0
	#   }
	.loc 7 2261 0
	#     emit_line("(setq %s 0)", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 2262 0
	#   }
	.L381:
	.loc 7 2261 0
	#     emit_line("(setq %s 0)", reg_names[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3701, A, 0
	jmp .L3702
	.L3701:
	.loc 7 2262 0
	#   }
	jmp .L383
	.L3702:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2261 0
	#     emit_line("(setq %s 0)", reg_names[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2262 0
	#   }
.data
	.L3703:
	.string "(setq %s 0)"
.text
	mov A, .L3703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3704:
	mov A, B
	add SP, 2
	.L382:
	.loc 7 2261 0
	#     emit_line("(setq %s 0)", reg_names[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2262 0
	#   }
	jmp .L381
	.L383:
	.loc 7 2264 0
	#   emit_line("(dolist (p mem-init)");
.data
	.L3705:
	.string "(setq mem (make-array 16777216 :element-type 'fixnum :initial-element 0))"
.text
	mov A, .L3705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3706:
	mov A, B
	add SP, 1
	.loc 7 2265 0
	#   emit_line(" (setf (aref mem (car p)) (cdr p)))");
.data
	.L3707:
	.string "(dolist (p mem-init)"
.text
	mov A, .L3707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3708:
	mov A, B
	add SP, 1
	.loc 7 2266 0
	#   emit_line("(setq elvm-running t)");
.data
	.L3709:
	.string " (setf (aref mem (car p)) (cdr p)))"
.text
	mov A, .L3709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3710
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3710:
	mov A, B
	add SP, 1
	.loc 7 2267 0
	#   emit_line("(loop while elvm-running do");
.data
	.L3711:
	.string "(setq elvm-running t)"
.text
	mov A, .L3711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3712:
	mov A, B
	add SP, 1
	.loc 7 2268 0
	#   inc_indent();
.data
	.L3713:
	.string "(loop while elvm-running do"
.text
	mov A, .L3713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3714:
	mov A, B
	add SP, 1
	.loc 7 2269 0
	#   emit_line("(case (truncate pc %d)", CHUNKED_FUNC_SIZE);
	mov A, .L3715
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3715:
	mov A, B
	.loc 7 2270 0
	#   inc_indent();
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2270 0
	#   inc_indent();
.data
	.L3716:
	.string "(case (truncate pc %d)"
.text
	mov A, .L3716
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3717:
	mov A, B
	add SP, 2
	.loc 7 2271 0
	#   for (int i = 0; i < num_funcs; i++) {
	mov A, .L3718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3718:
	mov A, B
	.loc 7 2273 0
	#   }
	.loc 7 2272 0
	#     emit_line("(%d (elvm-func%d))", i, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 2273 0
	#   }
	.L384:
	.loc 7 2272 0
	#     emit_line("(%d (elvm-func%d))", i, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2251 0
	#                                          cl_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3719, A, 0
	jmp .L3720
	.L3719:
	.loc 7 2273 0
	#   }
	jmp .L386
	.L3720:
	.loc 7 2272 0
	#     emit_line("(%d (elvm-func%d))", i, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2273 0
	#   }
.data
	.L3721:
	.string "(%d (elvm-func%d))"
.text
	mov A, .L3721
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3722:
	mov A, B
	add SP, 3
	.L385:
	.loc 7 2272 0
	#     emit_line("(%d (elvm-func%d))", i, i);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2273 0
	#   }
	jmp .L384
	.L386:
	.loc 7 2275 0
	#   dec_indent();
.data
	.L3723:
	.string ")))"
.text
	mov A, .L3723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3724
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3724:
	mov A, B
	add SP, 1
	.loc 7 2276 0
	#   dec_indent();
	mov A, .L3725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3725:
	mov A, B
	.loc 7 2277 0
	#   dec_indent();
	mov A, .L3726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3726:
	mov A, B
	.loc 7 2278 0
	#   emit_line("(elvm-main)");
	mov A, .L3727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3727:
	mov A, B
	.loc 7 2279 0
	# }
.data
	.L3728:
	.string "(elvm-main)"
.text
	mov A, .L3728
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3729
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3729:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
BUF_SIZE:
	.long 10000
	.text
cpp_defs:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2306 0
	# }
	.loc 7 2287 0
	#   emit_line("#include <utility>");
.data
	.L3730:
	.string "#include <cstdio>"
.text
	mov A, .L3730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3731
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3731:
	mov A, B
	add SP, 1
	.loc 7 2288 0
	#   emit_line("");
.data
	.L3732:
	.string "#include <utility>"
.text
	mov A, .L3732
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3733:
	mov A, B
	add SP, 1
	.loc 7 2289 0
	#   emit_line("const size_t BUF_SIZE = %d;", BUF_SIZE);
.data
	.L3734:
	.string ""
.text
	mov A, .L3734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3735
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3735:
	mov A, B
	add SP, 1
	.loc 7 2290 0
	#   emit_line("");
	.loc 7 2279 0
	# }
	mov B, BUF_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2290 0
	#   emit_line("");
.data
	.L3736:
	.string "const size_t BUF_SIZE = %d;"
.text
	mov A, .L3736
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3737:
	mov A, B
	add SP, 2
	.loc 7 2291 0
	#   emit_line("constexpr char input[] =");
.data
	.L3738:
	.string ""
.text
	mov A, .L3738
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3739
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3739:
	mov A, B
	add SP, 1
	.loc 7 2292 0
	#   emit_line("#include \"input.txt\"");
.data
	.L3740:
	.string "constexpr char input[] ="
.text
	mov A, .L3740
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3741:
	mov A, B
	add SP, 1
	.loc 7 2293 0
	#   emit_line(";");
.data
	.L3742:
	.string "#include \"input.txt\""
.text
	mov A, .L3742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3743:
	mov A, B
	add SP, 1
	.loc 7 2294 0
	#   emit_line("");
.data
	.L3744:
	.string ";"
.text
	mov A, .L3744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3745:
	mov A, B
	add SP, 1
	.loc 7 2295 0
	#   emit_line("struct buffer {");
.data
	.L3746:
	.string ""
.text
	mov A, .L3746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3747:
	mov A, B
	add SP, 1
	.loc 7 2296 0
	#   emit_line(" unsigned int size;");
.data
	.L3748:
	.string "struct buffer {"
.text
	mov A, .L3748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3749:
	mov A, B
	add SP, 1
	.loc 7 2297 0
	#   emit_line(" unsigned int b[BUF_SIZE];");
.data
	.L3750:
	.string " unsigned int size;"
.text
	mov A, .L3750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3751:
	mov A, B
	add SP, 1
	.loc 7 2298 0
	#   emit_line("};");
.data
	.L3752:
	.string " unsigned int b[BUF_SIZE];"
.text
	mov A, .L3752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3753:
	mov A, B
	add SP, 1
	.loc 7 2299 0
	#   emit_line("template <size_t... I>");
.data
	.L3754:
	.string "};"
.text
	mov A, .L3754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3755:
	mov A, B
	add SP, 1
	.loc 7 2300 0
	#   emit_line("constexpr buffer make_buf_impl(unsigned int size, unsigned int* buf, std::index_sequence<I...>) {");
.data
	.L3756:
	.string "template <size_t... I>"
.text
	mov A, .L3756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3757:
	mov A, B
	add SP, 1
	.loc 7 2301 0
	#   emit_line(" return buffer{size, {buf[I]...}};");
.data
	.L3758:
	.string "constexpr buffer make_buf_impl(unsigned int size, unsigned int* buf, std::index_sequence<I...>) {"
.text
	mov A, .L3758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3759:
	mov A, B
	add SP, 1
	.loc 7 2302 0
	#   emit_line("}");
.data
	.L3760:
	.string " return buffer{size, {buf[I]...}};"
.text
	mov A, .L3760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3761:
	mov A, B
	add SP, 1
	.loc 7 2303 0
	#   emit_line("constexpr buffer make_buf(unsigned int size, unsigned int* buf) {");
.data
	.L3762:
	.string "}"
.text
	mov A, .L3762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3763:
	mov A, B
	add SP, 1
	.loc 7 2304 0
	#   emit_line(" return make_buf_impl(size, buf, std::make_index_sequence<BUF_SIZE>{});");
.data
	.L3764:
	.string "constexpr buffer make_buf(unsigned int size, unsigned int* buf) {"
.text
	mov A, .L3764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3765:
	mov A, B
	add SP, 1
	.loc 7 2305 0
	#   emit_line("}");
.data
	.L3766:
	.string " return make_buf_impl(size, buf, std::make_index_sequence<BUF_SIZE>{});"
.text
	mov A, .L3766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3767:
	mov A, B
	add SP, 1
	.loc 7 2306 0
	# }
.data
	.L3768:
	.string "}"
.text
	mov A, .L3768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3769:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 2321 0
	#     }
	.loc 7 2311 0
	#   }
	.loc 7 2310 0
	#     emit_line("unsigned int %s = 0;", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 2311 0
	#   }
	.L387:
	.loc 7 2310 0
	#     emit_line("unsigned int %s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L3770, A, 0
	jmp .L3771
	.L3770:
	.loc 7 2311 0
	#   }
	jmp .L389
	.L3771:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2310 0
	#     emit_line("unsigned int %s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2311 0
	#   }
.data
	.L3772:
	.string "unsigned int %s = 0;"
.text
	mov A, .L3772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3773:
	mov A, B
	add SP, 2
	.L388:
	.loc 7 2310 0
	#     emit_line("unsigned int %s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2311 0
	#   }
	jmp .L387
	.L389:
	.loc 7 2314 0
	#   emit_line("unsigned int o_cur = 0;");
.data
	.L3774:
	.string "unsigned int i_cur = 0;"
.text
	mov A, .L3774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3775:
	mov A, B
	add SP, 1
	.loc 7 2315 0
	#   emit_line("unsigned int mem[1<<24] = {0};");
.data
	.L3776:
	.string "unsigned int o_cur = 0;"
.text
	mov A, .L3776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3777:
	mov A, B
	add SP, 1
	.loc 7 2316 0
	#   emit_line("unsigned int buf[BUF_SIZE] = {0};");
.data
	.L3778:
	.string "unsigned int mem[1<<24] = {0};"
.text
	mov A, .L3778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3779:
	mov A, B
	add SP, 1
	.loc 7 2317 0
	# 
.data
	.L3780:
	.string "unsigned int buf[BUF_SIZE] = {0};"
.text
	mov A, .L3780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3781:
	mov A, B
	add SP, 1
	.loc 7 2321 0
	#     }
	.loc 7 2319 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 2321 0
	#     }
	.L390:
	.loc 7 2306 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L3782, A, 0
	jmp .L3783
	.L3782:
	.loc 7 2321 0
	#     }
	jmp .L392
	.L3783:
	.loc 7 2320 0
	#       emit_line("mem[%d] = %d;", mp, data->v);
	.loc 7 2306 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L3784, A, 0
	.loc 7 2321 0
	#     }
	.loc 7 2306 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2319 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2321 0
	#     }
.data
	.L3785:
	.string "mem[%d] = %d;"
.text
	mov A, .L3785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3786:
	mov A, B
	add SP, 3
	.L3784:
	.L391:
	.loc 7 2319 0
	#     if (data->v) {
	.loc 7 2306 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 2319 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2321 0
	#     }
	jmp .L390
	.L392:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_emit_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2332 0
	# }
	.loc 7 2327 0
	#   emit_line("while (1) {");
.data
	.L3787:
	.string ""
.text
	mov A, .L3787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3788:
	mov A, B
	add SP, 1
	.loc 7 2328 0
	#   inc_indent();
.data
	.L3789:
	.string "while (1) {"
.text
	mov A, .L3789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3790:
	mov A, B
	add SP, 1
	.loc 7 2329 0
	#   emit_line("switch (pc) {");
	mov A, .L3791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3791:
	mov A, B
	.loc 7 2330 0
	#   emit_line("case 0:");
.data
	.L3792:
	.string "switch (pc) {"
.text
	mov A, .L3792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3793:
	mov A, B
	add SP, 1
	.loc 7 2331 0
	#   inc_indent();
.data
	.L3794:
	.string "case 0:"
.text
	mov A, .L3794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3795:
	mov A, B
	add SP, 1
	.loc 7 2332 0
	# }
	mov A, .L3796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3796:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_emit_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2343 0
	# }
	.loc 7 2336 0
	#   emit_line("}");
	mov A, .L3797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3797:
	mov A, B
	.loc 7 2337 0
	#   emit_line("pc++;");
.data
	.L3798:
	.string "}"
.text
	mov A, .L3798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3799:
	mov A, B
	add SP, 1
	.loc 7 2338 0
	#   dec_indent();
.data
	.L3800:
	.string "pc++;"
.text
	mov A, .L3800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3801:
	mov A, B
	add SP, 1
	.loc 7 2339 0
	#   emit_line("}");
	mov A, .L3802
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3802:
	mov A, B
	.loc 7 2340 0
	#   emit_line("return make_buf(o_cur, buf);");
.data
	.L3803:
	.string "}"
.text
	mov A, .L3803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3804:
	mov A, B
	add SP, 1
	.loc 7 2341 0
	#   dec_indent();
.data
	.L3805:
	.string "return make_buf(o_cur, buf);"
.text
	mov A, .L3805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3806:
	mov A, B
	add SP, 1
	.loc 7 2342 0
	#   emit_line("}");
	mov A, .L3807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3807:
	mov A, B
	.loc 7 2343 0
	# }
.data
	.L3808:
	.string "}"
.text
	mov A, .L3808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3809:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2351 0
	# }
	.loc 7 2347 0
	#   emit_line("");
.data
	.L3810:
	.string "break;"
.text
	mov A, .L3810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3811:
	mov A, B
	add SP, 1
	.loc 7 2348 0
	#   dec_indent();
.data
	.L3812:
	.string ""
.text
	mov A, .L3812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3813:
	mov A, B
	add SP, 1
	.loc 7 2349 0
	#   emit_line("case %d:", pc);
	mov A, .L3814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L3814:
	mov A, B
	.loc 7 2350 0
	#   inc_indent();
	.loc 7 2343 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2350 0
	#   inc_indent();
.data
	.L3815:
	.string "case %d:"
.text
	mov A, .L3815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3816:
	mov A, B
	add SP, 2
	.loc 7 2351 0
	# }
	mov A, .L3817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3817:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2417 0
	#     error("oops");
	.loc 7 2355 0
	#   case MOV:
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2417 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3818, A, 0
	jmp .L394
	.L3818:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3819, A, 0
	jmp .L395
	.L3819:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3820, A, 0
	jmp .L396
	.L3820:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3821, A, 0
	jmp .L397
	.L3821:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3822, A, 0
	jmp .L398
	.L3822:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3823, A, 0
	jmp .L399
	.L3823:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3824, A, 0
	jmp .L400
	.L3824:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3825, A, 0
	jmp .L401
	.L3825:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3826, A, 0
	jmp .L402
	.L3826:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3827, A, 0
	jmp .L403
	.L3827:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3828, A, 0
	jmp .L404
	.L3828:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3829, A, 0
	jmp .L405
	.L3829:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3830, A, 0
	jmp .L406
	.L3830:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3831, A, 0
	jmp .L407
	.L3831:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3832, A, 0
	jmp .L408
	.L3832:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3833, A, 0
	jmp .L409
	.L3833:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3834, A, 0
	jmp .L410
	.L3834:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3835, A, 0
	jmp .L411
	.L3835:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3836, A, 0
	jmp .L412
	.L3836:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3837, A, 0
	jmp .L413
	.L3837:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3838, A, 0
	jmp .L414
	.L3838:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3839, A, 0
	jmp .L415
	.L3839:
	jmp .L416
	.loc 7 2356 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.L394:
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3840:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2356 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2356 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2356 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
.data
	.L3841:
	.string "%s = %s;"
.text
	mov A, .L3841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3842:
	mov A, B
	add SP, 3
	.loc 7 2358 0
	# 
	jmp .L393
	.loc 7 2360 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.L395:
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3843:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2360 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2360 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2360 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2360 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2360 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
.data
	.L3844:
	.string "%s = (%s + %s) & 16777215;"
.text
	mov A, .L3844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3845:
	mov A, B
	add SP, 4
	.loc 7 2364 0
	# 
	jmp .L393
	.loc 7 2366 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.L396:
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3846:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2366 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2366 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2366 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2366 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2366 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
.data
	.L3847:
	.string "%s = (%s - %s) & 16777215;"
.text
	mov A, .L3847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3848:
	mov A, B
	add SP, 4
	.loc 7 2370 0
	# 
	jmp .L393
	.loc 7 2372 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.L397:
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3849
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3849:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2372 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2372 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2372 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
.data
	.L3850:
	.string "%s = mem[%s];"
.text
	mov A, .L3850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3851:
	mov A, B
	add SP, 3
	.loc 7 2374 0
	# 
	jmp .L393
	.loc 7 2376 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.L398:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2376 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2376 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3852:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2376 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L3853:
	.string "mem[%s] = %s;"
.text
	mov A, .L3853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3854:
	mov A, B
	add SP, 3
	.loc 7 2378 0
	# 
	jmp .L393
	.loc 7 2380 0
	#     emit_line("buf[o_cur++] = %s;", src_str(inst));
	.L399:
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3855:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2380 0
	#     emit_line("buf[o_cur++] = %s;", src_str(inst));
.data
	.L3856:
	.string "buf[o_cur++] = %s;"
.text
	mov A, .L3856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3857:
	mov A, B
	add SP, 2
	.loc 7 2382 0
	# 
	jmp .L393
	.loc 7 2384 0
	#     emit_line("%s = (input[i_cur] ? input[i_cur++] : 0);",
	.L400:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2384 0
	#     emit_line("%s = (input[i_cur] ? input[i_cur++] : 0);",
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2384 0
	#     emit_line("%s = (input[i_cur] ? input[i_cur++] : 0);",
.data
	.L3858:
	.string "%s = (input[i_cur] ? input[i_cur++] : 0);"
.text
	mov A, .L3858
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3859:
	mov A, B
	add SP, 2
	.loc 7 2387 0
	# 
	jmp .L393
	.loc 7 2389 0
	#     emit_line("return make_buf(o_cur, buf);");
	.L401:
.data
	.L3860:
	.string "return make_buf(o_cur, buf);"
.text
	mov A, .L3860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3861
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3861:
	mov A, B
	add SP, 1
	.loc 7 2391 0
	# 
	jmp .L393
	.loc 7 2393 0
	#     break;
	.L402:
	jmp .L393
	.loc 7 2396 0
	#   case NE:
	.L403:
	.L404:
	.L405:
	.L406:
	.L407:
	.L408:
.data
	.L3862:
	.string "1"
.text
	mov A, .L3862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3863
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L3863:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2396 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2396 0
	#   case NE:
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2396 0
	#   case NE:
.data
	.L3864:
	.string "%s = %s;"
.text
	mov A, .L3864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3865:
	mov A, B
	add SP, 3
	.loc 7 2404 0
	# 
	jmp .L393
	.loc 7 2406 0
	#   case JNE:
	.L409:
	.L410:
	.L411:
	.L412:
	.L413:
	.L414:
	.L415:
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L3866:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2406 0
	#   case JNE:
.data
	.L3867:
	.string "1"
.text
	mov A, .L3867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2351 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L3868:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2406 0
	#   case JNE:
.data
	.L3869:
	.string "if (%s) pc = %s - 1;"
.text
	mov A, .L3869
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3870:
	mov A, B
	add SP, 3
	.loc 7 2415 0
	# 
	jmp .L393
	.loc 7 2417 0
	#     error("oops");
	.L416:
.data
	.L3871:
	.string "oops"
.text
	mov A, .L3871
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3872
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L3872:
	mov A, B
	add SP, 1
	.L393:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_emit_main_loop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2429 0
	#   }
	.loc 7 2423 0
	#   for (; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 2429 0
	#   }
	.L417:
	.loc 7 2417 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	jeq .L3873, A, 0
	jmp .L3874
	.L3873:
	.loc 7 2429 0
	#   }
	jmp .L419
	.L3874:
	.loc 7 2426 0
	#     }
	.loc 7 2425 0
	#       cpp_emit_pc_change(inst->pc);
	.loc 7 2423 0
	#   for (; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2425 0
	#       cpp_emit_pc_change(inst->pc);
	.loc 7 2417 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L3875, A, 0
	.loc 7 2426 0
	#     }
	.loc 7 2417 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_emit_pc_change
	.L3876:
	mov A, B
	add SP, 1
	.L3875:
	.loc 7 2428 0
	#     cpp_emit_inst(inst);
	.loc 7 2417 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2429 0
	#   }
	.loc 7 2417 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_emit_inst
	.L3877:
	mov A, B
	add SP, 1
	.loc 7 2429 0
	#   }
	.L418:
	.loc 7 2424 0
	#     if (prev_pc != inst->pc) {
	.loc 7 2417 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 2429 0
	#   }
	jmp .L417
	.L419:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_cpp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2452 0
	# }
	.loc 7 2434 0
	#   emit_line("");
	mov A, .L3878
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_defs
	.L3878:
	mov A, B
	.loc 7 2435 0
	#   emit_line("constexpr buffer constexpr_main() {");
.data
	.L3879:
	.string ""
.text
	mov A, .L3879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3880:
	mov A, B
	add SP, 1
	.loc 7 2436 0
	#   inc_indent();
.data
	.L3881:
	.string "constexpr buffer constexpr_main() {"
.text
	mov A, .L3881
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3882:
	mov A, B
	add SP, 1
	.loc 7 2437 0
	# 
	mov A, .L3883
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L3883:
	mov A, B
	.loc 7 2439 0
	#   cpp_emit_prologue();
	.loc 7 2429 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3884
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_init_state
	.L3884:
	mov A, B
	add SP, 1
	.loc 7 2440 0
	#   cpp_emit_main_loop(module->text);
	mov A, .L3885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_emit_prologue
	.L3885:
	mov A, B
	.loc 7 2441 0
	#   cpp_emit_epilogue();
	.loc 7 2429 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3886
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_emit_main_loop
	.L3886:
	mov A, B
	add SP, 1
	.loc 7 2442 0
	# 
	mov A, .L3887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_emit_epilogue
	.L3887:
	mov A, B
	.loc 7 2444 0
	#   emit_line("int main() {");
.data
	.L3888:
	.string ""
.text
	mov A, .L3888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3889
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3889:
	mov A, B
	add SP, 1
	.loc 7 2445 0
	#   emit_line(" constexpr buffer buf = constexpr_main();");
.data
	.L3890:
	.string "int main() {"
.text
	mov A, .L3890
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3891
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3891:
	mov A, B
	add SP, 1
	.loc 7 2446 0
	#   emit_line(" constexpr unsigned int output_size = buf.size;");
.data
	.L3892:
	.string " constexpr buffer buf = constexpr_main();"
.text
	mov A, .L3892
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3893
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3893:
	mov A, B
	add SP, 1
	.loc 7 2447 0
	#   emit_line("");
.data
	.L3894:
	.string " constexpr unsigned int output_size = buf.size;"
.text
	mov A, .L3894
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3895
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3895:
	mov A, B
	add SP, 1
	.loc 7 2448 0
	#   emit_line(" for(int i = 0; i < output_size; ++i) {");
.data
	.L3896:
	.string ""
.text
	mov A, .L3896
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3897:
	mov A, B
	add SP, 1
	.loc 7 2449 0
	#   emit_line("  putchar(buf.b[i]);");
.data
	.L3898:
	.string " for(int i = 0; i < output_size; ++i) {"
.text
	mov A, .L3898
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3899:
	mov A, B
	add SP, 1
	.loc 7 2450 0
	#   emit_line(" }");
.data
	.L3900:
	.string "  putchar(buf.b[i]);"
.text
	mov A, .L3900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3901
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3901:
	mov A, B
	add SP, 1
	.loc 7 2451 0
	#   emit_line("}");
.data
	.L3902:
	.string " }"
.text
	mov A, .L3902
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3903
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3903:
	mov A, B
	add SP, 1
	.loc 7 2452 0
	# }
.data
	.L3904:
	.string "}"
.text
	mov A, .L3904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3905:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
cpp_template_lib:
	.long 47
	.long 47
	.long 32
	.long 76
	.long 105
	.long 98
	.long 114
	.long 97
	.long 114
	.long 121
	.long 32
	.long 102
	.long 111
	.long 114
	.long 32
	.long 69
	.long 76
	.long 86
	.long 77
	.long 39
	.long 115
	.long 32
	.long 67
	.long 43
	.long 43
	.long 32
	.long 84
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 77
	.long 101
	.long 116
	.long 97
	.long 112
	.long 114
	.long 111
	.long 103
	.long 114
	.long 97
	.long 109
	.long 109
	.long 105
	.long 110
	.long 103
	.long 32
	.long 98
	.long 97
	.long 99
	.long 107
	.long 101
	.long 110
	.long 100
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 73
	.long 110
	.long 112
	.long 117
	.long 116
	.long 32
	.long 66
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 10
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 101
	.long 120
	.long 112
	.long 114
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 99
	.long 104
	.long 97
	.long 114
	.long 42
	.long 32
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 32
	.long 61
	.long 10
	.long 35
	.long 32
	.long 32
	.long 32
	.long 105
	.long 110
	.long 99
	.long 108
	.long 117
	.long 100
	.long 101
	.long 32
	.long 34
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 46
	.long 116
	.long 120
	.long 116
	.long 34
	.long 10
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 77
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 32
	.long 83
	.long 105
	.long 122
	.long 101
	.long 10
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 77
	.long 69
	.long 77
	.long 95
	.long 83
	.long 73
	.long 90
	.long 69
	.long 32
	.long 61
	.long 32
	.long 49
	.long 32
	.long 60
	.long 60
	.long 32
	.long 49
	.long 54
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 68
	.long 97
	.long 116
	.long 97
	.long 32
	.long 83
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 117
	.long 114
	.long 101
	.long 115
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 105
	.long 110
	.long 116
	.long 32
	.long 110
	.long 62
	.long 32
	.long 32
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 73
	.long 110
	.long 116
	.long 32
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 32
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 110
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 98
	.long 111
	.long 111
	.long 108
	.long 32
	.long 98
	.long 62
	.long 32
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 66
	.long 111
	.long 111
	.long 108
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 98
	.long 111
	.long 111
	.long 108
	.long 32
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 98
	.long 59
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 76
	.long 105
	.long 115
	.long 116
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 78
	.long 105
	.long 108
	.long 32
	.long 123
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 78
	.long 105
	.long 108
	.long 32
	.long 104
	.long 101
	.long 97
	.long 100
	.long 59
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 78
	.long 105
	.long 108
	.long 32
	.long 116
	.long 97
	.long 105
	.long 108
	.long 59
	.long 32
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 72
	.long 101
	.long 97
	.long 100
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 84
	.long 97
	.long 105
	.long 108
	.long 47
	.long 42
	.long 61
	.long 78
	.long 105
	.long 108
	.long 42
	.long 47
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 80
	.long 97
	.long 105
	.long 114
	.long 32
	.long 123
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 72
	.long 101
	.long 97
	.long 100
	.long 32
	.long 104
	.long 101
	.long 97
	.long 100
	.long 59
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 84
	.long 97
	.long 105
	.long 108
	.long 32
	.long 116
	.long 97
	.long 105
	.long 108
	.long 59
	.long 32
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 105
	.long 115
	.long 95
	.long 110
	.long 105
	.long 108
	.long 32
	.long 58
	.long 32
	.long 66
	.long 111
	.long 111
	.long 108
	.long 60
	.long 102
	.long 97
	.long 108
	.long 115
	.long 101
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 60
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 105
	.long 115
	.long 95
	.long 110
	.long 105
	.long 108
	.long 60
	.long 78
	.long 105
	.long 108
	.long 62
	.long 32
	.long 58
	.long 32
	.long 66
	.long 111
	.long 111
	.long 108
	.long 60
	.long 116
	.long 114
	.long 117
	.long 101
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 104
	.long 101
	.long 97
	.long 100
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 97
	.long 105
	.long 108
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 32
	.long 58
	.long 32
	.long 80
	.long 97
	.long 105
	.long 114
	.long 60
	.long 104
	.long 101
	.long 97
	.long 100
	.long 44
	.long 32
	.long 116
	.long 97
	.long 105
	.long 108
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 110
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 103
	.long 101
	.long 116
	.long 95
	.long 97
	.long 116
	.long 32
	.long 58
	.long 32
	.long 103
	.long 101
	.long 116
	.long 95
	.long 97
	.long 116
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 58
	.long 58
	.long 116
	.long 97
	.long 105
	.long 108
	.long 44
	.long 32
	.long 110
	.long 45
	.long 49
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 103
	.long 101
	.long 116
	.long 95
	.long 97
	.long 116
	.long 60
	.long 108
	.long 105
	.long 115
	.long 116
	.long 44
	.long 32
	.long 48
	.long 62
	.long 32
	.long 58
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 58
	.long 58
	.long 104
	.long 101
	.long 97
	.long 100
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 110
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 118
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 101
	.long 116
	.long 95
	.long 97
	.long 116
	.long 32
	.long 58
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 58
	.long 58
	.long 104
	.long 101
	.long 97
	.long 100
	.long 44
	.long 32
	.long 115
	.long 101
	.long 116
	.long 95
	.long 97
	.long 116
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 58
	.long 58
	.long 116
	.long 97
	.long 105
	.long 108
	.long 44
	.long 32
	.long 110
	.long 32
	.long 45
	.long 32
	.long 49
	.long 44
	.long 32
	.long 118
	.long 62
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 118
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 101
	.long 116
	.long 95
	.long 97
	.long 116
	.long 60
	.long 108
	.long 105
	.long 115
	.long 116
	.long 44
	.long 32
	.long 48
	.long 44
	.long 32
	.long 118
	.long 62
	.long 32
	.long 58
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 60
	.long 73
	.long 110
	.long 116
	.long 60
	.long 118
	.long 62
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 58
	.long 58
	.long 116
	.long 97
	.long 105
	.long 108
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 105
	.long 110
	.long 116
	.long 32
	.long 110
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 105
	.long 110
	.long 105
	.long 116
	.long 95
	.long 108
	.long 105
	.long 115
	.long 116
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 105
	.long 110
	.long 105
	.long 116
	.long 95
	.long 108
	.long 105
	.long 115
	.long 116
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 110
	.long 45
	.long 49
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 116
	.long 97
	.long 105
	.long 108
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 60
	.long 73
	.long 110
	.long 116
	.long 60
	.long 48
	.long 62
	.long 44
	.long 32
	.long 116
	.long 97
	.long 105
	.long 108
	.long 62
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 105
	.long 110
	.long 105
	.long 116
	.long 95
	.long 108
	.long 105
	.long 115
	.long 116
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 48
	.long 62
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 78
	.long 105
	.long 108
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 105
	.long 110
	.long 116
	.long 32
	.long 110
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 105
	.long 110
	.long 105
	.long 116
	.long 95
	.long 108
	.long 105
	.long 115
	.long 116
	.long 32
	.long 58
	.long 32
	.long 105
	.long 110
	.long 105
	.long 116
	.long 95
	.long 108
	.long 105
	.long 115
	.long 116
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 110
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 32
	.long 66
	.long 105
	.long 110
	.long 97
	.long 114
	.long 121
	.long 32
	.long 84
	.long 114
	.long 101
	.long 101
	.long 32
	.long 40
	.long 102
	.long 111
	.long 114
	.long 32
	.long 77
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 41
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 110
	.long 111
	.long 100
	.long 101
	.long 95
	.long 118
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 110
	.long 111
	.long 100
	.long 101
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 110
	.long 111
	.long 100
	.long 101
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 78
	.long 111
	.long 100
	.long 101
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 110
	.long 111
	.long 100
	.long 101
	.long 95
	.long 118
	.long 32
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 108
	.long 110
	.long 111
	.long 100
	.long 101
	.long 32
	.long 108
	.long 101
	.long 102
	.long 116
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 114
	.long 110
	.long 111
	.long 100
	.long 101
	.long 32
	.long 114
	.long 105
	.long 103
	.long 104
	.long 116
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 98
	.long 111
	.long 111
	.long 108
	.long 32
	.long 105
	.long 115
	.long 95
	.long 108
	.long 101
	.long 97
	.long 102
	.long 32
	.long 61
	.long 32
	.long 105
	.long 115
	.long 95
	.long 110
	.long 105
	.long 108
	.long 60
	.long 108
	.long 110
	.long 111
	.long 100
	.long 101
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 32
	.long 38
	.long 38
	.long 32
	.long 105
	.long 115
	.long 95
	.long 110
	.long 105
	.long 108
	.long 60
	.long 114
	.long 110
	.long 111
	.long 100
	.long 101
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 118
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 76
	.long 101
	.long 97
	.long 102
	.long 32
	.long 58
	.long 32
	.long 78
	.long 111
	.long 100
	.long 101
	.long 60
	.long 118
	.long 44
	.long 32
	.long 78
	.long 105
	.long 108
	.long 44
	.long 32
	.long 78
	.long 105
	.long 108
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 107
	.long 95
	.long 116
	.long 114
	.long 101
	.long 101
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 73
	.long 110
	.long 116
	.long 60
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 62
	.long 32
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 109
	.long 107
	.long 95
	.long 116
	.long 114
	.long 101
	.long 101
	.long 60
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 45
	.long 49
	.long 62
	.long 32
	.long 108
	.long 101
	.long 102
	.long 116
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 109
	.long 107
	.long 95
	.long 116
	.long 114
	.long 101
	.long 101
	.long 60
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 45
	.long 49
	.long 62
	.long 32
	.long 114
	.long 105
	.long 103
	.long 104
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 107
	.long 95
	.long 116
	.long 114
	.long 101
	.long 101
	.long 60
	.long 48
	.long 62
	.long 32
	.long 58
	.long 32
	.long 76
	.long 101
	.long 97
	.long 102
	.long 60
	.long 73
	.long 110
	.long 116
	.long 60
	.long 48
	.long 62
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 102
	.long 108
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 103
	.long 101
	.long 116
	.long 95
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 32
	.long 58
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 58
	.long 58
	.long 108
	.long 101
	.long 102
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 103
	.long 101
	.long 116
	.long 95
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 60
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 49
	.long 62
	.long 32
	.long 58
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 58
	.long 58
	.long 114
	.long 105
	.long 103
	.long 104
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 102
	.long 108
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 117
	.long 112
	.long 100
	.long 97
	.long 116
	.long 101
	.long 95
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 32
	.long 58
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 32
	.long 123
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 32
	.long 108
	.long 101
	.long 102
	.long 116
	.long 59
	.long 32
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 117
	.long 112
	.long 100
	.long 97
	.long 116
	.long 101
	.long 95
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 60
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 44
	.long 32
	.long 49
	.long 62
	.long 32
	.long 58
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 32
	.long 123
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 32
	.long 114
	.long 105
	.long 103
	.long 104
	.long 116
	.long 59
	.long 125
	.long 59
	.long 10
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 77
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 10
	.long 10
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 101
	.long 120
	.long 112
	.long 114
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 95
	.long 108
	.long 111
	.long 103
	.long 50
	.long 40
	.long 105
	.long 110
	.long 116
	.long 32
	.long 120
	.long 41
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 114
	.long 101
	.long 116
	.long 117
	.long 114
	.long 110
	.long 32
	.long 120
	.long 32
	.long 60
	.long 32
	.long 50
	.long 32
	.long 63
	.long 32
	.long 120
	.long 32
	.long 58
	.long 32
	.long 49
	.long 32
	.long 43
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 95
	.long 108
	.long 111
	.long 103
	.long 50
	.long 40
	.long 120
	.long 32
	.long 62
	.long 62
	.long 32
	.long 49
	.long 41
	.long 59
	.long 10
	.long 125
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 105
	.long 110
	.long 116
	.long 32
	.long 109
	.long 101
	.long 109
	.long 95
	.long 115
	.long 105
	.long 122
	.long 101
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 105
	.long 110
	.long 105
	.long 116
	.long 95
	.long 109
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 32
	.long 61
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 95
	.long 108
	.long 111
	.long 103
	.long 50
	.long 40
	.long 109
	.long 101
	.long 109
	.long 95
	.long 115
	.long 105
	.long 122
	.long 101
	.long 41
	.long 59
	.long 32
	.long 47
	.long 47
	.long 32
	.long 109
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 32
	.long 115
	.long 105
	.long 122
	.long 101
	.long 32
	.long 61
	.long 61
	.long 32
	.long 50
	.long 94
	.long 100
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 109
	.long 107
	.long 95
	.long 116
	.long 114
	.long 101
	.long 101
	.long 60
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 62
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 77
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 32
	.long 65
	.long 99
	.long 99
	.long 101
	.long 115
	.long 115
	.long 10
	.long 47
	.long 47
	.long 32
	.long 76
	.long 111
	.long 97
	.long 100
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 100
	.long 120
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 102
	.long 108
	.long 103
	.long 32
	.long 61
	.long 32
	.long 40
	.long 105
	.long 100
	.long 120
	.long 32
	.long 62
	.long 62
	.long 32
	.long 40
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 45
	.long 49
	.long 41
	.long 41
	.long 32
	.long 38
	.long 32
	.long 49
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 103
	.long 101
	.long 116
	.long 95
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 60
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 102
	.long 108
	.long 103
	.long 62
	.long 32
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 44
	.long 32
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 45
	.long 49
	.long 44
	.long 32
	.long 105
	.long 100
	.long 120
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 100
	.long 120
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 48
	.long 44
	.long 32
	.long 105
	.long 100
	.long 120
	.long 62
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 100
	.long 120
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 32
	.long 58
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 58
	.long 58
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 109
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 58
	.long 58
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 44
	.long 32
	.long 105
	.long 100
	.long 120
	.long 32
	.long 38
	.long 32
	.long 40
	.long 77
	.long 69
	.long 77
	.long 95
	.long 83
	.long 73
	.long 90
	.long 69
	.long 32
	.long 45
	.long 32
	.long 49
	.long 41
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 83
	.long 116
	.long 111
	.long 114
	.long 101
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 100
	.long 120
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 110
	.long 101
	.long 119
	.long 95
	.long 118
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 102
	.long 108
	.long 103
	.long 32
	.long 61
	.long 32
	.long 40
	.long 105
	.long 100
	.long 120
	.long 32
	.long 62
	.long 62
	.long 32
	.long 40
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 45
	.long 49
	.long 41
	.long 41
	.long 32
	.long 38
	.long 32
	.long 49
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 103
	.long 101
	.long 116
	.long 95
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 60
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 102
	.long 108
	.long 103
	.long 62
	.long 32
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 44
	.long 32
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 45
	.long 49
	.long 44
	.long 32
	.long 105
	.long 100
	.long 120
	.long 44
	.long 32
	.long 110
	.long 101
	.long 119
	.long 95
	.long 118
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 110
	.long 101
	.long 119
	.long 95
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 117
	.long 112
	.long 100
	.long 97
	.long 116
	.long 101
	.long 95
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 60
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 110
	.long 101
	.long 119
	.long 95
	.long 99
	.long 104
	.long 105
	.long 108
	.long 100
	.long 44
	.long 32
	.long 102
	.long 108
	.long 103
	.long 62
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 100
	.long 120
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 110
	.long 101
	.long 119
	.long 95
	.long 118
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 48
	.long 44
	.long 32
	.long 105
	.long 100
	.long 120
	.long 44
	.long 32
	.long 110
	.long 101
	.long 119
	.long 95
	.long 118
	.long 62
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 76
	.long 101
	.long 97
	.long 102
	.long 60
	.long 73
	.long 110
	.long 116
	.long 60
	.long 110
	.long 101
	.long 119
	.long 95
	.long 118
	.long 62
	.long 62
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 100
	.long 120
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 110
	.long 101
	.long 119
	.long 95
	.long 118
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 32
	.long 58
	.long 32
	.long 109
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 58
	.long 58
	.long 116
	.long 114
	.long 101
	.long 101
	.long 44
	.long 32
	.long 109
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 58
	.long 58
	.long 100
	.long 101
	.long 112
	.long 116
	.long 104
	.long 44
	.long 32
	.long 105
	.long 100
	.long 120
	.long 32
	.long 38
	.long 32
	.long 40
	.long 77
	.long 69
	.long 77
	.long 95
	.long 83
	.long 73
	.long 90
	.long 69
	.long 32
	.long 45
	.long 32
	.long 49
	.long 41
	.long 44
	.long 32
	.long 110
	.long 101
	.long 119
	.long 95
	.long 118
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 116
	.long 114
	.long 101
	.long 101
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 82
	.long 101
	.long 103
	.long 105
	.long 115
	.long 116
	.long 101
	.long 114
	.long 115
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 105
	.long 110
	.long 116
	.long 32
	.long 80
	.long 67
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 105
	.long 110
	.long 105
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 115
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 97
	.long 32
	.long 61
	.long 32
	.long 48
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 98
	.long 32
	.long 61
	.long 32
	.long 48
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 99
	.long 32
	.long 61
	.long 32
	.long 48
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 32
	.long 61
	.long 32
	.long 48
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 112
	.long 32
	.long 61
	.long 32
	.long 48
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 98
	.long 112
	.long 32
	.long 61
	.long 32
	.long 48
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 112
	.long 99
	.long 32
	.long 61
	.long 32
	.long 80
	.long 67
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 98
	.long 111
	.long 111
	.long 108
	.long 32
	.long 101
	.long 120
	.long 105
	.long 116
	.long 95
	.long 102
	.long 108
	.long 97
	.long 103
	.long 32
	.long 61
	.long 32
	.long 102
	.long 97
	.long 108
	.long 115
	.long 101
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 95
	.long 99
	.long 117
	.long 114
	.long 32
	.long 61
	.long 32
	.long 48
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 48
	.long 62
	.long 32
	.long 123
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 97
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 49
	.long 62
	.long 32
	.long 123
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 98
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 50
	.long 62
	.long 32
	.long 123
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 99
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 51
	.long 62
	.long 32
	.long 123
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 100
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 52
	.long 62
	.long 32
	.long 123
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 115
	.long 112
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 53
	.long 62
	.long 32
	.long 123
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 98
	.long 112
	.long 59
	.long 125
	.long 59
	.long 10
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 69
	.long 110
	.long 118
	.long 105
	.long 114
	.long 111
	.long 110
	.long 109
	.long 101
	.long 110
	.long 116
	.long 32
	.long 40
	.long 84
	.long 117
	.long 112
	.long 108
	.long 101
	.long 32
	.long 111
	.long 102
	.long 32
	.long 82
	.long 101
	.long 103
	.long 105
	.long 115
	.long 116
	.long 101
	.long 114
	.long 115
	.long 44
	.long 32
	.long 77
	.long 101
	.long 109
	.long 111
	.long 114
	.long 121
	.long 32
	.long 97
	.long 110
	.long 100
	.long 32
	.long 66
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 41
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 82
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 77
	.long 101
	.long 109
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 66
	.long 117
	.long 102
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 97
	.long 107
	.long 101
	.long 95
	.long 101
	.long 110
	.long 118
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 82
	.long 101
	.long 103
	.long 115
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 77
	.long 101
	.long 109
	.long 32
	.long 109
	.long 101
	.long 109
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 66
	.long 117
	.long 102
	.long 32
	.long 98
	.long 117
	.long 102
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 80
	.long 67
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 117
	.long 112
	.long 100
	.long 97
	.long 116
	.long 101
	.long 95
	.long 112
	.long 99
	.long 32
	.long 58
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 32
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 112
	.long 99
	.long 32
	.long 61
	.long 32
	.long 80
	.long 67
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 105
	.long 110
	.long 99
	.long 95
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 95
	.long 99
	.long 117
	.long 114
	.long 32
	.long 58
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 32
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 95
	.long 99
	.long 117
	.long 114
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 95
	.long 99
	.long 117
	.long 114
	.long 32
	.long 43
	.long 32
	.long 40
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 91
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 95
	.long 99
	.long 117
	.long 114
	.long 93
	.long 32
	.long 63
	.long 32
	.long 49
	.long 32
	.long 58
	.long 32
	.long 48
	.long 41
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 98
	.long 117
	.long 102
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 105
	.long 110
	.long 99
	.long 95
	.long 112
	.long 99
	.long 32
	.long 58
	.long 32
	.long 109
	.long 97
	.long 107
	.long 101
	.long 95
	.long 101
	.long 110
	.long 118
	.long 60
	.long 117
	.long 112
	.long 100
	.long 97
	.long 116
	.long 101
	.long 95
	.long 112
	.long 99
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 49
	.long 32
	.long 43
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 112
	.long 99
	.long 62
	.long 44
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 98
	.long 117
	.long 102
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 70
	.long 117
	.long 110
	.long 99
	.long 116
	.long 105
	.long 111
	.long 110
	.long 115
	.long 32
	.long 102
	.long 111
	.long 114
	.long 32
	.long 69
	.long 97
	.long 99
	.long 104
	.long 32
	.long 73
	.long 110
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 105
	.long 111
	.long 110
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 77
	.long 79
	.long 86
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 58
	.long 32
	.long 114
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 44
	.long 32
	.long 48
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 32
	.long 58
	.long 32
	.long 114
	.long 32
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 97
	.long 32
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 44
	.long 32
	.long 49
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 32
	.long 58
	.long 32
	.long 114
	.long 32
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 98
	.long 32
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 44
	.long 32
	.long 50
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 32
	.long 58
	.long 32
	.long 114
	.long 32
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 99
	.long 32
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 44
	.long 32
	.long 51
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 32
	.long 58
	.long 32
	.long 114
	.long 32
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 32
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 44
	.long 32
	.long 52
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 32
	.long 58
	.long 32
	.long 114
	.long 32
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 112
	.long 32
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 59
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 44
	.long 32
	.long 53
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 32
	.long 58
	.long 32
	.long 114
	.long 32
	.long 123
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 98
	.long 112
	.long 32
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 59
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 58
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 65
	.long 68
	.long 68
	.long 44
	.long 32
	.long 83
	.long 85
	.long 66
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 97
	.long 100
	.long 100
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 40
	.long 100
	.long 115
	.long 116
	.long 95
	.long 118
	.long 97
	.long 108
	.long 32
	.long 43
	.long 32
	.long 105
	.long 109
	.long 109
	.long 41
	.long 32
	.long 38
	.long 32
	.long 40
	.long 77
	.long 69
	.long 77
	.long 95
	.long 83
	.long 73
	.long 90
	.long 69
	.long 32
	.long 45
	.long 32
	.long 49
	.long 41
	.long 62
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 97
	.long 100
	.long 100
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 58
	.long 32
	.long 97
	.long 100
	.long 100
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 97
	.long 100
	.long 100
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 97
	.long 100
	.long 100
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 117
	.long 98
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 58
	.long 32
	.long 97
	.long 100
	.long 100
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 45
	.long 105
	.long 109
	.long 109
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 117
	.long 98
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 97
	.long 100
	.long 100
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 45
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 76
	.long 79
	.long 65
	.long 68
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 97
	.long 100
	.long 100
	.long 114
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 58
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 60
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 97
	.long 100
	.long 100
	.long 114
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 97
	.long 100
	.long 100
	.long 114
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 58
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 97
	.long 100
	.long 100
	.long 114
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 108
	.long 111
	.long 97
	.long 100
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 83
	.long 84
	.long 79
	.long 82
	.long 69
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 97
	.long 100
	.long 100
	.long 114
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 32
	.long 100
	.long 97
	.long 116
	.long 97
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 118
	.long 97
	.long 108
	.long 117
	.long 101
	.long 60
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 97
	.long 100
	.long 100
	.long 114
	.long 44
	.long 32
	.long 100
	.long 97
	.long 116
	.long 97
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 62
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 97
	.long 100
	.long 100
	.long 114
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 58
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 97
	.long 100
	.long 100
	.long 114
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 115
	.long 116
	.long 111
	.long 114
	.long 101
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 109
	.long 101
	.long 109
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 80
	.long 85
	.long 84
	.long 67
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 112
	.long 117
	.long 116
	.long 99
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 60
	.long 73
	.long 110
	.long 116
	.long 60
	.long 105
	.long 109
	.long 109
	.long 62
	.long 44
	.long 32
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 62
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 112
	.long 117
	.long 116
	.long 99
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 58
	.long 32
	.long 112
	.long 117
	.long 116
	.long 99
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 112
	.long 117
	.long 116
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 112
	.long 117
	.long 116
	.long 99
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 71
	.long 69
	.long 84
	.long 67
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 103
	.long 101
	.long 116
	.long 99
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 114
	.long 101
	.long 97
	.long 100
	.long 95
	.long 118
	.long 97
	.long 108
	.long 32
	.long 61
	.long 32
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 91
	.long 114
	.long 101
	.long 103
	.long 115
	.long 58
	.long 58
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 95
	.long 99
	.long 117
	.long 114
	.long 93
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 105
	.long 110
	.long 99
	.long 95
	.long 105
	.long 110
	.long 112
	.long 117
	.long 116
	.long 95
	.long 99
	.long 117
	.long 114
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 62
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 50
	.long 59
	.long 10
	.long 32
	.long 32
	.long 116
	.long 121
	.long 112
	.long 101
	.long 100
	.long 101
	.long 102
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 50
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 114
	.long 101
	.long 97
	.long 100
	.long 95
	.long 118
	.long 97
	.long 108
	.long 32
	.long 38
	.long 32
	.long 40
	.long 77
	.long 69
	.long 77
	.long 95
	.long 83
	.long 73
	.long 90
	.long 69
	.long 32
	.long 45
	.long 32
	.long 49
	.long 41
	.long 62
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 103
	.long 101
	.long 116
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 103
	.long 101
	.long 116
	.long 99
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 69
	.long 88
	.long 73
	.long 84
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 101
	.long 120
	.long 105
	.long 116
	.long 95
	.long 105
	.long 110
	.long 115
	.long 116
	.long 32
	.long 58
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 112
	.long 99
	.long 32
	.long 61
	.long 32
	.long 49
	.long 48
	.long 48
	.long 48
	.long 48
	.long 48
	.long 48
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 98
	.long 111
	.long 111
	.long 108
	.long 32
	.long 101
	.long 120
	.long 105
	.long 116
	.long 95
	.long 102
	.long 108
	.long 97
	.long 103
	.long 32
	.long 61
	.long 32
	.long 116
	.long 114
	.long 117
	.long 101
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 74
	.long 77
	.long 80
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 108
	.long 97
	.long 98
	.long 101
	.long 108
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 102
	.long 108
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 106
	.long 109
	.long 112
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 58
	.long 32
	.long 117
	.long 112
	.long 100
	.long 97
	.long 116
	.long 101
	.long 95
	.long 112
	.long 99
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 108
	.long 97
	.long 98
	.long 101
	.long 108
	.long 62
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 108
	.long 97
	.long 98
	.long 101
	.long 108
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 106
	.long 109
	.long 112
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 108
	.long 97
	.long 98
	.long 101
	.long 108
	.long 44
	.long 32
	.long 48
	.long 62
	.long 32
	.long 58
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 106
	.long 109
	.long 112
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 58
	.long 32
	.long 106
	.long 109
	.long 112
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 32
	.long 45
	.long 32
	.long 49
	.long 44
	.long 32
	.long 49
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 106
	.long 109
	.long 112
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 106
	.long 109
	.long 112
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 32
	.long 45
	.long 32
	.long 49
	.long 44
	.long 32
	.long 49
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 67
	.long 77
	.long 80
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 48
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 101
	.long 113
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 48
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 98
	.long 111
	.long 111
	.long 108
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 61
	.long 32
	.long 40
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 32
	.long 61
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 41
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 111
	.long 112
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 111
	.long 112
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 118
	.long 32
	.long 61
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 59
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 99
	.long 111
	.long 110
	.long 115
	.long 116
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 32
	.long 61
	.long 10
	.long 32
	.long 32
	.long 32
	.long 32
	.long 111
	.long 112
	.long 32
	.long 61
	.long 61
	.long 32
	.long 48
	.long 32
	.long 63
	.long 32
	.long 40
	.long 118
	.long 32
	.long 61
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 41
	.long 32
	.long 58
	.long 10
	.long 32
	.long 32
	.long 32
	.long 32
	.long 111
	.long 112
	.long 32
	.long 61
	.long 61
	.long 32
	.long 49
	.long 32
	.long 63
	.long 32
	.long 40
	.long 118
	.long 32
	.long 33
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 41
	.long 32
	.long 58
	.long 10
	.long 32
	.long 32
	.long 32
	.long 32
	.long 111
	.long 112
	.long 32
	.long 61
	.long 61
	.long 32
	.long 50
	.long 32
	.long 63
	.long 32
	.long 40
	.long 118
	.long 32
	.long 60
	.long 32
	.long 32
	.long 105
	.long 109
	.long 109
	.long 41
	.long 32
	.long 58
	.long 10
	.long 32
	.long 32
	.long 32
	.long 32
	.long 111
	.long 112
	.long 32
	.long 61
	.long 61
	.long 32
	.long 51
	.long 32
	.long 63
	.long 32
	.long 40
	.long 118
	.long 32
	.long 62
	.long 32
	.long 32
	.long 105
	.long 109
	.long 109
	.long 41
	.long 32
	.long 58
	.long 10
	.long 32
	.long 32
	.long 32
	.long 32
	.long 111
	.long 112
	.long 32
	.long 61
	.long 61
	.long 32
	.long 52
	.long 32
	.long 63
	.long 32
	.long 40
	.long 118
	.long 32
	.long 60
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 41
	.long 32
	.long 58
	.long 10
	.long 32
	.long 32
	.long 32
	.long 32
	.long 111
	.long 112
	.long 32
	.long 61
	.long 61
	.long 32
	.long 53
	.long 32
	.long 63
	.long 32
	.long 40
	.long 118
	.long 32
	.long 62
	.long 61
	.long 32
	.long 105
	.long 109
	.long 109
	.long 41
	.long 32
	.long 58
	.long 10
	.long 32
	.long 32
	.long 32
	.long 32
	.long 49
	.long 59
	.long 10
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 49
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 114
	.long 101
	.long 103
	.long 50
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 111
	.long 112
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 111
	.long 112
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 111
	.long 112
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 49
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 95
	.long 118
	.long 97
	.long 108
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 114
	.long 101
	.long 103
	.long 50
	.long 62
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 44
	.long 32
	.long 111
	.long 112
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 111
	.long 112
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 58
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 111
	.long 112
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 44
	.long 32
	.long 111
	.long 112
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 111
	.long 112
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 109
	.long 111
	.long 118
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 111
	.long 112
	.long 95
	.long 114
	.long 101
	.long 103
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 100
	.long 115
	.long 116
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 111
	.long 112
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 74
	.long 67
	.long 77
	.long 80
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 108
	.long 97
	.long 98
	.long 101
	.long 108
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 105
	.long 109
	.long 109
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 111
	.long 112
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 106
	.long 99
	.long 109
	.long 112
	.long 95
	.long 105
	.long 109
	.long 109
	.long 32
	.long 58
	.long 32
	.long 106
	.long 109
	.long 112
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 108
	.long 97
	.long 98
	.long 101
	.long 108
	.long 44
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 111
	.long 112
	.long 95
	.long 105
	.long 109
	.long 109
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 44
	.long 32
	.long 105
	.long 109
	.long 109
	.long 44
	.long 32
	.long 111
	.long 112
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 108
	.long 97
	.long 98
	.long 101
	.long 108
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 49
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 50
	.long 44
	.long 32
	.long 105
	.long 110
	.long 116
	.long 32
	.long 111
	.long 112
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 106
	.long 99
	.long 109
	.long 112
	.long 95
	.long 114
	.long 101
	.long 103
	.long 32
	.long 58
	.long 32
	.long 106
	.long 109
	.long 112
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 108
	.long 97
	.long 98
	.long 101
	.long 108
	.long 44
	.long 32
	.long 99
	.long 109
	.long 112
	.long 95
	.long 111
	.long 112
	.long 95
	.long 114
	.long 101
	.long 103
	.long 60
	.long 114
	.long 101
	.long 103
	.long 115
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 49
	.long 44
	.long 32
	.long 115
	.long 114
	.long 99
	.long 95
	.long 114
	.long 101
	.long 103
	.long 50
	.long 44
	.long 32
	.long 111
	.long 112
	.long 62
	.long 58
	.long 58
	.long 114
	.long 101
	.long 115
	.long 117
	.long 108
	.long 116
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 112
	.long 114
	.long 105
	.long 110
	.long 116
	.long 95
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 112
	.long 114
	.long 105
	.long 110
	.long 116
	.long 95
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 95
	.long 97
	.long 117
	.long 120
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 105
	.long 110
	.long 108
	.long 105
	.long 110
	.long 101
	.long 32
	.long 118
	.long 111
	.long 105
	.long 100
	.long 32
	.long 114
	.long 117
	.long 110
	.long 32
	.long 40
	.long 41
	.long 32
	.long 123
	.long 10
	.long 32
	.long 32
	.long 32
	.long 32
	.long 112
	.long 114
	.long 105
	.long 110
	.long 116
	.long 95
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 58
	.long 58
	.long 116
	.long 97
	.long 105
	.long 108
	.long 62
	.long 58
	.long 58
	.long 114
	.long 117
	.long 110
	.long 40
	.long 41
	.long 59
	.long 10
	.long 32
	.long 32
	.long 32
	.long 32
	.long 112
	.long 117
	.long 116
	.long 99
	.long 104
	.long 97
	.long 114
	.long 40
	.long 108
	.long 105
	.long 115
	.long 116
	.long 58
	.long 58
	.long 104
	.long 101
	.long 97
	.long 100
	.long 58
	.long 58
	.long 118
	.long 97
	.long 108
	.long 41
	.long 59
	.long 10
	.long 32
	.long 32
	.long 125
	.long 10
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 112
	.long 114
	.long 105
	.long 110
	.long 116
	.long 95
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 78
	.long 105
	.long 108
	.long 62
	.long 32
	.long 123
	.long 32
	.long 115
	.long 116
	.long 97
	.long 116
	.long 105
	.long 99
	.long 32
	.long 105
	.long 110
	.long 108
	.long 105
	.long 110
	.long 101
	.long 32
	.long 118
	.long 111
	.long 105
	.long 100
	.long 32
	.long 114
	.long 117
	.long 110
	.long 32
	.long 40
	.long 41
	.long 32
	.long 123
	.long 125
	.long 125
	.long 59
	.long 10
	.long 116
	.long 101
	.long 109
	.long 112
	.long 108
	.long 97
	.long 116
	.long 101
	.long 32
	.long 60
	.long 116
	.long 121
	.long 112
	.long 101
	.long 110
	.long 97
	.long 109
	.long 101
	.long 32
	.long 108
	.long 105
	.long 115
	.long 116
	.long 62
	.long 10
	.long 115
	.long 116
	.long 114
	.long 117
	.long 99
	.long 116
	.long 32
	.long 112
	.long 114
	.long 105
	.long 110
	.long 116
	.long 95
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 32
	.long 58
	.long 32
	.long 112
	.long 114
	.long 105
	.long 110
	.long 116
	.long 95
	.long 98
	.long 117
	.long 102
	.long 102
	.long 101
	.long 114
	.long 95
	.long 97
	.long 117
	.long 120
	.long 60
	.long 108
	.long 105
	.long 115
	.long 116
	.long 62
	.long 32
	.long 123
	.long 125
	.long 59
	.long 10
	.long 10
	.long 47
	.long 47
	.long 32
	.long 76
	.long 105
	.long 98
	.long 114
	.long 97
	.long 114
	.long 121
	.long 32
	.long 101
	.long 110
	.long 100
	.long 115
	.long 32
	.long 104
	.long 101
	.long 114
	.long 101
	.long 10
	.long 0
	.text
cpp_template_emit_file_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2463 0
	# }
	.loc 7 2459 0
	#   emit_line("");
.data
	.L3906:
	.string "#include <cstdio>"
.text
	mov A, .L3906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3907:
	mov A, B
	add SP, 1
	.loc 7 2460 0
	#   emit_line(cpp_template_lib);
.data
	.L3908:
	.string ""
.text
	mov A, .L3908
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3909:
	mov A, B
	add SP, 1
	.loc 7 2461 0
	#   emit_line("");
	.loc 7 2452 0
	# }
	mov A, cpp_template_lib
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3910:
	mov A, B
	add SP, 1
	.loc 7 2462 0
	#   emit_line("typedef enum { a, b, c, d, bp, sp } Reg_Name;");
.data
	.L3911:
	.string ""
.text
	mov A, .L3911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3912:
	mov A, B
	add SP, 1
	.loc 7 2463 0
	# }
.data
	.L3913:
	.string "typedef enum { a, b, c, d, bp, sp } Reg_Name;"
.text
	mov A, .L3913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3914
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3914:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_template_op_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 2499 0
	# }
	.loc 7 2467 0
	#   const char * src_str = inst->src.type == REG ? "reg" : "imm";
	.loc 7 2468 0
	#   switch (inst->op) {
	mov A, 0
	mov B, SP
	.loc 7 2463 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3915, A, 0
	.loc 7 2468 0
	#   switch (inst->op) {
.data
	.L3916:
	.string "reg"
.text
	mov A, .L3916
	jmp .L3917
	.L3915:
.data
	.L3918:
	.string "imm"
.text
	mov A, .L3918
	.L3917:
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 2496 0
	#     error("oops");
	.loc 7 2469 0
	#   case MOV:
	.loc 7 2463 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 2496 0
	#     error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3919, A, 0
	jmp .L421
	.L3919:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3920, A, 0
	jmp .L422
	.L3920:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3921, A, 0
	jmp .L423
	.L3921:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3922, A, 0
	jmp .L424
	.L3922:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3923, A, 0
	jmp .L425
	.L3923:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3924, A, 0
	jmp .L426
	.L3924:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3925, A, 0
	jmp .L427
	.L3925:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3926, A, 0
	jmp .L428
	.L3926:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3927, A, 0
	jmp .L429
	.L3927:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3928, A, 0
	jmp .L430
	.L3928:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3929, A, 0
	jmp .L431
	.L3929:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3930, A, 0
	jmp .L432
	.L3930:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3931, A, 0
	jmp .L433
	.L3931:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3932, A, 0
	jmp .L434
	.L3932:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3933, A, 0
	jmp .L435
	.L3933:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3934, A, 0
	jmp .L436
	.L3934:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3935, A, 0
	jmp .L437
	.L3935:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3936, A, 0
	jmp .L438
	.L3936:
	jmp .L439
	.loc 7 2470 0
	#     op_str = "mov"; break;
	.L421:
.data
	.L3937:
	.string "mov"
.text
	mov A, .L3937
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2471 0
	#   case ADD:
	jmp .L420
	.loc 7 2472 0
	#     op_str = "add"; break;
	.L422:
.data
	.L3938:
	.string "add"
.text
	mov A, .L3938
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2473 0
	#   case SUB:
	jmp .L420
	.loc 7 2474 0
	#     op_str = "sub"; break;
	.L423:
.data
	.L3939:
	.string "sub"
.text
	mov A, .L3939
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2475 0
	#   case LOAD:
	jmp .L420
	.loc 7 2476 0
	#     op_str = "load"; break;
	.L424:
.data
	.L3940:
	.string "load"
.text
	mov A, .L3940
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2477 0
	#   case STORE:
	jmp .L420
	.loc 7 2478 0
	#     op_str = "store"; break;
	.L425:
.data
	.L3941:
	.string "store"
.text
	mov A, .L3941
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2479 0
	#   case PUTC:
	jmp .L420
	.loc 7 2480 0
	#     op_str = "putc"; break;
	.L426:
.data
	.L3942:
	.string "putc"
.text
	mov A, .L3942
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2481 0
	#   case EQ:
	jmp .L420
	.loc 7 2482 0
	#   case NE:
	.L427:
	.L428:
	.L429:
	.L430:
	.L431:
	.L432:
.data
	.L3943:
	.string "cmp"
.text
	mov A, .L3943
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2488 0
	#   case JEQ:
	jmp .L420
	.loc 7 2489 0
	#   case JNE:
	.L433:
	.L434:
	.L435:
	.L436:
	.L437:
	.L438:
.data
	.L3944:
	.string "jcmp"
.text
	mov A, .L3944
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2495 0
	#   default:
	jmp .L420
	.loc 7 2496 0
	#     error("oops");
	.L439:
.data
	.L3945:
	.string "oops"
.text
	mov A, .L3945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L3946:
	mov A, B
	add SP, 1
	.L420:
	.loc 7 2499 0
	# }
	.loc 7 2468 0
	#   switch (inst->op) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2467 0
	#   const char * src_str = inst->src.type == REG ? "reg" : "imm";
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2499 0
	# }
.data
	.L3947:
	.string "%s_%s"
.text
	mov A, .L3947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L3948:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
reg_id:
	.long 0
	.data 0
mem_id:
	.long 0
	.data 0
buf_id:
	.long 0
	.data 0
exit_flag:
	.long 0
	.text
cpp_template_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2599 0
	# }
	.loc 7 2596 0
	#     error("oops");
	.loc 7 2509 0
	#   case MOV:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2596 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3949, A, 0
	jmp .L441
	.L3949:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3950, A, 0
	jmp .L442
	.L3950:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3951, A, 0
	jmp .L443
	.L3951:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3952, A, 0
	jmp .L444
	.L3952:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3953, A, 0
	jmp .L445
	.L3953:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3954, A, 0
	jmp .L446
	.L3954:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3955, A, 0
	jmp .L447
	.L3955:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3956, A, 0
	jmp .L448
	.L3956:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3957, A, 0
	jmp .L449
	.L3957:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3958, A, 0
	jmp .L450
	.L3958:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3959, A, 0
	jmp .L451
	.L3959:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3960, A, 0
	jmp .L452
	.L3960:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3961, A, 0
	jmp .L453
	.L3961:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3962, A, 0
	jmp .L454
	.L3962:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3963, A, 0
	jmp .L455
	.L3963:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3964, A, 0
	jmp .L456
	.L3964:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3965, A, 0
	jmp .L457
	.L3965:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3966, A, 0
	jmp .L458
	.L3966:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3967, A, 0
	jmp .L459
	.L3967:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3968, A, 0
	jmp .L460
	.L3968:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3969, A, 0
	jmp .L461
	.L3969:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L3970, A, 0
	jmp .L462
	.L3970:
	jmp .L463
	.loc 7 2510 0
	#   case ADD:
	.L441:
	.L442:
	.L443:
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2510 0
	#   case ADD:
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3971:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2510 0
	#   case ADD:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2510 0
	#   case ADD:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2510 0
	#   case ADD:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_op_str
	.L3972:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2510 0
	#   case ADD:
.data
	.L3973:
	.string "typedef %s<r%d, %s, %s> r%d;"
.text
	mov A, .L3973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3974:
	mov A, B
	add SP, 6
	.loc 7 2516 0
	#     break;
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, reg_id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2517 0
	# 
	jmp .L440
	.loc 7 2519 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> r%d;",
	.L444:
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2519 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> r%d;",
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3975:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2519 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> r%d;",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2519 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> r%d;",
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, mem_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2519 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> r%d;",
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_op_str
	.L3976:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2519 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> r%d;",
.data
	.L3977:
	.string "typedef %s<r%d, m%d, %s, %s> r%d;"
.text
	mov A, .L3977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3978:
	mov A, B
	add SP, 7
	.loc 7 2523 0
	#     break;
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, reg_id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2524 0
	# 
	jmp .L440
	.loc 7 2526 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> m%d;",
	.L445:
	.loc 7 2499 0
	# }
	mov B, mem_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2526 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> m%d;",
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3979:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2526 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> m%d;",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2526 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> m%d;",
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, mem_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2526 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> m%d;",
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_op_str
	.L3980:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2526 0
	#     emit_line("typedef %s<r%d, m%d, %s, %s> m%d;",
.data
	.L3981:
	.string "typedef %s<r%d, m%d, %s, %s> m%d;"
.text
	mov A, .L3981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3982:
	mov A, B
	add SP, 7
	.loc 7 2530 0
	#     break;
	.loc 7 2499 0
	# }
	mov B, mem_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, mem_id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2531 0
	# 
	jmp .L440
	.loc 7 2533 0
	#     emit_line("typedef %s<r%d, b%d,%s> b%d;",
	.L446:
	.loc 7 2499 0
	# }
	mov B, buf_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2533 0
	#     emit_line("typedef %s<r%d, b%d,%s> b%d;",
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3983:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, buf_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2533 0
	#     emit_line("typedef %s<r%d, b%d,%s> b%d;",
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_op_str
	.L3984:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2533 0
	#     emit_line("typedef %s<r%d, b%d,%s> b%d;",
.data
	.L3985:
	.string "typedef %s<r%d, b%d,%s> b%d;"
.text
	mov A, .L3985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3986:
	mov A, B
	add SP, 6
	.loc 7 2537 0
	#     break;
	.loc 7 2499 0
	# }
	mov B, buf_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, buf_id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2538 0
	# 
	jmp .L440
	.loc 7 2540 0
	#     emit_line("typedef getc_reg<r%d, %s> r%d;",
	.L447:
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2540 0
	#     emit_line("typedef getc_reg<r%d, %s> r%d;",
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2540 0
	#     emit_line("typedef getc_reg<r%d, %s> r%d;",
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2540 0
	#     emit_line("typedef getc_reg<r%d, %s> r%d;",
.data
	.L3987:
	.string "typedef getc_reg<r%d, %s> r%d;"
.text
	mov A, .L3987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3988:
	mov A, B
	add SP, 4
	.loc 7 2543 0
	#     break;
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, reg_id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2544 0
	# 
	jmp .L440
	.loc 7 2546 0
	#     emit_line("typedef exit_inst<r%d> r%d;",
	.L448:
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2546 0
	#     emit_line("typedef exit_inst<r%d> r%d;",
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2546 0
	#     emit_line("typedef exit_inst<r%d> r%d;",
.data
	.L3989:
	.string "typedef exit_inst<r%d> r%d;"
.text
	mov A, .L3989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3990:
	mov A, B
	add SP, 3
	.loc 7 2549 0
	#     reg_id++;
	mov A, 1
	mov B, exit_flag
	store A, B
	.loc 7 2550 0
	#     return;
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, reg_id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2551 0
	# 
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 2553 0
	#     break;
	.L449:
	jmp .L440
	.loc 7 2556 0
	#   case NE:
	.L450:
	.L451:
	.L452:
	.L453:
	.L454:
	.L455:
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2556 0
	#   case NE:
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2556 0
	#   case NE:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3991:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2556 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2556 0
	#   case NE:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2556 0
	#   case NE:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_op_str
	.L3992:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2556 0
	#   case NE:
.data
	.L3993:
	.string "typedef %s<r%d, %s, %s, %d> r%d;"
.text
	mov A, .L3993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3994:
	mov A, B
	add SP, 7
	.loc 7 2569 0
	#     break;
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, reg_id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2570 0
	# 
	jmp .L440
	.loc 7 2572 0
	#   case JNE:
	.L456:
	.L457:
	.L458:
	.L459:
	.L460:
	.L461:
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2572 0
	#   case JNE:
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2572 0
	#   case JNE:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L3995:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2572 0
	#   case JNE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2572 0
	#   case JNE:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2572 0
	#   case JNE:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3996
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L3996:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2572 0
	#   case JNE:
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_op_str
	.L3997:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2572 0
	#   case JNE:
.data
	.L3998:
	.string "typedef %s<r%d, %s - 1, %s, %s, %d> r%d;"
.text
	mov A, .L3998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L3999
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L3999:
	mov A, B
	add SP, 8
	.loc 7 2586 0
	#     break;
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, reg_id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2587 0
	# 
	jmp .L440
	.loc 7 2589 0
	#     emit_line("typedef jmp_%s<r%d, %s> r%d;",
	.L462:
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2589 0
	#     emit_line("typedef jmp_%s<r%d, %s> r%d;",
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L4000:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2589 0
	#     emit_line("typedef jmp_%s<r%d, %s> r%d;",
	.loc 7 2499 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4001, A, 0
	.loc 7 2589 0
	#     emit_line("typedef jmp_%s<r%d, %s> r%d;",
.data
	.L4002:
	.string "reg"
.text
	mov A, .L4002
	jmp .L4003
	.L4001:
.data
	.L4004:
	.string "imm"
.text
	mov A, .L4004
	.L4003:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L4005:
	.string "typedef jmp_%s<r%d, %s> r%d;"
.text
	mov A, .L4005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4006:
	mov A, B
	add SP, 5
	.loc 7 2593 0
	#     break;
	.loc 7 2499 0
	# }
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, reg_id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2594 0
	# 
	jmp .L440
	.loc 7 2596 0
	#     error("oops");
	.L463:
.data
	.L4007:
	.string "oops"
.text
	mov A, .L4007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L4008:
	mov A, B
	add SP, 1
	.L440:
	.loc 7 2599 0
	# }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_template_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2609 0
	# }
	.loc 7 2603 0
	#   dec_indent();
	.loc 7 2499 0
	# }
	mov B, buf_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, mem_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2603 0
	#   dec_indent();
.data
	.L4009:
	.string "typedef inc_pc<r%d, m%d, b%d> result;"
.text
	mov A, .L4009
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4010:
	mov A, B
	add SP, 4
	.loc 7 2604 0
	#   emit_line("};");
	mov A, .L4011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4011:
	mov A, B
	.loc 7 2605 0
	#   emit_line("");
.data
	.L4012:
	.string "};"
.text
	mov A, .L4012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4013:
	mov A, B
	add SP, 1
	.loc 7 2606 0
	#   emit_line("template <typename r0, typename m0, typename b0>");
.data
	.L4014:
	.string ""
.text
	mov A, .L4014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4015:
	mov A, B
	add SP, 1
	.loc 7 2607 0
	#   emit_line("struct func_switch_impl<r0, m0, b0, %d> {", pc);
.data
	.L4016:
	.string "template <typename r0, typename m0, typename b0>"
.text
	mov A, .L4016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4017:
	mov A, B
	add SP, 1
	.loc 7 2608 0
	#   inc_indent();
	.loc 7 2599 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2608 0
	#   inc_indent();
.data
	.L4018:
	.string "struct func_switch_impl<r0, m0, b0, %d> {"
.text
	mov A, .L4018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4019:
	mov A, B
	add SP, 2
	.loc 7 2609 0
	# }
	mov A, .L4020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4020:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_template_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2618 0
	#             "typename env::regs, typename env::mem, "
	.loc 7 2613 0
	#   dec_indent();
	.loc 7 2499 0
	# }
	mov B, buf_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, mem_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, reg_id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2613 0
	#   dec_indent();
.data
	.L4021:
	.string "typedef inc_pc<r%d, m%d, b%d> result;"
.text
	mov A, .L4021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4022:
	mov A, B
	add SP, 4
	.loc 7 2614 0
	#   emit_line("};");
	mov A, .L4023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4023:
	mov A, B
	.loc 7 2615 0
	#   emit_line("");
.data
	.L4024:
	.string "};"
.text
	mov A, .L4024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4025:
	mov A, B
	add SP, 1
	.loc 7 2616 0
	#   emit_line("template <typename env, int pc>");
.data
	.L4026:
	.string ""
.text
	mov A, .L4026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4027:
	mov A, B
	add SP, 1
	.loc 7 2617 0
	#   emit_line("struct func_switch : func_switch_impl<"
.data
	.L4028:
	.string "template <typename env, int pc>"
.text
	mov A, .L4028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4029:
	mov A, B
	add SP, 1
	.loc 7 2618 0
	#             "typename env::regs, typename env::mem, "
.data
	.L4030:
	.string "struct func_switch : func_switch_impl<typename env::regs, typename env::mem, typename env::buf, pc>::result {};"
.text
	mov A, .L4030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4031:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_template_emit_func_switch_impl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2643 0
	# }
	.loc 7 2624 0
	#   emit_line("template <typename r0, typename m0, typename b0, int pc>");
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 2625 0
	#   emit_line("struct func_switch_impl { typedef inc_pc<r0, m0, b0> result; };");
.data
	.L4032:
	.string "template <typename r0, typename m0, typename b0, int pc>"
.text
	mov A, .L4032
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4033:
	mov A, B
	add SP, 1
	.loc 7 2626 0
	#   emit_line("");
.data
	.L4034:
	.string "struct func_switch_impl { typedef inc_pc<r0, m0, b0> result; };"
.text
	mov A, .L4034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4035:
	mov A, B
	add SP, 1
	.loc 7 2627 0
	#   emit_line("template <typename r0, typename m0, typename b0>");
.data
	.L4036:
	.string ""
.text
	mov A, .L4036
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4037:
	mov A, B
	add SP, 1
	.loc 7 2628 0
	#   emit_line("struct func_switch_impl<r0, m0, b0, 0> {");
.data
	.L4038:
	.string "template <typename r0, typename m0, typename b0>"
.text
	mov A, .L4038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4039
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4039:
	mov A, B
	add SP, 1
	.loc 7 2629 0
	#   inc_indent();
.data
	.L4040:
	.string "struct func_switch_impl<r0, m0, b0, 0> {"
.text
	mov A, .L4040
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4041
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4041:
	mov A, B
	add SP, 1
	.loc 7 2630 0
	#   for (; inst; inst = inst->next) {
	mov A, .L4042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4042:
	mov A, B
	.loc 7 2641 0
	#   }
	.L464:
	.loc 7 2618 0
	#             "typename env::regs, typename env::mem, "
	mov B, BP
	add B, 2
	load A, B
	jeq .L4043, A, 0
	jmp .L4044
	.L4043:
	.loc 7 2641 0
	#   }
	jmp .L466
	.L4044:
	.loc 7 2637 0
	#     }
	.loc 7 2632 0
	#       cpp_template_emit_pc_change(inst->pc);
	.loc 7 2624 0
	#   emit_line("template <typename r0, typename m0, typename b0, int pc>");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2632 0
	#       cpp_template_emit_pc_change(inst->pc);
	.loc 7 2618 0
	#             "typename env::regs, typename env::mem, "
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4045, A, 0
	.loc 7 2637 0
	#     }
	.loc 7 2633 0
	#       reg_id = 0;
	.loc 7 2618 0
	#             "typename env::regs, typename env::mem, "
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_emit_pc_change
	.L4046:
	mov A, B
	add SP, 1
	.loc 7 2634 0
	#       mem_id = 0;
	mov A, 0
	mov B, reg_id
	store A, B
	.loc 7 2635 0
	#       buf_id = 0;
	mov A, 0
	mov B, mem_id
	store A, B
	.loc 7 2636 0
	#       exit_flag = 0;
	mov A, 0
	mov B, buf_id
	store A, B
	.loc 7 2637 0
	#     }
	mov A, 0
	mov B, exit_flag
	store A, B
	.L4045:
	.loc 7 2639 0
	# 
	.loc 7 2618 0
	#             "typename env::regs, typename env::mem, "
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2641 0
	#   }
	.loc 7 2618 0
	#             "typename env::regs, typename env::mem, "
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_emit_inst
	.L4047:
	mov A, B
	add SP, 1
	.loc 7 2641 0
	#   }
	.L465:
	.loc 7 2631 0
	#     if (prev_pc != inst->pc) {
	.loc 7 2618 0
	#             "typename env::regs, typename env::mem, "
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 2641 0
	#   }
	jmp .L464
	.L466:
	.loc 7 2643 0
	# }
	mov A, .L4048
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_emit_func_epilogue
	.L4048:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_template_emit_main_loop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2655 0
	# }
	.loc 7 2647 0
	#   emit_line("struct main_loop { typedef env result; };");
.data
	.L4049:
	.string "template <typename env, bool, int>"
.text
	mov A, .L4049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4050:
	mov A, B
	add SP, 1
	.loc 7 2648 0
	#   emit_line("template <typename env, int pc>");
.data
	.L4051:
	.string "struct main_loop { typedef env result; };"
.text
	mov A, .L4051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4052:
	mov A, B
	add SP, 1
	.loc 7 2649 0
	#   emit_line("struct main_loop<env, false, pc> {");
.data
	.L4053:
	.string "template <typename env, int pc>"
.text
	mov A, .L4053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4054:
	mov A, B
	add SP, 1
	.loc 7 2650 0
	#   inc_indent();
.data
	.L4055:
	.string "struct main_loop<env, false, pc> {"
.text
	mov A, .L4055
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4056:
	mov A, B
	add SP, 1
	.loc 7 2651 0
	#   emit_line("typedef func_switch<env, pc> env2;");
	mov A, .L4057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4057:
	mov A, B
	.loc 7 2652 0
	#   emit_line("typedef typename main_loop<env2, env2::regs::exit_flag, env2::regs::pc>::result result;");
.data
	.L4058:
	.string "typedef func_switch<env, pc> env2;"
.text
	mov A, .L4058
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4059:
	mov A, B
	add SP, 1
	.loc 7 2653 0
	#   dec_indent();
.data
	.L4060:
	.string "typedef typename main_loop<env2, env2::regs::exit_flag, env2::regs::pc>::result result;"
.text
	mov A, .L4060
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4061:
	mov A, B
	add SP, 1
	.loc 7 2654 0
	#   emit_line("};");
	mov A, .L4062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4062:
	mov A, B
	.loc 7 2655 0
	# }
.data
	.L4063:
	.string "};"
.text
	mov A, .L4063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4064:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cpp_template_emit_calc_main:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2674 0
	# }
	.loc 7 2659 0
	#   inc_indent();
.data
	.L4065:
	.string "struct calc_main {"
.text
	mov A, .L4065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4066:
	mov A, B
	add SP, 1
	.loc 7 2660 0
	#   emit_line("typedef init_memory<MEM_SIZE> mem0;");
	mov A, .L4067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4067:
	mov A, B
	.loc 7 2661 0
	#   int mp;
.data
	.L4068:
	.string "typedef init_memory<MEM_SIZE> mem0;"
.text
	mov A, .L4068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4069
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4069:
	mov A, B
	add SP, 1
	.loc 7 2662 0
	#   for (mp = 0; data; data = data->next, mp++) {
	.loc 7 2667 0
	#     }
	.loc 7 2663 0
	#     if (data->v) {
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2667 0
	#     }
	.L467:
	.loc 7 2655 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L4070, A, 0
	jmp .L4071
	.L4070:
	.loc 7 2667 0
	#     }
	jmp .L469
	.L4071:
	.loc 7 2664 0
	#       emit_line("typedef store_value<mem%d, %d, %d> mem%d;", mp, mp, data->v, mp + 1);
	.loc 7 2655 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L4072, A, 0
	.loc 7 2665 0
	#     } else {
	.loc 7 2662 0
	#   for (mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2665 0
	#     } else {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2655 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2662 0
	#   for (mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2665 0
	#     } else {
.data
	.L4073:
	.string "typedef store_value<mem%d, %d, %d> mem%d;"
.text
	mov A, .L4073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4074:
	mov A, B
	add SP, 5
	jmp .L4075
	.L4072:
	.loc 7 2667 0
	#     }
	.loc 7 2662 0
	#   for (mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2667 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2662 0
	#   for (mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2667 0
	#     }
.data
	.L4076:
	.string "typedef mem%d mem%d;"
.text
	mov A, .L4076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4077
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4077:
	mov A, B
	add SP, 3
	.L4075:
	.L468:
	.loc 7 2663 0
	#     if (data->v) {
	.loc 7 2655 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 2663 0
	#     if (data->v) {
	.loc 7 2662 0
	#   for (mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2667 0
	#     }
	jmp .L467
	.L469:
	.loc 7 2670 0
	#   emit_line(" typedef make_env<regs, mem%d, Nil> env;", mp);
.data
	.L4078:
	.string "typedef init_regs<0> regs;"
.text
	mov A, .L4078
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4079:
	mov A, B
	add SP, 1
	.loc 7 2671 0
	#   emit_line("typedef main_loop<env, false, 0>::result result;");
	.loc 7 2662 0
	#   for (mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2671 0
	#   emit_line("typedef main_loop<env, false, 0>::result result;");
.data
	.L4080:
	.string " typedef make_env<regs, mem%d, Nil> env;"
.text
	mov A, .L4080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4081:
	mov A, B
	add SP, 2
	.loc 7 2672 0
	#   dec_indent();
.data
	.L4082:
	.string "typedef main_loop<env, false, 0>::result result;"
.text
	mov A, .L4082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4083:
	mov A, B
	add SP, 1
	.loc 7 2673 0
	#   emit_line("};");
	mov A, .L4084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4084:
	mov A, B
	.loc 7 2674 0
	# }
.data
	.L4085:
	.string "};"
.text
	mov A, .L4085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4086:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_cpp_template:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2695 0
	# }
	.loc 7 2678 0
	#   emit_line("");
	mov A, .L4087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_emit_file_prologue
	.L4087:
	mov A, B
	.loc 7 2679 0
	# 
.data
	.L4088:
	.string ""
.text
	mov A, .L4088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4089:
	mov A, B
	add SP, 1
	.loc 7 2681 0
	#   emit_line("");
	.loc 7 2674 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_emit_func_switch_impl
	.L4090:
	mov A, B
	add SP, 1
	.loc 7 2682 0
	# 
.data
	.L4091:
	.string ""
.text
	mov A, .L4091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4092:
	mov A, B
	add SP, 1
	.loc 7 2684 0
	#   emit_line("");
	mov A, .L4093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_emit_main_loop
	.L4093:
	mov A, B
	.loc 7 2685 0
	# 
.data
	.L4094:
	.string ""
.text
	mov A, .L4094
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4095
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4095:
	mov A, B
	add SP, 1
	.loc 7 2687 0
	#   emit_line("");
	.loc 7 2674 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cpp_template_emit_calc_main
	.L4096:
	mov A, B
	add SP, 1
	.loc 7 2688 0
	# 
.data
	.L4097:
	.string ""
.text
	mov A, .L4097
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4098
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4098:
	mov A, B
	add SP, 1
	.loc 7 2690 0
	#   inc_indent();
.data
	.L4099:
	.string "int main() {"
.text
	mov A, .L4099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4100:
	mov A, B
	add SP, 1
	.loc 7 2691 0
	#   emit_line("typedef calc_main::result result;");
	mov A, .L4101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4101:
	mov A, B
	.loc 7 2692 0
	#   emit_line("print_buffer<result::buf>::run();");
.data
	.L4102:
	.string "typedef calc_main::result result;"
.text
	mov A, .L4102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4103:
	mov A, B
	add SP, 1
	.loc 7 2693 0
	#   dec_indent();
.data
	.L4104:
	.string "print_buffer<result::buf>::run();"
.text
	mov A, .L4104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4105:
	mov A, B
	add SP, 1
	.loc 7 2694 0
	#   emit_line("}");
	mov A, .L4106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4106:
	mov A, B
	.loc 7 2695 0
	# }
.data
	.L4107:
	.string "}"
.text
	mov A, .L4107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4108:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
CR_REG_NAMES:
	.data 1
	.L4109:
	.string "REG[:a]"
	.data 0
	.long .L4109
	.data 1
	.L4110:
	.string "REG[:b]"
	.data 0
	.long .L4110
	.data 1
	.L4111:
	.string "REG[:c]"
	.data 0
	.long .L4111
	.data 1
	.L4112:
	.string "REG[:d]"
	.data 0
	.long .L4112
	.data 1
	.L4113:
	.string "REG[:bp]"
	.data 0
	.long .L4113
	.data 1
	.L4114:
	.string "REG[:sp]"
	.data 0
	.long .L4114
	.data 1
	.L4115:
	.string "REG[:pc]"
	.data 0
	.long .L4115
	.text
cr_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2730 0
	# }
	.loc 7 2705 0
	#   emit_line(" print \"#{STDIN.each_byte.to_a.map(&.to_i32).inspect} of Int32\"");
.data
	.L4116:
	.string "{%% if flag?(:cr_elvm_input) %%}"
.text
	mov A, .L4116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4117:
	mov A, B
	add SP, 1
	.loc 7 2706 0
	#   emit_line("{%% elsif flag?(:cr_elvm_output) %%}");
.data
	.L4118:
	.string " print \"#{STDIN.each_byte.to_a.map(&.to_i32).inspect} of Int32\""
.text
	mov A, .L4118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4119:
	mov A, B
	add SP, 1
	.loc 7 2707 0
	#   emit_line(" STDERR.write_byte ARGV[0].to_u8");
.data
	.L4120:
	.string "{%% elsif flag?(:cr_elvm_output) %%}"
.text
	mov A, .L4120
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4121
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4121:
	mov A, B
	add SP, 1
	.loc 7 2708 0
	#   emit_line("{%% else %%}");
.data
	.L4122:
	.string " STDERR.write_byte ARGV[0].to_u8"
.text
	mov A, .L4122
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4123:
	mov A, B
	add SP, 1
	.loc 7 2709 0
	#   inc_indent();
.data
	.L4124:
	.string "{%% else %%}"
.text
	mov A, .L4124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4125:
	mov A, B
	add SP, 1
	.loc 7 2710 0
	# 
	mov A, .L4126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4126:
	mov A, B
	.loc 7 2712 0
	#   emit_line("");
.data
	.L4127:
	.string "STATE = {input: 0, exit: 0}"
.text
	mov A, .L4127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4128:
	mov A, B
	add SP, 1
	.loc 7 2713 0
	# 
.data
	.L4129:
	.string ""
.text
	mov A, .L4129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4130:
	mov A, B
	add SP, 1
	.loc 7 2715 0
	#   emit_line("REG = {a: 0, b: 0, c: 0, d: 0, bp: 0, sp: 0, pc: 0}");
	.loc 7 2695 0
	# }
	mov A, CR_REG_NAMES
	mov B, reg_names
	store A, B
	.loc 7 2716 0
	#   emit_line("");
.data
	.L4131:
	.string "REG = {a: 0, b: 0, c: 0, d: 0, bp: 0, sp: 0, pc: 0}"
.text
	mov A, .L4131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4132:
	mov A, B
	add SP, 1
	.loc 7 2717 0
	# 
.data
	.L4133:
	.string ""
.text
	mov A, .L4133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4134:
	mov A, B
	add SP, 1
	.loc 7 2719 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L4135:
	.string "MEM = {"
.text
	mov A, .L4135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4136:
	mov A, B
	add SP, 1
	.loc 7 2722 0
	#     }
	.loc 7 2720 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 2722 0
	#     }
	.L470:
	.loc 7 2695 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L4137, A, 0
	jmp .L4138
	.L4137:
	.loc 7 2722 0
	#     }
	jmp .L472
	.L4138:
	.loc 7 2721 0
	#       emit_line(" %d => %d,", mp, data->v);
	.loc 7 2695 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L4139, A, 0
	.loc 7 2722 0
	#     }
	.loc 7 2695 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2720 0
	#     if (data->v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2722 0
	#     }
.data
	.L4140:
	.string " %d => %d,"
.text
	mov A, .L4140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4141:
	mov A, B
	add SP, 3
	.L4139:
	.L471:
	.loc 7 2720 0
	#     if (data->v) {
	.loc 7 2695 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 2720 0
	#     if (data->v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2722 0
	#     }
	jmp .L470
	.L472:
	.loc 7 2725 0
	#   emit_line("");
.data
	.L4142:
	.string "}"
.text
	mov A, .L4142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4143
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4143:
	mov A, B
	add SP, 1
	.loc 7 2726 0
	# 
.data
	.L4144:
	.string ""
.text
	mov A, .L4144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4145
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4145:
	mov A, B
	add SP, 1
	.loc 7 2728 0
	#   dec_indent();
.data
	.L4146:
	.string "INPUT = {{ `crystal run -D cr_elvm_input #{1.filename}` }}"
.text
	mov A, .L4146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4147:
	mov A, B
	add SP, 1
	.loc 7 2729 0
	#   emit_line("{%% end %%}");
	mov A, .L4148
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4148:
	mov A, B
	.loc 7 2730 0
	# }
.data
	.L4149:
	.string "{%% end %%}"
.text
	mov A, .L4149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4150
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4150:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cr_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2745 0
	# }
	.loc 7 2734 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 2730 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2734 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4151
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4151:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2734 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 2730 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4152:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2734 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L4153:
	.string "{%% if %d <= REG[:pc] && REG[:pc] < %d %%}"
.text
	mov A, .L4153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4154:
	mov A, B
	add SP, 3
	.loc 7 2736 0
	#   emit_line("{%% loop2 = STATE[:exit] == 1 ? [] of Int32 : [0] %%}");
	mov A, .L4155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4155:
	mov A, B
	.loc 7 2737 0
	#   emit_line("{%% for x in loop2 %%}");
.data
	.L4156:
	.string "{%% loop2 = STATE[:exit] == 1 ? [] of Int32 : [0] %%}"
.text
	mov A, .L4156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4157:
	mov A, B
	add SP, 1
	.loc 7 2738 0
	#   inc_indent();
.data
	.L4158:
	.string "{%% for x in loop2 %%}"
.text
	mov A, .L4158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4159:
	mov A, B
	add SP, 1
	.loc 7 2739 0
	#   emit_line("{%% if STATE[:exit] == 0 && loop2.size < 100000 && (%d <= REG[:pc] && REG[:pc] < %d)",
	mov A, .L4160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4160:
	mov A, B
	.loc 7 2740 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 2730 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2740 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4161:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2740 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 2730 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4162:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2740 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L4163:
	.string "{%% if STATE[:exit] == 0 && loop2.size < 100000 && (%d <= REG[:pc] && REG[:pc] < %d)"
.text
	mov A, .L4163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4164:
	mov A, B
	add SP, 3
	.loc 7 2742 0
	#   emit_line("loop2.push 0");
	mov A, .L4165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4165:
	mov A, B
	.loc 7 2743 0
	#   emit_line("if false");
.data
	.L4166:
	.string "loop2.push 0"
.text
	mov A, .L4166
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4167:
	mov A, B
	add SP, 1
	.loc 7 2744 0
	#   inc_indent();
.data
	.L4168:
	.string "if false"
.text
	mov A, .L4168
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4169:
	mov A, B
	add SP, 1
	.loc 7 2745 0
	# }
	mov A, .L4170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4170:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cr_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2757 0
	# }
	.loc 7 2749 0
	#   emit_line("end");
	mov A, .L4171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4171:
	mov A, B
	.loc 7 2750 0
	#   emit_line("REG[:pc] = REG[:pc] + 1");
.data
	.L4172:
	.string "end"
.text
	mov A, .L4172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4173
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4173:
	mov A, B
	add SP, 1
	.loc 7 2751 0
	#   dec_indent();
.data
	.L4174:
	.string "REG[:pc] = REG[:pc] + 1"
.text
	mov A, .L4174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4175
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4175:
	mov A, B
	add SP, 1
	.loc 7 2752 0
	#   emit_line("end %%}");
	mov A, .L4176
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4176:
	mov A, B
	.loc 7 2753 0
	#   dec_indent();
.data
	.L4177:
	.string "end %%}"
.text
	mov A, .L4177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4178:
	mov A, B
	add SP, 1
	.loc 7 2754 0
	#   emit_line("{%% end %%}");
	mov A, .L4179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4179:
	mov A, B
	.loc 7 2755 0
	#   dec_indent();
.data
	.L4180:
	.string "{%% end %%}"
.text
	mov A, .L4180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4181:
	mov A, B
	add SP, 1
	.loc 7 2756 0
	#   emit_line("{%% end %%}");
	mov A, .L4182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4182:
	mov A, B
	.loc 7 2757 0
	# }
.data
	.L4183:
	.string "{%% end %%}"
.text
	mov A, .L4183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4184:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cr_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2763 0
	# }
	.loc 7 2761 0
	#   emit_line("elsif REG[:pc] == %d", pc);
	mov A, .L4185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4185:
	mov A, B
	.loc 7 2762 0
	#   inc_indent();
	.loc 7 2757 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2762 0
	#   inc_indent();
.data
	.L4186:
	.string "elsif REG[:pc] == %d"
.text
	mov A, .L4186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4187:
	mov A, B
	add SP, 2
	.loc 7 2763 0
	# }
	mov A, .L4188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4188:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cr_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2836 0
	#     error("oops");
	.loc 7 2767 0
	#   case MOV:
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2836 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4189, A, 0
	jmp .L474
	.L4189:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4190, A, 0
	jmp .L475
	.L4190:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4191, A, 0
	jmp .L476
	.L4191:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4192, A, 0
	jmp .L477
	.L4192:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4193, A, 0
	jmp .L478
	.L4193:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4194, A, 0
	jmp .L479
	.L4194:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4195, A, 0
	jmp .L480
	.L4195:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4196, A, 0
	jmp .L481
	.L4196:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4197, A, 0
	jmp .L482
	.L4197:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4198, A, 0
	jmp .L483
	.L4198:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4199, A, 0
	jmp .L484
	.L4199:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4200, A, 0
	jmp .L485
	.L4200:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4201, A, 0
	jmp .L486
	.L4201:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4202, A, 0
	jmp .L487
	.L4202:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4203, A, 0
	jmp .L488
	.L4203:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4204, A, 0
	jmp .L489
	.L4204:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4205, A, 0
	jmp .L490
	.L4205:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4206, A, 0
	jmp .L491
	.L4206:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4207, A, 0
	jmp .L492
	.L4207:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4208, A, 0
	jmp .L493
	.L4208:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4209, A, 0
	jmp .L494
	.L4209:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4210, A, 0
	jmp .L495
	.L4210:
	jmp .L496
	.loc 7 2768 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.L474:
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4211:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2768 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2768 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2768 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
.data
	.L4212:
	.string "%s = %s"
.text
	mov A, .L4212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4213
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4213:
	mov A, B
	add SP, 3
	.loc 7 2770 0
	# 
	jmp .L473
	.loc 7 2772 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.L475:
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4214:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2772 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2772 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2772 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2772 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2772 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
.data
	.L4215:
	.string "%s = (%s + %s) & 16777215"
.text
	mov A, .L4215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4216:
	mov A, B
	add SP, 4
	.loc 7 2776 0
	# 
	jmp .L473
	.loc 7 2778 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.L476:
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4217:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2778 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2778 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2778 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2778 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2778 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
.data
	.L4218:
	.string "%s = (%s - %s) & 16777215"
.text
	mov A, .L4218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4219:
	mov A, B
	add SP, 4
	.loc 7 2782 0
	# 
	jmp .L473
	.loc 7 2784 0
	#     emit_line("%s = MEM[%s] || 0", reg_names[inst->dst.reg], src_str(inst));
	.L477:
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4220
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4220:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2784 0
	#     emit_line("%s = MEM[%s] || 0", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2784 0
	#     emit_line("%s = MEM[%s] || 0", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2784 0
	#     emit_line("%s = MEM[%s] || 0", reg_names[inst->dst.reg], src_str(inst));
.data
	.L4221:
	.string "%s = MEM[%s] || 0"
.text
	mov A, .L4221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4222
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4222:
	mov A, B
	add SP, 3
	.loc 7 2786 0
	# 
	jmp .L473
	.loc 7 2788 0
	#     emit_line("MEM[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.L478:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2788 0
	#     emit_line("MEM[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2788 0
	#     emit_line("MEM[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4223:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2788 0
	#     emit_line("MEM[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L4224:
	.string "MEM[%s] = %s"
.text
	mov A, .L4224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4225:
	mov A, B
	add SP, 3
	.loc 7 2790 0
	# 
	jmp .L473
	.loc 7 2792 0
	#     emit_line("`crystal run -D cr_elvm_output #{1.filename} -- #{%s & 255}`", src_str(inst));
	.L479:
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4226:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2792 0
	#     emit_line("`crystal run -D cr_elvm_output #{1.filename} -- #{%s & 255}`", src_str(inst));
.data
	.L4227:
	.string "`crystal run -D cr_elvm_output #{1.filename} -- #{%s & 255}`"
.text
	mov A, .L4227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4228:
	mov A, B
	add SP, 2
	.loc 7 2794 0
	# 
	jmp .L473
	.loc 7 2796 0
	#     emit_line("if c = INPUT[STATE[:input]]");
	.L480:
.data
	.L4229:
	.string "if c = INPUT[STATE[:input]]"
.text
	mov A, .L4229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4230
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4230:
	mov A, B
	add SP, 1
	.loc 7 2798 0
	#     emit_line(" STATE[:input] = STATE[:input] + 1");
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2798 0
	#     emit_line(" STATE[:input] = STATE[:input] + 1");
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2798 0
	#     emit_line(" STATE[:input] = STATE[:input] + 1");
.data
	.L4231:
	.string " %s = c"
.text
	mov A, .L4231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4232:
	mov A, B
	add SP, 2
	.loc 7 2799 0
	#     emit_line("else");
.data
	.L4233:
	.string " STATE[:input] = STATE[:input] + 1"
.text
	mov A, .L4233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4234:
	mov A, B
	add SP, 1
	.loc 7 2800 0
	#     emit_line(" %s = 0", reg_names[inst->dst.reg]);
.data
	.L4235:
	.string "else"
.text
	mov A, .L4235
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4236:
	mov A, B
	add SP, 1
	.loc 7 2801 0
	#     emit_line("end");
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2801 0
	#     emit_line("end");
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2801 0
	#     emit_line("end");
.data
	.L4237:
	.string " %s = 0"
.text
	mov A, .L4237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4238:
	mov A, B
	add SP, 2
	.loc 7 2802 0
	#     break;
.data
	.L4239:
	.string "end"
.text
	mov A, .L4239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4240:
	mov A, B
	add SP, 1
	.loc 7 2803 0
	# 
	jmp .L473
	.loc 7 2805 0
	#     emit_line("STATE[:exit] = 1");
	.L481:
.data
	.L4241:
	.string "STATE[:exit] = 1"
.text
	mov A, .L4241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4242:
	mov A, B
	add SP, 1
	.loc 7 2807 0
	# 
	jmp .L473
	.loc 7 2809 0
	#     break;
	.L482:
	jmp .L473
	.loc 7 2812 0
	#   case NE:
	.L483:
	.L484:
	.L485:
	.L486:
	.L487:
	.L488:
.data
	.L4243:
	.string "true"
.text
	mov A, .L4243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L4244:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2812 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2812 0
	#   case NE:
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2812 0
	#   case NE:
.data
	.L4245:
	.string "%s = %s ? 1 : 0"
.text
	mov A, .L4245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4246:
	mov A, B
	add SP, 3
	.loc 7 2820 0
	# 
	jmp .L473
	.loc 7 2822 0
	#   case JNE:
	.L489:
	.L490:
	.L491:
	.L492:
	.L493:
	.L494:
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L4247:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2822 0
	#   case JNE:
.data
	.L4248:
	.string "true"
.text
	mov A, .L4248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L4249:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2822 0
	#   case JNE:
.data
	.L4250:
	.string "REG[:pc] = %s ? %s - 1 : REG[:pc]"
.text
	mov A, .L4250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4251:
	mov A, B
	add SP, 3
	.loc 7 2830 0
	# 
	jmp .L473
	.loc 7 2832 0
	#     emit_line("REG[:pc] = %s - 1", value_str(&inst->jmp));
	.L495:
	.loc 7 2763 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L4252:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2832 0
	#     emit_line("REG[:pc] = %s - 1", value_str(&inst->jmp));
.data
	.L4253:
	.string "REG[:pc] = %s - 1"
.text
	mov A, .L4253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4254:
	mov A, B
	add SP, 2
	.loc 7 2834 0
	# 
	jmp .L473
	.loc 7 2836 0
	#     error("oops");
	.L496:
.data
	.L4255:
	.string "oops"
.text
	mov A, .L4255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L4256:
	mov A, B
	add SP, 1
	.L473:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_cr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2860 0
	# }
	.loc 7 2842 0
	#   emit_line("{%% unless flag?(:cr_elvm_input) || flag?(:cr_elvm_output) %%}");
	.loc 7 2836 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cr_init_state
	.L4257:
	mov A, B
	add SP, 1
	.loc 7 2843 0
	#   inc_indent();
.data
	.L4258:
	.string "{%% unless flag?(:cr_elvm_input) || flag?(:cr_elvm_output) %%}"
.text
	mov A, .L4258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4259:
	mov A, B
	add SP, 1
	.loc 7 2844 0
	#   emit_line("{%% loop1 = [0] %%}");
	mov A, .L4260
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4260:
	mov A, B
	.loc 7 2845 0
	#   emit_line("{%% for x in loop1 %%}");
.data
	.L4261:
	.string "{%% loop1 = [0] %%}"
.text
	mov A, .L4261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4262:
	mov A, B
	add SP, 1
	.loc 7 2846 0
	#   inc_indent();
.data
	.L4263:
	.string "{%% for x in loop1 %%}"
.text
	mov A, .L4263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4264:
	mov A, B
	add SP, 1
	.loc 7 2847 0
	#   emit_line("{%% loop2 = [] of Int32 %%}");
	mov A, .L4265
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4265:
	mov A, B
	.loc 7 2848 0
	#   emit_line("{%% unless STATE[:exit] == 1 %%}");
.data
	.L4266:
	.string "{%% loop2 = [] of Int32 %%}"
.text
	mov A, .L4266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4267:
	mov A, B
	add SP, 1
	.loc 7 2849 0
	#   emit_line(" {%% loop1.push 0 %%}");
.data
	.L4268:
	.string "{%% unless STATE[:exit] == 1 %%}"
.text
	mov A, .L4268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4269
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4269:
	mov A, B
	add SP, 1
	.loc 7 2850 0
	#   emit_line("{%% end %%}");
.data
	.L4270:
	.string " {%% loop1.push 0 %%}"
.text
	mov A, .L4270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4271
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4271:
	mov A, B
	add SP, 1
	.loc 7 2851 0
	#   emit_chunked_main_loop(module->text,
.data
	.L4272:
	.string "{%% end %%}"
.text
	mov A, .L4272
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4273:
	mov A, B
	add SP, 1
	.loc 7 2852 0
	#                          cr_emit_func_prologue,
	mov A, cr_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, cr_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, cr_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, cr_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2836 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L4274:
	mov A, B
	add SP, 5
	.loc 7 2857 0
	#   emit_line("{%% end %%}");
	mov A, .L4275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4275:
	mov A, B
	.loc 7 2858 0
	#   dec_indent();
.data
	.L4276:
	.string "{%% end %%}"
.text
	mov A, .L4276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4277:
	mov A, B
	add SP, 1
	.loc 7 2859 0
	#   emit_line("{%% end %%}");
	mov A, .L4278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4278:
	mov A, B
	.loc 7 2860 0
	# }
.data
	.L4279:
	.string "{%% end %%}"
.text
	mov A, .L4279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4280:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cs_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2874 0
	# }
	.loc 7 2866 0
	#   emit_line("private static void func%d() {", func_id);
.data
	.L4281:
	.string ""
.text
	mov A, .L4281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4282:
	mov A, B
	add SP, 1
	.loc 7 2867 0
	#   inc_indent();
	.loc 7 2860 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2867 0
	#   inc_indent();
.data
	.L4283:
	.string "private static void func%d() {"
.text
	mov A, .L4283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4284:
	mov A, B
	add SP, 2
	.loc 7 2868 0
	#   emit_line("while (%d <= pc && pc < %d) {",
	mov A, .L4285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4285:
	mov A, B
	.loc 7 2869 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 2860 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2869 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4286:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2869 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 2860 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4287:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2869 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L4288:
	.string "while (%d <= pc && pc < %d) {"
.text
	mov A, .L4288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4289:
	mov A, B
	add SP, 3
	.loc 7 2871 0
	#   emit_line("switch (pc) {");
	mov A, .L4290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4290:
	mov A, B
	.loc 7 2872 0
	#   emit_line("case -1:  /* dummy */");
.data
	.L4291:
	.string "switch (pc) {"
.text
	mov A, .L4291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4292:
	mov A, B
	add SP, 1
	.loc 7 2873 0
	#   inc_indent();
.data
	.L4293:
	.string "case -1:  /* dummy */"
.text
	mov A, .L4293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4294:
	mov A, B
	add SP, 1
	.loc 7 2874 0
	# }
	mov A, .L4295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4295:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cs_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2885 0
	# }
	.loc 7 2878 0
	#   dec_indent();
.data
	.L4296:
	.string "break;"
.text
	mov A, .L4296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4297:
	mov A, B
	add SP, 1
	.loc 7 2879 0
	#   emit_line("}");
	mov A, .L4298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4298:
	mov A, B
	.loc 7 2880 0
	#   emit_line("pc++;");
.data
	.L4299:
	.string "}"
.text
	mov A, .L4299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4300:
	mov A, B
	add SP, 1
	.loc 7 2881 0
	#   dec_indent();
.data
	.L4301:
	.string "pc++;"
.text
	mov A, .L4301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4302:
	mov A, B
	add SP, 1
	.loc 7 2882 0
	#   emit_line("}");
	mov A, .L4303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4303:
	mov A, B
	.loc 7 2883 0
	#   dec_indent();
.data
	.L4304:
	.string "}"
.text
	mov A, .L4304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4305:
	mov A, B
	add SP, 1
	.loc 7 2884 0
	#   emit_line("}");
	mov A, .L4306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4306:
	mov A, B
	.loc 7 2885 0
	# }
.data
	.L4307:
	.string "}"
.text
	mov A, .L4307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4308:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cs_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 2893 0
	# }
	.loc 7 2889 0
	#   emit_line("");
.data
	.L4309:
	.string "break;"
.text
	mov A, .L4309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4310:
	mov A, B
	add SP, 1
	.loc 7 2890 0
	#   dec_indent();
.data
	.L4311:
	.string ""
.text
	mov A, .L4311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4312:
	mov A, B
	add SP, 1
	.loc 7 2891 0
	#   emit_line("case %d:", pc);
	mov A, .L4313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4313:
	mov A, B
	.loc 7 2892 0
	#   inc_indent();
	.loc 7 2885 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2892 0
	#   inc_indent();
.data
	.L4314:
	.string "case %d:"
.text
	mov A, .L4314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4315:
	mov A, B
	add SP, 2
	.loc 7 2893 0
	# }
	mov A, .L4316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4316:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cs_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 2961 0
	#     error("oops");
	.loc 7 2897 0
	#   case MOV:
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2961 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4317, A, 0
	jmp .L498
	.L4317:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4318, A, 0
	jmp .L499
	.L4318:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4319, A, 0
	jmp .L500
	.L4319:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4320, A, 0
	jmp .L501
	.L4320:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4321, A, 0
	jmp .L502
	.L4321:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4322, A, 0
	jmp .L503
	.L4322:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4323, A, 0
	jmp .L504
	.L4323:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4324, A, 0
	jmp .L505
	.L4324:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4325, A, 0
	jmp .L506
	.L4325:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4326, A, 0
	jmp .L507
	.L4326:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4327, A, 0
	jmp .L508
	.L4327:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4328, A, 0
	jmp .L509
	.L4328:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4329, A, 0
	jmp .L510
	.L4329:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4330, A, 0
	jmp .L511
	.L4330:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4331, A, 0
	jmp .L512
	.L4331:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4332, A, 0
	jmp .L513
	.L4332:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4333, A, 0
	jmp .L514
	.L4333:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4334, A, 0
	jmp .L515
	.L4334:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4335, A, 0
	jmp .L516
	.L4335:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4336, A, 0
	jmp .L517
	.L4336:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4337, A, 0
	jmp .L518
	.L4337:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4338, A, 0
	jmp .L519
	.L4338:
	jmp .L520
	.loc 7 2898 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.L498:
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4339:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2898 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2898 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2898 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
.data
	.L4340:
	.string "%s = %s;"
.text
	mov A, .L4340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4341:
	mov A, B
	add SP, 3
	.loc 7 2900 0
	# 
	jmp .L497
	.loc 7 2902 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.L499:
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4342:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2902 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2902 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2902 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2902 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2902 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
.data
	.L4343:
	.string "%s = (%s + %s) & 16777215;"
.text
	mov A, .L4343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4344:
	mov A, B
	add SP, 4
	.loc 7 2906 0
	# 
	jmp .L497
	.loc 7 2908 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.L500:
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4345:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2908 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2908 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2908 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2908 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2908 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
.data
	.L4346:
	.string "%s = (%s - %s) & 16777215;"
.text
	mov A, .L4346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4347:
	mov A, B
	add SP, 4
	.loc 7 2912 0
	# 
	jmp .L497
	.loc 7 2914 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.L501:
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4348:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2914 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2914 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2914 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
.data
	.L4349:
	.string "%s = mem[%s];"
.text
	mov A, .L4349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4350:
	mov A, B
	add SP, 3
	.loc 7 2916 0
	# 
	jmp .L497
	.loc 7 2918 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.L502:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2918 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2918 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4351:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2918 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L4352:
	.string "mem[%s] = %s;"
.text
	mov A, .L4352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4353:
	mov A, B
	add SP, 3
	.loc 7 2920 0
	# 
	jmp .L497
	.loc 7 2922 0
	#     emit_line("Console.Out.Write((char)%s);", src_str(inst));
	.L503:
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4354:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2922 0
	#     emit_line("Console.Out.Write((char)%s);", src_str(inst));
.data
	.L4355:
	.string "Console.Out.Write((char)%s);"
.text
	mov A, .L4355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4356:
	mov A, B
	add SP, 2
	.loc 7 2924 0
	# 
	jmp .L497
	.loc 7 2926 0
	#     emit_line("try { int _ = Console.In.Read(); "
	.L504:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2926 0
	#     emit_line("try { int _ = Console.In.Read(); "
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2926 0
	#     emit_line("try { int _ = Console.In.Read(); "
.data
	.L4357:
	.string "try { int _ = Console.In.Read();   %s = _ == -1 ? 0 : _; }catch (Exception e) {}"
.text
	mov A, .L4357
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4358:
	mov A, B
	add SP, 2
	.loc 7 2931 0
	# 
	jmp .L497
	.loc 7 2933 0
	#     emit_line("Environment.Exit(0);");
	.L505:
.data
	.L4359:
	.string "Environment.Exit(0);"
.text
	mov A, .L4359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4360:
	mov A, B
	add SP, 1
	.loc 7 2935 0
	# 
	jmp .L497
	.loc 7 2937 0
	#     break;
	.L506:
	jmp .L497
	.loc 7 2940 0
	#   case NE:
	.L507:
	.L508:
	.L509:
	.L510:
	.L511:
	.L512:
.data
	.L4361:
	.string "true"
.text
	mov A, .L4361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L4362:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2940 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2940 0
	#   case NE:
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2940 0
	#   case NE:
.data
	.L4363:
	.string "%s = %s ? 1 : 0;"
.text
	mov A, .L4363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4364:
	mov A, B
	add SP, 3
	.loc 7 2948 0
	# 
	jmp .L497
	.loc 7 2950 0
	#   case JNE:
	.L513:
	.L514:
	.L515:
	.L516:
	.L517:
	.L518:
	.L519:
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L4365:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2950 0
	#   case JNE:
.data
	.L4366:
	.string "true"
.text
	mov A, .L4366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2893 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L4367:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2950 0
	#   case JNE:
.data
	.L4368:
	.string "if (%s) pc = %s - 1;"
.text
	mov A, .L4368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4369:
	mov A, B
	add SP, 3
	.loc 7 2959 0
	# 
	jmp .L497
	.loc 7 2961 0
	#     error("oops");
	.L520:
.data
	.L4370:
	.string "oops"
.text
	mov A, .L4370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L4371:
	mov A, B
	add SP, 1
	.L497:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
cs_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 2989 0
	# }
	.loc 7 2967 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 2980 0
	#     }
	.loc 7 2968 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 2980 0
	#     }
	.L521:
	.loc 7 2961 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	jeq .L4372, A, 0
	jmp .L4373
	.L4372:
	.loc 7 2980 0
	#     }
	jmp .L523
	.L4373:
	.loc 7 2969 0
	#       int mc = mp / 1000;
	.loc 7 2961 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L4374, A, 0
	.loc 7 2980 0
	#     }
	.loc 7 2970 0
	#       while (prev_mc != mc) {
	mov A, 0
	mov B, SP
	.loc 7 2968 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2970 0
	#       while (prev_mc != mc) {
	mov A, 1000
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L4375:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 2978 0
	#       }
	.L524:
	.loc 7 2971 0
	#         if (prev_mc != -1) {
	.loc 7 2967 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2970 0
	#       while (prev_mc != mc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4376, A, 0
	.loc 7 2978 0
	#       }
	.loc 7 2974 0
	#         }
	.loc 7 2972 0
	#           dec_indent();
	.loc 7 2967 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2972 0
	#           dec_indent();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4377, A, 0
	.loc 7 2974 0
	#         }
	.loc 7 2973 0
	#           emit_line("}");
	mov A, .L4378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4378:
	mov A, B
	.loc 7 2974 0
	#         }
.data
	.L4379:
	.string "}"
.text
	mov A, .L4379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4380:
	mov A, B
	add SP, 1
	.L4377:
	.loc 7 2976 0
	#         emit_line("static void init%d() {", prev_mc);
	.loc 7 2967 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2977 0
	#         inc_indent();
	.loc 7 2967 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2977 0
	#         inc_indent();
.data
	.L4381:
	.string "static void init%d() {"
.text
	mov A, .L4381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4382:
	mov A, B
	add SP, 2
	.loc 7 2978 0
	#       }
	mov A, .L4383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4383:
	mov A, B
	jmp .L4384
	.L4376:
	jmp .L525
	.L4384:
	jmp .L524
	.L525:
	.loc 7 2980 0
	#     }
	.loc 7 2961 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2968 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2980 0
	#     }
.data
	.L4385:
	.string "mem[%d] = %d;"
.text
	mov A, .L4385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4386:
	mov A, B
	add SP, 3
	.L4374:
	.L522:
	.loc 7 2968 0
	#     if (data->v) {
	.loc 7 2961 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 2968 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2980 0
	#     }
	jmp .L521
	.L523:
	.loc 7 2986 0
	#   }
	.loc 7 2984 0
	#     dec_indent();
	.loc 7 2967 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2984 0
	#     dec_indent();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L4387, A, 0
	.loc 7 2986 0
	#   }
	.loc 7 2985 0
	#     emit_line("}");
	mov A, .L4388
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4388:
	mov A, B
	.loc 7 2986 0
	#   }
.data
	.L4389:
	.string "}"
.text
	mov A, .L4389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4390
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4390:
	mov A, B
	add SP, 1
	.L4387:
	.loc 7 2989 0
	# }
	.loc 7 2967 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2989 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_cs:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 3037 0
	# }
	.loc 7 2993 0
	#   emit_line("namespace ConsoleApplication {");
.data
	.L4391:
	.string "using System;"
.text
	mov A, .L4391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4392:
	mov A, B
	add SP, 1
	.loc 7 2994 0
	#   inc_indent();
.data
	.L4393:
	.string "namespace ConsoleApplication {"
.text
	mov A, .L4393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4394:
	mov A, B
	add SP, 1
	.loc 7 2995 0
	#   emit_line("public class Program {");
	mov A, .L4395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4395:
	mov A, B
	.loc 7 2996 0
	#   inc_indent();
.data
	.L4396:
	.string "public class Program {"
.text
	mov A, .L4396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4397:
	mov A, B
	add SP, 1
	.loc 7 2997 0
	#   for (int i = 0; i < 7; i++) {
	mov A, .L4398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4398:
	mov A, B
	.loc 7 2999 0
	#   }
	.loc 7 2998 0
	#     emit_line("static int %s;", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 2999 0
	#   }
	.L526:
	.loc 7 2998 0
	#     emit_line("static int %s;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4399, A, 0
	jmp .L4400
	.L4399:
	.loc 7 2999 0
	#   }
	jmp .L528
	.L4400:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2998 0
	#     emit_line("static int %s;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2999 0
	#   }
.data
	.L4401:
	.string "static int %s;"
.text
	mov A, .L4401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4402:
	mov A, B
	add SP, 2
	.L527:
	.loc 7 2998 0
	#     emit_line("static int %s;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 2999 0
	#   }
	jmp .L526
	.L528:
	.loc 7 3001 0
	# 
.data
	.L4403:
	.string "static int[] mem = new int[1<<24];"
.text
	mov A, .L4403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4404:
	mov A, B
	add SP, 1
	.loc 7 3003 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 2989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cs_init_state
	.L4405:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3005 0
	#   int num_funcs = emit_chunked_main_loop(module->text,
	mov A, 256
	mov B, CHUNKED_FUNC_SIZE
	store A, B
	.loc 7 3006 0
	#                                          cs_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, cs_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, cs_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, cs_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, cs_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 2989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L4406:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3012 0
	#   inc_indent();
.data
	.L4407:
	.string "public static void Main(string[] args) {"
.text
	mov A, .L4407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4408:
	mov A, B
	add SP, 1
	.loc 7 3013 0
	# 
	mov A, .L4409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4409:
	mov A, B
	.loc 7 3016 0
	#   }
	.loc 7 3015 0
	#     emit_line("init%d();", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 3016 0
	#   }
	.L529:
	.loc 7 3015 0
	#     emit_line("init%d();", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3003 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4410, A, 0
	jmp .L4411
	.L4410:
	.loc 7 3016 0
	#   }
	jmp .L531
	.L4411:
	.loc 7 3015 0
	#     emit_line("init%d();", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3016 0
	#   }
.data
	.L4412:
	.string "init%d();"
.text
	mov A, .L4412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4413:
	mov A, B
	add SP, 2
	.L530:
	.loc 7 3015 0
	#     emit_line("init%d();", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3016 0
	#   }
	jmp .L529
	.L531:
	.loc 7 3019 0
	#   emit_line("while (true) {");
.data
	.L4414:
	.string ""
.text
	mov A, .L4414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4415:
	mov A, B
	add SP, 1
	.loc 7 3020 0
	#   inc_indent();
.data
	.L4416:
	.string "while (true) {"
.text
	mov A, .L4416
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4417:
	mov A, B
	add SP, 1
	.loc 7 3021 0
	#   emit_line("switch (pc / %d | 0) {", CHUNKED_FUNC_SIZE);
	mov A, .L4418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4418:
	mov A, B
	.loc 7 3022 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3022 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L4419:
	.string "switch (pc / %d | 0) {"
.text
	mov A, .L4419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4420:
	mov A, B
	add SP, 2
	.loc 7 3026 0
	#   }
	.loc 7 3023 0
	#     emit_line("case %d:", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 3026 0
	#   }
	.L532:
	.loc 7 3023 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3006 0
	#                                          cs_emit_func_prologue,
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4421, A, 0
	jmp .L4422
	.L4421:
	.loc 7 3026 0
	#   }
	jmp .L534
	.L4422:
	.loc 7 3024 0
	#     emit_line(" func%d();", i);
	.loc 7 3023 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3024 0
	#     emit_line(" func%d();", i);
.data
	.L4423:
	.string "case %d:"
.text
	mov A, .L4423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4424:
	mov A, B
	add SP, 2
	.loc 7 3025 0
	#     emit_line(" break;");
	.loc 7 3023 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3025 0
	#     emit_line(" break;");
.data
	.L4425:
	.string " func%d();"
.text
	mov A, .L4425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4426:
	mov A, B
	add SP, 2
	.loc 7 3026 0
	#   }
.data
	.L4427:
	.string " break;"
.text
	mov A, .L4427
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4428:
	mov A, B
	add SP, 1
	.L533:
	.loc 7 3023 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3026 0
	#   }
	jmp .L532
	.L534:
	.loc 7 3028 0
	#   dec_indent();
.data
	.L4429:
	.string "}"
.text
	mov A, .L4429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4430:
	mov A, B
	add SP, 1
	.loc 7 3029 0
	#   emit_line("}");
	mov A, .L4431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4431:
	mov A, B
	.loc 7 3030 0
	# 
.data
	.L4432:
	.string "}"
.text
	mov A, .L4432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4433:
	mov A, B
	add SP, 1
	.loc 7 3032 0
	#   emit_line("}");
	mov A, .L4434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4434:
	mov A, B
	.loc 7 3033 0
	#   dec_indent();
.data
	.L4435:
	.string "}"
.text
	mov A, .L4435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4436:
	mov A, B
	add SP, 1
	.loc 7 3034 0
	#   emit_line("}");
	mov A, .L4437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4437:
	mov A, B
	.loc 7 3035 0
	#   dec_indent();
.data
	.L4438:
	.string "}"
.text
	mov A, .L4438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4439:
	mov A, B
	add SP, 1
	.loc 7 3036 0
	#   emit_line("}");
	mov A, .L4440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4440:
	mov A, B
	.loc 7 3037 0
	# }
.data
	.L4441:
	.string "}"
.text
	mov A, .L4441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4442:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_state_el:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3051 0
	#     }
	.loc 7 3043 0
	#   emit_line("(load \"cl\" nil t)");
.data
	.L4443:
	.string "(setq elvm-main (lambda ()"
.text
	mov A, .L4443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4444:
	mov A, B
	add SP, 1
	.loc 7 3044 0
	#   for (int i = 0; i < 7; i++) {
.data
	.L4445:
	.string "(load \"cl\" nil t)"
.text
	mov A, .L4445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4446:
	mov A, B
	add SP, 1
	.loc 7 3046 0
	#   }
	.loc 7 3045 0
	#     emit_line("(setq %s 0)", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3046 0
	#   }
	.L535:
	.loc 7 3045 0
	#     emit_line("(setq %s 0)", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4447, A, 0
	jmp .L4448
	.L4447:
	.loc 7 3046 0
	#   }
	jmp .L537
	.L4448:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3045 0
	#     emit_line("(setq %s 0)", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3046 0
	#   }
.data
	.L4449:
	.string "(setq %s 0)"
.text
	mov A, .L4449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4450:
	mov A, B
	add SP, 2
	.L536:
	.loc 7 3045 0
	#     emit_line("(setq %s 0)", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3046 0
	#   }
	jmp .L535
	.L537:
	.loc 7 3048 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L4451:
	.string "(setq mem (make-vector 16777216 0))"
.text
	mov A, .L4451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4452
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4452:
	mov A, B
	add SP, 1
	.loc 7 3051 0
	#     }
	.loc 7 3049 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 3051 0
	#     }
	.L538:
	.loc 7 3037 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L4453, A, 0
	jmp .L4454
	.L4453:
	.loc 7 3051 0
	#     }
	jmp .L540
	.L4454:
	.loc 7 3050 0
	#       emit_line("(aset mem %d %d)", mp, data->v);
	.loc 7 3037 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L4455, A, 0
	.loc 7 3051 0
	#     }
	.loc 7 3037 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3049 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3051 0
	#     }
.data
	.L4456:
	.string "(aset mem %d %d)"
.text
	mov A, .L4456
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4457:
	mov A, B
	add SP, 3
	.L4455:
	.L539:
	.loc 7 3049 0
	#     if (data->v) {
	.loc 7 3037 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 3049 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3051 0
	#     }
	jmp .L538
	.L540:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
el_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3065 0
	# }
	.loc 7 3057 0
	#   emit_line("(defun elvm-func%d ()", func_id);
.data
	.L4458:
	.string ""
.text
	mov A, .L4458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4459
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4459:
	mov A, B
	add SP, 1
	.loc 7 3058 0
	#   inc_indent();
	.loc 7 3051 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3058 0
	#   inc_indent();
.data
	.L4460:
	.string "(defun elvm-func%d ()"
.text
	mov A, .L4460
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4461
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4461:
	mov A, B
	add SP, 2
	.loc 7 3059 0
	#   emit_line("(while (and (<= %d pc) (< pc %d) elvm-running)",
	mov A, .L4462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4462:
	mov A, B
	.loc 7 3060 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 3051 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3060 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4463:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3060 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 3051 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4464
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4464:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3060 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L4465:
	.string "(while (and (<= %d pc) (< pc %d) elvm-running)"
.text
	mov A, .L4465
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4466
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4466:
	mov A, B
	add SP, 3
	.loc 7 3062 0
	#   emit_line("(cl-case pc");
	mov A, .L4467
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4467:
	mov A, B
	.loc 7 3063 0
	#   emit_line("(-1 nil");
.data
	.L4468:
	.string "(cl-case pc"
.text
	mov A, .L4468
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4469:
	mov A, B
	add SP, 1
	.loc 7 3064 0
	#   inc_indent();
.data
	.L4470:
	.string "(-1 nil"
.text
	mov A, .L4470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4471:
	mov A, B
	add SP, 1
	.loc 7 3065 0
	# }
	mov A, .L4472
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4472:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
el_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3075 0
	# }
	.loc 7 3069 0
	#   emit_line("))");
	mov A, .L4473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4473:
	mov A, B
	.loc 7 3070 0
	#   emit_line("(setq pc (+ pc 1))");
.data
	.L4474:
	.string "))"
.text
	mov A, .L4474
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4475
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4475:
	mov A, B
	add SP, 1
	.loc 7 3071 0
	#   dec_indent();
.data
	.L4476:
	.string "(setq pc (+ pc 1))"
.text
	mov A, .L4476
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4477
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4477:
	mov A, B
	add SP, 1
	.loc 7 3072 0
	#   emit_line(")");
	mov A, .L4478
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4478:
	mov A, B
	.loc 7 3073 0
	#   dec_indent();
.data
	.L4479:
	.string ")"
.text
	mov A, .L4479
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4480
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4480:
	mov A, B
	add SP, 1
	.loc 7 3074 0
	#   emit_line(")");
	mov A, .L4481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4481:
	mov A, B
	.loc 7 3075 0
	# }
.data
	.L4482:
	.string ")"
.text
	mov A, .L4482
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4483:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
el_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3083 0
	# }
	.loc 7 3079 0
	#   emit_line("");
.data
	.L4484:
	.string ")"
.text
	mov A, .L4484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4485:
	mov A, B
	add SP, 1
	.loc 7 3080 0
	#   dec_indent();
.data
	.L4486:
	.string ""
.text
	mov A, .L4486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4487:
	mov A, B
	add SP, 1
	.loc 7 3081 0
	#   emit_line("(%d", pc);
	mov A, .L4488
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4488:
	mov A, B
	.loc 7 3082 0
	#   inc_indent();
	.loc 7 3075 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3082 0
	#   inc_indent();
.data
	.L4489:
	.string "(%d"
.text
	mov A, .L4489
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4490:
	mov A, B
	add SP, 2
	.loc 7 3083 0
	# }
	mov A, .L4491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4491:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
el_cmp_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 3099 0
	# }
	.loc 7 3087 0
	#   const char* fmt;
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3083 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L4492:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3088 0
	#   switch (op) {
	.loc 7 3096 0
	#       error("oops");
	.loc 7 3087 0
	#   const char* fmt;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3096 0
	#       error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4493, A, 0
	jmp .L542
	.L4493:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4494, A, 0
	jmp .L543
	.L4494:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4495, A, 0
	jmp .L544
	.L4495:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4496, A, 0
	jmp .L545
	.L4496:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4497, A, 0
	jmp .L546
	.L4497:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4498, A, 0
	jmp .L547
	.L4498:
	jmp .L548
	.loc 7 3090 0
	#     case JNE: fmt = "(not (eq %s %s))"; break;
	.L542:
.data
	.L4499:
	.string "(eq %s %s)"
.text
	mov A, .L4499
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L541
	.loc 7 3091 0
	#     case JLT: fmt = "(< %s %s)"; break;
	.L543:
.data
	.L4500:
	.string "(not (eq %s %s))"
.text
	mov A, .L4500
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L541
	.loc 7 3092 0
	#     case JGT: fmt = "(> %s %s)"; break;
	.L544:
.data
	.L4501:
	.string "(< %s %s)"
.text
	mov A, .L4501
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L541
	.loc 7 3093 0
	#     case JLE: fmt = "(<= %s %s)"; break;
	.L545:
.data
	.L4502:
	.string "(> %s %s)"
.text
	mov A, .L4502
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L541
	.loc 7 3094 0
	#     case JGE: fmt = "(>= %s %s)"; break;
	.L546:
.data
	.L4503:
	.string "(<= %s %s)"
.text
	mov A, .L4503
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L541
	.loc 7 3095 0
	#     default:
	.L547:
.data
	.L4504:
	.string "(>= %s %s)"
.text
	mov A, .L4504
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L541
	.loc 7 3096 0
	#       error("oops");
	.L548:
.data
	.L4505:
	.string "oops"
.text
	mov A, .L4505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L4506:
	mov A, B
	add SP, 1
	.L541:
	.loc 7 3099 0
	# }
	.loc 7 3083 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4507
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4507:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3099 0
	# }
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3099 0
	# }
	.loc 7 3083 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3088 0
	#   switch (op) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L4508:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
el_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3169 0
	#     error("oops");
	.loc 7 3103 0
	#   case MOV:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3169 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4509, A, 0
	jmp .L550
	.L4509:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4510, A, 0
	jmp .L551
	.L4510:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4511, A, 0
	jmp .L552
	.L4511:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4512, A, 0
	jmp .L553
	.L4512:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4513, A, 0
	jmp .L554
	.L4513:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4514, A, 0
	jmp .L555
	.L4514:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4515, A, 0
	jmp .L556
	.L4515:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4516, A, 0
	jmp .L557
	.L4516:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4517, A, 0
	jmp .L558
	.L4517:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4518, A, 0
	jmp .L559
	.L4518:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4519, A, 0
	jmp .L560
	.L4519:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4520, A, 0
	jmp .L561
	.L4520:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4521, A, 0
	jmp .L562
	.L4521:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4522, A, 0
	jmp .L563
	.L4522:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4523, A, 0
	jmp .L564
	.L4523:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4524, A, 0
	jmp .L565
	.L4524:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4525, A, 0
	jmp .L566
	.L4525:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4526, A, 0
	jmp .L567
	.L4526:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4527, A, 0
	jmp .L568
	.L4527:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4528, A, 0
	jmp .L569
	.L4528:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4529, A, 0
	jmp .L570
	.L4529:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4530, A, 0
	jmp .L571
	.L4530:
	jmp .L572
	.loc 7 3104 0
	#     emit_line("(setq %s %s)", reg_names[inst->dst.reg], src_str(inst));
	.L550:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4531:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3104 0
	#     emit_line("(setq %s %s)", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3104 0
	#     emit_line("(setq %s %s)", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3104 0
	#     emit_line("(setq %s %s)", reg_names[inst->dst.reg], src_str(inst));
.data
	.L4532:
	.string "(setq %s %s)"
.text
	mov A, .L4532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4533:
	mov A, B
	add SP, 3
	.loc 7 3106 0
	# 
	jmp .L549
	.loc 7 3108 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.L551:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4534:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3108 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3108 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3108 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3108 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3108 0
	#     emit_line("(setq %s (logand (+ %s %s) " UINT_MAX_STR "))",
.data
	.L4535:
	.string "(setq %s (logand (+ %s %s) 16777215))"
.text
	mov A, .L4535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4536:
	mov A, B
	add SP, 4
	.loc 7 3112 0
	# 
	jmp .L549
	.loc 7 3114 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.L552:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4537:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3114 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3114 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3114 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3114 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3114 0
	#     emit_line("(setq %s (logand (- %s %s) " UINT_MAX_STR "))",
.data
	.L4538:
	.string "(setq %s (logand (- %s %s) 16777215))"
.text
	mov A, .L4538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4539:
	mov A, B
	add SP, 4
	.loc 7 3118 0
	# 
	jmp .L549
	.loc 7 3120 0
	#     emit_line("(setq %s (aref mem %s))",
	.L553:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4540:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3120 0
	#     emit_line("(setq %s (aref mem %s))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3120 0
	#     emit_line("(setq %s (aref mem %s))",
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3120 0
	#     emit_line("(setq %s (aref mem %s))",
.data
	.L4541:
	.string "(setq %s (aref mem %s))"
.text
	mov A, .L4541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4542:
	mov A, B
	add SP, 3
	.loc 7 3123 0
	# 
	jmp .L549
	.loc 7 3125 0
	#     emit_line("(aset mem %s %s)", src_str(inst), reg_names[inst->dst.reg]);
	.L554:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3125 0
	#     emit_line("(aset mem %s %s)", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3125 0
	#     emit_line("(aset mem %s %s)", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4543:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3125 0
	#     emit_line("(aset mem %s %s)", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L4544:
	.string "(aset mem %s %s)"
.text
	mov A, .L4544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4545:
	mov A, B
	add SP, 3
	.loc 7 3127 0
	# 
	jmp .L549
	.loc 7 3129 0
	#     emit_line("(putchar %s)", src_str(inst));
	.L555:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4546:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3129 0
	#     emit_line("(putchar %s)", src_str(inst));
.data
	.L4547:
	.string "(putchar %s)"
.text
	mov A, .L4547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4548:
	mov A, B
	add SP, 2
	.loc 7 3131 0
	# 
	jmp .L549
	.loc 7 3133 0
	#     emit_line("(setq %s (getchar))",
	.L556:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3133 0
	#     emit_line("(setq %s (getchar))",
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3133 0
	#     emit_line("(setq %s (getchar))",
.data
	.L4549:
	.string "(setq %s (getchar))"
.text
	mov A, .L4549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4550:
	mov A, B
	add SP, 2
	.loc 7 3136 0
	# 
	jmp .L549
	.loc 7 3138 0
	#     emit_line("(setq elvm-running nil)");
	.L557:
.data
	.L4551:
	.string "(setq elvm-running nil)"
.text
	mov A, .L4551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4552:
	mov A, B
	add SP, 1
	.loc 7 3140 0
	# 
	jmp .L549
	.loc 7 3142 0
	#     break;
	.L558:
	jmp .L549
	.loc 7 3145 0
	#   case NE:
	.L559:
	.L560:
	.L561:
	.L562:
	.L563:
	.L564:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp el_cmp_str
	.L4553:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3145 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3145 0
	#   case NE:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3145 0
	#   case NE:
.data
	.L4554:
	.string "(setq %s (if %s 1 0))"
.text
	mov A, .L4554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4555:
	mov A, B
	add SP, 3
	.loc 7 3153 0
	# 
	jmp .L549
	.loc 7 3155 0
	#   case JNE:
	.L565:
	.L566:
	.L567:
	.L568:
	.L569:
	.L570:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L4556:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3155 0
	#   case JNE:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp el_cmp_str
	.L4557:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3155 0
	#   case JNE:
.data
	.L4558:
	.string "(if %s (setq pc (- %s 1)))"
.text
	mov A, .L4558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4559:
	mov A, B
	add SP, 3
	.loc 7 3163 0
	# 
	jmp .L549
	.loc 7 3165 0
	#     emit_line("(setq pc (- %s 1))", value_str(&inst->jmp));
	.L571:
	.loc 7 3099 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L4560:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3165 0
	#     emit_line("(setq pc (- %s 1))", value_str(&inst->jmp));
.data
	.L4561:
	.string "(setq pc (- %s 1))"
.text
	mov A, .L4561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4562:
	mov A, B
	add SP, 2
	.loc 7 3167 0
	# 
	jmp .L549
	.loc 7 3169 0
	#     error("oops");
	.L572:
.data
	.L4563:
	.string "oops"
.text
	mov A, .L4563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L4564:
	mov A, B
	add SP, 1
	.L549:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_el:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3208 0
	# }
	.loc 7 3175 0
	#   emit_line("(setq elvm-running t)");
	.loc 7 3169 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_el
	.L4565:
	mov A, B
	add SP, 1
	.loc 7 3176 0
	# 
.data
	.L4566:
	.string "(setq elvm-running t)"
.text
	mov A, .L4566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4567:
	mov A, B
	add SP, 1
	.loc 7 3178 0
	#                                          el_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, el_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, el_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, el_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, el_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3169 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L4568:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3184 0
	#   emit_line("(while elvm-running");
.data
	.L4569:
	.string ""
.text
	mov A, .L4569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4570:
	mov A, B
	add SP, 1
	.loc 7 3185 0
	#   inc_indent();
.data
	.L4571:
	.string "(while elvm-running"
.text
	mov A, .L4571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4572:
	mov A, B
	add SP, 1
	.loc 7 3186 0
	#   emit_line("(cl-case (/ pc %d)", CHUNKED_FUNC_SIZE);
	mov A, .L4573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4573:
	mov A, B
	.loc 7 3187 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3187 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L4574:
	.string "(cl-case (/ pc %d)"
.text
	mov A, .L4574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4575:
	mov A, B
	add SP, 2
	.loc 7 3189 0
	#   }
	.loc 7 3188 0
	#     emit_line("(%d (elvm-func%d))", i, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 3189 0
	#   }
	.L573:
	.loc 7 3188 0
	#     emit_line("(%d (elvm-func%d))", i, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3178 0
	#                                          el_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4576, A, 0
	jmp .L4577
	.L4576:
	.loc 7 3189 0
	#   }
	jmp .L575
	.L4577:
	.loc 7 3188 0
	#     emit_line("(%d (elvm-func%d))", i, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3189 0
	#   }
.data
	.L4578:
	.string "(%d (elvm-func%d))"
.text
	mov A, .L4578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4579:
	mov A, B
	add SP, 3
	.L574:
	.loc 7 3188 0
	#     emit_line("(%d (elvm-func%d))", i, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3189 0
	#   }
	jmp .L573
	.L575:
	.loc 7 3191 0
	#   dec_indent();
.data
	.L4580:
	.string ")"
.text
	mov A, .L4580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4581:
	mov A, B
	add SP, 1
	.loc 7 3192 0
	#   emit_line(")");
	mov A, .L4582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4582:
	mov A, B
	.loc 7 3193 0
	# 
.data
	.L4583:
	.string ")"
.text
	mov A, .L4583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4584:
	mov A, B
	add SP, 1
	.loc 7 3195 0
	# 
.data
	.L4585:
	.string "))"
.text
	mov A, .L4585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4586:
	mov A, B
	add SP, 1
	.loc 7 3197 0
	#   emit_line(" (if (eq (length elvm-input) 0) 0");
.data
	.L4587:
	.string "(defun getchar ()"
.text
	mov A, .L4587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4588:
	mov A, B
	add SP, 1
	.loc 7 3198 0
	#   emit_line("  (setq r (string-to-char elvm-input))");
.data
	.L4589:
	.string " (if (eq (length elvm-input) 0) 0"
.text
	mov A, .L4589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4590:
	mov A, B
	add SP, 1
	.loc 7 3199 0
	#   emit_line("  (setq elvm-input (substring elvm-input 1))");
.data
	.L4591:
	.string "  (setq r (string-to-char elvm-input))"
.text
	mov A, .L4591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4592:
	mov A, B
	add SP, 1
	.loc 7 3200 0
	#   emit_line("  r))");
.data
	.L4593:
	.string "  (setq elvm-input (substring elvm-input 1))"
.text
	mov A, .L4593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4594:
	mov A, B
	add SP, 1
	.loc 7 3201 0
	#   emit_line("(if noninteractive (progn");
.data
	.L4595:
	.string "  r))"
.text
	mov A, .L4595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4596:
	mov A, B
	add SP, 1
	.loc 7 3202 0
	#   emit_line(" (setq elvm-input");
.data
	.L4597:
	.string "(if noninteractive (progn"
.text
	mov A, .L4597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4598:
	mov A, B
	add SP, 1
	.loc 7 3203 0
	#   emit_line("  (with-temp-buffer");
.data
	.L4599:
	.string " (setq elvm-input"
.text
	mov A, .L4599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4600:
	mov A, B
	add SP, 1
	.loc 7 3204 0
	#   emit_line("   (insert-file-contents \"/dev/stdin\")");
.data
	.L4601:
	.string "  (with-temp-buffer"
.text
	mov A, .L4601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4602
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4602:
	mov A, B
	add SP, 1
	.loc 7 3205 0
	#   emit_line("   (buffer-string)))");
.data
	.L4603:
	.string "   (insert-file-contents \"/dev/stdin\")"
.text
	mov A, .L4603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4604:
	mov A, B
	add SP, 1
	.loc 7 3206 0
	#   emit_line(" (defun putchar (c) (princ (char-to-string c)))");
.data
	.L4605:
	.string "   (buffer-string)))"
.text
	mov A, .L4605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4606:
	mov A, B
	add SP, 1
	.loc 7 3207 0
	#   emit_line(" (funcall elvm-main)))");
.data
	.L4607:
	.string " (defun putchar (c) (princ (char-to-string c)))"
.text
	mov A, .L4607
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4608:
	mov A, B
	add SP, 1
	.loc 7 3208 0
	# }
.data
	.L4609:
	.string " (funcall elvm-main)))"
.text
	mov A, .L4609
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4610:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
FORTH_REG_NAMES:
	.data 1
	.L4611:
	.string "reg-a"
	.data 0
	.long .L4611
	.data 1
	.L4612:
	.string "reg-b"
	.data 0
	.long .L4612
	.data 1
	.L4613:
	.string "reg-c"
	.data 0
	.long .L4613
	.data 1
	.L4614:
	.string "reg-d"
	.data 0
	.long .L4614
	.data 1
	.L4615:
	.string "reg-bp"
	.data 0
	.long .L4615
	.data 1
	.L4616:
	.string "reg-sp"
	.data 0
	.long .L4616
	.data 1
	.L4617:
	.string "reg-pc"
	.data 0
	.long .L4617
	.text
init_state_forth:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3240 0
	# }
	.loc 7 3221 0
	#   for (int i = 0; i < 7; i++) {
	.loc 7 3208 0
	# }
	mov A, FORTH_REG_NAMES
	mov B, reg_names
	store A, B
	.loc 7 3224 0
	#   }
	.loc 7 3222 0
	#     emit_line("variable %s", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3224 0
	#   }
	.L576:
	.loc 7 3222 0
	#     emit_line("variable %s", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4618, A, 0
	jmp .L4619
	.L4618:
	.loc 7 3224 0
	#   }
	jmp .L578
	.L4619:
	.loc 7 3223 0
	#     emit_line("0 %s !", reg_names[i]);
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3222 0
	#     emit_line("variable %s", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3223 0
	#     emit_line("0 %s !", reg_names[i]);
.data
	.L4620:
	.string "variable %s"
.text
	mov A, .L4620
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4621
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4621:
	mov A, B
	add SP, 2
	.loc 7 3224 0
	#   }
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3222 0
	#     emit_line("variable %s", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3224 0
	#   }
.data
	.L4622:
	.string "0 %s !"
.text
	mov A, .L4622
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4623
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4623:
	mov A, B
	add SP, 2
	.L577:
	.loc 7 3222 0
	#     emit_line("variable %s", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3224 0
	#   }
	jmp .L576
	.L578:
	.loc 7 3226 0
	#   emit_line(FORTH_MEM_SIZE_STR " cells allocate throw mem !");
.data
	.L4624:
	.string "variable mem"
.text
	mov A, .L4624
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4625
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4625:
	mov A, B
	add SP, 1
	.loc 7 3227 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L4626:
	.string "16777216 cells allocate throw mem !"
.text
	mov A, .L4626
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4627
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4627:
	mov A, B
	add SP, 1
	.loc 7 3230 0
	#     }
	.loc 7 3228 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 3230 0
	#     }
	.L579:
	.loc 7 3208 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L4628, A, 0
	jmp .L4629
	.L4628:
	.loc 7 3230 0
	#     }
	jmp .L581
	.L4629:
	.loc 7 3229 0
	#       emit_line("%d mem @ %d cells + !", data->v, mp);
	.loc 7 3208 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L4630, A, 0
	.loc 7 3230 0
	#     }
	.loc 7 3228 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3230 0
	#     }
	.loc 7 3208 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3230 0
	#     }
.data
	.L4631:
	.string "%d mem @ %d cells + !"
.text
	mov A, .L4631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4632
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4632:
	mov A, B
	add SP, 3
	.L4630:
	.L580:
	.loc 7 3228 0
	#     if (data->v) {
	.loc 7 3208 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 3228 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3230 0
	#     }
	jmp .L579
	.L581:
	.loc 7 3233 0
	#   emit_line("variable tmpchar");
.data
	.L4633:
	.string ""
.text
	mov A, .L4633
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4634
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4634:
	mov A, B
	add SP, 1
	.loc 7 3234 0
	#   emit_line(": getc");
.data
	.L4635:
	.string "variable tmpchar"
.text
	mov A, .L4635
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4636:
	mov A, B
	add SP, 1
	.loc 7 3235 0
	#   inc_indent();
.data
	.L4637:
	.string ": getc"
.text
	mov A, .L4637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4638:
	mov A, B
	add SP, 1
	.loc 7 3236 0
	#   emit_line("tmpchar 1 stdin read-file");
	mov A, .L4639
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4639:
	mov A, B
	.loc 7 3237 0
	#   emit_line("0= swap 1 = and if tmpchar @ else 0 then");
.data
	.L4640:
	.string "tmpchar 1 stdin read-file"
.text
	mov A, .L4640
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4641:
	mov A, B
	add SP, 1
	.loc 7 3238 0
	#   dec_indent();
.data
	.L4642:
	.string "0= swap 1 = and if tmpchar @ else 0 then"
.text
	mov A, .L4642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4643:
	mov A, B
	add SP, 1
	.loc 7 3239 0
	#   emit_line(";");
	mov A, .L4644
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4644:
	mov A, B
	.loc 7 3240 0
	# }
.data
	.L4645:
	.string ";"
.text
	mov A, .L4645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4646:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
forth_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3256 0
	# }
	.loc 7 3244 0
	#   emit_line(": func%d", func_id);
.data
	.L4647:
	.string ""
.text
	mov A, .L4647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4648
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4648:
	mov A, B
	add SP, 1
	.loc 7 3245 0
	#   inc_indent();
	.loc 7 3240 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3245 0
	#   inc_indent();
.data
	.L4649:
	.string ": func%d"
.text
	mov A, .L4649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4650:
	mov A, B
	add SP, 2
	.loc 7 3246 0
	#   emit_line("begin");
	mov A, .L4651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4651:
	mov A, B
	.loc 7 3247 0
	#   inc_indent();
.data
	.L4652:
	.string "begin"
.text
	mov A, .L4652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4653
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4653:
	mov A, B
	add SP, 1
	.loc 7 3248 0
	#   emit_line("reg-pc @ dup %d >= swap %d < and",
	mov A, .L4654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4654:
	mov A, B
	.loc 7 3249 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 3240 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3249 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4655:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3249 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 3240 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4656:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3249 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L4657:
	.string "reg-pc @ dup %d >= swap %d < and"
.text
	mov A, .L4657
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4658:
	mov A, B
	add SP, 3
	.loc 7 3251 0
	#   emit_line("while");
	mov A, .L4659
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4659:
	mov A, B
	.loc 7 3252 0
	#   inc_indent();
.data
	.L4660:
	.string "while"
.text
	mov A, .L4660
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4661
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4661:
	mov A, B
	add SP, 1
	.loc 7 3253 0
	#   emit_line("reg-pc @");
	mov A, .L4662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4662:
	mov A, B
	.loc 7 3254 0
	#   emit_line("dup -1 = if");
.data
	.L4663:
	.string "reg-pc @"
.text
	mov A, .L4663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4664:
	mov A, B
	add SP, 1
	.loc 7 3255 0
	#   inc_indent();
.data
	.L4665:
	.string "dup -1 = if"
.text
	mov A, .L4665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4666
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4666:
	mov A, B
	add SP, 1
	.loc 7 3256 0
	# }
	mov A, .L4667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4667:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
forth_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3267 0
	# }
	.loc 7 3260 0
	#   emit_line("then");
	mov A, .L4668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4668:
	mov A, B
	.loc 7 3261 0
	#   emit_line("drop");
.data
	.L4669:
	.string "then"
.text
	mov A, .L4669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4670:
	mov A, B
	add SP, 1
	.loc 7 3262 0
	#   emit_line("1 reg-pc +!");
.data
	.L4671:
	.string "drop"
.text
	mov A, .L4671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4672:
	mov A, B
	add SP, 1
	.loc 7 3263 0
	#   dec_indent();
.data
	.L4673:
	.string "1 reg-pc +!"
.text
	mov A, .L4673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4674:
	mov A, B
	add SP, 1
	.loc 7 3264 0
	#   emit_line("repeat");
	mov A, .L4675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4675:
	mov A, B
	.loc 7 3265 0
	#   dec_indent();
.data
	.L4676:
	.string "repeat"
.text
	mov A, .L4676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4677
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4677:
	mov A, B
	add SP, 1
	.loc 7 3266 0
	#   emit_line(";");
	mov A, .L4678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4678:
	mov A, B
	.loc 7 3267 0
	# }
.data
	.L4679:
	.string ";"
.text
	mov A, .L4679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4680:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
forth_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3274 0
	# }
	.loc 7 3271 0
	#   emit_line("then");
	mov A, .L4681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4681:
	mov A, B
	.loc 7 3272 0
	#   emit_line("dup %d = if", pc);
.data
	.L4682:
	.string "then"
.text
	mov A, .L4682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4683:
	mov A, B
	add SP, 1
	.loc 7 3273 0
	#   inc_indent();
	.loc 7 3267 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3273 0
	#   inc_indent();
.data
	.L4684:
	.string "dup %d = if"
.text
	mov A, .L4684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4685:
	mov A, B
	add SP, 2
	.loc 7 3274 0
	# }
	mov A, .L4686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4686:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
forth_value_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3283 0
	#   }
	.loc 7 3278 0
	#     return format("%s @", reg_names[v->reg]);
	.loc 7 3274 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4687, A, 0
	.loc 7 3279 0
	#   } else if (v->type == IMM) {
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3279 0
	#   } else if (v->type == IMM) {
	.loc 7 3274 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3279 0
	#   } else if (v->type == IMM) {
.data
	.L4688:
	.string "%s @"
.text
	mov A, .L4688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L4689:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L4690
	.L4687:
	.loc 7 3283 0
	#   }
	.loc 7 3279 0
	#   } else if (v->type == IMM) {
	.loc 7 3274 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4691, A, 0
	.loc 7 3281 0
	#   } else {
	.loc 7 3274 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3281 0
	#   } else {
.data
	.L4692:
	.string "%d"
.text
	mov A, .L4692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L4693:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L4694
	.L4691:
	.loc 7 3283 0
	#   }
.data
	.L4695:
	.string "invalid value"
.text
	mov A, .L4695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L4696:
	mov A, B
	add SP, 1
	.L4694:
	.L4690:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
forth_src_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3288 0
	# }
	.loc 7 3283 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_value_str
	.L4697:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3292 0
	#             reg_names[inst->dst.reg], forth_src_str(inst),
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3292 0
	#             reg_names[inst->dst.reg], forth_src_str(inst),
	.loc 7 3288 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3292 0
	#             reg_names[inst->dst.reg], forth_src_str(inst),
	.loc 7 3288 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_src_str
	.L4698:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3292 0
	#             reg_names[inst->dst.reg], forth_src_str(inst),
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3292 0
	#             reg_names[inst->dst.reg], forth_src_str(inst),
	.loc 7 3288 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3292 0
	#             reg_names[inst->dst.reg], forth_src_str(inst),
.data
	.L4699:
	.string "%s @ %s %s if 1 else 0 then %s !"
.text
	mov A, .L4699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4700:
	mov A, B
	add SP, 5
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_jump:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3298 0
	# }
	.loc 7 3292 0
	#             reg_names[inst->dst.reg], forth_src_str(inst),
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_value_str
	.L4701:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3298 0
	# }
.data
	.L4702:
	.string "%s 1 - reg-pc !"
.text
	mov A, .L4702
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4703:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_cond_jump:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3307 0
	# }
	.loc 7 3302 0
	#             reg_names[inst->dst.reg], forth_src_str(inst), cmp_op);
	.loc 7 3298 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3302 0
	#             reg_names[inst->dst.reg], forth_src_str(inst), cmp_op);
	.loc 7 3298 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_src_str
	.L4704:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3302 0
	#             reg_names[inst->dst.reg], forth_src_str(inst), cmp_op);
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3302 0
	#             reg_names[inst->dst.reg], forth_src_str(inst), cmp_op);
	.loc 7 3298 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3302 0
	#             reg_names[inst->dst.reg], forth_src_str(inst), cmp_op);
.data
	.L4705:
	.string "%s @ %s %s if"
.text
	mov A, .L4705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4706:
	mov A, B
	add SP, 4
	.loc 7 3304 0
	#   emit_jump(inst);
	mov A, .L4707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4707:
	mov A, B
	.loc 7 3305 0
	#   dec_indent();
	.loc 7 3298 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jump
	.L4708:
	mov A, B
	add SP, 1
	.loc 7 3306 0
	#   emit_line("then");
	mov A, .L4709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4709:
	mov A, B
	.loc 7 3307 0
	# }
.data
	.L4710:
	.string "then"
.text
	mov A, .L4710
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4711:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
forth_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3394 0
	#     error("oops");
	.loc 7 3311 0
	#   case MOV:
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3394 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4712, A, 0
	jmp .L583
	.L4712:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4713, A, 0
	jmp .L584
	.L4713:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4714, A, 0
	jmp .L585
	.L4714:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4715, A, 0
	jmp .L586
	.L4715:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4716, A, 0
	jmp .L587
	.L4716:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4717, A, 0
	jmp .L588
	.L4717:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4718, A, 0
	jmp .L589
	.L4718:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4719, A, 0
	jmp .L590
	.L4719:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4720, A, 0
	jmp .L591
	.L4720:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4721, A, 0
	jmp .L592
	.L4721:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4722, A, 0
	jmp .L593
	.L4722:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4723, A, 0
	jmp .L594
	.L4723:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4724, A, 0
	jmp .L595
	.L4724:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4725, A, 0
	jmp .L596
	.L4725:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4726, A, 0
	jmp .L597
	.L4726:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4727, A, 0
	jmp .L598
	.L4727:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4728, A, 0
	jmp .L599
	.L4728:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4729, A, 0
	jmp .L600
	.L4729:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4730, A, 0
	jmp .L601
	.L4730:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4731, A, 0
	jmp .L602
	.L4731:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4732, A, 0
	jmp .L603
	.L4732:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4733, A, 0
	jmp .L604
	.L4733:
	jmp .L605
	.loc 7 3312 0
	#     emit_line("%s %s !", forth_src_str(inst), reg_names[inst->dst.reg]);
	.L583:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3312 0
	#     emit_line("%s %s !", forth_src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3312 0
	#     emit_line("%s %s !", forth_src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_src_str
	.L4734:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3312 0
	#     emit_line("%s %s !", forth_src_str(inst), reg_names[inst->dst.reg]);
.data
	.L4735:
	.string "%s %s !"
.text
	mov A, .L4735
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4736
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4736:
	mov A, B
	add SP, 3
	.loc 7 3314 0
	# 
	jmp .L582
	.loc 7 3316 0
	#     emit_line("%s @ %s + %d and",
	.L584:
	mov A, 16777215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_src_str
	.L4737:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3316 0
	#     emit_line("%s @ %s + %d and",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3316 0
	#     emit_line("%s @ %s + %d and",
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3316 0
	#     emit_line("%s @ %s + %d and",
.data
	.L4738:
	.string "%s @ %s + %d and"
.text
	mov A, .L4738
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4739
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4739:
	mov A, B
	add SP, 4
	.loc 7 3319 0
	#     break;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3319 0
	#     break;
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3319 0
	#     break;
.data
	.L4740:
	.string "%s !"
.text
	mov A, .L4740
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4741:
	mov A, B
	add SP, 2
	.loc 7 3320 0
	# 
	jmp .L582
	.loc 7 3322 0
	#     emit_line("%s @ %s - %d and",
	.L585:
	mov A, 16777215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_src_str
	.L4742:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3322 0
	#     emit_line("%s @ %s - %d and",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3322 0
	#     emit_line("%s @ %s - %d and",
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3322 0
	#     emit_line("%s @ %s - %d and",
.data
	.L4743:
	.string "%s @ %s - %d and"
.text
	mov A, .L4743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4744:
	mov A, B
	add SP, 4
	.loc 7 3325 0
	#     break;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3325 0
	#     break;
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3325 0
	#     break;
.data
	.L4745:
	.string "%s !"
.text
	mov A, .L4745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4746:
	mov A, B
	add SP, 2
	.loc 7 3326 0
	# 
	jmp .L582
	.loc 7 3328 0
	#     emit_line("mem @ %s cells + @ %s !",
	.L586:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3328 0
	#     emit_line("mem @ %s cells + @ %s !",
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3328 0
	#     emit_line("mem @ %s cells + @ %s !",
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_src_str
	.L4747:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3328 0
	#     emit_line("mem @ %s cells + @ %s !",
.data
	.L4748:
	.string "mem @ %s cells + @ %s !"
.text
	mov A, .L4748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4749:
	mov A, B
	add SP, 3
	.loc 7 3331 0
	# 
	jmp .L582
	.loc 7 3333 0
	#     emit_line("%s @ mem  @ %s cells + !",
	.L587:
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_src_str
	.L4750:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3333 0
	#     emit_line("%s @ mem  @ %s cells + !",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3333 0
	#     emit_line("%s @ mem  @ %s cells + !",
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3333 0
	#     emit_line("%s @ mem  @ %s cells + !",
.data
	.L4751:
	.string "%s @ mem  @ %s cells + !"
.text
	mov A, .L4751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4752:
	mov A, B
	add SP, 3
	.loc 7 3336 0
	# 
	jmp .L582
	.loc 7 3338 0
	#     emit_line("%s emit", forth_src_str(inst));
	.L588:
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp forth_src_str
	.L4753:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3338 0
	#     emit_line("%s emit", forth_src_str(inst));
.data
	.L4754:
	.string "%s emit"
.text
	mov A, .L4754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4755:
	mov A, B
	add SP, 2
	.loc 7 3340 0
	# 
	jmp .L582
	.loc 7 3342 0
	#     emit_line("getc %s !", reg_names[inst->dst.reg]);
	.L589:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3342 0
	#     emit_line("getc %s !", reg_names[inst->dst.reg]);
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3342 0
	#     emit_line("getc %s !", reg_names[inst->dst.reg]);
.data
	.L4756:
	.string "getc %s !"
.text
	mov A, .L4756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4757:
	mov A, B
	add SP, 2
	.loc 7 3344 0
	# 
	jmp .L582
	.loc 7 3346 0
	#     emit_line("bye");
	.L590:
.data
	.L4758:
	.string "bye"
.text
	mov A, .L4758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4759:
	mov A, B
	add SP, 1
	.loc 7 3348 0
	# 
	jmp .L582
	.loc 7 3350 0
	#     break;
	.L591:
	jmp .L582
	.loc 7 3353 0
	#     emit_cmp(inst, "=");
	.L592:
.data
	.L4760:
	.string "="
.text
	mov A, .L4760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cmp
	.L4761:
	mov A, B
	add SP, 2
	.loc 7 3355 0
	#   case NE:
	jmp .L582
	.loc 7 3356 0
	#     emit_cmp(inst, "<>");
	.L593:
.data
	.L4762:
	.string "<>"
.text
	mov A, .L4762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cmp
	.L4763:
	mov A, B
	add SP, 2
	.loc 7 3358 0
	#   case LT:
	jmp .L582
	.loc 7 3359 0
	#     emit_cmp(inst, "<");
	.L594:
.data
	.L4764:
	.string "<"
.text
	mov A, .L4764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cmp
	.L4765:
	mov A, B
	add SP, 2
	.loc 7 3361 0
	#   case GT:
	jmp .L582
	.loc 7 3362 0
	#     emit_cmp(inst, ">");
	.L595:
.data
	.L4766:
	.string ">"
.text
	mov A, .L4766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cmp
	.L4767:
	mov A, B
	add SP, 2
	.loc 7 3364 0
	#   case LE:
	jmp .L582
	.loc 7 3365 0
	#     emit_cmp(inst, "<=");
	.L596:
.data
	.L4768:
	.string "<="
.text
	mov A, .L4768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cmp
	.L4769:
	mov A, B
	add SP, 2
	.loc 7 3367 0
	#   case GE:
	jmp .L582
	.loc 7 3368 0
	#     emit_cmp(inst, ">=");
	.L597:
.data
	.L4770:
	.string ">="
.text
	mov A, .L4770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cmp
	.L4771:
	mov A, B
	add SP, 2
	.loc 7 3370 0
	# 
	jmp .L582
	.loc 7 3372 0
	#     emit_cond_jump(inst, "=");
	.L598:
.data
	.L4772:
	.string "="
.text
	mov A, .L4772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cond_jump
	.L4773:
	mov A, B
	add SP, 2
	.loc 7 3374 0
	#   case JNE:
	jmp .L582
	.loc 7 3375 0
	#     emit_cond_jump(inst, "<>");
	.L599:
.data
	.L4774:
	.string "<>"
.text
	mov A, .L4774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cond_jump
	.L4775:
	mov A, B
	add SP, 2
	.loc 7 3377 0
	#   case JLT:
	jmp .L582
	.loc 7 3378 0
	#     emit_cond_jump(inst, "<");
	.L600:
.data
	.L4776:
	.string "<"
.text
	mov A, .L4776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cond_jump
	.L4777:
	mov A, B
	add SP, 2
	.loc 7 3380 0
	#   case JGT:
	jmp .L582
	.loc 7 3381 0
	#     emit_cond_jump(inst, ">");
	.L601:
.data
	.L4778:
	.string ">"
.text
	mov A, .L4778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cond_jump
	.L4779:
	mov A, B
	add SP, 2
	.loc 7 3383 0
	#   case JLE:
	jmp .L582
	.loc 7 3384 0
	#     emit_cond_jump(inst, "<=");
	.L602:
.data
	.L4780:
	.string "<="
.text
	mov A, .L4780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cond_jump
	.L4781:
	mov A, B
	add SP, 2
	.loc 7 3386 0
	#   case JGE:
	jmp .L582
	.loc 7 3387 0
	#     emit_cond_jump(inst, ">=");
	.L603:
.data
	.L4782:
	.string ">="
.text
	mov A, .L4782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cond_jump
	.L4783:
	mov A, B
	add SP, 2
	.loc 7 3389 0
	#   case JMP:
	jmp .L582
	.loc 7 3390 0
	#     emit_jump(inst);
	.L604:
	.loc 7 3307 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jump
	.L4784:
	mov A, B
	add SP, 1
	.loc 7 3392 0
	# 
	jmp .L582
	.loc 7 3394 0
	#     error("oops");
	.L605:
.data
	.L4785:
	.string "oops"
.text
	mov A, .L4785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L4786:
	mov A, B
	add SP, 1
	.L582:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_forth:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 3427 0
	# }
	.loc 7 3400 0
	#   emit_line("");
	.loc 7 3394 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_forth
	.L4787:
	mov A, B
	add SP, 1
	.loc 7 3401 0
	# 
.data
	.L4788:
	.string ""
.text
	mov A, .L4788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4789:
	mov A, B
	add SP, 1
	.loc 7 3403 0
	#                                          forth_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, forth_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, forth_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, forth_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, forth_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3394 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L4790:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3409 0
	#   emit_line(": main");
.data
	.L4791:
	.string ""
.text
	mov A, .L4791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4792:
	mov A, B
	add SP, 1
	.loc 7 3410 0
	#   inc_indent();
.data
	.L4793:
	.string ": main"
.text
	mov A, .L4793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4794:
	mov A, B
	add SP, 1
	.loc 7 3411 0
	#   emit_line("begin");
	mov A, .L4795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4795:
	mov A, B
	.loc 7 3412 0
	#   inc_indent();
.data
	.L4796:
	.string "begin"
.text
	mov A, .L4796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4797:
	mov A, B
	add SP, 1
	.loc 7 3413 0
	#   emit_line("reg-pc @ %d /", CHUNKED_FUNC_SIZE);
	mov A, .L4798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4798:
	mov A, B
	.loc 7 3414 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3414 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L4799:
	.string "reg-pc @ %d /"
.text
	mov A, .L4799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4800:
	mov A, B
	add SP, 2
	.loc 7 3416 0
	#   }
	.loc 7 3415 0
	#     emit_line("dup %d = if func%d else", i, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 3416 0
	#   }
	.L606:
	.loc 7 3415 0
	#     emit_line("dup %d = if func%d else", i, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3403 0
	#                                          forth_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4801, A, 0
	jmp .L4802
	.L4801:
	.loc 7 3416 0
	#   }
	jmp .L608
	.L4802:
	.loc 7 3415 0
	#     emit_line("dup %d = if func%d else", i, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3416 0
	#   }
.data
	.L4803:
	.string "dup %d = if func%d else"
.text
	mov A, .L4803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4804:
	mov A, B
	add SP, 3
	.L607:
	.loc 7 3415 0
	#     emit_line("dup %d = if func%d else", i, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3416 0
	#   }
	jmp .L606
	.L608:
	.loc 7 3419 0
	#   }
	.loc 7 3418 0
	#     emit_line("then");
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 3419 0
	#   }
	.L609:
	.loc 7 3418 0
	#     emit_line("then");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3403 0
	#                                          forth_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4805, A, 0
	jmp .L4806
	.L4805:
	.loc 7 3419 0
	#   }
	jmp .L611
	.L4806:
.data
	.L4807:
	.string "then"
.text
	mov A, .L4807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4808:
	mov A, B
	add SP, 1
	.L610:
	.loc 7 3418 0
	#     emit_line("then");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3419 0
	#   }
	jmp .L609
	.L611:
	.loc 7 3421 0
	#   dec_indent();
.data
	.L4809:
	.string "drop"
.text
	mov A, .L4809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4810:
	mov A, B
	add SP, 1
	.loc 7 3422 0
	#   emit_line("0 until");
	mov A, .L4811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4811:
	mov A, B
	.loc 7 3423 0
	#   dec_indent();
.data
	.L4812:
	.string "0 until"
.text
	mov A, .L4812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4813:
	mov A, B
	add SP, 1
	.loc 7 3424 0
	#   emit_line(";");
	mov A, .L4814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4814:
	mov A, B
	.loc 7 3425 0
	#   emit_line("");
.data
	.L4815:
	.string ";"
.text
	mov A, .L4815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4816:
	mov A, B
	add SP, 1
	.loc 7 3426 0
	#   emit_line("main");
.data
	.L4817:
	.string ""
.text
	mov A, .L4817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4818:
	mov A, B
	add SP, 1
	.loc 7 3427 0
	# }
.data
	.L4819:
	.string "main"
.text
	mov A, .L4819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4820:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
FS_REG_NAMES:
	.data 1
	.L4821:
	.string "a"
	.data 0
	.long .L4821
	.data 1
	.L4822:
	.string "b"
	.data 0
	.long .L4822
	.data 1
	.L4823:
	.string "c"
	.data 0
	.long .L4823
	.data 1
	.L4824:
	.string "d"
	.data 0
	.long .L4824
	.data 1
	.L4825:
	.string "bp"
	.data 0
	.long .L4825
	.data 1
	.L4826:
	.string "sp"
	.data 0
	.long .L4826
	.data 1
	.L4827:
	.string "pc"
	.data 0
	.long .L4827
	.text
init_state_fs:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3445 0
	#     }
	.loc 7 3437 0
	#   for (int i = 0; i < 7; i++) {
	.loc 7 3427 0
	# }
	mov A, FS_REG_NAMES
	mov B, reg_names
	store A, B
	.loc 7 3439 0
	#   }
	.loc 7 3438 0
	#     emit_line("let mutable %s = 0", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3439 0
	#   }
	.L612:
	.loc 7 3438 0
	#     emit_line("let mutable %s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4828, A, 0
	jmp .L4829
	.L4828:
	.loc 7 3439 0
	#   }
	jmp .L614
	.L4829:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3438 0
	#     emit_line("let mutable %s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3439 0
	#   }
.data
	.L4830:
	.string "let mutable %s = 0"
.text
	mov A, .L4830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4831:
	mov A, B
	add SP, 2
	.L613:
	.loc 7 3438 0
	#     emit_line("let mutable %s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3439 0
	#   }
	jmp .L612
	.L614:
	.loc 7 3441 0
	#   emit_line("");
.data
	.L4832:
	.string "let mem : int array = Array.zeroCreate (1 <<< 24)"
.text
	mov A, .L4832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4833:
	mov A, B
	add SP, 1
	.loc 7 3442 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L4834:
	.string ""
.text
	mov A, .L4834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4835:
	mov A, B
	add SP, 1
	.loc 7 3445 0
	#     }
	.loc 7 3443 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 3445 0
	#     }
	.L615:
	.loc 7 3427 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L4836, A, 0
	jmp .L4837
	.L4836:
	.loc 7 3445 0
	#     }
	jmp .L617
	.L4837:
	.loc 7 3444 0
	#       emit_line("Array.set mem %d %d", mp, data->v);
	.loc 7 3427 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L4838, A, 0
	.loc 7 3445 0
	#     }
	.loc 7 3427 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3443 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3445 0
	#     }
.data
	.L4839:
	.string "Array.set mem %d %d"
.text
	mov A, .L4839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4840:
	mov A, B
	add SP, 3
	.L4838:
	.L616:
	.loc 7 3443 0
	#     if (data->v) {
	.loc 7 3427 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 3443 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3445 0
	#     }
	jmp .L615
	.L617:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fs_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3458 0
	# }
	.loc 7 3451 0
	#   emit_line("let func%d() =", func_id);
.data
	.L4841:
	.string ""
.text
	mov A, .L4841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4842:
	mov A, B
	add SP, 1
	.loc 7 3452 0
	#   inc_indent();
	.loc 7 3445 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3452 0
	#   inc_indent();
.data
	.L4843:
	.string "let func%d() ="
.text
	mov A, .L4843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4844:
	mov A, B
	add SP, 2
	.loc 7 3453 0
	#   emit_line("while %d <= pc && pc < %d do",
	mov A, .L4845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4845:
	mov A, B
	.loc 7 3454 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 3445 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3454 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4846:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3454 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 3445 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L4847:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3454 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L4848:
	.string "while %d <= pc && pc < %d do"
.text
	mov A, .L4848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4849
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4849:
	mov A, B
	add SP, 3
	.loc 7 3456 0
	#   emit_line("match pc with");
	mov A, .L4850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4850:
	mov A, B
	.loc 7 3457 0
	#   inc_indent();
.data
	.L4851:
	.string "match pc with"
.text
	mov A, .L4851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4852:
	mov A, B
	add SP, 1
	.loc 7 3458 0
	# }
	mov A, .L4853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4853:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fs_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3466 0
	# }
	.loc 7 3462 0
	#   emit_line("| _ -> failwith(\"oops\")");
	mov A, .L4854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4854:
	mov A, B
	.loc 7 3463 0
	#   emit_line("pc <- pc + 1");
.data
	.L4855:
	.string "| _ -> failwith(\"oops\")"
.text
	mov A, .L4855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4856:
	mov A, B
	add SP, 1
	.loc 7 3464 0
	#   dec_indent();
.data
	.L4857:
	.string "pc <- pc + 1"
.text
	mov A, .L4857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4858
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4858:
	mov A, B
	add SP, 1
	.loc 7 3465 0
	#   dec_indent();
	mov A, .L4859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4859:
	mov A, B
	.loc 7 3466 0
	# }
	mov A, .L4860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4860:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fs_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3472 0
	# }
	.loc 7 3470 0
	#   emit_line("| %d ->", pc);
	mov A, .L4861
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4861:
	mov A, B
	.loc 7 3471 0
	#   inc_indent();
	.loc 7 3466 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3471 0
	#   inc_indent();
.data
	.L4862:
	.string "| %d ->"
.text
	mov A, .L4862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4863
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4863:
	mov A, B
	add SP, 2
	.loc 7 3472 0
	# }
	mov A, .L4864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4864:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fs_cmp_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 3496 0
	# }
	.loc 7 3476 0
	#   const char* op_str;
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3472 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L4865:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3477 0
	#   switch (op) {
	.loc 7 3493 0
	#       error("oops");
	.loc 7 3476 0
	#   const char* op_str;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3493 0
	#       error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4866, A, 0
	jmp .L619
	.L4866:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4867, A, 0
	jmp .L620
	.L4867:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4868, A, 0
	jmp .L621
	.L4868:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4869, A, 0
	jmp .L622
	.L4869:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4870, A, 0
	jmp .L623
	.L4870:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4871, A, 0
	jmp .L624
	.L4871:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4872, A, 0
	jmp .L625
	.L4872:
	jmp .L626
	.loc 7 3479 0
	#       op_str = "="; break;
	.L619:
.data
	.L4873:
	.string "="
.text
	mov A, .L4873
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3480 0
	#     case JNE:
	jmp .L618
	.loc 7 3481 0
	#       op_str = "<>"; break;
	.L620:
.data
	.L4874:
	.string "<>"
.text
	mov A, .L4874
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3482 0
	#     case JLT:
	jmp .L618
	.loc 7 3483 0
	#       op_str = "<"; break;
	.L621:
.data
	.L4875:
	.string "<"
.text
	mov A, .L4875
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3484 0
	#     case JGT:
	jmp .L618
	.loc 7 3485 0
	#       op_str = ">"; break;
	.L622:
.data
	.L4876:
	.string ">"
.text
	mov A, .L4876
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3486 0
	#     case JLE:
	jmp .L618
	.loc 7 3487 0
	#       op_str = "<="; break;
	.L623:
.data
	.L4877:
	.string "<="
.text
	mov A, .L4877
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3488 0
	#     case JGE:
	jmp .L618
	.loc 7 3489 0
	#       op_str = ">="; break;
	.L624:
.data
	.L4878:
	.string ">="
.text
	mov A, .L4878
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3490 0
	#     case JMP:
	jmp .L618
	.loc 7 3491 0
	#       return true_str;
	.L625:
	.loc 7 3472 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 3493 0
	#       error("oops");
	.L626:
.data
	.L4879:
	.string "oops"
.text
	mov A, .L4879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L4880:
	mov A, B
	add SP, 1
	.L618:
	.loc 7 3496 0
	# }
	.loc 7 3472 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4881
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4881:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3477 0
	#   switch (op) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3496 0
	# }
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3496 0
	# }
	.loc 7 3472 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3496 0
	# }
.data
	.L4882:
	.string "%s %s %s"
.text
	mov A, .L4882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4883
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L4883:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
fs_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3562 0
	#     error("oops");
	.loc 7 3500 0
	#   case MOV:
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3562 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4884, A, 0
	jmp .L628
	.L4884:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4885, A, 0
	jmp .L629
	.L4885:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4886, A, 0
	jmp .L630
	.L4886:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4887, A, 0
	jmp .L631
	.L4887:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4888, A, 0
	jmp .L632
	.L4888:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4889, A, 0
	jmp .L633
	.L4889:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4890, A, 0
	jmp .L634
	.L4890:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4891, A, 0
	jmp .L635
	.L4891:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4892, A, 0
	jmp .L636
	.L4892:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4893, A, 0
	jmp .L637
	.L4893:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4894, A, 0
	jmp .L638
	.L4894:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4895, A, 0
	jmp .L639
	.L4895:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4896, A, 0
	jmp .L640
	.L4896:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4897, A, 0
	jmp .L641
	.L4897:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4898, A, 0
	jmp .L642
	.L4898:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4899, A, 0
	jmp .L643
	.L4899:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4900, A, 0
	jmp .L644
	.L4900:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4901, A, 0
	jmp .L645
	.L4901:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4902, A, 0
	jmp .L646
	.L4902:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4903, A, 0
	jmp .L647
	.L4903:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4904, A, 0
	jmp .L648
	.L4904:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4905, A, 0
	jmp .L649
	.L4905:
	jmp .L650
	.loc 7 3501 0
	#     emit_line("%s <- %s", reg_names[inst->dst.reg], src_str(inst));
	.L628:
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4906:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3501 0
	#     emit_line("%s <- %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3501 0
	#     emit_line("%s <- %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3501 0
	#     emit_line("%s <- %s", reg_names[inst->dst.reg], src_str(inst));
.data
	.L4907:
	.string "%s <- %s"
.text
	mov A, .L4907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4908
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4908:
	mov A, B
	add SP, 3
	.loc 7 3503 0
	# 
	jmp .L627
	.loc 7 3505 0
	#     emit_line("%s <- (%s + %s) &&& " UINT_MAX_STR,
	.L629:
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4909:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3505 0
	#     emit_line("%s <- (%s + %s) &&& " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3505 0
	#     emit_line("%s <- (%s + %s) &&& " UINT_MAX_STR,
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3505 0
	#     emit_line("%s <- (%s + %s) &&& " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3505 0
	#     emit_line("%s <- (%s + %s) &&& " UINT_MAX_STR,
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3505 0
	#     emit_line("%s <- (%s + %s) &&& " UINT_MAX_STR,
.data
	.L4910:
	.string "%s <- (%s + %s) &&& 16777215"
.text
	mov A, .L4910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4911:
	mov A, B
	add SP, 4
	.loc 7 3509 0
	# 
	jmp .L627
	.loc 7 3511 0
	#     emit_line("%s <- (%s - %s) &&& " UINT_MAX_STR,
	.L630:
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4912:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3511 0
	#     emit_line("%s <- (%s - %s) &&& " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3511 0
	#     emit_line("%s <- (%s - %s) &&& " UINT_MAX_STR,
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3511 0
	#     emit_line("%s <- (%s - %s) &&& " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3511 0
	#     emit_line("%s <- (%s - %s) &&& " UINT_MAX_STR,
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3511 0
	#     emit_line("%s <- (%s - %s) &&& " UINT_MAX_STR,
.data
	.L4913:
	.string "%s <- (%s - %s) &&& 16777215"
.text
	mov A, .L4913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4914
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4914:
	mov A, B
	add SP, 4
	.loc 7 3515 0
	# 
	jmp .L627
	.loc 7 3517 0
	#     emit_line("%s <- mem.[%s]", reg_names[inst->dst.reg], src_str(inst));
	.L631:
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4915:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3517 0
	#     emit_line("%s <- mem.[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3517 0
	#     emit_line("%s <- mem.[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3517 0
	#     emit_line("%s <- mem.[%s]", reg_names[inst->dst.reg], src_str(inst));
.data
	.L4916:
	.string "%s <- mem.[%s]"
.text
	mov A, .L4916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4917:
	mov A, B
	add SP, 3
	.loc 7 3519 0
	# 
	jmp .L627
	.loc 7 3521 0
	#     emit_line("Array.set mem %s %s", src_str(inst), reg_names[inst->dst.reg]);
	.L632:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3521 0
	#     emit_line("Array.set mem %s %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3521 0
	#     emit_line("Array.set mem %s %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4918:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3521 0
	#     emit_line("Array.set mem %s %s", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L4919:
	.string "Array.set mem %s %s"
.text
	mov A, .L4919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4920:
	mov A, B
	add SP, 3
	.loc 7 3523 0
	# 
	jmp .L627
	.loc 7 3525 0
	#     emit_line("printf \"%%c\" (char %s)", src_str(inst));
	.L633:
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4921
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4921:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3525 0
	#     emit_line("printf \"%%c\" (char %s)", src_str(inst));
.data
	.L4922:
	.string "printf \"%%c\" (char %s)"
.text
	mov A, .L4922
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4923:
	mov A, B
	add SP, 2
	.loc 7 3527 0
	# 
	jmp .L627
	.loc 7 3529 0
	#     emit_line("%s <- let x = Console.Read() in if x <> -1 then x else 0",
	.L634:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3529 0
	#     emit_line("%s <- let x = Console.Read() in if x <> -1 then x else 0",
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3529 0
	#     emit_line("%s <- let x = Console.Read() in if x <> -1 then x else 0",
.data
	.L4924:
	.string "%s <- let x = Console.Read() in if x <> -1 then x else 0"
.text
	mov A, .L4924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4925
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4925:
	mov A, B
	add SP, 2
	.loc 7 3532 0
	# 
	jmp .L627
	.loc 7 3534 0
	#     emit_line("Environment.Exit(0)");
	.L635:
.data
	.L4926:
	.string "Environment.Exit(0)"
.text
	mov A, .L4926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4927
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4927:
	mov A, B
	add SP, 1
	.loc 7 3536 0
	# 
	jmp .L627
	.loc 7 3538 0
	#     break;
	.L636:
	jmp .L627
	.loc 7 3541 0
	#   case NE:
	.L637:
	.L638:
	.L639:
	.L640:
	.L641:
	.L642:
.data
	.L4928:
	.string "true"
.text
	mov A, .L4928
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4929
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fs_cmp_str
	.L4929:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3541 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3541 0
	#   case NE:
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3541 0
	#   case NE:
.data
	.L4930:
	.string "%s <- if %s then 1 else 0"
.text
	mov A, .L4930
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4931:
	mov A, B
	add SP, 3
	.loc 7 3549 0
	# 
	jmp .L627
	.loc 7 3551 0
	#   case JNE:
	.L643:
	.L644:
	.L645:
	.L646:
	.L647:
	.L648:
	.L649:
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4932
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L4932:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3551 0
	#   case JNE:
.data
	.L4933:
	.string "true"
.text
	mov A, .L4933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3496 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4934
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fs_cmp_str
	.L4934:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3551 0
	#   case JNE:
.data
	.L4935:
	.string "if %s then pc <- %s - 1"
.text
	mov A, .L4935
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4936:
	mov A, B
	add SP, 3
	.loc 7 3560 0
	# 
	jmp .L627
	.loc 7 3562 0
	#     error("oops");
	.L650:
.data
	.L4937:
	.string "oops"
.text
	mov A, .L4937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L4938:
	mov A, B
	add SP, 1
	.L627:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_fs:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3592 0
	# }
	.loc 7 3568 0
	#   emit_line("");
.data
	.L4939:
	.string "open System"
.text
	mov A, .L4939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4940:
	mov A, B
	add SP, 1
	.loc 7 3569 0
	# 
.data
	.L4941:
	.string ""
.text
	mov A, .L4941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4942:
	mov A, B
	add SP, 1
	.loc 7 3571 0
	# 
	.loc 7 3562 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_fs
	.L4943:
	mov A, B
	add SP, 1
	.loc 7 3573 0
	#                                          fs_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, fs_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, fs_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, fs_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, fs_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3562 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L4944:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3579 0
	#   emit_line("[<EntryPoint>]");
.data
	.L4945:
	.string ""
.text
	mov A, .L4945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4946:
	mov A, B
	add SP, 1
	.loc 7 3580 0
	#   emit_line("let main argv =");
.data
	.L4947:
	.string "[<EntryPoint>]"
.text
	mov A, .L4947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4948:
	mov A, B
	add SP, 1
	.loc 7 3581 0
	#   inc_indent();
.data
	.L4949:
	.string "let main argv ="
.text
	mov A, .L4949
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4950:
	mov A, B
	add SP, 1
	.loc 7 3582 0
	# 
	mov A, .L4951
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4951:
	mov A, B
	.loc 7 3584 0
	#   inc_indent();
.data
	.L4952:
	.string "while true do"
.text
	mov A, .L4952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4953:
	mov A, B
	add SP, 1
	.loc 7 3585 0
	#   emit_line("match pc / %d with", CHUNKED_FUNC_SIZE);
	mov A, .L4954
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L4954:
	mov A, B
	.loc 7 3586 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3586 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L4955:
	.string "match pc / %d with"
.text
	mov A, .L4955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4956
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4956:
	mov A, B
	add SP, 2
	.loc 7 3588 0
	#   }
	.loc 7 3587 0
	#     emit_line("| %d -> func%d()", i, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 3588 0
	#   }
	.L651:
	.loc 7 3587 0
	#     emit_line("| %d -> func%d()", i, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3573 0
	#                                          fs_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L4957, A, 0
	jmp .L4958
	.L4957:
	.loc 7 3588 0
	#   }
	jmp .L653
	.L4958:
	.loc 7 3587 0
	#     emit_line("| %d -> func%d()", i, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3588 0
	#   }
.data
	.L4959:
	.string "| %d -> func%d()"
.text
	mov A, .L4959
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4960:
	mov A, B
	add SP, 3
	.L652:
	.loc 7 3587 0
	#     emit_line("| %d -> func%d()", i, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3588 0
	#   }
	jmp .L651
	.L653:
	.loc 7 3590 0
	#   dec_indent();
.data
	.L4961:
	.string "| _ -> failwith(\"oops\")"
.text
	mov A, .L4961
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4962
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4962:
	mov A, B
	add SP, 1
	.loc 7 3591 0
	#   emit_line("0");
	mov A, .L4963
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L4963:
	mov A, B
	.loc 7 3592 0
	# }
.data
	.L4964:
	.string "0"
.text
	mov A, .L4964
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4965:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
go_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3662 0
	#     error("oops");
	.loc 7 3600 0
	#   case MOV:
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3662 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4966, A, 0
	jmp .L655
	.L4966:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4967, A, 0
	jmp .L656
	.L4967:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4968, A, 0
	jmp .L657
	.L4968:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4969, A, 0
	jmp .L658
	.L4969:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4970, A, 0
	jmp .L659
	.L4970:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4971, A, 0
	jmp .L660
	.L4971:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4972, A, 0
	jmp .L661
	.L4972:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4973, A, 0
	jmp .L662
	.L4973:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4974, A, 0
	jmp .L663
	.L4974:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4975, A, 0
	jmp .L664
	.L4975:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4976, A, 0
	jmp .L665
	.L4976:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4977, A, 0
	jmp .L666
	.L4977:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4978, A, 0
	jmp .L667
	.L4978:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4979, A, 0
	jmp .L668
	.L4979:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4980, A, 0
	jmp .L669
	.L4980:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4981, A, 0
	jmp .L670
	.L4981:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4982, A, 0
	jmp .L671
	.L4982:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4983, A, 0
	jmp .L672
	.L4983:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4984, A, 0
	jmp .L673
	.L4984:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4985, A, 0
	jmp .L674
	.L4985:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4986, A, 0
	jmp .L675
	.L4986:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L4987, A, 0
	jmp .L676
	.L4987:
	jmp .L677
	.loc 7 3601 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.L655:
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4988:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3601 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3601 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3601 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
.data
	.L4989:
	.string "%s = %s"
.text
	mov A, .L4989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4990:
	mov A, B
	add SP, 3
	.loc 7 3603 0
	# 
	jmp .L654
	.loc 7 3605 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.L656:
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4991:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3605 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3605 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3605 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3605 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3605 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
.data
	.L4992:
	.string "%s = (%s + %s) & 16777215"
.text
	mov A, .L4992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4993:
	mov A, B
	add SP, 4
	.loc 7 3609 0
	# 
	jmp .L654
	.loc 7 3611 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.L657:
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4994:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3611 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3611 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3611 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3611 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3611 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
.data
	.L4995:
	.string "%s = (%s - %s) & 16777215"
.text
	mov A, .L4995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4996
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4996:
	mov A, B
	add SP, 4
	.loc 7 3615 0
	# 
	jmp .L654
	.loc 7 3617 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.L658:
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L4997:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3617 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3617 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3617 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
.data
	.L4998:
	.string "%s = mem[%s]"
.text
	mov A, .L4998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L4999
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L4999:
	mov A, B
	add SP, 3
	.loc 7 3619 0
	# 
	jmp .L654
	.loc 7 3621 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.L659:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3621 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3621 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5000:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3621 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L5001:
	.string "mem[%s] = %s"
.text
	mov A, .L5001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5002:
	mov A, B
	add SP, 3
	.loc 7 3623 0
	# 
	jmp .L654
	.loc 7 3625 0
	#     emit_line("buf[0] = byte(%s); os.Stdout.Write(buf[:])", src_str(inst));
	.L660:
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5003:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3625 0
	#     emit_line("buf[0] = byte(%s); os.Stdout.Write(buf[:])", src_str(inst));
.data
	.L5004:
	.string "buf[0] = byte(%s); os.Stdout.Write(buf[:])"
.text
	mov A, .L5004
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5005:
	mov A, B
	add SP, 2
	.loc 7 3627 0
	# 
	jmp .L654
	.loc 7 3629 0
	#       emit_line("if n, err := os.Stdin.Read(buf[:]); n != 0 && err == nil { %s = " GO_INT_TYPE "(buf[0]) } else { %s = 0 }",
	.L661:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3629 0
	#       emit_line("if n, err := os.Stdin.Read(buf[:]); n != 0 && err == nil { %s = " GO_INT_TYPE "(buf[0]) } else { %s = 0 }",
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3629 0
	#       emit_line("if n, err := os.Stdin.Read(buf[:]); n != 0 && err == nil { %s = " GO_INT_TYPE "(buf[0]) } else { %s = 0 }",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3629 0
	#       emit_line("if n, err := os.Stdin.Read(buf[:]); n != 0 && err == nil { %s = " GO_INT_TYPE "(buf[0]) } else { %s = 0 }",
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3629 0
	#       emit_line("if n, err := os.Stdin.Read(buf[:]); n != 0 && err == nil { %s = " GO_INT_TYPE "(buf[0]) } else { %s = 0 }",
.data
	.L5006:
	.string "if n, err := os.Stdin.Read(buf[:]); n != 0 && err == nil { %s = int32(buf[0]) } else { %s = 0 }"
.text
	mov A, .L5006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5007:
	mov A, B
	add SP, 3
	.loc 7 3632 0
	# 
	jmp .L654
	.loc 7 3634 0
	#     emit_line("os.Exit(0)");
	.L662:
.data
	.L5008:
	.string "os.Exit(0)"
.text
	mov A, .L5008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5009
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5009:
	mov A, B
	add SP, 1
	.loc 7 3636 0
	# 
	jmp .L654
	.loc 7 3638 0
	#     break;
	.L663:
	jmp .L654
	.loc 7 3641 0
	#   case NE:
	.L664:
	.L665:
	.L666:
	.L667:
	.L668:
	.L669:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3641 0
	#   case NE:
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3641 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3641 0
	#   case NE:
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3641 0
	#   case NE:
.data
	.L5010:
	.string "true"
.text
	mov A, .L5010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L5011:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3641 0
	#   case NE:
.data
	.L5012:
	.string "if %s { %s = 1 } else { %s = 0 }"
.text
	mov A, .L5012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5013:
	mov A, B
	add SP, 4
	.loc 7 3649 0
	# 
	jmp .L654
	.loc 7 3651 0
	#   case JNE:
	.L670:
	.L671:
	.L672:
	.L673:
	.L674:
	.L675:
	.L676:
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L5014:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3651 0
	#   case JNE:
.data
	.L5015:
	.string "true"
.text
	mov A, .L5015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3592 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L5016:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3651 0
	#   case JNE:
.data
	.L5017:
	.string "if %s { pc = %s - 1 }"
.text
	mov A, .L5017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5018:
	mov A, B
	add SP, 3
	.loc 7 3660 0
	# 
	jmp .L654
	.loc 7 3662 0
	#     error("oops");
	.L677:
.data
	.L5019:
	.string "oops"
.text
	mov A, .L5019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5020:
	mov A, B
	add SP, 1
	.L654:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
go_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 3672 0
	# }
	.loc 7 3668 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L5021:
	.string "copy(mem, []int32{"
.text
	mov A, .L5021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5022:
	mov A, B
	add SP, 1
	.loc 7 3670 0
	#   }
	.loc 7 3669 0
	#     emit_line(" %d,", data->v);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3670 0
	#   }
	.L678:
	.loc 7 3662 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	jeq .L5023, A, 0
	jmp .L5024
	.L5023:
	.loc 7 3670 0
	#   }
	jmp .L680
	.L5024:
	.loc 7 3662 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3670 0
	#   }
.data
	.L5025:
	.string " %d,"
.text
	mov A, .L5025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5026:
	mov A, B
	add SP, 2
	.L679:
	.loc 7 3669 0
	#     emit_line(" %d,", data->v);
	.loc 7 3662 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 3669 0
	#     emit_line(" %d,", data->v);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3670 0
	#   }
	jmp .L678
	.L680:
	.loc 7 3672 0
	# }
.data
	.L5027:
	.string "})"
.text
	mov A, .L5027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5028:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_go:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 3720 0
	# }
	.loc 7 3676 0
	#   emit_line("import \"os\"");
.data
	.L5029:
	.string "package main"
.text
	mov A, .L5029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5030:
	mov A, B
	add SP, 1
	.loc 7 3677 0
	# 
.data
	.L5031:
	.string "import \"os\""
.text
	mov A, .L5031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5032
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5032:
	mov A, B
	add SP, 1
	.loc 7 3679 0
	#   inc_indent();
.data
	.L5033:
	.string "func main() {"
.text
	mov A, .L5033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5034:
	mov A, B
	add SP, 1
	.loc 7 3680 0
	# 
	mov A, .L5035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5035:
	mov A, B
	.loc 7 3684 0
	#   }
	.loc 7 3682 0
	#     emit_line("var %s " GO_INT_TYPE, reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3684 0
	#   }
	.L681:
	.loc 7 3682 0
	#     emit_line("var %s " GO_INT_TYPE, reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5036, A, 0
	jmp .L5037
	.L5036:
	.loc 7 3684 0
	#   }
	jmp .L683
	.L5037:
	.loc 7 3683 0
	#     emit_line("_ = %s", reg_names[i]);
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3682 0
	#     emit_line("var %s " GO_INT_TYPE, reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3683 0
	#     emit_line("_ = %s", reg_names[i]);
.data
	.L5038:
	.string "var %s int32"
.text
	mov A, .L5038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5039
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5039:
	mov A, B
	add SP, 2
	.loc 7 3684 0
	#   }
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3682 0
	#     emit_line("var %s " GO_INT_TYPE, reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3684 0
	#   }
.data
	.L5040:
	.string "_ = %s"
.text
	mov A, .L5040
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5041
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5041:
	mov A, B
	add SP, 2
	.L682:
	.loc 7 3682 0
	#     emit_line("var %s " GO_INT_TYPE, reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3684 0
	#   }
	jmp .L681
	.L683:
	.loc 7 3686 0
	#   emit_line("_ = buf");
.data
	.L5042:
	.string "var buf [1]byte"
.text
	mov A, .L5042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5043
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5043:
	mov A, B
	add SP, 1
	.loc 7 3687 0
	# 
.data
	.L5044:
	.string "_ = buf"
.text
	mov A, .L5044
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5045:
	mov A, B
	add SP, 1
	.loc 7 3689 0
	#   go_init_state(module->data);
.data
	.L5046:
	.string "mem := make([]int32, 1<<24)"
.text
	mov A, .L5046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5047:
	mov A, B
	add SP, 1
	.loc 7 3690 0
	# 
	.loc 7 3672 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5048
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp go_init_state
	.L5048:
	mov A, B
	add SP, 1
	.loc 7 3692 0
	#   emit_line("for {");
.data
	.L5049:
	.string ""
.text
	mov A, .L5049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5050:
	mov A, B
	add SP, 1
	.loc 7 3693 0
	#   inc_indent();
.data
	.L5051:
	.string "for {"
.text
	mov A, .L5051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5052:
	mov A, B
	add SP, 1
	.loc 7 3694 0
	# 
	mov A, .L5053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5053:
	mov A, B
	.loc 7 3696 0
	#   inc_indent();
.data
	.L5054:
	.string "switch pc {"
.text
	mov A, .L5054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5055
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5055:
	mov A, B
	add SP, 1
	.loc 7 3697 0
	#   int prev_pc = -1;
	mov A, .L5056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5056:
	mov A, B
	.loc 7 3698 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3707 0
	#   }
	.loc 7 3699 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 3672 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3707 0
	#   }
	.L684:
	.loc 7 3699 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L5057, A, 0
	jmp .L5058
	.L5057:
	.loc 7 3707 0
	#   }
	jmp .L686
	.L5058:
	.loc 7 3705 0
	#     }
	.loc 7 3700 0
	#       dec_indent();
	.loc 7 3698 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3700 0
	#       dec_indent();
	.loc 7 3699 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5059, A, 0
	.loc 7 3705 0
	#     }
	.loc 7 3701 0
	#       emit_line("");
	mov A, .L5060
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5060:
	mov A, B
	.loc 7 3702 0
	#       emit_line("case %d:", inst->pc);
.data
	.L5061:
	.string ""
.text
	mov A, .L5061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5062:
	mov A, B
	add SP, 1
	.loc 7 3703 0
	#       prev_pc = inst->pc;
	.loc 7 3699 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3703 0
	#       prev_pc = inst->pc;
.data
	.L5063:
	.string "case %d:"
.text
	mov A, .L5063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5064:
	mov A, B
	add SP, 2
	.loc 7 3704 0
	#       inc_indent();
	.loc 7 3699 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3705 0
	#     }
	mov A, .L5065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5065:
	mov A, B
	.L5059:
	.loc 7 3707 0
	#   }
	.loc 7 3699 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp go_emit_inst
	.L5066:
	mov A, B
	add SP, 1
	.loc 7 3707 0
	#   }
	.L685:
	.loc 7 3699 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 3707 0
	#   }
	jmp .L684
	.L686:
	.loc 7 3710 0
	#   emit_line("}");
	mov A, .L5067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5067:
	mov A, B
	.loc 7 3711 0
	#   emit_line("pc++");
.data
	.L5068:
	.string "}"
.text
	mov A, .L5068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5069
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5069:
	mov A, B
	add SP, 1
	.loc 7 3712 0
	# 
.data
	.L5070:
	.string "pc++"
.text
	mov A, .L5070
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5071
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5071:
	mov A, B
	add SP, 1
	.loc 7 3715 0
	#   emit_line("}");
	mov A, .L5072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5072:
	mov A, B
	.loc 7 3716 0
	# 
.data
	.L5073:
	.string "}"
.text
	mov A, .L5073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5074:
	mov A, B
	add SP, 1
	.loc 7 3719 0
	#   emit_line("}");
	mov A, .L5075
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5075:
	mov A, B
	.loc 7 3720 0
	# }
.data
	.L5076:
	.string "}"
.text
	mov A, .L5076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5077
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5077:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
I_REG_NAMES:
	.data 1
	.L5078:
	.string ":1"
	.data 0
	.long .L5078
	.data 1
	.L5079:
	.string ":2"
	.data 0
	.long .L5079
	.data 1
	.L5080:
	.string ":3"
	.data 0
	.long .L5080
	.data 1
	.L5081:
	.string ":4"
	.data 0
	.long .L5081
	.data 1
	.L5082:
	.string ":5"
	.data 0
	.long .L5082
	.data 1
	.L5083:
	.string ":6"
	.data 0
	.long .L5083
	.data 1
	.L5084:
	.string ":7"
	.data 0
	.long .L5084
	.data 0
I_PUTC_TBL:
	.long 256
	.long 128
	.long 192
	.long 64
	.long 224
	.long 96
	.long 160
	.long 32
	.long 240
	.long 112
	.long 176
	.long 48
	.long 208
	.long 80
	.long 144
	.long 16
	.long 248
	.long 120
	.long 184
	.long 56
	.long 216
	.long 88
	.long 152
	.long 24
	.long 232
	.long 104
	.long 168
	.long 40
	.long 200
	.long 72
	.long 136
	.long 8
	.long 252
	.long 124
	.long 188
	.long 60
	.long 220
	.long 92
	.long 156
	.long 28
	.long 236
	.long 108
	.long 172
	.long 44
	.long 204
	.long 76
	.long 140
	.long 12
	.long 244
	.long 116
	.long 180
	.long 52
	.long 212
	.long 84
	.long 148
	.long 20
	.long 228
	.long 100
	.long 164
	.long 36
	.long 196
	.long 68
	.long 132
	.long 4
	.long 254
	.long 126
	.long 190
	.long 62
	.long 222
	.long 94
	.long 158
	.long 30
	.long 238
	.long 110
	.long 174
	.long 46
	.long 206
	.long 78
	.long 142
	.long 14
	.long 246
	.long 118
	.long 182
	.long 54
	.long 214
	.long 86
	.long 150
	.long 22
	.long 230
	.long 102
	.long 166
	.long 38
	.long 198
	.long 70
	.long 134
	.long 6
	.long 250
	.long 122
	.long 186
	.long 58
	.long 218
	.long 90
	.long 154
	.long 26
	.long 234
	.long 106
	.long 170
	.long 42
	.long 202
	.long 74
	.long 138
	.long 10
	.long 242
	.long 114
	.long 178
	.long 50
	.long 210
	.long 82
	.long 146
	.long 18
	.long 226
	.long 98
	.long 162
	.long 34
	.long 194
	.long 66
	.long 130
	.long 2
	.long 255
	.long 127
	.long 191
	.long 63
	.long 223
	.long 95
	.long 159
	.long 31
	.long 239
	.long 111
	.long 175
	.long 47
	.long 207
	.long 79
	.long 143
	.long 15
	.long 247
	.long 119
	.long 183
	.long 55
	.long 215
	.long 87
	.long 151
	.long 23
	.long 231
	.long 103
	.long 167
	.long 39
	.long 199
	.long 71
	.long 135
	.long 7
	.long 251
	.long 123
	.long 187
	.long 59
	.long 219
	.long 91
	.long 155
	.long 27
	.long 235
	.long 107
	.long 171
	.long 43
	.long 203
	.long 75
	.long 139
	.long 11
	.long 243
	.long 115
	.long 179
	.long 51
	.long 211
	.long 83
	.long 147
	.long 19
	.long 227
	.long 99
	.long 163
	.long 35
	.long 195
	.long 67
	.long 131
	.long 3
	.long 253
	.long 125
	.long 189
	.long 61
	.long 221
	.long 93
	.long 157
	.long 29
	.long 237
	.long 109
	.long 173
	.long 45
	.long 205
	.long 77
	.long 141
	.long 13
	.long 245
	.long 117
	.long 181
	.long 53
	.long 213
	.long 85
	.long 149
	.long 21
	.long 229
	.long 101
	.long 165
	.long 37
	.long 197
	.long 69
	.long 133
	.long 5
	.long 249
	.long 121
	.long 185
	.long 57
	.long 217
	.long 89
	.long 153
	.long 25
	.long 233
	.long 105
	.long 169
	.long 41
	.long 201
	.long 73
	.long 137
	.long 9
	.long 241
	.long 113
	.long 177
	.long 49
	.long 209
	.long 81
	.long 145
	.long 17
	.long 225
	.long 97
	.long 161
	.long 33
	.long 193
	.long 65
	.long 129
	.long 1
	.text
i_interleave:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3801 0
	# }
	.loc 7 3793 0
	#   uint m = 1;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3794 0
	#   while (a > 0 || b > 0) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 1
	store A, B
	.loc 7 3799 0
	#   }
	.L687:
	.loc 7 3795 0
	#     r += (a % 2 * 2 + b % 2) * m;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3720 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 1
	jne .L5085, A, 0
	.loc 7 3795 0
	#     r += (a % 2 * 2 + b % 2) * m;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3720 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L5085:
	mov A, B
	jeq .L5086, A, 0
	.loc 7 3799 0
	#   }
	.loc 7 3796 0
	#     m *= 4;
	.loc 7 3793 0
	#   uint m = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3796 0
	#     m *= 4;
	.loc 7 3720 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3796 0
	#     m *= 4;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L5087:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5088:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3720 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3796 0
	#     m *= 4;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L5089:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3794 0
	#   while (a > 0 || b > 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5090:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3797 0
	#     a /= 2;
	.loc 7 3794 0
	#   while (a > 0 || b > 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3797 0
	#     a /= 2;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5091:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3798 0
	#     b /= 2;
	.loc 7 3720 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3798 0
	#     b /= 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L5092:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 3799 0
	#   }
	.loc 7 3720 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3799 0
	#   }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L5093:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	jmp .L5094
	.L5086:
	jmp .L688
	.L5094:
	jmp .L687
	.L688:
	.loc 7 3801 0
	# }
	.loc 7 3793 0
	#   uint m = 1;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	i_emit_please_cnt:

	.long 0
	.text
i_emit_line:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3815 0
	# }
	.loc 7 3806 0
	#   va_start(ap, fmt);
	.loc 7 3807 0
	#   char* r = vformat(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3808 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 7 3806 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3801 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5095
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vformat
	.L5095:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3813 0
	#   }
	.loc 7 3811 0
	#     printf("PLEASE ");
	.loc 7 3801 0
	# }
	mov B, i_emit_please_cnt
	load A, B
	add A, 1
	mov B, i_emit_please_cnt
	store A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3811 0
	#     printf("PLEASE ");
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5096, A, 0
	.loc 7 3813 0
	#   }
	.loc 7 3812 0
	#     i_emit_please_cnt = 0;
.data
	.L5097:
	.string "PLEASE "
.text
	mov A, .L5097
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5098
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L5098:
	mov A, B
	add SP, 1
	.loc 7 3813 0
	#   }
	mov A, 0
	mov B, i_emit_please_cnt
	store A, B
	.L5096:
	.loc 7 3815 0
	# }
	.loc 7 3808 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3815 0
	# }
.data
	.L5099:
	.string "DO %s\n"
.text
	mov A, .L5099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L5100:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_imm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3819 0
	# #if 0
	.loc 7 3815 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3819 0
	# #if 0
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L5101:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5102:
	.string "#%d"
.text
	mov A, .L5102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L5103:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 3861 0
	#   }
	.loc 7 3844 0
	#     }
	.loc 7 3838 0
	#     if (i == SP) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 3844 0
	#     }
	.L689:
	.loc 7 3838 0
	#     if (i == SP) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5104, A, 0
	jmp .L5105
	.L5104:
	.loc 7 3844 0
	#     }
	jmp .L691
	.L5105:
	.loc 7 3839 0
	#       // INTERCAL backend cannot access mem[65535].
	.loc 7 3838 0
	#     if (i == SP) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5106, A, 0
	.loc 7 3842 0
	#     } else {
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3838 0
	#     if (i == SP) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3842 0
	#     } else {
.data
	.L5107:
	.string "%s <- #65534"
.text
	mov A, .L5107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5108:
	mov A, B
	add SP, 2
	jmp .L5109
	.L5106:
	.loc 7 3844 0
	#     }
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3838 0
	#     if (i == SP) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3844 0
	#     }
.data
	.L5110:
	.string "%s <- #0"
.text
	mov A, .L5110
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5111:
	mov A, B
	add SP, 2
	.L5109:
	.L690:
	.loc 7 3838 0
	#     if (i == SP) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3844 0
	#     }
	jmp .L689
	.L691:
	.loc 7 3847 0
	#   i_emit_line(":12 <- #0");
.data
	.L5112:
	.string ":10 <- #0$#65535"
.text
	mov A, .L5112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5113
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5113:
	mov A, B
	add SP, 1
	.loc 7 3848 0
	#   i_emit_line(":13 <- #0");
.data
	.L5114:
	.string ":12 <- #0"
.text
	mov A, .L5114
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5115
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5115:
	mov A, B
	add SP, 1
	.loc 7 3849 0
	# 
.data
	.L5116:
	.string ":13 <- #0"
.text
	mov A, .L5116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5117:
	mov A, B
	add SP, 1
	.loc 7 3852 0
	#   for (int mp = 1; data; data = data->next, mp++) {
.data
	.L5118:
	.string ";1 <- #65535"
.text
	mov A, .L5118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5119:
	mov A, B
	add SP, 1
	.loc 7 3854 0
	#   }
	.loc 7 3853 0
	#     i_emit_line(";1 SUB #%d <- %s", mp, i_imm(data->v));
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 1
	store A, B
	.loc 7 3854 0
	#   }
	.L692:
	.loc 7 3819 0
	# #if 0
	mov B, BP
	add B, 2
	load A, B
	jeq .L5120, A, 0
	jmp .L5121
	.L5120:
	.loc 7 3854 0
	#   }
	jmp .L694
	.L5121:
	.loc 7 3819 0
	# #if 0
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5122
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_imm
	.L5122:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3853 0
	#     i_emit_line(";1 SUB #%d <- %s", mp, i_imm(data->v));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3854 0
	#   }
.data
	.L5123:
	.string ";1 SUB #%d <- %s"
.text
	mov A, .L5123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5124:
	mov A, B
	add SP, 3
	.L693:
	.loc 7 3853 0
	#     i_emit_line(";1 SUB #%d <- %s", mp, i_imm(data->v));
	.loc 7 3819 0
	# #if 0
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 3853 0
	#     i_emit_line(";1 SUB #%d <- %s", mp, i_imm(data->v));
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3854 0
	#   }
	jmp .L692
	.L694:
	.loc 7 3857 0
	#   i_emit_line(";3 <- #%d", i_interleave(1, 255) + 1);
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_interleave
	.L5125:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5126:
	.string ";2 <- #%d"
.text
	mov A, .L5126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5127:
	mov A, B
	add SP, 2
	.loc 7 3858 0
	#   for (int i = 1; i < 256; i++) {
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_interleave
	.L5128:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5129:
	.string ";3 <- #%d"
.text
	mov A, .L5129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5130:
	mov A, B
	add SP, 2
	.loc 7 3861 0
	#   }
	.loc 7 3859 0
	#     i_emit_line(";2 SUB #%d <- #%d", i_interleave(1, i), I_PUTC_TBL[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 1
	store A, B
	.loc 7 3861 0
	#   }
	.L695:
	.loc 7 3859 0
	#     i_emit_line(";2 SUB #%d <- #%d", i_interleave(1, i), I_PUTC_TBL[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5131, A, 0
	jmp .L5132
	.L5131:
	.loc 7 3861 0
	#   }
	jmp .L697
	.L5132:
	.loc 7 3860 0
	#     i_emit_line(";3 SUB #%d <- #%d", i_interleave(1, I_PUTC_TBL[i] % 256), i);
	.loc 7 3720 0
	# }
	mov A, I_PUTC_TBL
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3859 0
	#     i_emit_line(";2 SUB #%d <- #%d", i_interleave(1, i), I_PUTC_TBL[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3860 0
	#     i_emit_line(";3 SUB #%d <- #%d", i_interleave(1, I_PUTC_TBL[i] % 256), i);
	.loc 7 3859 0
	#     i_emit_line(";2 SUB #%d <- #%d", i_interleave(1, i), I_PUTC_TBL[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3860 0
	#     i_emit_line(";3 SUB #%d <- #%d", i_interleave(1, I_PUTC_TBL[i] % 256), i);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_interleave
	.L5133:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5134:
	.string ";2 SUB #%d <- #%d"
.text
	mov A, .L5134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5135:
	mov A, B
	add SP, 3
	.loc 7 3861 0
	#   }
	.loc 7 3859 0
	#     i_emit_line(";2 SUB #%d <- #%d", i_interleave(1, i), I_PUTC_TBL[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3861 0
	#   }
	.loc 7 3720 0
	# }
	mov A, I_PUTC_TBL
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3859 0
	#     i_emit_line(";2 SUB #%d <- #%d", i_interleave(1, i), I_PUTC_TBL[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3861 0
	#   }
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L5136:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_interleave
	.L5137:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5138:
	.string ";3 SUB #%d <- #%d"
.text
	mov A, .L5138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5139:
	mov A, B
	add SP, 3
	.L696:
	.loc 7 3859 0
	#     i_emit_line(";2 SUB #%d <- #%d", i_interleave(1, i), I_PUTC_TBL[i]);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 3861 0
	#   }
	jmp .L695
	.L697:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_value_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3871 0
	#   }
	.loc 7 3866 0
	#     return I_REG_NAMES[v->reg];
	.loc 7 3861 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5140, A, 0
	.loc 7 3867 0
	#   } else if (v->type == IMM) {
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3867 0
	#   } else if (v->type == IMM) {
	.loc 7 3861 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L5141
	.L5140:
	.loc 7 3871 0
	#   }
	.loc 7 3867 0
	#   } else if (v->type == IMM) {
	.loc 7 3861 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5142, A, 0
	.loc 7 3869 0
	#   } else {
	.loc 7 3861 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5143
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_imm
	.L5143:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L5144
	.L5142:
	.loc 7 3871 0
	#   }
.data
	.L5145:
	.string "invalid value"
.text
	mov A, .L5145
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5146:
	mov A, B
	add SP, 1
	.L5144:
	.L5141:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_src_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3876 0
	# }
	.loc 7 3871 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_value_str
	.L5147:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_bitop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3882 0
	# }
	.loc 7 3881 0
	#   i_emit_line(":%d <- ':%s%d' ~ :10", dst, op, dst);
	.loc 7 3876 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3881 0
	#   i_emit_line(":%d <- ':%s%d' ~ :10", dst, op, dst);
.data
	.L5148:
	.string ":%d <- %s $ %s"
.text
	mov A, .L5148
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5149:
	mov A, B
	add SP, 4
	.loc 7 3882 0
	# }
	.loc 7 3876 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3882 0
	# }
.data
	.L5150:
	.string ":%d <- ':%s%d' ~ :10"
.text
	mov A, .L5150
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5151
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5151:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_and:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3886 0
	# }
	.loc 7 3882 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3886 0
	# }
.data
	.L5152:
	.string "&"
.text
	mov A, .L5152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_bitop
	.L5153:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_xor:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3890 0
	# }
	.loc 7 3886 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3890 0
	# }
.data
	.L5154:
	.string "V\b-"
.text
	mov A, .L5154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_bitop
	.L5155:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_add:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3894 0
	# }
	.loc 7 3890 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3894 0
	# }
.data
	.L5156:
	.string "(%d) NEXT"
.text
	mov A, .L5156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5157:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_sub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3902 0
	# }
	.loc 7 3898 0
	#   i_emit_line(":9 <- :9 ~ #65535");
.data
	.L5158:
	.string "#65535"
.text
	mov A, .L5158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5159:
	.string ":9"
.text
	mov A, .L5159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_xor
	.L5160:
	mov A, B
	add SP, 3
	.loc 7 3899 0
	#   i_emit_add(add_fn);
.data
	.L5161:
	.string ":9 <- :9 ~ #65535"
.text
	mov A, .L5161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5162:
	mov A, B
	add SP, 1
	.loc 7 3900 0
	#   i_emit_line(":9 <- #1");
	.loc 7 3894 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_add
	.L5163:
	mov A, B
	add SP, 1
	.loc 7 3901 0
	#   i_emit_add(add_fn);
.data
	.L5164:
	.string ":9 <- #1"
.text
	mov A, .L5164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5165:
	mov A, B
	add SP, 1
	.loc 7 3902 0
	# }
	.loc 7 3894 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5166
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_add
	.L5166:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_intercal_boolize:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3909 0
	# }
	.loc 7 3907 0
	#   i_emit_line(":8 <- :V\x08-8");
.data
	.L5167:
	.string ":8 <- :8$#1"
.text
	mov A, .L5167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5168
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5168:
	mov A, B
	add SP, 1
	.loc 7 3908 0
	#   i_emit_line(":8 <- :8 ~ #3");
.data
	.L5169:
	.string ":8 <- :V\b-8"
.text
	mov A, .L5169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5170:
	mov A, B
	add SP, 1
	.loc 7 3909 0
	# }
.data
	.L5171:
	.string ":8 <- :8 ~ #3"
.text
	mov A, .L5171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5172:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 3944 0
	#       error("oops %d", op);
	.loc 7 3913 0
	#   if (op == JGT || op == JLE) {
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3909 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5173
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L5173:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3920 0
	#   }
	.loc 7 3914 0
	#     op = op == JGT ? JLT : JGE;
	.loc 7 3913 0
	#   if (op == JGT || op == JLE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L5174, A, 0
	.loc 7 3914 0
	#     op = op == JGT ? JLT : JGE;
	.loc 7 3913 0
	#   if (op == JGT || op == JLE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5174:
	mov A, B
	jeq .L5175, A, 0
	.loc 7 3917 0
	#   } else {
	.loc 7 3915 0
	#     i_emit_line(":9 <- %s", I_REG_NAMES[inst->dst.reg]);
	.loc 7 3913 0
	#   if (op == JGT || op == JLE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5176, A, 0
	mov A, 10
	jmp .L5177
	.L5176:
	mov A, 13
	.L5177:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 3916 0
	#     i_emit_line(":8 <- %s", i_src_str(inst));
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3916 0
	#     i_emit_line(":8 <- %s", i_src_str(inst));
	.loc 7 3909 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3916 0
	#     i_emit_line(":8 <- %s", i_src_str(inst));
.data
	.L5178:
	.string ":9 <- %s"
.text
	mov A, .L5178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5179:
	mov A, B
	add SP, 2
	.loc 7 3917 0
	#   } else {
	.loc 7 3909 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_src_str
	.L5180:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3917 0
	#   } else {
.data
	.L5181:
	.string ":8 <- %s"
.text
	mov A, .L5181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5182:
	mov A, B
	add SP, 2
	jmp .L5183
	.L5175:
	.loc 7 3920 0
	#   }
	.loc 7 3919 0
	#     i_emit_line(":9 <- %s", i_src_str(inst));
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3919 0
	#     i_emit_line(":9 <- %s", i_src_str(inst));
	.loc 7 3909 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3919 0
	#     i_emit_line(":9 <- %s", i_src_str(inst));
.data
	.L5184:
	.string ":8 <- %s"
.text
	mov A, .L5184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5185:
	mov A, B
	add SP, 2
	.loc 7 3920 0
	#   }
	.loc 7 3909 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_src_str
	.L5186:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3920 0
	#   }
.data
	.L5187:
	.string ":9 <- %s"
.text
	mov A, .L5187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5188:
	mov A, B
	add SP, 2
	.L5183:
	.loc 7 3922 0
	# 
	.loc 7 3909 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_sub
	.L5189:
	mov A, B
	add SP, 1
	.loc 7 3944 0
	#       error("oops %d", op);
	.loc 7 3913 0
	#   if (op == JGT || op == JLE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 3944 0
	#       error("oops %d", op);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5190, A, 0
	jmp .L699
	.L5190:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5191, A, 0
	jmp .L700
	.L5191:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5192, A, 0
	jmp .L701
	.L5192:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5193, A, 0
	jmp .L702
	.L5193:
	jmp .L703
	.loc 7 3925 0
	#       i_emit_line(":8 <- #65535 ~ :8");
	.L699:
.data
	.L5194:
	.string ":8 <- #65535 ~ :8"
.text
	mov A, .L5194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5195:
	mov A, B
	add SP, 1
	.loc 7 3927 0
	#       i_emit_xor(8, ":8", "#1");
.data
	.L5196:
	.string ":8 <- :8 ~ #1"
.text
	mov A, .L5196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5197:
	mov A, B
	add SP, 1
	.loc 7 3928 0
	#       break;
.data
	.L5198:
	.string "#1"
.text
	mov A, .L5198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5199:
	.string ":8"
.text
	mov A, .L5199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_xor
	.L5200:
	mov A, B
	add SP, 3
	.loc 7 3929 0
	# 
	jmp .L698
	.loc 7 3931 0
	#       i_emit_line(":8 <- #65535 ~ :8");
	.L700:
.data
	.L5201:
	.string ":8 <- #65535 ~ :8"
.text
	mov A, .L5201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5202:
	mov A, B
	add SP, 1
	.loc 7 3933 0
	#       break;
.data
	.L5203:
	.string ":8 <- :8 ~ #1"
.text
	mov A, .L5203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5204:
	mov A, B
	add SP, 1
	.loc 7 3934 0
	# 
	jmp .L698
	.loc 7 3936 0
	#       i_emit_xor(8, ":8", "#32768");
	.L701:
.data
	.L5205:
	.string "#32768"
.text
	mov A, .L5205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5206:
	.string ":8"
.text
	mov A, .L5206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_xor
	.L5207:
	mov A, B
	add SP, 3
	.loc 7 3939 0
	#       i_emit_and(8, ":8", "#32768");
	.L702:
.data
	.L5208:
	.string "#32768"
.text
	mov A, .L5208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5209:
	.string ":8"
.text
	mov A, .L5209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_and
	.L5210:
	mov A, B
	add SP, 3
	.loc 7 3941 0
	#       break;
.data
	.L5211:
	.string ":8 <- #32768 ~ :8"
.text
	mov A, .L5211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5212:
	mov A, B
	add SP, 1
	.loc 7 3942 0
	# 
	jmp .L698
	.loc 7 3944 0
	#       error("oops %d", op);
	.L703:
	.loc 7 3913 0
	#   if (op == JGT || op == JLE) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3944 0
	#       error("oops %d", op);
.data
	.L5213:
	.string "oops %d"
.text
	mov A, .L5213
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5214:
	mov A, B
	add SP, 2
	.L698:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_jmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 3954 0
	#   }
	.loc 7 3950 0
	#     i_emit_line(":11 <- %s", I_REG_NAMES[inst->jmp.reg]);
	.loc 7 3944 0
	#       error("oops %d", op);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5215, A, 0
	.loc 7 3952 0
	#   } else {
	.loc 7 3951 0
	#     i_emit_line("(%d) NEXT", reg_jmp);
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3951 0
	#     i_emit_line("(%d) NEXT", reg_jmp);
	.loc 7 3944 0
	#       error("oops %d", op);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3951 0
	#     i_emit_line("(%d) NEXT", reg_jmp);
.data
	.L5216:
	.string ":11 <- %s"
.text
	mov A, .L5216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5217:
	mov A, B
	add SP, 2
	.loc 7 3952 0
	#   } else {
	.loc 7 3944 0
	#       error("oops %d", op);
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3952 0
	#   } else {
.data
	.L5218:
	.string "(%d) NEXT"
.text
	mov A, .L5218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5219:
	mov A, B
	add SP, 2
	jmp .L5220
	.L5215:
	.loc 7 3954 0
	#   }
	.loc 7 3944 0
	#       error("oops %d", op);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3954 0
	#   }
.data
	.L5221:
	.string "(%d) NEXT"
.text
	mov A, .L5221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5222
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5222:
	mov A, B
	add SP, 2
	.L5220:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 4088 0
	#     error("oops");
	.loc 7 3959 0
	#   case MOV:
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5223, A, 0
	jmp .L705
	.L5223:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5224, A, 0
	jmp .L706
	.L5224:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5225, A, 0
	jmp .L707
	.L5225:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5226, A, 0
	jmp .L708
	.L5226:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5227, A, 0
	jmp .L709
	.L5227:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5228, A, 0
	jmp .L710
	.L5228:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5229, A, 0
	jmp .L711
	.L5229:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5230, A, 0
	jmp .L715
	.L5230:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5231, A, 0
	jmp .L716
	.L5231:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5232, A, 0
	jmp .L717
	.L5232:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5233, A, 0
	jmp .L718
	.L5233:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5234, A, 0
	jmp .L719
	.L5234:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5235, A, 0
	jmp .L720
	.L5235:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5236, A, 0
	jmp .L721
	.L5236:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5237, A, 0
	jmp .L722
	.L5237:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5238, A, 0
	jmp .L723
	.L5238:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5239, A, 0
	jmp .L724
	.L5239:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5240, A, 0
	jmp .L725
	.L5240:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5241, A, 0
	jmp .L726
	.L5241:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5242, A, 0
	jmp .L727
	.L5242:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5243, A, 0
	jmp .L728
	.L5243:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5244, A, 0
	jmp .L729
	.L5244:
	jmp .L730
	.loc 7 3960 0
	#     i_emit_line("%s <- %s", I_REG_NAMES[inst->dst.reg], i_src_str(inst));
	.L705:
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_src_str
	.L5245:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3960 0
	#     i_emit_line("%s <- %s", I_REG_NAMES[inst->dst.reg], i_src_str(inst));
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3960 0
	#     i_emit_line("%s <- %s", I_REG_NAMES[inst->dst.reg], i_src_str(inst));
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3960 0
	#     i_emit_line("%s <- %s", I_REG_NAMES[inst->dst.reg], i_src_str(inst));
.data
	.L5246:
	.string "%s <- %s"
.text
	mov A, .L5246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5247:
	mov A, B
	add SP, 3
	.loc 7 3962 0
	# 
	jmp .L704
	.loc 7 3964 0
	#     i_emit_line(":8 <- %s", I_REG_NAMES[inst->dst.reg]);
	.L706:
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3964 0
	#     i_emit_line(":8 <- %s", I_REG_NAMES[inst->dst.reg]);
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3964 0
	#     i_emit_line(":8 <- %s", I_REG_NAMES[inst->dst.reg]);
.data
	.L5248:
	.string ":8 <- %s"
.text
	mov A, .L5248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5249:
	mov A, B
	add SP, 2
	.loc 7 3966 0
	#     i_emit_add(add_fn);
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_src_str
	.L5250:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3966 0
	#     i_emit_add(add_fn);
.data
	.L5251:
	.string ":9 <- %s"
.text
	mov A, .L5251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5252:
	mov A, B
	add SP, 2
	.loc 7 3967 0
	#     i_emit_line("%s <- :8", I_REG_NAMES[inst->dst.reg]);
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_add
	.L5253:
	mov A, B
	add SP, 1
	.loc 7 3968 0
	#     break;
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3968 0
	#     break;
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3968 0
	#     break;
.data
	.L5254:
	.string "%s <- :8"
.text
	mov A, .L5254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5255:
	mov A, B
	add SP, 2
	.loc 7 3969 0
	# 
	jmp .L704
	.loc 7 3971 0
	#     i_emit_line(":8 <- %s", I_REG_NAMES[inst->dst.reg]);
	.L707:
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3971 0
	#     i_emit_line(":8 <- %s", I_REG_NAMES[inst->dst.reg]);
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3971 0
	#     i_emit_line(":8 <- %s", I_REG_NAMES[inst->dst.reg]);
.data
	.L5256:
	.string ":8 <- %s"
.text
	mov A, .L5256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5257:
	mov A, B
	add SP, 2
	.loc 7 3973 0
	#     i_emit_sub(add_fn);
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_src_str
	.L5258:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3973 0
	#     i_emit_sub(add_fn);
.data
	.L5259:
	.string ":9 <- %s"
.text
	mov A, .L5259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5260
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5260:
	mov A, B
	add SP, 2
	.loc 7 3974 0
	#     i_emit_line("%s <- :8", I_REG_NAMES[inst->dst.reg]);
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_sub
	.L5261:
	mov A, B
	add SP, 1
	.loc 7 3975 0
	#     break;
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3975 0
	#     break;
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3975 0
	#     break;
.data
	.L5262:
	.string "%s <- :8"
.text
	mov A, .L5262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5263:
	mov A, B
	add SP, 2
	.loc 7 3976 0
	# 
	jmp .L704
	.loc 7 3978 0
	#     i_emit_line(":8 <- %s", i_src_str(inst));
	.L708:
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_src_str
	.L5264:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3978 0
	#     i_emit_line(":8 <- %s", i_src_str(inst));
.data
	.L5265:
	.string ":8 <- %s"
.text
	mov A, .L5265
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5266:
	mov A, B
	add SP, 2
	.loc 7 3980 0
	#     i_emit_add(add_fn);
.data
	.L5267:
	.string ":9 <- #1"
.text
	mov A, .L5267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5268:
	mov A, B
	add SP, 1
	.loc 7 3981 0
	#     i_emit_line("%s <- ;1 SUB :8", I_REG_NAMES[inst->dst.reg]);
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5269
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_add
	.L5269:
	mov A, B
	add SP, 1
	.loc 7 3982 0
	#     break;
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3982 0
	#     break;
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3982 0
	#     break;
.data
	.L5270:
	.string "%s <- ;1 SUB :8"
.text
	mov A, .L5270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5271
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5271:
	mov A, B
	add SP, 2
	.loc 7 3983 0
	# 
	jmp .L704
	.loc 7 3985 0
	#     i_emit_line(":8 <- %s", i_src_str(inst));
	.L709:
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5272
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_src_str
	.L5272:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3985 0
	#     i_emit_line(":8 <- %s", i_src_str(inst));
.data
	.L5273:
	.string ":8 <- %s"
.text
	mov A, .L5273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5274:
	mov A, B
	add SP, 2
	.loc 7 3987 0
	#     i_emit_add(add_fn);
.data
	.L5275:
	.string ":9 <- #1"
.text
	mov A, .L5275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5276:
	mov A, B
	add SP, 1
	.loc 7 3988 0
	#     i_emit_line(";1 SUB :8 <- %s", I_REG_NAMES[inst->dst.reg]);
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_add
	.L5277:
	mov A, B
	add SP, 1
	.loc 7 3989 0
	#     break;
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3989 0
	#     break;
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3989 0
	#     break;
.data
	.L5278:
	.string ";1 SUB :8 <- %s"
.text
	mov A, .L5278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5279:
	mov A, B
	add SP, 2
	.loc 7 3990 0
	# 
	jmp .L704
	.loc 7 3992 0
	# #if defined(USE_C_INTERCAL)
	.L710:
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_src_str
	.L5280:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 3992 0
	# #if defined(USE_C_INTERCAL)
.data
	.L5281:
	.string ":9 <- %s~#255"
.text
	mov A, .L5281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5282:
	mov A, B
	add SP, 2
	.loc 7 3995 0
	#     i_emit_line(":8 <- ;2 SUB :9");
.data
	.L5283:
	.string ":9 <- #1$:9"
.text
	mov A, .L5283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5284:
	mov A, B
	add SP, 1
	.loc 7 3996 0
	#     i_emit_line(":9 <- :12");
.data
	.L5285:
	.string ":8 <- ;2 SUB :9"
.text
	mov A, .L5285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5286:
	mov A, B
	add SP, 1
	.loc 7 3997 0
	#     i_emit_line(":12 <- :8");
.data
	.L5287:
	.string ":9 <- :12"
.text
	mov A, .L5287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5288:
	mov A, B
	add SP, 1
	.loc 7 3998 0
	#     i_emit_sub(add_fn);
.data
	.L5289:
	.string ":12 <- :8"
.text
	mov A, .L5289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5290:
	mov A, B
	add SP, 1
	.loc 7 3999 0
	#     i_emit_line(";4 <- #1");
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_sub
	.L5291:
	mov A, B
	add SP, 1
	.loc 7 4000 0
	#     i_emit_line(";4 SUB #1 <- :8");
.data
	.L5292:
	.string ";4 <- #1"
.text
	mov A, .L5292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5293:
	mov A, B
	add SP, 1
	.loc 7 4001 0
	#     i_emit_line("READ OUT ;4");
.data
	.L5294:
	.string ";4 SUB #1 <- :8"
.text
	mov A, .L5294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5295:
	mov A, B
	add SP, 1
	.loc 7 4002 0
	# #else
.data
	.L5296:
	.string "READ OUT ;4"
.text
	mov A, .L5296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5297:
	mov A, B
	add SP, 1
	.loc 7 4010 0
	# 
	jmp .L704
	.loc 7 4012 0
	#     i_emit_line(";4 <- #1");
	.L711:
.data
	.L5298:
	.string ";4 <- #1"
.text
	mov A, .L5298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5299:
	mov A, B
	add SP, 1
	.loc 7 4014 0
	#     i_emit_line("WRITE IN ;4");
.data
	.L5300:
	.string ";4 SUB #1 <- #0"
.text
	mov A, .L5300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5301:
	mov A, B
	add SP, 1
	.loc 7 4015 0
	# #if defined(USE_C_INTERCAL)
.data
	.L5302:
	.string "WRITE IN ;4"
.text
	mov A, .L5302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5303:
	mov A, B
	add SP, 1
	.loc 7 4017 0
	# 
.data
	.L5304:
	.string ":8 <- ;4 SUB #1"
.text
	mov A, .L5304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5305:
	mov A, B
	add SP, 1
	.loc 7 4019 0
	#     for (int i = 0; i < 16; i++) {
.data
	.L5306:
	.string ":7 <- :8 ~ #256"
.text
	mov A, .L5306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5307:
	mov A, B
	add SP, 1
	.loc 7 4022 0
	#     }
	.loc 7 4020 0
	#       i_emit_line(":7 <- :7"I_INT":7");
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 4022 0
	#     }
	.L712:
	.loc 7 4020 0
	#       i_emit_line(":7 <- :7"I_INT":7");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5308, A, 0
	jmp .L5309
	.L5308:
	.loc 7 4022 0
	#     }
	jmp .L714
	.L5309:
	.loc 7 4021 0
	#       i_emit_line(":7 <- :7 ~ #65535");
.data
	.L5310:
	.string ":7 <- :7$:7"
.text
	mov A, .L5310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5311:
	mov A, B
	add SP, 1
	.loc 7 4022 0
	#     }
.data
	.L5312:
	.string ":7 <- :7 ~ #65535"
.text
	mov A, .L5312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5313:
	mov A, B
	add SP, 1
	.L713:
	.loc 7 4020 0
	#       i_emit_line(":7 <- :7"I_INT":7");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4022 0
	#     }
	jmp .L712
	.L714:
	.loc 7 4024 0
	#     i_emit_line(":7 <- :7 ~ #255");
.data
	.L5314:
	.string "#255"
.text
	mov A, .L5314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5315:
	.string ":7"
.text
	mov A, .L5315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_xor
	.L5316:
	mov A, B
	add SP, 3
	.loc 7 4025 0
	# 
.data
	.L5317:
	.string ":7 <- :7 ~ #255"
.text
	mov A, .L5317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5318:
	mov A, B
	add SP, 1
	.loc 7 4027 0
	#     i_emit_add(add_fn);
.data
	.L5319:
	.string ":9 <- :13"
.text
	mov A, .L5319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5320:
	mov A, B
	add SP, 1
	.loc 7 4028 0
	#     i_emit_line(":13 <- :8");
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_add
	.L5321:
	mov A, B
	add SP, 1
	.loc 7 4029 0
	# 
.data
	.L5322:
	.string ":13 <- :8"
.text
	mov A, .L5322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5323:
	mov A, B
	add SP, 1
	.loc 7 4031 0
	# 
.data
	.L5324:
	.string ":7"
.text
	mov A, .L5324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5325:
	.string ":8"
.text
	mov A, .L5325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_and
	.L5326:
	mov A, B
	add SP, 3
	.loc 7 4033 0
	# #else
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4033 0
	# #else
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4033 0
	# #else
.data
	.L5327:
	.string "%s <- :8"
.text
	mov A, .L5327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5328:
	mov A, B
	add SP, 2
	.loc 7 4040 0
	# 
	jmp .L704
	.loc 7 4042 0
	#     i_emit_line("GIVE UP");
	.L715:
.data
	.L5329:
	.string "GIVE UP"
.text
	mov A, .L5329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5330:
	mov A, B
	add SP, 1
	.loc 7 4044 0
	# 
	jmp .L704
	.loc 7 4046 0
	#     break;
	.L716:
	jmp .L704
	.loc 7 4049 0
	#   case NE:
	.L717:
	.L718:
	.L719:
	.L720:
	.L721:
	.L722:
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_cmp
	.L5331:
	mov A, B
	add SP, 2
	.loc 7 4056 0
	#     break;
	.loc 7 3720 0
	# }
	mov A, I_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4056 0
	#     break;
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4056 0
	#     break;
.data
	.L5332:
	.string "%s <- :8"
.text
	mov A, .L5332
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5333:
	mov A, B
	add SP, 2
	.loc 7 4057 0
	# 
	jmp .L704
	.loc 7 4080 0
	#   }
	.loc 7 4059 0
	#   case JNE:
	.L723:
	.loc 7 4080 0
	#   }
	.loc 7 4059 0
	#   case JNE:
	.L724:
	.loc 7 4080 0
	#   }
	.loc 7 4059 0
	#   case JNE:
	.L725:
	.loc 7 4080 0
	#   }
	.loc 7 4059 0
	#   case JNE:
	.L726:
	.loc 7 4080 0
	#   }
	.loc 7 4059 0
	#   case JNE:
	.L727:
	.loc 7 4080 0
	#   }
	.loc 7 4059 0
	#   case JNE:
	.L728:
	.loc 7 4080 0
	#   }
	.loc 7 4066 0
	#     }
	.loc 7 4065 0
	#       error("jcc reg");
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5334, A, 0
	.loc 7 4066 0
	#     }
.data
	.L5335:
	.string "jcc reg"
.text
	mov A, .L5335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5336:
	mov A, B
	add SP, 1
	.L5334:
	.loc 7 4069 0
	#     i_emit_intercal_boolize();
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_cmp
	.L5337:
	mov A, B
	add SP, 2
	.loc 7 4070 0
	# 
	mov A, .L5338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_intercal_boolize
	.L5338:
	mov A, B
	.loc 7 4072 0
	#     int l2 = ++*label;
	mov A, 0
	mov B, SP
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4073 0
	#     i_emit_line("(%d) NEXT", l1);
	mov A, 0
	mov B, SP
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4074 0
	#     i_emit_line("(%d) NEXT", inst->jmp.imm);
	.loc 7 4072 0
	#     int l2 = ++*label;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4074 0
	#     i_emit_line("(%d) NEXT", inst->jmp.imm);
.data
	.L5339:
	.string "(%d) NEXT"
.text
	mov A, .L5339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5340:
	mov A, B
	add SP, 2
	.loc 7 4075 0
	# 
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4075 0
	# 
.data
	.L5341:
	.string "(%d) NEXT"
.text
	mov A, .L5341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5342:
	mov A, B
	add SP, 2
	.loc 7 4077 0
	#     emit_line("(%d) DO (%d) NEXT", l1, l2);
	.loc 7 4073 0
	#     i_emit_line("(%d) NEXT", l1);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4077 0
	#     emit_line("(%d) DO (%d) NEXT", l1, l2);
.data
	.L5343:
	.string "(%d) DO RESUME :8"
.text
	mov A, .L5343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5344:
	mov A, B
	add SP, 2
	.loc 7 4078 0
	#     i_emit_line("FORGET #1");
	.loc 7 4073 0
	#     i_emit_line("(%d) NEXT", l1);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4072 0
	#     int l2 = ++*label;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4078 0
	#     i_emit_line("FORGET #1");
.data
	.L5345:
	.string "(%d) DO (%d) NEXT"
.text
	mov A, .L5345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5346:
	mov A, B
	add SP, 3
	.loc 7 4079 0
	#     break;
.data
	.L5347:
	.string "FORGET #1"
.text
	mov A, .L5347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5348:
	mov A, B
	add SP, 1
	.loc 7 4080 0
	#   }
	jmp .L704
	.loc 7 4085 0
	#   }
	.loc 7 4083 0
	#     i_emit_jmp(inst, reg_jmp);
	.L729:
	.loc 7 4085 0
	#   }
	.loc 7 4084 0
	#     break;
	.loc 7 3954 0
	#   }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_jmp
	.L5349:
	mov A, B
	add SP, 2
	.loc 7 4085 0
	#   }
	jmp .L704
	.loc 7 4088 0
	#     error("oops");
	.L730:
.data
	.L5350:
	.string "oops"
.text
	mov A, .L5350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5351:
	mov A, B
	add SP, 1
	.L704:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
i_emit_reg_jmp_table:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 4116 0
	# }
	.loc 7 4100 0
	#   }
	.loc 7 4094 0
	#     if (pc >= max_pc || pc == 0) {
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5352, A, 0
	.loc 7 4100 0
	#   }
	.loc 7 4098 0
	#     }
	.loc 7 4095 0
	#       i_emit_line("ERR %d", pc);
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 1
	jne .L5353, A, 0
	.loc 7 4095 0
	#       i_emit_line("ERR %d", pc);
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4095 0
	#       i_emit_line("ERR %d", pc);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L5353:
	mov A, B
	jeq .L5354, A, 0
	.loc 7 4096 0
	#     } else {
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4096 0
	#     } else {
.data
	.L5355:
	.string "ERR %d"
.text
	mov A, .L5355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5356:
	mov A, B
	add SP, 2
	jmp .L5357
	.L5354:
	.loc 7 4098 0
	#     }
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4098 0
	#     }
.data
	.L5358:
	.string "(%d) NEXT"
.text
	mov A, .L5358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5359:
	mov A, B
	add SP, 2
	.L5357:
	.loc 7 4100 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L5352:
	.loc 7 4103 0
	#   i_emit_intercal_boolize();
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4103 0
	#   i_emit_intercal_boolize();
.data
	.L5360:
	.string ":8 <- :11 ~ #%d"
.text
	mov A, .L5360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5361:
	mov A, B
	add SP, 2
	.loc 7 4104 0
	# 
	mov A, .L5362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_intercal_boolize
	.L5362:
	mov A, B
	.loc 7 4106 0
	#   int l2 = ++*label;
	mov A, 0
	mov B, SP
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4107 0
	#   i_emit_line("(%d) NEXT", l1);
	mov A, 0
	mov B, SP
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 5
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4108 0
	# 
	.loc 7 4106 0
	#   int l2 = ++*label;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4108 0
	# 
.data
	.L5363:
	.string "(%d) NEXT"
.text
	mov A, .L5363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5364:
	mov A, B
	add SP, 2
	.loc 7 4110 0
	# 
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4110 0
	# 
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4110 0
	# 
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5365:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_reg_jmp_table
	.L5366:
	mov A, B
	add SP, 4
	.loc 7 4112 0
	#   emit_line("(%d) DO (%d) NEXT", l1, l2);
	.loc 7 4107 0
	#   i_emit_line("(%d) NEXT", l1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4112 0
	#   emit_line("(%d) DO (%d) NEXT", l1, l2);
.data
	.L5367:
	.string "(%d) DO RESUME :8"
.text
	mov A, .L5367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5368:
	mov A, B
	add SP, 2
	.loc 7 4113 0
	#   i_emit_line("FORGET #1");
	.loc 7 4107 0
	#   i_emit_line("(%d) NEXT", l1);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4106 0
	#   int l2 = ++*label;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4113 0
	#   i_emit_line("FORGET #1");
.data
	.L5369:
	.string "(%d) DO (%d) NEXT"
.text
	mov A, .L5369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5370:
	mov A, B
	add SP, 3
	.loc 7 4114 0
	# 
.data
	.L5371:
	.string "FORGET #1"
.text
	mov A, .L5371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5372:
	mov A, B
	add SP, 1
	.loc 7 4116 0
	# }
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4116 0
	# }
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4116 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5373:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4088 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_reg_jmp_table
	.L5374:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_i:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 7 4154 0
	# }
	.loc 7 4120 0
	# 
	.loc 7 4116 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_init_state
	.L5375:
	mov A, B
	add SP, 1
	.loc 7 4122 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 4124 0
	#   }
	.loc 7 4123 0
	#     label = inst->pc;
	mov A, 0
	mov B, SP
	.loc 7 4116 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4124 0
	#   }
	.L731:
	.loc 7 4123 0
	#     label = inst->pc;
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L5376, A, 0
	jmp .L5377
	.L5376:
	.loc 7 4124 0
	#   }
	jmp .L733
	.L5377:
	.loc 7 4123 0
	#     label = inst->pc;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4124 0
	#   }
	.L732:
	.loc 7 4123 0
	#     label = inst->pc;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4124 0
	#   }
	jmp .L731
	.L733:
	.loc 7 4126 0
	#   int add_fn = ++label;
	mov A, 0
	mov B, SP
	.loc 7 4122 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4127 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 4122 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 4129 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 4136 0
	#   }
	.loc 7 4130 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 4116 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 4136 0
	#   }
	.L734:
	.loc 7 4130 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L5378, A, 0
	jmp .L5379
	.L5378:
	.loc 7 4136 0
	#   }
	jmp .L736
	.L5379:
	.loc 7 4132 0
	#     }
	.loc 7 4131 0
	#       emit_line("(%d) DO FORGET #1", inst->pc);
	.loc 7 4129 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4131 0
	#       emit_line("(%d) DO FORGET #1", inst->pc);
	.loc 7 4130 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5380, A, 0
	.loc 7 4132 0
	#     }
	.loc 7 4130 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4132 0
	#     }
.data
	.L5381:
	.string "(%d) DO FORGET #1"
.text
	mov A, .L5381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5382:
	mov A, B
	add SP, 2
	.L5380:
	.loc 7 4134 0
	#     emit_line("");
	.loc 7 4130 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 4135 0
	#     i_emit_inst(inst, add_fn, reg_jmp, &label);
.data
	.L5383:
	.string ""
.text
	mov A, .L5383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5384:
	mov A, B
	add SP, 1
	.loc 7 4136 0
	#   }
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4126 0
	#   int add_fn = ++label;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4127 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4130 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_inst
	.L5385:
	mov A, B
	add SP, 4
	.loc 7 4136 0
	#   }
	.L735:
	.loc 7 4130 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 4136 0
	#   }
	jmp .L734
	.L736:
	.loc 7 4139 0
	#   emit_line("(%d) DO NOTe add function", add_fn);
.data
	.L5386:
	.string ""
.text
	mov A, .L5386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5387
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5387:
	mov A, B
	add SP, 1
	.loc 7 4140 0
	#   for (int i = 0; i < 16; i++) {
	.loc 7 4127 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4140 0
	#   for (int i = 0; i < 16; i++) {
.data
	.L5388:
	.string "(%d) DO NOTe add function"
.text
	mov A, .L5388
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5389:
	mov A, B
	add SP, 2
	.loc 7 4147 0
	#   }
	.loc 7 4141 0
	#     i_emit_line(":9 <- :8"I_INT":9");
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777209
	mov A, 0
	store A, B
	.loc 7 4147 0
	#   }
	.L737:
	.loc 7 4141 0
	#     i_emit_line(":9 <- :8"I_INT":9");
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5390, A, 0
	jmp .L5391
	.L5390:
	.loc 7 4147 0
	#   }
	jmp .L739
	.L5391:
	.loc 7 4142 0
	#     i_emit_line(":8 <- :V\x08-9");
.data
	.L5392:
	.string ":9 <- :8$:9"
.text
	mov A, .L5392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5393:
	mov A, B
	add SP, 1
	.loc 7 4143 0
	#     i_emit_line(":8 <- :8 ~ :10");
.data
	.L5394:
	.string ":8 <- :V\b-9"
.text
	mov A, .L5394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5395:
	mov A, B
	add SP, 1
	.loc 7 4144 0
	#     i_emit_line(":9 <- :&9");
.data
	.L5396:
	.string ":8 <- :8 ~ :10"
.text
	mov A, .L5396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5397:
	mov A, B
	add SP, 1
	.loc 7 4145 0
	#     i_emit_line(":9 <- :9 ~ :10");
.data
	.L5398:
	.string ":9 <- :&9"
.text
	mov A, .L5398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5399:
	mov A, B
	add SP, 1
	.loc 7 4146 0
	#     i_emit_line(":9 <- ':9"I_INT"#0'~'#32767"I_INT"#1'");
.data
	.L5400:
	.string ":9 <- :9 ~ :10"
.text
	mov A, .L5400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5401:
	mov A, B
	add SP, 1
	.loc 7 4147 0
	#   }
.data
	.L5402:
	.string ":9 <- ':9$#0'~'#32767$#1'"
.text
	mov A, .L5402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5403:
	mov A, B
	add SP, 1
	.L738:
	.loc 7 4141 0
	#     i_emit_line(":9 <- :8"I_INT":9");
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777209
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4147 0
	#   }
	jmp .L737
	.L739:
	.loc 7 4149 0
	# 
.data
	.L5404:
	.string "RESUME #1"
.text
	mov A, .L5404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5405:
	mov A, B
	add SP, 1
	.loc 7 4151 0
	#   i_emit_line("NOTe reg jmp");
.data
	.L5406:
	.string ""
.text
	mov A, .L5406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5407:
	mov A, B
	add SP, 1
	.loc 7 4152 0
	#   emit_line("(%d) DO FORGET #1", reg_jmp);
.data
	.L5408:
	.string "NOTe reg jmp"
.text
	mov A, .L5408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_line
	.L5409:
	mov A, B
	add SP, 1
	.loc 7 4153 0
	#   i_emit_reg_jmp_table(0, 1, reg_jmp, &label);
	.loc 7 4126 0
	#   int add_fn = ++label;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4153 0
	#   i_emit_reg_jmp_table(0, 1, reg_jmp, &label);
.data
	.L5410:
	.string "(%d) DO FORGET #1"
.text
	mov A, .L5410
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5411:
	mov A, B
	add SP, 2
	.loc 7 4154 0
	# }
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4126 0
	#   int add_fn = ++label;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4154 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp i_emit_reg_jmp_table
	.L5412:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
java_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4168 0
	# }
	.loc 7 4160 0
	#   emit_line("private static void func%d() {", func_id);
.data
	.L5413:
	.string ""
.text
	mov A, .L5413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5414:
	mov A, B
	add SP, 1
	.loc 7 4161 0
	#   inc_indent();
	.loc 7 4154 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4161 0
	#   inc_indent();
.data
	.L5415:
	.string "private static void func%d() {"
.text
	mov A, .L5415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5416
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5416:
	mov A, B
	add SP, 2
	.loc 7 4162 0
	#   emit_line("while (%d <= pc && pc < %d) {",
	mov A, .L5417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5417:
	mov A, B
	.loc 7 4163 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 4154 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4163 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5418:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4163 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 4154 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5419:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4163 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L5420:
	.string "while (%d <= pc && pc < %d) {"
.text
	mov A, .L5420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5421:
	mov A, B
	add SP, 3
	.loc 7 4165 0
	#   emit_line("switch (pc) {");
	mov A, .L5422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5422:
	mov A, B
	.loc 7 4166 0
	#   emit_line("case -1:  /* dummy */");
.data
	.L5423:
	.string "switch (pc) {"
.text
	mov A, .L5423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5424:
	mov A, B
	add SP, 1
	.loc 7 4167 0
	#   inc_indent();
.data
	.L5425:
	.string "case -1:  /* dummy */"
.text
	mov A, .L5425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5426:
	mov A, B
	add SP, 1
	.loc 7 4168 0
	# }
	mov A, .L5427
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5427:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
java_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4178 0
	# }
	.loc 7 4172 0
	#   emit_line("}");
	mov A, .L5428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5428:
	mov A, B
	.loc 7 4173 0
	#   emit_line("pc++;");
.data
	.L5429:
	.string "}"
.text
	mov A, .L5429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5430:
	mov A, B
	add SP, 1
	.loc 7 4174 0
	#   dec_indent();
.data
	.L5431:
	.string "pc++;"
.text
	mov A, .L5431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5432:
	mov A, B
	add SP, 1
	.loc 7 4175 0
	#   emit_line("}");
	mov A, .L5433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5433:
	mov A, B
	.loc 7 4176 0
	#   dec_indent();
.data
	.L5434:
	.string "}"
.text
	mov A, .L5434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5435:
	mov A, B
	add SP, 1
	.loc 7 4177 0
	#   emit_line("}");
	mov A, .L5436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5436:
	mov A, B
	.loc 7 4178 0
	# }
.data
	.L5437:
	.string "}"
.text
	mov A, .L5437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5438:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
java_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4186 0
	# }
	.loc 7 4182 0
	#   emit_line("");
.data
	.L5439:
	.string "break;"
.text
	mov A, .L5439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5440:
	mov A, B
	add SP, 1
	.loc 7 4183 0
	#   dec_indent();
.data
	.L5441:
	.string ""
.text
	mov A, .L5441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5442:
	mov A, B
	add SP, 1
	.loc 7 4184 0
	#   emit_line("case %d:", pc);
	mov A, .L5443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5443:
	mov A, B
	.loc 7 4185 0
	#   inc_indent();
	.loc 7 4178 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4185 0
	#   inc_indent();
.data
	.L5444:
	.string "case %d:"
.text
	mov A, .L5444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5445:
	mov A, B
	add SP, 2
	.loc 7 4186 0
	# }
	mov A, .L5446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5446:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
java_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4254 0
	#     error("oops");
	.loc 7 4190 0
	#   case MOV:
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4254 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5447, A, 0
	jmp .L741
	.L5447:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5448, A, 0
	jmp .L742
	.L5448:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5449, A, 0
	jmp .L743
	.L5449:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5450, A, 0
	jmp .L744
	.L5450:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5451, A, 0
	jmp .L745
	.L5451:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5452, A, 0
	jmp .L746
	.L5452:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5453, A, 0
	jmp .L747
	.L5453:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5454, A, 0
	jmp .L748
	.L5454:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5455, A, 0
	jmp .L749
	.L5455:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5456, A, 0
	jmp .L750
	.L5456:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5457, A, 0
	jmp .L751
	.L5457:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5458, A, 0
	jmp .L752
	.L5458:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5459, A, 0
	jmp .L753
	.L5459:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5460, A, 0
	jmp .L754
	.L5460:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5461, A, 0
	jmp .L755
	.L5461:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5462, A, 0
	jmp .L756
	.L5462:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5463, A, 0
	jmp .L757
	.L5463:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5464, A, 0
	jmp .L758
	.L5464:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5465, A, 0
	jmp .L759
	.L5465:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5466, A, 0
	jmp .L760
	.L5466:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5467, A, 0
	jmp .L761
	.L5467:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5468, A, 0
	jmp .L762
	.L5468:
	jmp .L763
	.loc 7 4191 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.L741:
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5469:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4191 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4191 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4191 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
.data
	.L5470:
	.string "%s = %s;"
.text
	mov A, .L5470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5471:
	mov A, B
	add SP, 3
	.loc 7 4193 0
	# 
	jmp .L740
	.loc 7 4195 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.L742:
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5472
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5472:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4195 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4195 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4195 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4195 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4195 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
.data
	.L5473:
	.string "%s = (%s + %s) & 16777215;"
.text
	mov A, .L5473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5474
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5474:
	mov A, B
	add SP, 4
	.loc 7 4199 0
	# 
	jmp .L740
	.loc 7 4201 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.L743:
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5475
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5475:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4201 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4201 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4201 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4201 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4201 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
.data
	.L5476:
	.string "%s = (%s - %s) & 16777215;"
.text
	mov A, .L5476
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5477
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5477:
	mov A, B
	add SP, 4
	.loc 7 4205 0
	# 
	jmp .L740
	.loc 7 4207 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.L744:
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5478
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5478:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4207 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4207 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4207 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
.data
	.L5479:
	.string "%s = mem[%s];"
.text
	mov A, .L5479
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5480
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5480:
	mov A, B
	add SP, 3
	.loc 7 4209 0
	# 
	jmp .L740
	.loc 7 4211 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.L745:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4211 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4211 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5481:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4211 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L5482:
	.string "mem[%s] = %s;"
.text
	mov A, .L5482
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5483:
	mov A, B
	add SP, 3
	.loc 7 4213 0
	# 
	jmp .L740
	.loc 7 4215 0
	#     emit_line("System.out.print(String.valueOf((char)%s));", src_str(inst));
	.L746:
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5484:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4215 0
	#     emit_line("System.out.print(String.valueOf((char)%s));", src_str(inst));
.data
	.L5485:
	.string "System.out.print(String.valueOf((char)%s));"
.text
	mov A, .L5485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5486:
	mov A, B
	add SP, 2
	.loc 7 4217 0
	# 
	jmp .L740
	.loc 7 4219 0
	#     emit_line("try { int _ = System.in.read(); "
	.L747:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4219 0
	#     emit_line("try { int _ = System.in.read(); "
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4219 0
	#     emit_line("try { int _ = System.in.read(); "
.data
	.L5487:
	.string "try { int _ = System.in.read();   %s = _ == -1 ? 0 : _; }catch (Exception e) {}"
.text
	mov A, .L5487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5488
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5488:
	mov A, B
	add SP, 2
	.loc 7 4224 0
	# 
	jmp .L740
	.loc 7 4226 0
	#     emit_line("System.exit(0);");
	.L748:
.data
	.L5489:
	.string "System.exit(0);"
.text
	mov A, .L5489
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5490:
	mov A, B
	add SP, 1
	.loc 7 4228 0
	# 
	jmp .L740
	.loc 7 4230 0
	#     break;
	.L749:
	jmp .L740
	.loc 7 4233 0
	#   case NE:
	.L750:
	.L751:
	.L752:
	.L753:
	.L754:
	.L755:
.data
	.L5491:
	.string "true"
.text
	mov A, .L5491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L5492:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4233 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4233 0
	#   case NE:
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4233 0
	#   case NE:
.data
	.L5493:
	.string "%s = %s ? 1 : 0;"
.text
	mov A, .L5493
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5494
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5494:
	mov A, B
	add SP, 3
	.loc 7 4241 0
	# 
	jmp .L740
	.loc 7 4243 0
	#   case JNE:
	.L756:
	.L757:
	.L758:
	.L759:
	.L760:
	.L761:
	.L762:
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5495
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L5495:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4243 0
	#   case JNE:
.data
	.L5496:
	.string "true"
.text
	mov A, .L5496
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4186 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L5497:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4243 0
	#   case JNE:
.data
	.L5498:
	.string "if (%s) pc = %s - 1;"
.text
	mov A, .L5498
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5499
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5499:
	mov A, B
	add SP, 3
	.loc 7 4252 0
	# 
	jmp .L740
	.loc 7 4254 0
	#     error("oops");
	.L763:
.data
	.L5500:
	.string "oops"
.text
	mov A, .L5500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5501:
	mov A, B
	add SP, 1
	.L740:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
java_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 4282 0
	# }
	.loc 7 4260 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4273 0
	#     }
	.loc 7 4261 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 4273 0
	#     }
	.L764:
	.loc 7 4254 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	jeq .L5502, A, 0
	jmp .L5503
	.L5502:
	.loc 7 4273 0
	#     }
	jmp .L766
	.L5503:
	.loc 7 4262 0
	#       int mc = mp / 1000;
	.loc 7 4254 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L5504, A, 0
	.loc 7 4273 0
	#     }
	.loc 7 4263 0
	#       while (prev_mc != mc) {
	mov A, 0
	mov B, SP
	.loc 7 4261 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4263 0
	#       while (prev_mc != mc) {
	mov A, 1000
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L5505:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4271 0
	#       }
	.L767:
	.loc 7 4264 0
	#         if (prev_mc != -1) {
	.loc 7 4260 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4263 0
	#       while (prev_mc != mc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5506, A, 0
	.loc 7 4271 0
	#       }
	.loc 7 4267 0
	#         }
	.loc 7 4265 0
	#           dec_indent();
	.loc 7 4260 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4265 0
	#           dec_indent();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5507, A, 0
	.loc 7 4267 0
	#         }
	.loc 7 4266 0
	#           emit_line("}");
	mov A, .L5508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5508:
	mov A, B
	.loc 7 4267 0
	#         }
.data
	.L5509:
	.string "}"
.text
	mov A, .L5509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5510
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5510:
	mov A, B
	add SP, 1
	.L5507:
	.loc 7 4269 0
	#         emit_line("static void init%d() {", prev_mc);
	.loc 7 4260 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4270 0
	#         inc_indent();
	.loc 7 4260 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4270 0
	#         inc_indent();
.data
	.L5511:
	.string "static void init%d() {"
.text
	mov A, .L5511
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5512:
	mov A, B
	add SP, 2
	.loc 7 4271 0
	#       }
	mov A, .L5513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5513:
	mov A, B
	jmp .L5514
	.L5506:
	jmp .L768
	.L5514:
	jmp .L767
	.L768:
	.loc 7 4273 0
	#     }
	.loc 7 4254 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4261 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4273 0
	#     }
.data
	.L5515:
	.string "mem[%d] = %d;"
.text
	mov A, .L5515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5516:
	mov A, B
	add SP, 3
	.L5504:
	.L765:
	.loc 7 4261 0
	#     if (data->v) {
	.loc 7 4254 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 4261 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4273 0
	#     }
	jmp .L764
	.L766:
	.loc 7 4279 0
	#   }
	.loc 7 4277 0
	#     dec_indent();
	.loc 7 4260 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4277 0
	#     dec_indent();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L5517, A, 0
	.loc 7 4279 0
	#   }
	.loc 7 4278 0
	#     emit_line("}");
	mov A, .L5518
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5518:
	mov A, B
	.loc 7 4279 0
	#   }
.data
	.L5519:
	.string "}"
.text
	mov A, .L5519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5520
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5520:
	mov A, B
	add SP, 1
	.L5517:
	.loc 7 4282 0
	# }
	.loc 7 4260 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4282 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_java:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 4326 0
	# }
	.loc 7 4286 0
	#   inc_indent();
.data
	.L5521:
	.string "public class Main {"
.text
	mov A, .L5521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5522:
	mov A, B
	add SP, 1
	.loc 7 4287 0
	#   for (int i = 0; i < 7; i++) {
	mov A, .L5523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5523:
	mov A, B
	.loc 7 4289 0
	#   }
	.loc 7 4288 0
	#     emit_line("static int %s;", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 4289 0
	#   }
	.L769:
	.loc 7 4288 0
	#     emit_line("static int %s;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5524, A, 0
	jmp .L5525
	.L5524:
	.loc 7 4289 0
	#   }
	jmp .L771
	.L5525:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4288 0
	#     emit_line("static int %s;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4289 0
	#   }
.data
	.L5526:
	.string "static int %s;"
.text
	mov A, .L5526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5527:
	mov A, B
	add SP, 2
	.L770:
	.loc 7 4288 0
	#     emit_line("static int %s;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4289 0
	#   }
	jmp .L769
	.L771:
	.loc 7 4291 0
	# 
.data
	.L5528:
	.string "static int[] mem;"
.text
	mov A, .L5528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5529:
	mov A, B
	add SP, 1
	.loc 7 4293 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 4282 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp java_init_state
	.L5530:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4295 0
	#   int num_funcs = emit_chunked_main_loop(module->text,
	mov A, 256
	mov B, CHUNKED_FUNC_SIZE
	store A, B
	.loc 7 4296 0
	#                                          java_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, java_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, java_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, java_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, java_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4282 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L5531:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4302 0
	#   inc_indent();
.data
	.L5532:
	.string "public static void main(String[] args) {"
.text
	mov A, .L5532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5533:
	mov A, B
	add SP, 1
	.loc 7 4303 0
	# 
	mov A, .L5534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5534:
	mov A, B
	.loc 7 4305 0
	#   for (int i = 0; i < num_inits; i++) {
.data
	.L5535:
	.string "mem = new int[1<<24];"
.text
	mov A, .L5535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5536:
	mov A, B
	add SP, 1
	.loc 7 4307 0
	#   }
	.loc 7 4306 0
	#     emit_line("init%d();", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 4307 0
	#   }
	.L772:
	.loc 7 4306 0
	#     emit_line("init%d();", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4293 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5537, A, 0
	jmp .L5538
	.L5537:
	.loc 7 4307 0
	#   }
	jmp .L774
	.L5538:
	.loc 7 4306 0
	#     emit_line("init%d();", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4307 0
	#   }
.data
	.L5539:
	.string "init%d();"
.text
	mov A, .L5539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5540:
	mov A, B
	add SP, 2
	.L773:
	.loc 7 4306 0
	#     emit_line("init%d();", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4307 0
	#   }
	jmp .L772
	.L774:
	.loc 7 4310 0
	#   emit_line("while (true) {");
.data
	.L5541:
	.string ""
.text
	mov A, .L5541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5542:
	mov A, B
	add SP, 1
	.loc 7 4311 0
	#   inc_indent();
.data
	.L5543:
	.string "while (true) {"
.text
	mov A, .L5543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5544:
	mov A, B
	add SP, 1
	.loc 7 4312 0
	#   emit_line("switch (pc / %d | 0) {", CHUNKED_FUNC_SIZE);
	mov A, .L5545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5545:
	mov A, B
	.loc 7 4313 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4313 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L5546:
	.string "switch (pc / %d | 0) {"
.text
	mov A, .L5546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5547:
	mov A, B
	add SP, 2
	.loc 7 4317 0
	#   }
	.loc 7 4314 0
	#     emit_line("case %d:", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 4317 0
	#   }
	.L775:
	.loc 7 4314 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4296 0
	#                                          java_emit_func_prologue,
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5548, A, 0
	jmp .L5549
	.L5548:
	.loc 7 4317 0
	#   }
	jmp .L777
	.L5549:
	.loc 7 4315 0
	#     emit_line(" func%d();", i);
	.loc 7 4314 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4315 0
	#     emit_line(" func%d();", i);
.data
	.L5550:
	.string "case %d:"
.text
	mov A, .L5550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5551:
	mov A, B
	add SP, 2
	.loc 7 4316 0
	#     emit_line(" break;");
	.loc 7 4314 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4316 0
	#     emit_line(" break;");
.data
	.L5552:
	.string " func%d();"
.text
	mov A, .L5552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5553:
	mov A, B
	add SP, 2
	.loc 7 4317 0
	#   }
.data
	.L5554:
	.string " break;"
.text
	mov A, .L5554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5555:
	mov A, B
	add SP, 1
	.L776:
	.loc 7 4314 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4317 0
	#   }
	jmp .L775
	.L777:
	.loc 7 4319 0
	#   dec_indent();
.data
	.L5556:
	.string "}"
.text
	mov A, .L5556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5557:
	mov A, B
	add SP, 1
	.loc 7 4320 0
	#   emit_line("}");
	mov A, .L5558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5558:
	mov A, B
	.loc 7 4321 0
	# 
.data
	.L5559:
	.string "}"
.text
	mov A, .L5559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5560:
	mov A, B
	add SP, 1
	.loc 7 4323 0
	#   emit_line("}");
	mov A, .L5561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5561:
	mov A, B
	.loc 7 4324 0
	#   dec_indent();
.data
	.L5562:
	.string "}"
.text
	mov A, .L5562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5563:
	mov A, B
	add SP, 1
	.loc 7 4325 0
	#   emit_line("}");
	mov A, .L5564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5564:
	mov A, B
	.loc 7 4326 0
	# }
.data
	.L5565:
	.string "}"
.text
	mov A, .L5565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5566:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_state_js:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 4340 0
	#     }
	.loc 7 4332 0
	# 
.data
	.L5567:
	.string "var main = function(getchar, putchar) {"
.text
	mov A, .L5567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5568:
	mov A, B
	add SP, 1
	.loc 7 4335 0
	#   }
	.loc 7 4334 0
	#     emit_line("var %s = 0;", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 4335 0
	#   }
	.L778:
	.loc 7 4334 0
	#     emit_line("var %s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5569, A, 0
	jmp .L5570
	.L5569:
	.loc 7 4335 0
	#   }
	jmp .L780
	.L5570:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4334 0
	#     emit_line("var %s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4335 0
	#   }
.data
	.L5571:
	.string "var %s = 0;"
.text
	mov A, .L5571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5572:
	mov A, B
	add SP, 2
	.L779:
	.loc 7 4334 0
	#     emit_line("var %s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4335 0
	#   }
	jmp .L778
	.L780:
	.loc 7 4337 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L5573:
	.string "var mem = new Int32Array(1 << 24);"
.text
	mov A, .L5573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5574:
	mov A, B
	add SP, 1
	.loc 7 4340 0
	#     }
	.loc 7 4338 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 4340 0
	#     }
	.L781:
	.loc 7 4326 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L5575, A, 0
	jmp .L5576
	.L5575:
	.loc 7 4340 0
	#     }
	jmp .L783
	.L5576:
	.loc 7 4339 0
	#       emit_line("mem[%d] = %d;", mp, data->v);
	.loc 7 4326 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L5577, A, 0
	.loc 7 4340 0
	#     }
	.loc 7 4326 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4338 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4340 0
	#     }
.data
	.L5578:
	.string "mem[%d] = %d;"
.text
	mov A, .L5578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5579:
	mov A, B
	add SP, 3
	.L5577:
	.L782:
	.loc 7 4338 0
	#     if (data->v) {
	.loc 7 4326 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 4338 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4340 0
	#     }
	jmp .L781
	.L783:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
js_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4354 0
	# }
	.loc 7 4346 0
	#   emit_line("var func%d = function() {", func_id);
.data
	.L5580:
	.string ""
.text
	mov A, .L5580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5581:
	mov A, B
	add SP, 1
	.loc 7 4347 0
	#   inc_indent();
	.loc 7 4340 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4347 0
	#   inc_indent();
.data
	.L5582:
	.string "var func%d = function() {"
.text
	mov A, .L5582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5583:
	mov A, B
	add SP, 2
	.loc 7 4348 0
	#   emit_line("while (%d <= pc && pc < %d && running) {",
	mov A, .L5584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5584:
	mov A, B
	.loc 7 4349 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 4340 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4349 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5585:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4349 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 4340 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5586:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4349 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L5587:
	.string "while (%d <= pc && pc < %d && running) {"
.text
	mov A, .L5587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5588:
	mov A, B
	add SP, 3
	.loc 7 4351 0
	#   emit_line("switch (pc) {");
	mov A, .L5589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5589:
	mov A, B
	.loc 7 4352 0
	#   emit_line("case -1:  // dummy");
.data
	.L5590:
	.string "switch (pc) {"
.text
	mov A, .L5590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5591:
	mov A, B
	add SP, 1
	.loc 7 4353 0
	#   inc_indent();
.data
	.L5592:
	.string "case -1:  // dummy"
.text
	mov A, .L5592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5593:
	mov A, B
	add SP, 1
	.loc 7 4354 0
	# }
	mov A, .L5594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5594:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
js_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4364 0
	# }
	.loc 7 4358 0
	#   emit_line("}");
	mov A, .L5595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5595:
	mov A, B
	.loc 7 4359 0
	#   emit_line("pc++;");
.data
	.L5596:
	.string "}"
.text
	mov A, .L5596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5597:
	mov A, B
	add SP, 1
	.loc 7 4360 0
	#   dec_indent();
.data
	.L5598:
	.string "pc++;"
.text
	mov A, .L5598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5599:
	mov A, B
	add SP, 1
	.loc 7 4361 0
	#   emit_line("}");
	mov A, .L5600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5600:
	mov A, B
	.loc 7 4362 0
	#   dec_indent();
.data
	.L5601:
	.string "}"
.text
	mov A, .L5601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5602
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5602:
	mov A, B
	add SP, 1
	.loc 7 4363 0
	#   emit_line("};");
	mov A, .L5603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5603:
	mov A, B
	.loc 7 4364 0
	# }
.data
	.L5604:
	.string "};"
.text
	mov A, .L5604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5605:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
js_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4372 0
	# }
	.loc 7 4368 0
	#   emit_line("");
.data
	.L5606:
	.string "break;"
.text
	mov A, .L5606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5607
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5607:
	mov A, B
	add SP, 1
	.loc 7 4369 0
	#   dec_indent();
.data
	.L5608:
	.string ""
.text
	mov A, .L5608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5609
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5609:
	mov A, B
	add SP, 1
	.loc 7 4370 0
	#   emit_line("case %d:", pc);
	mov A, .L5610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5610:
	mov A, B
	.loc 7 4371 0
	#   inc_indent();
	.loc 7 4364 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4371 0
	#   inc_indent();
.data
	.L5611:
	.string "case %d:"
.text
	mov A, .L5611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5612:
	mov A, B
	add SP, 2
	.loc 7 4372 0
	# }
	mov A, .L5613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5613:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
js_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4438 0
	#     error("oops");
	.loc 7 4376 0
	#   case MOV:
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4438 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5614, A, 0
	jmp .L785
	.L5614:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5615, A, 0
	jmp .L786
	.L5615:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5616, A, 0
	jmp .L787
	.L5616:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5617, A, 0
	jmp .L788
	.L5617:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5618, A, 0
	jmp .L789
	.L5618:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5619, A, 0
	jmp .L790
	.L5619:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5620, A, 0
	jmp .L791
	.L5620:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5621, A, 0
	jmp .L792
	.L5621:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5622, A, 0
	jmp .L793
	.L5622:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5623, A, 0
	jmp .L794
	.L5623:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5624, A, 0
	jmp .L795
	.L5624:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5625, A, 0
	jmp .L796
	.L5625:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5626, A, 0
	jmp .L797
	.L5626:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5627, A, 0
	jmp .L798
	.L5627:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5628, A, 0
	jmp .L799
	.L5628:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5629, A, 0
	jmp .L800
	.L5629:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5630, A, 0
	jmp .L801
	.L5630:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5631, A, 0
	jmp .L802
	.L5631:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5632, A, 0
	jmp .L803
	.L5632:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5633, A, 0
	jmp .L804
	.L5633:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5634, A, 0
	jmp .L805
	.L5634:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5635, A, 0
	jmp .L806
	.L5635:
	jmp .L807
	.loc 7 4377 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.L785:
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5636:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4377 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4377 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4377 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
.data
	.L5637:
	.string "%s = %s;"
.text
	mov A, .L5637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5638:
	mov A, B
	add SP, 3
	.loc 7 4379 0
	# 
	jmp .L784
	.loc 7 4381 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.L786:
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5639
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5639:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4381 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4381 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4381 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4381 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4381 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
.data
	.L5640:
	.string "%s = (%s + %s) & 16777215;"
.text
	mov A, .L5640
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5641:
	mov A, B
	add SP, 4
	.loc 7 4385 0
	# 
	jmp .L784
	.loc 7 4387 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.L787:
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5642:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4387 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4387 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4387 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4387 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4387 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
.data
	.L5643:
	.string "%s = (%s - %s) & 16777215;"
.text
	mov A, .L5643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5644
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5644:
	mov A, B
	add SP, 4
	.loc 7 4391 0
	# 
	jmp .L784
	.loc 7 4393 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.L788:
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5645:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4393 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4393 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4393 0
	#     emit_line("%s = mem[%s];", reg_names[inst->dst.reg], src_str(inst));
.data
	.L5646:
	.string "%s = mem[%s];"
.text
	mov A, .L5646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5647:
	mov A, B
	add SP, 3
	.loc 7 4395 0
	# 
	jmp .L784
	.loc 7 4397 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.L789:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4397 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4397 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5648
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5648:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4397 0
	#     emit_line("mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L5649:
	.string "mem[%s] = %s;"
.text
	mov A, .L5649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5650:
	mov A, B
	add SP, 3
	.loc 7 4399 0
	# 
	jmp .L784
	.loc 7 4401 0
	#     emit_line("putchar(%s);", src_str(inst));
	.L790:
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5651:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4401 0
	#     emit_line("putchar(%s);", src_str(inst));
.data
	.L5652:
	.string "putchar(%s);"
.text
	mov A, .L5652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5653
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5653:
	mov A, B
	add SP, 2
	.loc 7 4403 0
	# 
	jmp .L784
	.loc 7 4405 0
	#     emit_line("%s = getchar();",
	.L791:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4405 0
	#     emit_line("%s = getchar();",
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4405 0
	#     emit_line("%s = getchar();",
.data
	.L5654:
	.string "%s = getchar();"
.text
	mov A, .L5654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5655:
	mov A, B
	add SP, 2
	.loc 7 4408 0
	# 
	jmp .L784
	.loc 7 4410 0
	#     emit_line("running = false; break;");
	.L792:
.data
	.L5656:
	.string "running = false; break;"
.text
	mov A, .L5656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5657
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5657:
	mov A, B
	add SP, 1
	.loc 7 4412 0
	# 
	jmp .L784
	.loc 7 4414 0
	#     break;
	.L793:
	jmp .L784
	.loc 7 4417 0
	#   case NE:
	.L794:
	.L795:
	.L796:
	.L797:
	.L798:
	.L799:
.data
	.L5658:
	.string "true"
.text
	mov A, .L5658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5659
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L5659:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4417 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4417 0
	#   case NE:
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4417 0
	#   case NE:
.data
	.L5660:
	.string "%s = (%s) | 0;"
.text
	mov A, .L5660
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5661
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5661:
	mov A, B
	add SP, 3
	.loc 7 4425 0
	# 
	jmp .L784
	.loc 7 4427 0
	#   case JNE:
	.L800:
	.L801:
	.L802:
	.L803:
	.L804:
	.L805:
	.L806:
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L5662:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4427 0
	#   case JNE:
.data
	.L5663:
	.string "true"
.text
	mov A, .L5663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L5664:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4427 0
	#   case JNE:
.data
	.L5665:
	.string "if (%s) pc = %s - 1;"
.text
	mov A, .L5665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5666
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5666:
	mov A, B
	add SP, 3
	.loc 7 4436 0
	# 
	jmp .L784
	.loc 7 4438 0
	#     error("oops");
	.L807:
.data
	.L5667:
	.string "oops"
.text
	mov A, .L5667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5668:
	mov A, B
	add SP, 1
	.L784:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_js:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 4483 0
	# }
	.loc 7 4444 0
	# 
	.loc 7 4438 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_js
	.L5669:
	mov A, B
	add SP, 1
	.loc 7 4446 0
	# 
.data
	.L5670:
	.string "var running = true;"
.text
	mov A, .L5670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5671:
	mov A, B
	add SP, 1
	.loc 7 4448 0
	#                                          js_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, js_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, js_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, js_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, js_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4438 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L5672:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4454 0
	#   emit_line("while (running) {");
.data
	.L5673:
	.string ""
.text
	mov A, .L5673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5674:
	mov A, B
	add SP, 1
	.loc 7 4455 0
	#   inc_indent();
.data
	.L5675:
	.string "while (running) {"
.text
	mov A, .L5675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5676:
	mov A, B
	add SP, 1
	.loc 7 4456 0
	#   emit_line("switch (pc / %d | 0) {", CHUNKED_FUNC_SIZE);
	mov A, .L5677
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5677:
	mov A, B
	.loc 7 4457 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4457 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L5678:
	.string "switch (pc / %d | 0) {"
.text
	mov A, .L5678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5679:
	mov A, B
	add SP, 2
	.loc 7 4461 0
	#   }
	.loc 7 4458 0
	#     emit_line("case %d:", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 4461 0
	#   }
	.L808:
	.loc 7 4458 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4448 0
	#                                          js_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5680, A, 0
	jmp .L5681
	.L5680:
	.loc 7 4461 0
	#   }
	jmp .L810
	.L5681:
	.loc 7 4459 0
	#     emit_line(" func%d();", i);
	.loc 7 4458 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4459 0
	#     emit_line(" func%d();", i);
.data
	.L5682:
	.string "case %d:"
.text
	mov A, .L5682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5683:
	mov A, B
	add SP, 2
	.loc 7 4460 0
	#     emit_line(" break;");
	.loc 7 4458 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4460 0
	#     emit_line(" break;");
.data
	.L5684:
	.string " func%d();"
.text
	mov A, .L5684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5685:
	mov A, B
	add SP, 2
	.loc 7 4461 0
	#   }
.data
	.L5686:
	.string " break;"
.text
	mov A, .L5686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5687:
	mov A, B
	add SP, 1
	.L809:
	.loc 7 4458 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4461 0
	#   }
	jmp .L808
	.L810:
	.loc 7 4463 0
	#   dec_indent();
.data
	.L5688:
	.string "}"
.text
	mov A, .L5688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5689:
	mov A, B
	add SP, 1
	.loc 7 4464 0
	#   emit_line("}");
	mov A, .L5690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5690:
	mov A, B
	.loc 7 4465 0
	# 
.data
	.L5691:
	.string "}"
.text
	mov A, .L5691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5692:
	mov A, B
	add SP, 1
	.loc 7 4467 0
	# 
.data
	.L5693:
	.string "};"
.text
	mov A, .L5693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5694:
	mov A, B
	add SP, 1
	.loc 7 4470 0
	#   emit_line(" var sys = require('sys');");
.data
	.L5695:
	.string "if (typeof require != 'undefined') {"
.text
	mov A, .L5695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5696:
	mov A, B
	add SP, 1
	.loc 7 4471 0
	#   emit_line(" var input = null;");
.data
	.L5697:
	.string " var sys = require('sys');"
.text
	mov A, .L5697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5698:
	mov A, B
	add SP, 1
	.loc 7 4472 0
	#   emit_line(" var ip = 0;");
.data
	.L5699:
	.string " var input = null;"
.text
	mov A, .L5699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5700:
	mov A, B
	add SP, 1
	.loc 7 4473 0
	#   emit_line(" var getchar = function() {");
.data
	.L5701:
	.string " var ip = 0;"
.text
	mov A, .L5701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5702
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5702:
	mov A, B
	add SP, 1
	.loc 7 4474 0
	#   emit_line("  if (input === null)");
.data
	.L5703:
	.string " var getchar = function() {"
.text
	mov A, .L5703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5704:
	mov A, B
	add SP, 1
	.loc 7 4475 0
	#   emit_line("   input = require('fs').readFileSync('/dev/stdin');");
.data
	.L5705:
	.string "  if (input === null)"
.text
	mov A, .L5705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5706:
	mov A, B
	add SP, 1
	.loc 7 4476 0
	#   emit_line("  return input[ip++] | 0;");
.data
	.L5707:
	.string "   input = require('fs').readFileSync('/dev/stdin');"
.text
	mov A, .L5707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5708:
	mov A, B
	add SP, 1
	.loc 7 4477 0
	#   emit_line(" };");
.data
	.L5709:
	.string "  return input[ip++] | 0;"
.text
	mov A, .L5709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5710
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5710:
	mov A, B
	add SP, 1
	.loc 7 4478 0
	#   emit_line(" var putchar = function(c) {");
.data
	.L5711:
	.string " };"
.text
	mov A, .L5711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5712:
	mov A, B
	add SP, 1
	.loc 7 4479 0
	#   emit_line("  sys.print(String.fromCharCode(c & 255));");
.data
	.L5713:
	.string " var putchar = function(c) {"
.text
	mov A, .L5713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5714:
	mov A, B
	add SP, 1
	.loc 7 4480 0
	#   emit_line(" };");
.data
	.L5715:
	.string "  sys.print(String.fromCharCode(c & 255));"
.text
	mov A, .L5715
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5716
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5716:
	mov A, B
	add SP, 1
	.loc 7 4481 0
	#   emit_line(" main(getchar, putchar);");
.data
	.L5717:
	.string " };"
.text
	mov A, .L5717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5718:
	mov A, B
	add SP, 1
	.loc 7 4482 0
	#   emit_line("}");
.data
	.L5719:
	.string " main(getchar, putchar);"
.text
	mov A, .L5719
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5720
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5720:
	mov A, B
	add SP, 1
	.loc 7 4483 0
	# }
.data
	.L5721:
	.string "}"
.text
	mov A, .L5721
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5722:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lua_cmp_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 4509 0
	# }
	.loc 7 4489 0
	#   const char* op_str;
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4483 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L5723:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4490 0
	#   switch (op) {
	.loc 7 4506 0
	#       error("oops");
	.loc 7 4489 0
	#   const char* op_str;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 4506 0
	#       error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5724, A, 0
	jmp .L812
	.L5724:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5725, A, 0
	jmp .L813
	.L5725:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5726, A, 0
	jmp .L814
	.L5726:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5727, A, 0
	jmp .L815
	.L5727:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5728, A, 0
	jmp .L816
	.L5728:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5729, A, 0
	jmp .L817
	.L5729:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5730, A, 0
	jmp .L818
	.L5730:
	jmp .L819
	.loc 7 4492 0
	#       op_str = "=="; break;
	.L812:
.data
	.L5731:
	.string "=="
.text
	mov A, .L5731
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4493 0
	#     case JNE:
	jmp .L811
	.loc 7 4494 0
	#       op_str = "~="; break;
	.L813:
.data
	.L5732:
	.string "~="
.text
	mov A, .L5732
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4495 0
	#     case JLT:
	jmp .L811
	.loc 7 4496 0
	#       op_str = "<"; break;
	.L814:
.data
	.L5733:
	.string "<"
.text
	mov A, .L5733
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4497 0
	#     case JGT:
	jmp .L811
	.loc 7 4498 0
	#       op_str = ">"; break;
	.L815:
.data
	.L5734:
	.string ">"
.text
	mov A, .L5734
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4499 0
	#     case JLE:
	jmp .L811
	.loc 7 4500 0
	#       op_str = "<="; break;
	.L816:
.data
	.L5735:
	.string "<="
.text
	mov A, .L5735
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4501 0
	#     case JGE:
	jmp .L811
	.loc 7 4502 0
	#       op_str = ">="; break;
	.L817:
.data
	.L5736:
	.string ">="
.text
	mov A, .L5736
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4503 0
	#     case JMP:
	jmp .L811
	.loc 7 4504 0
	#       return true_str;
	.L818:
	.loc 7 4483 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4506 0
	#       error("oops");
	.L819:
.data
	.L5737:
	.string "oops"
.text
	mov A, .L5737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5738
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5738:
	mov A, B
	add SP, 1
	.L811:
	.loc 7 4509 0
	# }
	.loc 7 4483 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5739
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5739:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4490 0
	#   switch (op) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4509 0
	# }
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4509 0
	# }
	.loc 7 4483 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4509 0
	# }
.data
	.L5740:
	.string "%s %s %s"
.text
	mov A, .L5740
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L5741:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_state_lua:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 4520 0
	#     }
	.loc 7 4514 0
	#   }
	.loc 7 4513 0
	#     emit_line("%s = 0", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 4514 0
	#   }
	.L820:
	.loc 7 4513 0
	#     emit_line("%s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5742, A, 0
	jmp .L5743
	.L5742:
	.loc 7 4514 0
	#   }
	jmp .L822
	.L5743:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4513 0
	#     emit_line("%s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4514 0
	#   }
.data
	.L5744:
	.string "%s = 0"
.text
	mov A, .L5744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5745:
	mov A, B
	add SP, 2
	.L821:
	.loc 7 4513 0
	#     emit_line("%s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4514 0
	#   }
	jmp .L820
	.L822:
	.loc 7 4516 0
	#   emit_line("for _ = 0, ((1 << 24) -1) do mem[_] = 0; end");
.data
	.L5746:
	.string "mem = {}"
.text
	mov A, .L5746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5747:
	mov A, B
	add SP, 1
	.loc 7 4517 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L5748:
	.string "for _ = 0, ((1 << 24) -1) do mem[_] = 0; end"
.text
	mov A, .L5748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5749:
	mov A, B
	add SP, 1
	.loc 7 4520 0
	#     }
	.loc 7 4518 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 4520 0
	#     }
	.L823:
	.loc 7 4509 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L5750, A, 0
	jmp .L5751
	.L5750:
	.loc 7 4520 0
	#     }
	jmp .L825
	.L5751:
	.loc 7 4519 0
	#       emit_line("mem[%d] = %d", mp, data->v);
	.loc 7 4509 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L5752, A, 0
	.loc 7 4520 0
	#     }
	.loc 7 4509 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4518 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4520 0
	#     }
.data
	.L5753:
	.string "mem[%d] = %d"
.text
	mov A, .L5753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5754:
	mov A, B
	add SP, 3
	.L5752:
	.L824:
	.loc 7 4518 0
	#     if (data->v) {
	.loc 7 4509 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 4518 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4520 0
	#     }
	jmp .L823
	.L825:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lua_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4535 0
	# }
	.loc 7 4526 0
	#   emit_line("function func%d()", func_id);
.data
	.L5755:
	.string ""
.text
	mov A, .L5755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5756:
	mov A, B
	add SP, 1
	.loc 7 4527 0
	#   inc_indent();
	.loc 7 4520 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4527 0
	#   inc_indent();
.data
	.L5757:
	.string "function func%d()"
.text
	mov A, .L5757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5758:
	mov A, B
	add SP, 2
	.loc 7 4528 0
	#   emit_line("");
	mov A, .L5759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5759:
	mov A, B
	.loc 7 4529 0
	# 
.data
	.L5760:
	.string ""
.text
	mov A, .L5760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5761:
	mov A, B
	add SP, 1
	.loc 7 4531 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 4520 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4531 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5762:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4531 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 4520 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5763:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4531 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L5764:
	.string "while %d <= pc and pc < %d do"
.text
	mov A, .L5764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5765:
	mov A, B
	add SP, 3
	.loc 7 4533 0
	#   emit_line("if false then");
	mov A, .L5766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5766:
	mov A, B
	.loc 7 4534 0
	#   inc_indent();
.data
	.L5767:
	.string "if false then"
.text
	mov A, .L5767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5768:
	mov A, B
	add SP, 1
	.loc 7 4535 0
	# }
	mov A, .L5769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5769:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lua_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4545 0
	# }
	.loc 7 4539 0
	#   emit_line("end");
	mov A, .L5770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5770:
	mov A, B
	.loc 7 4540 0
	#   emit_line("pc = pc + 1");
.data
	.L5771:
	.string "end"
.text
	mov A, .L5771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5772:
	mov A, B
	add SP, 1
	.loc 7 4541 0
	#   dec_indent();
.data
	.L5773:
	.string "pc = pc + 1"
.text
	mov A, .L5773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5774:
	mov A, B
	add SP, 1
	.loc 7 4542 0
	#   emit_line("end");
	mov A, .L5775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5775:
	mov A, B
	.loc 7 4543 0
	#   dec_indent();
.data
	.L5776:
	.string "end"
.text
	mov A, .L5776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5777:
	mov A, B
	add SP, 1
	.loc 7 4544 0
	#   emit_line("end");
	mov A, .L5778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5778:
	mov A, B
	.loc 7 4545 0
	# }
.data
	.L5779:
	.string "end"
.text
	mov A, .L5779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5780:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lua_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4552 0
	# }
	.loc 7 4549 0
	#   dec_indent();
.data
	.L5781:
	.string ""
.text
	mov A, .L5781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5782:
	mov A, B
	add SP, 1
	.loc 7 4550 0
	#   emit_line("elseif pc == %d then", pc);
	mov A, .L5783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5783:
	mov A, B
	.loc 7 4551 0
	#   inc_indent();
	.loc 7 4545 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4551 0
	#   inc_indent();
.data
	.L5784:
	.string "elseif pc == %d then"
.text
	mov A, .L5784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5785:
	mov A, B
	add SP, 2
	.loc 7 4552 0
	# }
	mov A, .L5786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5786:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
lua_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4618 0
	#     error("oops");
	.loc 7 4556 0
	#   case MOV:
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4618 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5787, A, 0
	jmp .L827
	.L5787:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5788, A, 0
	jmp .L828
	.L5788:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5789, A, 0
	jmp .L829
	.L5789:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5790, A, 0
	jmp .L830
	.L5790:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5791, A, 0
	jmp .L831
	.L5791:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5792, A, 0
	jmp .L832
	.L5792:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5793, A, 0
	jmp .L833
	.L5793:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5794, A, 0
	jmp .L834
	.L5794:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5795, A, 0
	jmp .L835
	.L5795:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5796, A, 0
	jmp .L836
	.L5796:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5797, A, 0
	jmp .L837
	.L5797:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5798, A, 0
	jmp .L838
	.L5798:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5799, A, 0
	jmp .L839
	.L5799:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5800, A, 0
	jmp .L840
	.L5800:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5801, A, 0
	jmp .L841
	.L5801:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5802, A, 0
	jmp .L842
	.L5802:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5803, A, 0
	jmp .L843
	.L5803:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5804, A, 0
	jmp .L844
	.L5804:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5805, A, 0
	jmp .L845
	.L5805:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5806, A, 0
	jmp .L846
	.L5806:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5807, A, 0
	jmp .L847
	.L5807:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5808, A, 0
	jmp .L848
	.L5808:
	jmp .L849
	.loc 7 4557 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.L827:
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5809:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4557 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4557 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4557 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
.data
	.L5810:
	.string "%s = %s"
.text
	mov A, .L5810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5811:
	mov A, B
	add SP, 3
	.loc 7 4559 0
	# 
	jmp .L826
	.loc 7 4561 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.L828:
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5812:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4561 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4561 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4561 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4561 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4561 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
.data
	.L5813:
	.string "%s = (%s + %s) & 16777215"
.text
	mov A, .L5813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5814:
	mov A, B
	add SP, 4
	.loc 7 4565 0
	# 
	jmp .L826
	.loc 7 4567 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.L829:
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5815:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4567 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4567 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4567 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4567 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4567 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
.data
	.L5816:
	.string "%s = (%s - %s) & 16777215"
.text
	mov A, .L5816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5817:
	mov A, B
	add SP, 4
	.loc 7 4571 0
	# 
	jmp .L826
	.loc 7 4573 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.L830:
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5818:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4573 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4573 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4573 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
.data
	.L5819:
	.string "%s = mem[%s]"
.text
	mov A, .L5819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5820:
	mov A, B
	add SP, 3
	.loc 7 4575 0
	# 
	jmp .L826
	.loc 7 4577 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.L831:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4577 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4577 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5821:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4577 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L5822:
	.string "mem[%s] = %s"
.text
	mov A, .L5822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5823
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5823:
	mov A, B
	add SP, 3
	.loc 7 4579 0
	# 
	jmp .L826
	.loc 7 4581 0
	#     emit_line("io.write(string.char(%s))", src_str(inst));
	.L832:
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5824
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5824:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4581 0
	#     emit_line("io.write(string.char(%s))", src_str(inst));
.data
	.L5825:
	.string "io.write(string.char(%s))"
.text
	mov A, .L5825
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5826
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5826:
	mov A, B
	add SP, 2
	.loc 7 4583 0
	# 
	jmp .L826
	.loc 7 4585 0
	#     emit_line("_ = io.read(1); %s = _ and string.byte(_) or 0",
	.L833:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4585 0
	#     emit_line("_ = io.read(1); %s = _ and string.byte(_) or 0",
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4585 0
	#     emit_line("_ = io.read(1); %s = _ and string.byte(_) or 0",
.data
	.L5827:
	.string "_ = io.read(1); %s = _ and string.byte(_) or 0"
.text
	mov A, .L5827
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5828
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5828:
	mov A, B
	add SP, 2
	.loc 7 4588 0
	# 
	jmp .L826
	.loc 7 4590 0
	#     emit_line("os.exit(0)");
	.L834:
.data
	.L5829:
	.string "os.exit(0)"
.text
	mov A, .L5829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5830:
	mov A, B
	add SP, 1
	.loc 7 4592 0
	# 
	jmp .L826
	.loc 7 4594 0
	#     break;
	.L835:
	jmp .L826
	.loc 7 4597 0
	#   case NE:
	.L836:
	.L837:
	.L838:
	.L839:
	.L840:
	.L841:
.data
	.L5831:
	.string "true"
.text
	mov A, .L5831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lua_cmp_str
	.L5832:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4597 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4597 0
	#   case NE:
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4597 0
	#   case NE:
.data
	.L5833:
	.string "%s = ((%s) and 1 or 0)"
.text
	mov A, .L5833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5834:
	mov A, B
	add SP, 3
	.loc 7 4605 0
	# 
	jmp .L826
	.loc 7 4607 0
	#   case JNE:
	.L842:
	.L843:
	.L844:
	.L845:
	.L846:
	.L847:
	.L848:
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L5835:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4607 0
	#   case JNE:
.data
	.L5836:
	.string "true"
.text
	mov A, .L5836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4552 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp lua_cmp_str
	.L5837:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4607 0
	#   case JNE:
.data
	.L5838:
	.string "if %s then pc = %s - 1; end"
.text
	mov A, .L5838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5839:
	mov A, B
	add SP, 3
	.loc 7 4616 0
	# 
	jmp .L826
	.loc 7 4618 0
	#     error("oops");
	.L849:
.data
	.L5840:
	.string "oops"
.text
	mov A, .L5840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5841:
	mov A, B
	add SP, 1
	.L826:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_lua:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 4641 0
	# }
	.loc 7 4624 0
	# 
	.loc 7 4618 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_lua
	.L5842:
	mov A, B
	add SP, 1
	.loc 7 4626 0
	#                                          lua_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, lua_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, lua_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, lua_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, lua_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4618 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L5843:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4632 0
	#   emit_line("while true do");
.data
	.L5844:
	.string ""
.text
	mov A, .L5844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5845:
	mov A, B
	add SP, 1
	.loc 7 4633 0
	#   inc_indent();
.data
	.L5846:
	.string "while true do"
.text
	mov A, .L5846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5847:
	mov A, B
	add SP, 1
	.loc 7 4634 0
	#   emit_line("if false then");
	mov A, .L5848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5848:
	mov A, B
	.loc 7 4635 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L5849:
	.string "if false then"
.text
	mov A, .L5849
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5850:
	mov A, B
	add SP, 1
	.loc 7 4637 0
	#   }
	.loc 7 4636 0
	#     emit_line("elseif pc < %d then func%d();", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 4637 0
	#   }
	.L850:
	.loc 7 4636 0
	#     emit_line("elseif pc < %d then func%d();", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4626 0
	#                                          lua_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5851, A, 0
	jmp .L5852
	.L5851:
	.loc 7 4637 0
	#   }
	jmp .L852
	.L5852:
	.loc 7 4636 0
	#     emit_line("elseif pc < %d then func%d();", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4637 0
	#   }
	.loc 7 4636 0
	#     emit_line("elseif pc < %d then func%d();", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4637 0
	#   }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5853:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4637 0
	#   }
.data
	.L5854:
	.string "elseif pc < %d then func%d();"
.text
	mov A, .L5854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5855:
	mov A, B
	add SP, 3
	.L851:
	.loc 7 4636 0
	#     emit_line("elseif pc < %d then func%d();", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4637 0
	#   }
	jmp .L850
	.L852:
	.loc 7 4639 0
	#   dec_indent();
.data
	.L5856:
	.string "end"
.text
	mov A, .L5856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5857:
	mov A, B
	add SP, 1
	.loc 7 4640 0
	#   emit_line("end");
	mov A, .L5858
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5858:
	mov A, B
	.loc 7 4641 0
	# }
.data
	.L5859:
	.string "end"
.text
	mov A, .L5859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5860:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	func_idx:

	.long 0
	.data
	case_idx:

	.long 0
	.data
	case_pc:

	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data
	case_label:

	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.data
	putc_idx:

	.long 0
	.text
ll_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4659 0
	# }
	.loc 7 4653 0
	#   case_idx = 0;
	mov A, 1
	mov B, func_idx
	store A, B
	.loc 7 4654 0
	#   putc_idx = 0;
	mov A, 0
	mov B, case_idx
	store A, B
	.loc 7 4655 0
	#   for (int i = 0; i < 7; i++) {
	mov A, 0
	mov B, putc_idx
	store A, B
	.loc 7 4657 0
	#   }
	.loc 7 4656 0
	#     emit_line("@%s = common global i32 0, align 4", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 4657 0
	#   }
	.L853:
	.loc 7 4656 0
	#     emit_line("@%s = common global i32 0, align 4", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5861, A, 0
	jmp .L5862
	.L5861:
	.loc 7 4657 0
	#   }
	jmp .L855
	.L5862:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4656 0
	#     emit_line("@%s = common global i32 0, align 4", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4657 0
	#   }
.data
	.L5863:
	.string "@%s = common global i32 0, align 4"
.text
	mov A, .L5863
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5864:
	mov A, B
	add SP, 2
	.L854:
	.loc 7 4656 0
	#     emit_line("@%s = common global i32 0, align 4", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4657 0
	#   }
	jmp .L853
	.L855:
	.loc 7 4659 0
	# }
.data
	.L5865:
	.string "@mem = common global [16777216 x i32] zeroinitializer, align 16"
.text
	mov A, .L5865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5866:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ll_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4689 0
	# }
	.loc 7 4663 0
	#   emit_line("define void @func%d() {", func_id);
.data
	.L5867:
	.string ""
.text
	mov A, .L5867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5868:
	mov A, B
	add SP, 1
	.loc 7 4664 0
	#   inc_indent();
	.loc 7 4659 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4664 0
	#   inc_indent();
.data
	.L5869:
	.string "define void @func%d() {"
.text
	mov A, .L5869
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5870:
	mov A, B
	add SP, 2
	.loc 7 4665 0
	# 
	mov A, .L5871
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5871:
	mov A, B
	.loc 7 4667 0
	# 
.data
	.L5872:
	.string "br label %%1"
.text
	mov A, .L5872
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5873
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5873:
	mov A, B
	add SP, 1
	.loc 7 4669 0
	#   emit_line("; <label>:1");
.data
	.L5874:
	.string ""
.text
	mov A, .L5874
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5875
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5875:
	mov A, B
	add SP, 1
	.loc 7 4670 0
	#   emit_line("%%2 = load i32, i32* @pc, align 4");
.data
	.L5876:
	.string "; <label>:1"
.text
	mov A, .L5876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5877:
	mov A, B
	add SP, 1
	.loc 7 4671 0
	#   emit_line("%%3 = icmp ule i32 %d, %%2", func_id * CHUNKED_FUNC_SIZE);
.data
	.L5878:
	.string "%%2 = load i32, i32* @pc, align 4"
.text
	mov A, .L5878
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5879:
	mov A, B
	add SP, 1
	.loc 7 4672 0
	#   emit_line("br i1 %%3, label %%4, label %%7");
	.loc 7 4659 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5880:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4672 0
	#   emit_line("br i1 %%3, label %%4, label %%7");
.data
	.L5881:
	.string "%%3 = icmp ule i32 %d, %%2"
.text
	mov A, .L5881
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5882:
	mov A, B
	add SP, 2
	.loc 7 4673 0
	# 
.data
	.L5883:
	.string "br i1 %%3, label %%4, label %%7"
.text
	mov A, .L5883
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5884
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5884:
	mov A, B
	add SP, 1
	.loc 7 4675 0
	#   emit_line("; <label>:4");
.data
	.L5885:
	.string ""
.text
	mov A, .L5885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5886
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5886:
	mov A, B
	add SP, 1
	.loc 7 4676 0
	#   emit_line("%%5 = load i32, i32* @pc, align 4");
.data
	.L5887:
	.string "; <label>:4"
.text
	mov A, .L5887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5888:
	mov A, B
	add SP, 1
	.loc 7 4677 0
	#   emit_line("%%6 = icmp ult i32 %%5, %d", (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L5889:
	.string "%%5 = load i32, i32* @pc, align 4"
.text
	mov A, .L5889
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5890
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5890:
	mov A, B
	add SP, 1
	.loc 7 4678 0
	#   emit_line("br label %%7");
	.loc 7 4659 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4678 0
	#   emit_line("br label %%7");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5891
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L5891:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4678 0
	#   emit_line("br label %%7");
.data
	.L5892:
	.string "%%6 = icmp ult i32 %%5, %d"
.text
	mov A, .L5892
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5893
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5893:
	mov A, B
	add SP, 2
	.loc 7 4679 0
	# 
.data
	.L5894:
	.string "br label %%7"
.text
	mov A, .L5894
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5895
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5895:
	mov A, B
	add SP, 1
	.loc 7 4681 0
	#   emit_line("; <label>:7");
.data
	.L5896:
	.string ""
.text
	mov A, .L5896
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5897:
	mov A, B
	add SP, 1
	.loc 7 4682 0
	#   emit_line("%%8 = phi i1 [ false, %%1 ], [ %%6, %%4 ]");
.data
	.L5898:
	.string "; <label>:7"
.text
	mov A, .L5898
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5899:
	mov A, B
	add SP, 1
	.loc 7 4683 0
	#   emit_line("br i1 %%8, label %%switch_top, label %%func_bottom");
.data
	.L5900:
	.string "%%8 = phi i1 [ false, %%1 ], [ %%6, %%4 ]"
.text
	mov A, .L5900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5901
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5901:
	mov A, B
	add SP, 1
	.loc 7 4684 0
	# 
.data
	.L5902:
	.string "br i1 %%8, label %%switch_top, label %%func_bottom"
.text
	mov A, .L5902
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5903
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5903:
	mov A, B
	add SP, 1
	.loc 7 4686 0
	#   emit_line("; <label>:9");
.data
	.L5904:
	.string ""
.text
	mov A, .L5904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5905:
	mov A, B
	add SP, 1
	.loc 7 4687 0
	#   /* set func_idx */
.data
	.L5906:
	.string "; <label>:9"
.text
	mov A, .L5906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5907:
	mov A, B
	add SP, 1
	.loc 7 4689 0
	# }
	mov A, 10
	mov B, func_idx
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ll_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4721 0
	# }
	.loc 7 4693 0
	#   emit_line("");
.data
	.L5908:
	.string "br label %%case_bottom"
.text
	mov A, .L5908
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5909:
	mov A, B
	add SP, 1
	.loc 7 4694 0
	#   emit_line("switch_top:");
.data
	.L5910:
	.string ""
.text
	mov A, .L5910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5911:
	mov A, B
	add SP, 1
	.loc 7 4695 0
	#   emit_line("%%%d = load i32, i32* @pc, align 4", func_idx);
.data
	.L5912:
	.string "switch_top:"
.text
	mov A, .L5912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5913:
	mov A, B
	add SP, 1
	.loc 7 4696 0
	#   emit_line("switch i32 %%%d, label %%case_bottom [", func_idx);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4696 0
	#   emit_line("switch i32 %%%d, label %%case_bottom [", func_idx);
.data
	.L5914:
	.string "%%%d = load i32, i32* @pc, align 4"
.text
	mov A, .L5914
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5915:
	mov A, B
	add SP, 2
	.loc 7 4697 0
	#   inc_indent();
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4697 0
	#   inc_indent();
.data
	.L5916:
	.string "switch i32 %%%d, label %%case_bottom ["
.text
	mov A, .L5916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5917:
	mov A, B
	add SP, 2
	.loc 7 4698 0
	#   emit_line("i32 -1, label %%9");
	mov A, .L5918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L5918:
	mov A, B
	.loc 7 4699 0
	#   for (int i=0; i<case_idx; i++) {
.data
	.L5919:
	.string "i32 -1, label %%9"
.text
	mov A, .L5919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5920:
	mov A, B
	add SP, 1
	.loc 7 4701 0
	#   }
	.loc 7 4700 0
	#     emit_line("i32 %d, label %%%d", case_pc[i], case_label[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 4701 0
	#   }
	.L856:
	.loc 7 4700 0
	#     emit_line("i32 %d, label %%%d", case_pc[i], case_label[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, case_idx
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L5921, A, 0
	jmp .L5922
	.L5921:
	.loc 7 4701 0
	#   }
	jmp .L858
	.L5922:
	.loc 7 4641 0
	# }
	mov A, case_label
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4700 0
	#     emit_line("i32 %d, label %%%d", case_pc[i], case_label[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4701 0
	#   }
	.loc 7 4641 0
	# }
	mov A, case_pc
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4700 0
	#     emit_line("i32 %d, label %%%d", case_pc[i], case_label[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4701 0
	#   }
.data
	.L5923:
	.string "i32 %d, label %%%d"
.text
	mov A, .L5923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5924:
	mov A, B
	add SP, 3
	.L857:
	.loc 7 4700 0
	#     emit_line("i32 %d, label %%%d", case_pc[i], case_label[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 4701 0
	#   }
	jmp .L856
	.L858:
	.loc 7 4703 0
	#   emit_line("]");
	mov A, .L5925
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5925:
	mov A, B
	.loc 7 4704 0
	# 
.data
	.L5926:
	.string "]"
.text
	mov A, .L5926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5927
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5927:
	mov A, B
	add SP, 1
	.loc 7 4706 0
	#   emit_line("case_bottom:");
.data
	.L5928:
	.string ""
.text
	mov A, .L5928
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5929
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5929:
	mov A, B
	add SP, 1
	.loc 7 4707 0
	#   emit_line("%%%d = load i32, i32* @pc, align 4", func_idx+1);
.data
	.L5930:
	.string "case_bottom:"
.text
	mov A, .L5930
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5931:
	mov A, B
	add SP, 1
	.loc 7 4708 0
	#   emit_line("%%%d = add i32 %%%d, 1", func_idx+2, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4708 0
	#   emit_line("%%%d = add i32 %%%d, 1", func_idx+2, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5932:
	.string "%%%d = load i32, i32* @pc, align 4"
.text
	mov A, .L5932
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5933:
	mov A, B
	add SP, 2
	.loc 7 4709 0
	#   emit_line("store i32 %%%d, i32* @pc, align 4", func_idx+2);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4709 0
	#   emit_line("store i32 %%%d, i32* @pc, align 4", func_idx+2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4709 0
	#   emit_line("store i32 %%%d, i32* @pc, align 4", func_idx+2);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5934:
	.string "%%%d = add i32 %%%d, 1"
.text
	mov A, .L5934
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5935
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5935:
	mov A, B
	add SP, 3
	.loc 7 4710 0
	#   emit_line("br label %%1");
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4710 0
	#   emit_line("br label %%1");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5936:
	.string "store i32 %%%d, i32* @pc, align 4"
.text
	mov A, .L5936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5937:
	mov A, B
	add SP, 2
	.loc 7 4711 0
	# 
.data
	.L5938:
	.string "br label %%1"
.text
	mov A, .L5938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5939:
	mov A, B
	add SP, 1
	.loc 7 4713 0
	#   emit_line("func_bottom:");
.data
	.L5940:
	.string ""
.text
	mov A, .L5940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5941:
	mov A, B
	add SP, 1
	.loc 7 4714 0
	#   emit_line("ret void");
.data
	.L5942:
	.string "func_bottom:"
.text
	mov A, .L5942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5943:
	mov A, B
	add SP, 1
	.loc 7 4715 0
	#   dec_indent();
.data
	.L5944:
	.string "ret void"
.text
	mov A, .L5944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5945:
	mov A, B
	add SP, 1
	.loc 7 4716 0
	#   emit_line("}");
	mov A, .L5946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L5946:
	mov A, B
	.loc 7 4717 0
	#   /* reset func_idx */
.data
	.L5947:
	.string "}"
.text
	mov A, .L5947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5948:
	mov A, B
	add SP, 1
	.loc 7 4719 0
	#   case_idx = 0;
	mov A, 1
	mov B, func_idx
	store A, B
	.loc 7 4720 0
	#   putc_idx = 0;
	mov A, 0
	mov B, case_idx
	store A, B
	.loc 7 4721 0
	# }
	mov A, 0
	mov B, putc_idx
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ll_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4732 0
	# }
	.loc 7 4725 0
	# 
.data
	.L5949:
	.string "br label %%case_bottom"
.text
	mov A, .L5949
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5950:
	mov A, B
	add SP, 1
	.loc 7 4727 0
	#   emit_line("; <label>:%d", func_idx);
.data
	.L5951:
	.string ""
.text
	mov A, .L5951
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5952:
	mov A, B
	add SP, 1
	.loc 7 4728 0
	#   case_pc[case_idx] = pc;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4728 0
	#   case_pc[case_idx] = pc;
.data
	.L5953:
	.string "; <label>:%d"
.text
	mov A, .L5953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5954
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5954:
	mov A, B
	add SP, 2
	.loc 7 4729 0
	#   case_label[case_idx] = func_idx;
	.loc 7 4721 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4729 0
	#   case_label[case_idx] = func_idx;
	.loc 7 4641 0
	# }
	mov A, case_pc
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, case_idx
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4730 0
	#   case_idx += 1;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4730 0
	#   case_idx += 1;
	.loc 7 4641 0
	# }
	mov A, case_label
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, case_idx
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 4731 0
	#   func_idx += 1;
	.loc 7 4641 0
	# }
	mov B, case_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4731 0
	#   func_idx += 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, case_idx
	store A, B
	.loc 7 4732 0
	# }
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4732 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ll_cmp_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 4750 0
	#       error("oops");
	.loc 7 4736 0
	#   switch (op) {
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4732 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L5955:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4750 0
	#       error("oops");
	.loc 7 4736 0
	#   switch (op) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4750 0
	#       error("oops");
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5956, A, 0
	jmp .L860
	.L5956:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5957, A, 0
	jmp .L861
	.L5957:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5958, A, 0
	jmp .L862
	.L5958:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5959, A, 0
	jmp .L863
	.L5959:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5960, A, 0
	jmp .L864
	.L5960:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5961, A, 0
	jmp .L865
	.L5961:
	jmp .L866
	.loc 7 4738 0
	#       return "eq";
	.L860:
.data
	.L5962:
	.string "eq"
.text
	mov A, .L5962
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4740 0
	#       return "ne";
	.L861:
.data
	.L5963:
	.string "ne"
.text
	mov A, .L5963
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4742 0
	#       return "ult";
	.L862:
.data
	.L5964:
	.string "ult"
.text
	mov A, .L5964
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4744 0
	#       return "ugt";
	.L863:
.data
	.L5965:
	.string "ugt"
.text
	mov A, .L5965
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4746 0
	#       return "ule";
	.L864:
.data
	.L5966:
	.string "ule"
.text
	mov A, .L5966
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4748 0
	#       return "uge";
	.L865:
.data
	.L5967:
	.string "uge"
.text
	mov A, .L5967
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 4750 0
	#       error("oops");
	.L866:
.data
	.L5968:
	.string "oops"
.text
	mov A, .L5968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5969:
	mov A, B
	add SP, 1
	.L859:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ll_emit_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4768 0
	#   }
	.loc 7 4756 0
	#     emit_line("%%%d = load i32, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	.loc 7 4750 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5970, A, 0
	.loc 7 4761 0
	#   } else if (inst->src.type == IMM) {
	.loc 7 4757 0
	#     emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4757 0
	#     emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 4750 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4757 0
	#     emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
.data
	.L5971:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L5971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5972:
	mov A, B
	add SP, 3
	.loc 7 4758 0
	#     emit_line("%%%d = icmp %s i32 %%%d, %%%d",
	.loc 7 4750 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5973:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4758 0
	#     emit_line("%%%d = icmp %s i32 %%%d, %%%d",
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4758 0
	#     emit_line("%%%d = icmp %s i32 %%%d, %%%d",
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5974:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L5974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5975:
	mov A, B
	add SP, 3
	.loc 7 4759 0
	#               func_idx+2, ll_cmp_str(inst), func_idx, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4759 0
	#               func_idx+2, ll_cmp_str(inst), func_idx, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4759 0
	#               func_idx+2, ll_cmp_str(inst), func_idx, func_idx+1);
	.loc 7 4750 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ll_cmp_str
	.L5976:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4759 0
	#               func_idx+2, ll_cmp_str(inst), func_idx, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4759 0
	#               func_idx+2, ll_cmp_str(inst), func_idx, func_idx+1);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5977:
	.string "%%%d = icmp %s i32 %%%d, %%%d"
.text
	mov A, .L5977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5978:
	mov A, B
	add SP, 5
	.loc 7 4761 0
	#   } else if (inst->src.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4761 0
	#   } else if (inst->src.type == IMM) {
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L5979
	.L5970:
	.loc 7 4768 0
	#   }
	.loc 7 4761 0
	#   } else if (inst->src.type == IMM) {
	.loc 7 4750 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5980, A, 0
	.loc 7 4766 0
	#   } else {
	.loc 7 4763 0
	#     emit_line("%%%d = icmp %s i32 %%%d, %s",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4763 0
	#     emit_line("%%%d = icmp %s i32 %%%d, %s",
	.loc 7 4750 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4763 0
	#     emit_line("%%%d = icmp %s i32 %%%d, %s",
.data
	.L5981:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L5981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5982:
	mov A, B
	add SP, 3
	.loc 7 4764 0
	#               func_idx+1, ll_cmp_str(inst), func_idx, src_str(inst));
	.loc 7 4750 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5983:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4764 0
	#               func_idx+1, ll_cmp_str(inst), func_idx, src_str(inst));
	.loc 7 4750 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ll_cmp_str
	.L5984:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4764 0
	#               func_idx+1, ll_cmp_str(inst), func_idx, src_str(inst));
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4764 0
	#               func_idx+1, ll_cmp_str(inst), func_idx, src_str(inst));
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5985:
	.string "%%%d = icmp %s i32 %%%d, %s"
.text
	mov A, .L5985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5986:
	mov A, B
	add SP, 5
	.loc 7 4766 0
	#   } else {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4766 0
	#   } else {
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L5987
	.L5980:
	.loc 7 4768 0
	#   }
.data
	.L5988:
	.string "invalid value"
.text
	mov A, .L5988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L5989:
	mov A, B
	add SP, 1
	.L5987:
	.L5979:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ll_emit_load:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 4783 0
	#   }
	.loc 7 4773 0
	#     emit_line("%%%d = load i32, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	.loc 7 4768 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5990, A, 0
	.loc 7 4777 0
	#   } else if (inst->src.type == IMM) {
	.loc 7 4774 0
	#     emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4774 0
	#     emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 4768 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4774 0
	#     emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
.data
	.L5991:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L5991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5992:
	mov A, B
	add SP, 3
	.loc 7 4775 0
	#     func_idx += 2;
	.loc 7 4768 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L5993:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4775 0
	#     func_idx += 2;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4775 0
	#     func_idx += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L5994:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L5994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L5995:
	mov A, B
	add SP, 3
	.loc 7 4776 0
	#     return format("%d", func_idx);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4776 0
	#     return format("%d", func_idx);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	.loc 7 4777 0
	#   } else if (inst->src.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4777 0
	#   } else if (inst->src.type == IMM) {
.data
	.L5996:
	.string "%d"
.text
	mov A, .L5996
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L5997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L5997:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L5998
	.L5990:
	.loc 7 4783 0
	#   }
	.loc 7 4777 0
	#   } else if (inst->src.type == IMM) {
	.loc 7 4768 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L5999, A, 0
	.loc 7 4781 0
	#   } else {
	.loc 7 4779 0
	#     func_idx += 1;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4779 0
	#     func_idx += 1;
	.loc 7 4768 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4779 0
	#     func_idx += 1;
.data
	.L6000:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6001:
	mov A, B
	add SP, 3
	.loc 7 4780 0
	#     return format("@%s", reg_names[inst->dst.reg]);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4780 0
	#     return format("@%s", reg_names[inst->dst.reg]);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	.loc 7 4781 0
	#   } else {
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4781 0
	#   } else {
	.loc 7 4768 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4781 0
	#   } else {
.data
	.L6002:
	.string "@%s"
.text
	mov A, .L6002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L6003:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L6004
	.L5999:
	.loc 7 4783 0
	#   }
.data
	.L6005:
	.string "invalid value"
.text
	mov A, .L6005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6006:
	mov A, B
	add SP, 1
	.L6004:
	.L5998:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ll_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 4972 0
	#     error("oops");
	.loc 7 4788 0
	#   case MOV:
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4972 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6007, A, 0
	jmp .L868
	.L6007:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6008, A, 0
	jmp .L869
	.L6008:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6009, A, 0
	jmp .L870
	.L6009:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6010, A, 0
	jmp .L871
	.L6010:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6011, A, 0
	jmp .L872
	.L6011:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6012, A, 0
	jmp .L873
	.L6012:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6013, A, 0
	jmp .L874
	.L6013:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6014, A, 0
	jmp .L875
	.L6014:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6015, A, 0
	jmp .L876
	.L6015:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6016, A, 0
	jmp .L877
	.L6016:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6017, A, 0
	jmp .L878
	.L6017:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6018, A, 0
	jmp .L879
	.L6018:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6019, A, 0
	jmp .L880
	.L6019:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6020, A, 0
	jmp .L881
	.L6020:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6021, A, 0
	jmp .L882
	.L6021:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6022, A, 0
	jmp .L883
	.L6022:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6023, A, 0
	jmp .L884
	.L6023:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6024, A, 0
	jmp .L885
	.L6024:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6025, A, 0
	jmp .L886
	.L6025:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6026, A, 0
	jmp .L887
	.L6026:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6027, A, 0
	jmp .L888
	.L6027:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6028, A, 0
	jmp .L889
	.L6028:
	jmp .L890
	.loc 7 4795 0
	#     }
	.loc 7 4789 0
	#     if (inst->src.type == REG) {
	.L868:
	.loc 7 4795 0
	#     }
	.loc 7 4789 0
	#     if (inst->src.type == REG) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6029, A, 0
	.loc 7 4793 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4791 0
	#       emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6030:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4791 0
	#       emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
.data
	.L6031:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6032
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6032:
	mov A, B
	add SP, 3
	.loc 7 4792 0
	#       func_idx += 1;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4792 0
	#       func_idx += 1;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4792 0
	#       func_idx += 1;
.data
	.L6033:
	.string "store i32 %%%d, i32* @%s, align 4"
.text
	mov A, .L6033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6034:
	mov A, B
	add SP, 3
	.loc 7 4793 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4793 0
	#     } else if (inst->src.type == IMM) {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6035
	.L6029:
	.loc 7 4795 0
	#     }
	.loc 7 4793 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6036, A, 0
	.loc 7 4795 0
	#     }
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4795 0
	#     }
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4795 0
	#     }
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6037:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4795 0
	#     }
.data
	.L6038:
	.string "store i32 %s, i32* @%s, align 4"
.text
	mov A, .L6038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6039
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6039:
	mov A, B
	add SP, 3
	.L6036:
	.L6035:
	.loc 7 4797 0
	# 
	jmp .L867
	.loc 7 4810 0
	#     }
	.loc 7 4799 0
	#     if (inst->src.type == REG) {
	.L869:
	.loc 7 4810 0
	#     }
	.loc 7 4799 0
	#     if (inst->src.type == REG) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6040, A, 0
	.loc 7 4804 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4801 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4801 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4801 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
.data
	.L6041:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6041
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6042:
	mov A, B
	add SP, 3
	.loc 7 4802 0
	#       emit_line("%%%d = add i32 %%%d, %%%d", func_idx+2, func_idx, func_idx+1);
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6043
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6043:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4802 0
	#       emit_line("%%%d = add i32 %%%d, %%%d", func_idx+2, func_idx, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4802 0
	#       emit_line("%%%d = add i32 %%%d, %%%d", func_idx+2, func_idx, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6044:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6044
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6045:
	mov A, B
	add SP, 3
	.loc 7 4803 0
	#       func_idx += 3;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4803 0
	#       func_idx += 3;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4803 0
	#       func_idx += 3;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4803 0
	#       func_idx += 3;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6046:
	.string "%%%d = add i32 %%%d, %%%d"
.text
	mov A, .L6046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6047:
	mov A, B
	add SP, 4
	.loc 7 4804 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4804 0
	#     } else if (inst->src.type == IMM) {
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6048
	.L6040:
	.loc 7 4810 0
	#     }
	.loc 7 4804 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6049, A, 0
	.loc 7 4808 0
	#     } else {
	.loc 7 4806 0
	#       emit_line("%%%d = add i32 %%%d, %s", func_idx+1, func_idx, src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4806 0
	#       emit_line("%%%d = add i32 %%%d, %s", func_idx+1, func_idx, src_str(inst));
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4806 0
	#       emit_line("%%%d = add i32 %%%d, %s", func_idx+1, func_idx, src_str(inst));
.data
	.L6050:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6051:
	mov A, B
	add SP, 3
	.loc 7 4807 0
	#       func_idx += 2;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6052:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4807 0
	#       func_idx += 2;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4807 0
	#       func_idx += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6053:
	.string "%%%d = add i32 %%%d, %s"
.text
	mov A, .L6053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6054:
	mov A, B
	add SP, 4
	.loc 7 4808 0
	#     } else {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4808 0
	#     } else {
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6055
	.L6049:
	.loc 7 4810 0
	#     }
.data
	.L6056:
	.string "invalid value"
.text
	mov A, .L6056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6057:
	mov A, B
	add SP, 1
	.L6055:
	.L6048:
	.loc 7 4812 0
	#     emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4812 0
	#     emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4812 0
	#     emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
.data
	.L6058:
	.string "%%%d = and i32 %%%d, 16777215"
.text
	mov A, .L6058
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6059:
	mov A, B
	add SP, 3
	.loc 7 4813 0
	#     func_idx += 1;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4813 0
	#     func_idx += 1;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4813 0
	#     func_idx += 1;
.data
	.L6060:
	.string "store i32 %%%d, i32* @%s, align 4"
.text
	mov A, .L6060
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6061:
	mov A, B
	add SP, 3
	.loc 7 4814 0
	#     break;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4814 0
	#     break;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	.loc 7 4815 0
	# 
	jmp .L867
	.loc 7 4828 0
	#     }
	.loc 7 4817 0
	#     if (inst->src.type == REG) {
	.L870:
	.loc 7 4828 0
	#     }
	.loc 7 4817 0
	#     if (inst->src.type == REG) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6062, A, 0
	.loc 7 4822 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4819 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4819 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4819 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
.data
	.L6063:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6064:
	mov A, B
	add SP, 3
	.loc 7 4820 0
	#       emit_line("%%%d = sub i32 %%%d, %%%d", func_idx+2, func_idx, func_idx+1);
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6065:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4820 0
	#       emit_line("%%%d = sub i32 %%%d, %%%d", func_idx+2, func_idx, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4820 0
	#       emit_line("%%%d = sub i32 %%%d, %%%d", func_idx+2, func_idx, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6066:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6067:
	mov A, B
	add SP, 3
	.loc 7 4821 0
	#       func_idx += 3;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4821 0
	#       func_idx += 3;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4821 0
	#       func_idx += 3;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4821 0
	#       func_idx += 3;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6068:
	.string "%%%d = sub i32 %%%d, %%%d"
.text
	mov A, .L6068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6069
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6069:
	mov A, B
	add SP, 4
	.loc 7 4822 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4822 0
	#     } else if (inst->src.type == IMM) {
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6070
	.L6062:
	.loc 7 4828 0
	#     }
	.loc 7 4822 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6071, A, 0
	.loc 7 4826 0
	#     } else {
	.loc 7 4824 0
	#       emit_line("%%%d = sub i32 %%%d, %s", func_idx+1, func_idx, src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4824 0
	#       emit_line("%%%d = sub i32 %%%d, %s", func_idx+1, func_idx, src_str(inst));
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4824 0
	#       emit_line("%%%d = sub i32 %%%d, %s", func_idx+1, func_idx, src_str(inst));
.data
	.L6072:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6073:
	mov A, B
	add SP, 3
	.loc 7 4825 0
	#       func_idx += 2;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6074:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4825 0
	#       func_idx += 2;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4825 0
	#       func_idx += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6075:
	.string "%%%d = sub i32 %%%d, %s"
.text
	mov A, .L6075
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6076:
	mov A, B
	add SP, 4
	.loc 7 4826 0
	#     } else {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4826 0
	#     } else {
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6077
	.L6071:
	.loc 7 4828 0
	#     }
.data
	.L6078:
	.string "invalid value"
.text
	mov A, .L6078
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6079:
	mov A, B
	add SP, 1
	.L6077:
	.L6070:
	.loc 7 4830 0
	#     emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4830 0
	#     emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4830 0
	#     emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
.data
	.L6080:
	.string "%%%d = and i32 %%%d, 16777215"
.text
	mov A, .L6080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6081:
	mov A, B
	add SP, 3
	.loc 7 4831 0
	#     func_idx += 1;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4831 0
	#     func_idx += 1;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4831 0
	#     func_idx += 1;
.data
	.L6082:
	.string "store i32 %%%d, i32* @%s, align 4"
.text
	mov A, .L6082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6083:
	mov A, B
	add SP, 3
	.loc 7 4832 0
	#     break;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4832 0
	#     break;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	.loc 7 4833 0
	# 
	jmp .L867
	.loc 7 4848 0
	#     }
	.loc 7 4835 0
	#     if (inst->src.type == REG) {
	.L871:
	.loc 7 4848 0
	#     }
	.loc 7 4835 0
	#     if (inst->src.type == REG) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6084, A, 0
	.loc 7 4842 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4837 0
	#       emit_line("%%%d = zext i32 %%%d to i64", func_idx+1, func_idx);
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6085:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4837 0
	#       emit_line("%%%d = zext i32 %%%d to i64", func_idx+1, func_idx);
.data
	.L6086:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6087:
	mov A, B
	add SP, 3
	.loc 7 4838 0
	#       emit_line("%%%d = getelementptr inbounds [16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %%%d", func_idx+2, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4838 0
	#       emit_line("%%%d = getelementptr inbounds [16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %%%d", func_idx+2, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4838 0
	#       emit_line("%%%d = getelementptr inbounds [16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %%%d", func_idx+2, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6088:
	.string "%%%d = zext i32 %%%d to i64"
.text
	mov A, .L6088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6089:
	mov A, B
	add SP, 3
	.loc 7 4839 0
	#       emit_line("%%%d = load i32, i32* %%%d, align 4", func_idx+3, func_idx+2);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4839 0
	#       emit_line("%%%d = load i32, i32* %%%d, align 4", func_idx+3, func_idx+2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4839 0
	#       emit_line("%%%d = load i32, i32* %%%d, align 4", func_idx+3, func_idx+2);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6090:
	.string "%%%d = getelementptr inbounds [16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %%%d"
.text
	mov A, .L6090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6091:
	mov A, B
	add SP, 3
	.loc 7 4840 0
	#       emit_line("store i32 %%%d, i32* @%s, align 4", func_idx+3, reg_names[inst->dst.reg]);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4840 0
	#       emit_line("store i32 %%%d, i32* @%s, align 4", func_idx+3, reg_names[inst->dst.reg]);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4840 0
	#       emit_line("store i32 %%%d, i32* @%s, align 4", func_idx+3, reg_names[inst->dst.reg]);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6092:
	.string "%%%d = load i32, i32* %%%d, align 4"
.text
	mov A, .L6092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6093:
	mov A, B
	add SP, 3
	.loc 7 4841 0
	#       func_idx += 4;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4841 0
	#       func_idx += 4;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4841 0
	#       func_idx += 4;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4841 0
	#       func_idx += 4;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6094:
	.string "store i32 %%%d, i32* @%s, align 4"
.text
	mov A, .L6094
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6095
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6095:
	mov A, B
	add SP, 3
	.loc 7 4842 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4842 0
	#     } else if (inst->src.type == IMM) {
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6096
	.L6084:
	.loc 7 4848 0
	#     }
	.loc 7 4842 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6097, A, 0
	.loc 7 4846 0
	#     } else {
	.loc 7 4844 0
	#       emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6098
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6098:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4844 0
	#       emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
.data
	.L6099:
	.string "%%%d = load i32, i32* getelementptr inbounds ([16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %s)"
.text
	mov A, .L6099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6100:
	mov A, B
	add SP, 3
	.loc 7 4845 0
	#       func_idx += 1;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4845 0
	#       func_idx += 1;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4845 0
	#       func_idx += 1;
.data
	.L6101:
	.string "store i32 %%%d, i32* @%s, align 4"
.text
	mov A, .L6101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6102:
	mov A, B
	add SP, 3
	.loc 7 4846 0
	#     } else {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4846 0
	#     } else {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6103
	.L6097:
	.loc 7 4848 0
	#     }
.data
	.L6104:
	.string "invalid value"
.text
	mov A, .L6104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6105:
	mov A, B
	add SP, 1
	.L6103:
	.L6096:
	.loc 7 4850 0
	# 
	jmp .L867
	.loc 7 4865 0
	#     }
	.loc 7 4852 0
	#     if (inst->src.type == REG) {
	.L872:
	.loc 7 4865 0
	#     }
	.loc 7 4852 0
	#     if (inst->src.type == REG) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6106, A, 0
	.loc 7 4859 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4854 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4854 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4854 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, src_str(inst));
.data
	.L6107:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6108:
	mov A, B
	add SP, 3
	.loc 7 4855 0
	#       emit_line("%%%d = zext i32 %%%d to i64", func_idx+2, func_idx+1);
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6109
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6109:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4855 0
	#       emit_line("%%%d = zext i32 %%%d to i64", func_idx+2, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4855 0
	#       emit_line("%%%d = zext i32 %%%d to i64", func_idx+2, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6110:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6110
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6111:
	mov A, B
	add SP, 3
	.loc 7 4856 0
	#       emit_line("%%%d = getelementptr inbounds [16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %%%d", func_idx+3, func_idx+2);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4856 0
	#       emit_line("%%%d = getelementptr inbounds [16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %%%d", func_idx+3, func_idx+2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4856 0
	#       emit_line("%%%d = getelementptr inbounds [16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %%%d", func_idx+3, func_idx+2);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6112:
	.string "%%%d = zext i32 %%%d to i64"
.text
	mov A, .L6112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6113
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6113:
	mov A, B
	add SP, 3
	.loc 7 4857 0
	#       emit_line("store i32 %%%d, i32* %%%d, align 4", func_idx, func_idx+3);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4857 0
	#       emit_line("store i32 %%%d, i32* %%%d, align 4", func_idx, func_idx+3);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4857 0
	#       emit_line("store i32 %%%d, i32* %%%d, align 4", func_idx, func_idx+3);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6114:
	.string "%%%d = getelementptr inbounds [16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %%%d"
.text
	mov A, .L6114
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6115
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6115:
	mov A, B
	add SP, 3
	.loc 7 4858 0
	#       func_idx += 4;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4858 0
	#       func_idx += 4;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4858 0
	#       func_idx += 4;
.data
	.L6116:
	.string "store i32 %%%d, i32* %%%d, align 4"
.text
	mov A, .L6116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6117:
	mov A, B
	add SP, 3
	.loc 7 4859 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4859 0
	#     } else if (inst->src.type == IMM) {
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6118
	.L6106:
	.loc 7 4865 0
	#     }
	.loc 7 4859 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6119, A, 0
	.loc 7 4863 0
	#     } else {
	.loc 7 4861 0
	#       emit_line("store i32 %%%d, i32* getelementptr inbounds ([16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %s)", func_idx, src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4861 0
	#       emit_line("store i32 %%%d, i32* getelementptr inbounds ([16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %s)", func_idx, src_str(inst));
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4861 0
	#       emit_line("store i32 %%%d, i32* getelementptr inbounds ([16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %s)", func_idx, src_str(inst));
.data
	.L6120:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6120
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6121
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6121:
	mov A, B
	add SP, 3
	.loc 7 4862 0
	#       func_idx += 1;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6122
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6122:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4862 0
	#       func_idx += 1;
.data
	.L6123:
	.string "store i32 %%%d, i32* getelementptr inbounds ([16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %s)"
.text
	mov A, .L6123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6124:
	mov A, B
	add SP, 3
	.loc 7 4863 0
	#     } else {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4863 0
	#     } else {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6125
	.L6119:
	.loc 7 4865 0
	#     }
.data
	.L6126:
	.string "invalid value"
.text
	mov A, .L6126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6127:
	mov A, B
	add SP, 1
	.L6125:
	.L6118:
	.loc 7 4867 0
	# 
	jmp .L867
	.loc 7 4878 0
	#     }
	.loc 7 4869 0
	#     if (inst->src.type == REG) {
	.L873:
	.loc 7 4878 0
	#     }
	.loc 7 4869 0
	#     if (inst->src.type == REG) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6128, A, 0
	.loc 7 4873 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4871 0
	#       emit_line("%%%d = call i32 @putchar(i32 %%%d)", func_idx+1, func_idx);
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6129:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4871 0
	#       emit_line("%%%d = call i32 @putchar(i32 %%%d)", func_idx+1, func_idx);
.data
	.L6130:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6131:
	mov A, B
	add SP, 3
	.loc 7 4872 0
	#       func_idx += 2;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4872 0
	#       func_idx += 2;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4872 0
	#       func_idx += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6132:
	.string "%%%d = call i32 @putchar(i32 %%%d)"
.text
	mov A, .L6132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6133:
	mov A, B
	add SP, 3
	.loc 7 4873 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4873 0
	#     } else if (inst->src.type == IMM) {
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6134
	.L6128:
	.loc 7 4878 0
	#     }
	.loc 7 4873 0
	#     } else if (inst->src.type == IMM) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6135, A, 0
	.loc 7 4876 0
	#     } else {
	.loc 7 4875 0
	#       func_idx += 1;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6136:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4875 0
	#       func_idx += 1;
.data
	.L6137:
	.string "%%%d = call i32 @putchar(i32 %s)"
.text
	mov A, .L6137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6138:
	mov A, B
	add SP, 3
	.loc 7 4876 0
	#     } else {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4876 0
	#     } else {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6139
	.L6135:
	.loc 7 4878 0
	#     }
.data
	.L6140:
	.string "invalid value"
.text
	mov A, .L6140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6141:
	mov A, B
	add SP, 1
	.L6139:
	.L6134:
	.loc 7 4880 0
	# 
	jmp .L867
	.loc 7 4882 0
	#     emit_line("%%_%d = alloca i32, align 4", putc_idx);
	.L874:
	.loc 7 4641 0
	# }
	mov B, putc_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4882 0
	#     emit_line("%%_%d = alloca i32, align 4", putc_idx);
.data
	.L6142:
	.string "%%_%d = alloca i32, align 4"
.text
	mov A, .L6142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6143
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6143:
	mov A, B
	add SP, 2
	.loc 7 4884 0
	#     emit_line("store i32 %%%d, i32* %%_%d, align 4", func_idx, putc_idx);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4884 0
	#     emit_line("store i32 %%%d, i32* %%_%d, align 4", func_idx, putc_idx);
.data
	.L6144:
	.string "%%%d = call i32 @getchar()"
.text
	mov A, .L6144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6145
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6145:
	mov A, B
	add SP, 2
	.loc 7 4885 0
	#     emit_line("%%%d = load i32, i32* %%_%d, align 4", func_idx+1, putc_idx);
	.loc 7 4641 0
	# }
	mov B, putc_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4885 0
	#     emit_line("%%%d = load i32, i32* %%_%d, align 4", func_idx+1, putc_idx);
.data
	.L6146:
	.string "store i32 %%%d, i32* %%_%d, align 4"
.text
	mov A, .L6146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6147:
	mov A, B
	add SP, 3
	.loc 7 4886 0
	#     emit_line("%%%d = icmp ne i32 %%%d, -1", func_idx+2, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, putc_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4886 0
	#     emit_line("%%%d = icmp ne i32 %%%d, -1", func_idx+2, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4886 0
	#     emit_line("%%%d = icmp ne i32 %%%d, -1", func_idx+2, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6148:
	.string "%%%d = load i32, i32* %%_%d, align 4"
.text
	mov A, .L6148
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6149:
	mov A, B
	add SP, 3
	.loc 7 4887 0
	#     emit_line("br i1 %%%d, label %%%d, label %%%d", func_idx+2, func_idx+3, func_idx+5);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4887 0
	#     emit_line("br i1 %%%d, label %%%d, label %%%d", func_idx+2, func_idx+3, func_idx+5);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4887 0
	#     emit_line("br i1 %%%d, label %%%d, label %%%d", func_idx+2, func_idx+3, func_idx+5);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6150:
	.string "%%%d = icmp ne i32 %%%d, -1"
.text
	mov A, .L6150
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6151
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6151:
	mov A, B
	add SP, 3
	.loc 7 4888 0
	# 
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4888 0
	# 
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4888 0
	# 
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4888 0
	# 
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6152:
	.string "br i1 %%%d, label %%%d, label %%%d"
.text
	mov A, .L6152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6153:
	mov A, B
	add SP, 4
	.loc 7 4890 0
	#     emit_line("; <label>:%%%d", func_idx+3);
.data
	.L6154:
	.string ""
.text
	mov A, .L6154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6155:
	mov A, B
	add SP, 1
	.loc 7 4891 0
	#     emit_line("%%%d = load i32, i32* %%_%d, align 4", func_idx+4, putc_idx);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4891 0
	#     emit_line("%%%d = load i32, i32* %%_%d, align 4", func_idx+4, putc_idx);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6156:
	.string "; <label>:%%%d"
.text
	mov A, .L6156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6157:
	mov A, B
	add SP, 2
	.loc 7 4892 0
	#     emit_line("br label %%%d", func_idx+6);
	.loc 7 4641 0
	# }
	mov B, putc_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4892 0
	#     emit_line("br label %%%d", func_idx+6);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4892 0
	#     emit_line("br label %%%d", func_idx+6);
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6158:
	.string "%%%d = load i32, i32* %%_%d, align 4"
.text
	mov A, .L6158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6159:
	mov A, B
	add SP, 3
	.loc 7 4893 0
	# 
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4893 0
	# 
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6160:
	.string "br label %%%d"
.text
	mov A, .L6160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6161:
	mov A, B
	add SP, 2
	.loc 7 4895 0
	#     emit_line("; <label>:%%%d", func_idx+5);
.data
	.L6162:
	.string ""
.text
	mov A, .L6162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6163:
	mov A, B
	add SP, 1
	.loc 7 4896 0
	#     emit_line("br label %%%d", func_idx+6);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4896 0
	#     emit_line("br label %%%d", func_idx+6);
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6164:
	.string "; <label>:%%%d"
.text
	mov A, .L6164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6165:
	mov A, B
	add SP, 2
	.loc 7 4897 0
	# 
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4897 0
	# 
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6166:
	.string "br label %%%d"
.text
	mov A, .L6166
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6167:
	mov A, B
	add SP, 2
	.loc 7 4899 0
	#     emit_line("; <label>:%%%d", func_idx+6);
.data
	.L6168:
	.string ""
.text
	mov A, .L6168
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6169:
	mov A, B
	add SP, 1
	.loc 7 4900 0
	#     emit_line("%%%d = phi i32 [ %%%d, %%%d ], [0, %%%d]",
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4900 0
	#     emit_line("%%%d = phi i32 [ %%%d, %%%d ], [0, %%%d]",
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6170:
	.string "; <label>:%%%d"
.text
	mov A, .L6170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6171:
	mov A, B
	add SP, 2
	.loc 7 4901 0
	#                 func_idx+7, func_idx+4, func_idx+3, func_idx+5);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4901 0
	#                 func_idx+7, func_idx+4, func_idx+3, func_idx+5);
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4901 0
	#                 func_idx+7, func_idx+4, func_idx+3, func_idx+5);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4901 0
	#                 func_idx+7, func_idx+4, func_idx+3, func_idx+5);
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4901 0
	#                 func_idx+7, func_idx+4, func_idx+3, func_idx+5);
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6172:
	.string "%%%d = phi i32 [ %%%d, %%%d ], [0, %%%d]"
.text
	mov A, .L6172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6173
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6173:
	mov A, B
	add SP, 5
	.loc 7 4903 0
	#     func_idx += 8;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4903 0
	#     func_idx += 8;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4903 0
	#     func_idx += 8;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4903 0
	#     func_idx += 8;
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6174:
	.string "store i32 %%%d, i32* @%s, align 4"
.text
	mov A, .L6174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6175
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6175:
	mov A, B
	add SP, 3
	.loc 7 4904 0
	#     putc_idx += 1;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4904 0
	#     putc_idx += 1;
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	.loc 7 4905 0
	#     break;
	.loc 7 4641 0
	# }
	mov B, putc_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4905 0
	#     break;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, putc_idx
	store A, B
	.loc 7 4906 0
	# 
	jmp .L867
	.loc 7 4908 0
	#     emit_line("call void @exit(i32 0)");
	.L875:
.data
	.L6176:
	.string "call void @exit(i32 0)"
.text
	mov A, .L6176
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6177:
	mov A, B
	add SP, 1
	.loc 7 4910 0
	# 
	jmp .L867
	.loc 7 4912 0
	#     break;
	.L876:
	jmp .L867
	.loc 7 4915 0
	#   case NE:
	.L877:
	.L878:
	.L879:
	.L880:
	.L881:
	.L882:
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ll_emit_cmp
	.L6178:
	mov A, B
	add SP, 1
	.loc 7 4922 0
	#     emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4922 0
	#     emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4922 0
	#     emit_line("store i32 %%%d, i32* @%s, align 4", func_idx, reg_names[inst->dst.reg]);
.data
	.L6179:
	.string "%%%d = zext i1 %%%d to i32"
.text
	mov A, .L6179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6180:
	mov A, B
	add SP, 3
	.loc 7 4923 0
	#     func_idx += 1;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4923 0
	#     func_idx += 1;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4923 0
	#     func_idx += 1;
.data
	.L6181:
	.string "store i32 %%%d, i32* @%s, align 4"
.text
	mov A, .L6181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6182:
	mov A, B
	add SP, 3
	.loc 7 4924 0
	#     break;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4924 0
	#     break;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	.loc 7 4925 0
	# 
	jmp .L867
	.loc 7 4927 0
	#   case JNE:
	.L883:
	.L884:
	.L885:
	.L886:
	.L887:
	.L888:
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ll_cmp_str
	.L6183:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4927 0
	#   case JNE:
.data
	.L6184:
	.string "; cmp jmp %s"
.text
	mov A, .L6184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6185:
	mov A, B
	add SP, 2
	.loc 7 4934 0
	#     if (inst->jmp.type == REG) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ll_emit_cmp
	.L6186:
	mov A, B
	add SP, 1
	.loc 7 4952 0
	#     }
	.loc 7 4935 0
	#       emit_line("br i1 %%%d, label %%%d, label %%%d",
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6187, A, 0
	.loc 7 4943 0
	#     } else if (inst->jmp.type == IMM) {
	.loc 7 4936 0
	#                 func_idx-1, func_idx, func_idx+3);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4936 0
	#                 func_idx-1, func_idx, func_idx+3);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4936 0
	#                 func_idx-1, func_idx, func_idx+3);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4936 0
	#                 func_idx-1, func_idx, func_idx+3);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6188:
	.string "br i1 %%%d, label %%%d, label %%%d"
.text
	mov A, .L6188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6189:
	mov A, B
	add SP, 4
	.loc 7 4938 0
	#       emit_line("; <label>:%%%d", func_idx);
.data
	.L6190:
	.string ""
.text
	mov A, .L6190
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6191
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6191:
	mov A, B
	add SP, 1
	.loc 7 4939 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, value_str(&inst->jmp));
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4939 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx+1, value_str(&inst->jmp));
.data
	.L6192:
	.string "; <label>:%%%d"
.text
	mov A, .L6192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6193:
	mov A, B
	add SP, 2
	.loc 7 4940 0
	#       emit_line("%%%d = sub i32 %%%d, 1", func_idx+2, func_idx+1);
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L6194:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4940 0
	#       emit_line("%%%d = sub i32 %%%d, 1", func_idx+2, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4940 0
	#       emit_line("%%%d = sub i32 %%%d, 1", func_idx+2, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6195:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6196:
	mov A, B
	add SP, 3
	.loc 7 4941 0
	#       emit_line("store i32 %d, i32* @pc, align 4", func_idx+2);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4941 0
	#       emit_line("store i32 %d, i32* @pc, align 4", func_idx+2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4941 0
	#       emit_line("store i32 %d, i32* @pc, align 4", func_idx+2);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6197:
	.string "%%%d = sub i32 %%%d, 1"
.text
	mov A, .L6197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6198:
	mov A, B
	add SP, 3
	.loc 7 4942 0
	#       func_idx += 3;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4942 0
	#       func_idx += 3;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6199:
	.string "store i32 %d, i32* @pc, align 4"
.text
	mov A, .L6199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6200:
	mov A, B
	add SP, 2
	.loc 7 4943 0
	#     } else if (inst->jmp.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4943 0
	#     } else if (inst->jmp.type == IMM) {
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6201
	.L6187:
	.loc 7 4952 0
	#     }
	.loc 7 4943 0
	#     } else if (inst->jmp.type == IMM) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6202, A, 0
	.loc 7 4950 0
	#     } else {
	.loc 7 4945 0
	#                 func_idx-1, func_idx, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4945 0
	#                 func_idx-1, func_idx, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4945 0
	#                 func_idx-1, func_idx, func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4945 0
	#                 func_idx-1, func_idx, func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6203:
	.string "br i1 %%%d, label %%%d, label %%%d"
.text
	mov A, .L6203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6204:
	mov A, B
	add SP, 4
	.loc 7 4947 0
	#       emit_line("; <label>:%%%d", func_idx);
.data
	.L6205:
	.string ""
.text
	mov A, .L6205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6206:
	mov A, B
	add SP, 1
	.loc 7 4948 0
	#       emit_line("store i32 %d, i32* @pc, align 4", inst->jmp.imm-1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4948 0
	#       emit_line("store i32 %d, i32* @pc, align 4", inst->jmp.imm-1);
.data
	.L6207:
	.string "; <label>:%%%d"
.text
	mov A, .L6207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6208:
	mov A, B
	add SP, 2
	.loc 7 4949 0
	#       func_idx += 1;
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4949 0
	#       func_idx += 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6209:
	.string "store i32 %d, i32* @pc, align 4"
.text
	mov A, .L6209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6210:
	mov A, B
	add SP, 2
	.loc 7 4950 0
	#     } else {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4950 0
	#     } else {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6211
	.L6202:
	.loc 7 4952 0
	#     }
.data
	.L6212:
	.string "invalid value"
.text
	mov A, .L6212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6213
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6213:
	mov A, B
	add SP, 1
	.L6211:
	.L6201:
	.loc 7 4954 0
	#     emit_line("");
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4954 0
	#     emit_line("");
.data
	.L6214:
	.string "br label %%%d"
.text
	mov A, .L6214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6215:
	mov A, B
	add SP, 2
	.loc 7 4955 0
	#     emit_line("; <label>:%%%d", func_idx);
.data
	.L6216:
	.string ""
.text
	mov A, .L6216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6217:
	mov A, B
	add SP, 1
	.loc 7 4956 0
	#     func_idx += 1;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4956 0
	#     func_idx += 1;
.data
	.L6218:
	.string "; <label>:%%%d"
.text
	mov A, .L6218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6219:
	mov A, B
	add SP, 2
	.loc 7 4957 0
	#     break;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4957 0
	#     break;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	.loc 7 4958 0
	# 
	jmp .L867
	.loc 7 4960 0
	#     emit_line("; jmp");
	.L889:
.data
	.L6220:
	.string "; jmp"
.text
	mov A, .L6220
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6221:
	mov A, B
	add SP, 1
	.loc 7 4968 0
	#     }
	.loc 7 4962 0
	#       emit_line("%%%d = load i32, i32* @%s, align 4", func_idx, value_str(&inst->jmp));
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6222, A, 0
	.loc 7 4966 0
	#     } else if (inst->jmp.type == IMM) {
	.loc 7 4963 0
	#       emit_line("%%%d = sub i32 %%%d, 1", func_idx+1, func_idx);
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L6223:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4963 0
	#       emit_line("%%%d = sub i32 %%%d, 1", func_idx+1, func_idx);
.data
	.L6224:
	.string "%%%d = load i32, i32* @%s, align 4"
.text
	mov A, .L6224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6225:
	mov A, B
	add SP, 3
	.loc 7 4964 0
	#       emit_line("store i32 %%%d, i32* @pc, align 4", func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4964 0
	#       emit_line("store i32 %%%d, i32* @pc, align 4", func_idx+1);
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4964 0
	#       emit_line("store i32 %%%d, i32* @pc, align 4", func_idx+1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6226:
	.string "%%%d = sub i32 %%%d, 1"
.text
	mov A, .L6226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6227:
	mov A, B
	add SP, 3
	.loc 7 4965 0
	#       func_idx += 2;
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4965 0
	#       func_idx += 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6228:
	.string "store i32 %%%d, i32* @pc, align 4"
.text
	mov A, .L6228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6229
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6229:
	mov A, B
	add SP, 2
	.loc 7 4966 0
	#     } else if (inst->jmp.type == IMM) {
	.loc 7 4641 0
	# }
	mov B, func_idx
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4966 0
	#     } else if (inst->jmp.type == IMM) {
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, func_idx
	store A, B
	jmp .L6230
	.L6222:
	.loc 7 4968 0
	#     }
	.loc 7 4966 0
	#     } else if (inst->jmp.type == IMM) {
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6231, A, 0
	.loc 7 4968 0
	#     }
	.loc 7 4783 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4968 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6232:
	.string "store i32 %d, i32* @pc, align 4"
.text
	mov A, .L6232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6233:
	mov A, B
	add SP, 2
	.L6231:
	.L6230:
	.loc 7 4970 0
	# 
	jmp .L867
	.loc 7 4972 0
	#     error("oops");
	.L890:
.data
	.L6234:
	.string "oops"
.text
	mov A, .L6234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6235
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6235:
	mov A, B
	add SP, 1
	.L867:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_ll:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 7 5036 0
	# }
	.loc 7 4978 0
	# 
	mov A, .L6236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ll_init_state
	.L6236:
	mov A, B
	.loc 7 4980 0
	#                                          ll_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, ll_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, ll_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, ll_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, ll_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4972 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L6237:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 4986 0
	#   emit_line("declare i32 @getchar()");
.data
	.L6238:
	.string ""
.text
	mov A, .L6238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6239:
	mov A, B
	add SP, 1
	.loc 7 4987 0
	#   emit_line("declare i32 @putchar(i32)");
.data
	.L6240:
	.string "declare i32 @getchar()"
.text
	mov A, .L6240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6241:
	mov A, B
	add SP, 1
	.loc 7 4988 0
	#   emit_line("declare void @exit(i32)");
.data
	.L6242:
	.string "declare i32 @putchar(i32)"
.text
	mov A, .L6242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6243:
	mov A, B
	add SP, 1
	.loc 7 4989 0
	# 
.data
	.L6244:
	.string "declare void @exit(i32)"
.text
	mov A, .L6244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6245:
	mov A, B
	add SP, 1
	.loc 7 4991 0
	#   emit_line("define i32 @main() {");
.data
	.L6246:
	.string ""
.text
	mov A, .L6246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6247:
	mov A, B
	add SP, 1
	.loc 7 4992 0
	#   inc_indent();
.data
	.L6248:
	.string "define i32 @main() {"
.text
	mov A, .L6248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6249:
	mov A, B
	add SP, 1
	.loc 7 4993 0
	# 
	mov A, .L6250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L6250:
	mov A, B
	.loc 7 4995 0
	#   emit_line("store i32 0, i32* %%1");
.data
	.L6251:
	.string "%%1 = alloca i32, align 4"
.text
	mov A, .L6251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6252:
	mov A, B
	add SP, 1
	.loc 7 4996 0
	#   Data* data = module->data;
.data
	.L6253:
	.string "store i32 0, i32* %%1"
.text
	mov A, .L6253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6254:
	mov A, B
	add SP, 1
	.loc 7 4997 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov A, 0
	mov B, SP
	.loc 7 4972 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5000 0
	#     }
	.loc 7 4998 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 5000 0
	#     }
	.L891:
	.loc 7 4997 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L6255, A, 0
	jmp .L6256
	.L6255:
	.loc 7 5000 0
	#     }
	jmp .L893
	.L6256:
	.loc 7 4999 0
	#       emit_line("store i32 %d, i32* getelementptr inbounds ([16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %d), align 4", data->v, mp);
	.loc 7 4997 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	jeq .L6257, A, 0
	.loc 7 5000 0
	#     }
	.loc 7 4998 0
	#     if (data->v) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5000 0
	#     }
	.loc 7 4997 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5000 0
	#     }
.data
	.L6258:
	.string "store i32 %d, i32* getelementptr inbounds ([16777216 x i32], [16777216 x i32]* @mem, i32 0, i64 %d), align 4"
.text
	mov A, .L6258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6259:
	mov A, B
	add SP, 3
	.L6257:
	.L892:
	.loc 7 4998 0
	#     if (data->v) {
	.loc 7 4997 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 4998 0
	#     if (data->v) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5000 0
	#     }
	jmp .L891
	.L893:
	.loc 7 5003 0
	# 
.data
	.L6260:
	.string "br label %%2"
.text
	mov A, .L6260
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6261:
	mov A, B
	add SP, 1
	.loc 7 5005 0
	#   emit_line("; <label>:2");
.data
	.L6262:
	.string ""
.text
	mov A, .L6262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6263:
	mov A, B
	add SP, 1
	.loc 7 5006 0
	#   emit_line("%%3 = load i32, i32* @pc, align 4");
.data
	.L6264:
	.string "; <label>:2"
.text
	mov A, .L6264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6265
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6265:
	mov A, B
	add SP, 1
	.loc 7 5007 0
	#   emit_line("%%4 = udiv i32 %%3, %d", CHUNKED_FUNC_SIZE);
.data
	.L6266:
	.string "%%3 = load i32, i32* @pc, align 4"
.text
	mov A, .L6266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6267:
	mov A, B
	add SP, 1
	.loc 7 5008 0
	# 
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5008 0
	# 
.data
	.L6268:
	.string "%%4 = udiv i32 %%3, %d"
.text
	mov A, .L6268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6269
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6269:
	mov A, B
	add SP, 2
	.loc 7 5010 0
	#   int while_bottom = label_offset + num_funcs;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 5
	store A, B
	.loc 7 5011 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 5010 0
	#   int while_bottom = label_offset + num_funcs;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4980 0
	#                                          ll_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5013 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 5011 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5013 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L6270:
	.string "switch i32 %%4, label %%%d ["
.text
	mov A, .L6270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6271
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6271:
	mov A, B
	add SP, 2
	.loc 7 5015 0
	#   }
	.loc 7 5014 0
	#     emit_line("i32 %d, label %%%d", i, label_offset+i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777210
	mov A, 0
	store A, B
	.loc 7 5015 0
	#   }
	.L894:
	.loc 7 5014 0
	#     emit_line("i32 %d, label %%%d", i, label_offset+i);
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4980 0
	#                                          ll_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6272, A, 0
	jmp .L6273
	.L6272:
	.loc 7 5015 0
	#   }
	jmp .L896
	.L6273:
	.loc 7 5010 0
	#   int while_bottom = label_offset + num_funcs;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5014 0
	#     emit_line("i32 %d, label %%%d", i, label_offset+i);
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5015 0
	#   }
.data
	.L6274:
	.string "i32 %d, label %%%d"
.text
	mov A, .L6274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6275:
	mov A, B
	add SP, 3
	.L895:
	.loc 7 5014 0
	#     emit_line("i32 %d, label %%%d", i, label_offset+i);
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777210
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5015 0
	#   }
	jmp .L894
	.L896:
	.loc 7 5017 0
	# 
.data
	.L6276:
	.string "]"
.text
	mov A, .L6276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6277:
	mov A, B
	add SP, 1
	.loc 7 5019 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L6278:
	.string ""
.text
	mov A, .L6278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6279:
	mov A, B
	add SP, 1
	.loc 7 5025 0
	#   }
	.loc 7 5020 0
	#     emit_line("; <label>:%d", label_offset+i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777209
	mov A, 0
	store A, B
	.loc 7 5025 0
	#   }
	.L897:
	.loc 7 5020 0
	#     emit_line("; <label>:%d", label_offset+i);
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 4980 0
	#                                          ll_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6280, A, 0
	jmp .L6281
	.L6280:
	.loc 7 5025 0
	#   }
	jmp .L899
	.L6281:
	.loc 7 5021 0
	#     inc_indent();
	.loc 7 5010 0
	#   int while_bottom = label_offset + num_funcs;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5020 0
	#     emit_line("; <label>:%d", label_offset+i);
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5021 0
	#     inc_indent();
.data
	.L6282:
	.string "; <label>:%d"
.text
	mov A, .L6282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6283:
	mov A, B
	add SP, 2
	.loc 7 5022 0
	#     emit_line("call void @func%d()", i);
	mov A, .L6284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L6284:
	mov A, B
	.loc 7 5023 0
	#     emit_line("br label %%%d", while_bottom);
	.loc 7 5020 0
	#     emit_line("; <label>:%d", label_offset+i);
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5023 0
	#     emit_line("br label %%%d", while_bottom);
.data
	.L6285:
	.string "call void @func%d()"
.text
	mov A, .L6285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6286:
	mov A, B
	add SP, 2
	.loc 7 5024 0
	#     dec_indent();
	.loc 7 5011 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5024 0
	#     dec_indent();
.data
	.L6287:
	.string "br label %%%d"
.text
	mov A, .L6287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6288:
	mov A, B
	add SP, 2
	.loc 7 5025 0
	#   }
	mov A, .L6289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L6289:
	mov A, B
	.L898:
	.loc 7 5020 0
	#     emit_line("; <label>:%d", label_offset+i);
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777209
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5025 0
	#   }
	jmp .L897
	.L899:
	.loc 7 5028 0
	#   emit_line("; <label>:%d", while_bottom);
.data
	.L6290:
	.string ""
.text
	mov A, .L6290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6291:
	mov A, B
	add SP, 1
	.loc 7 5029 0
	#   emit_line("br label %%2");
	.loc 7 5011 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5029 0
	#   emit_line("br label %%2");
.data
	.L6292:
	.string "; <label>:%d"
.text
	mov A, .L6292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6293:
	mov A, B
	add SP, 2
	.loc 7 5030 0
	# 
.data
	.L6294:
	.string "br label %%2"
.text
	mov A, .L6294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6295:
	mov A, B
	add SP, 1
	.loc 7 5032 0
	#   emit_line("%%%d = load i32, i32* %%1, align 4", while_bottom+2);
.data
	.L6296:
	.string ""
.text
	mov A, .L6296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6297:
	mov A, B
	add SP, 1
	.loc 7 5033 0
	#   emit_line("ret i32 %%%d", while_bottom+2);
	.loc 7 5011 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5033 0
	#   emit_line("ret i32 %%%d", while_bottom+2);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6298:
	.string "%%%d = load i32, i32* %%1, align 4"
.text
	mov A, .L6298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6299:
	mov A, B
	add SP, 2
	.loc 7 5034 0
	#   dec_indent();
	.loc 7 5011 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5034 0
	#   dec_indent();
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L6300:
	.string "ret i32 %%%d"
.text
	mov A, .L6300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6301:
	mov A, B
	add SP, 2
	.loc 7 5035 0
	#   emit_line("}");
	mov A, .L6302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L6302:
	mov A, B
	.loc 7 5036 0
	# }
.data
	.L6303:
	.string "}"
.text
	mov A, .L6303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6304:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
PHP_REG_NAMES:
	.data 1
	.L6305:
	.string "$a"
	.data 0
	.long .L6305
	.data 1
	.L6306:
	.string "$b"
	.data 0
	.long .L6306
	.data 1
	.L6307:
	.string "$c"
	.data 0
	.long .L6307
	.data 1
	.L6308:
	.string "$d"
	.data 0
	.long .L6308
	.data 1
	.L6309:
	.string "$bp"
	.data 0
	.long .L6309
	.data 1
	.L6310:
	.string "$sp"
	.data 0
	.long .L6310
	.data 1
	.L6311:
	.string "$pc"
	.data 0
	.long .L6311
	.text
init_state_php:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5066 0
	# }
	.loc 7 5046 0
	#   emit_line("<?php");
	.loc 7 5036 0
	# }
	mov A, PHP_REG_NAMES
	mov B, reg_names
	store A, B
	.loc 7 5047 0
	# 
.data
	.L6312:
	.string "<?php"
.text
	mov A, .L6312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6313:
	mov A, B
	add SP, 1
	.loc 7 5049 0
	#   inc_indent();
.data
	.L6314:
	.string "call_user_func(function(){"
.text
	mov A, .L6314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6315:
	mov A, B
	add SP, 1
	.loc 7 5050 0
	#   for (int i = 0; i < 7; i++) {
	mov A, .L6316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L6316:
	mov A, B
	.loc 7 5052 0
	#   }
	.loc 7 5051 0
	#     emit_line("%s = 0;", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 5052 0
	#   }
	.L900:
	.loc 7 5051 0
	#     emit_line("%s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6317, A, 0
	jmp .L6318
	.L6317:
	.loc 7 5052 0
	#   }
	jmp .L902
	.L6318:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5051 0
	#     emit_line("%s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5052 0
	#   }
.data
	.L6319:
	.string "%s = 0;"
.text
	mov A, .L6319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6320:
	mov A, B
	add SP, 2
	.L901:
	.loc 7 5051 0
	#     emit_line("%s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5052 0
	#   }
	jmp .L900
	.L902:
	.loc 7 5054 0
	#   emit_line("$mem = array();");
.data
	.L6321:
	.string "$running = true;"
.text
	mov A, .L6321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6322:
	mov A, B
	add SP, 1
	.loc 7 5055 0
	#   /* Array initialization wastes a lot of memory */
.data
	.L6323:
	.string "$mem = array();"
.text
	mov A, .L6323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6324:
	mov A, B
	add SP, 1
	.loc 7 5057 0
	#   emit_line("// for ($_ = 0; $_ < (1 << 24); $_++) $mem[$_] = null; unset($_);");
.data
	.L6325:
	.string "ini_set(\"memory_limit\", \"768M\");"
.text
	mov A, .L6325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6326:
	mov A, B
	add SP, 1
	.loc 7 5058 0
	# 
.data
	.L6327:
	.string "// for ($_ = 0; $_ < (1 << 24); $_++) $mem[$_] = null; unset($_);"
.text
	mov A, .L6327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6328:
	mov A, B
	add SP, 1
	.loc 7 5060 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L6329:
	.string "$stdin = fopen('php://stdin', 'r');"
.text
	mov A, .L6329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6330:
	mov A, B
	add SP, 1
	.loc 7 5063 0
	#     }
	.loc 7 5061 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 5063 0
	#     }
	.L903:
	.loc 7 5036 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L6331, A, 0
	jmp .L6332
	.L6331:
	.loc 7 5063 0
	#     }
	jmp .L905
	.L6332:
	.loc 7 5062 0
	#       emit_line("$mem[%d] = %d;", mp, data->v);
	.loc 7 5036 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L6333, A, 0
	.loc 7 5063 0
	#     }
	.loc 7 5036 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5061 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5063 0
	#     }
.data
	.L6334:
	.string "$mem[%d] = %d;"
.text
	mov A, .L6334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6335:
	mov A, B
	add SP, 3
	.L6333:
	.L904:
	.loc 7 5061 0
	#     if (data->v) {
	.loc 7 5036 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 5061 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5063 0
	#     }
	jmp .L903
	.L905:
	.loc 7 5066 0
	# }
.data
	.L6336:
	.string "goto main;"
.text
	mov A, .L6336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6337:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
php_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5078 0
	# }
	.loc 7 5070 0
	#   emit_line("proc%d:", func_id);
.data
	.L6338:
	.string ""
.text
	mov A, .L6338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6339:
	mov A, B
	add SP, 1
	.loc 7 5071 0
	#   inc_indent();
	.loc 7 5066 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5071 0
	#   inc_indent();
.data
	.L6340:
	.string "proc%d:"
.text
	mov A, .L6340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6341:
	mov A, B
	add SP, 2
	.loc 7 5072 0
	#   emit_line("while (%d <= $pc && $pc < %d && $running) {",
	mov A, .L6342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L6342:
	mov A, B
	.loc 7 5073 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 5066 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5073 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6343:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5073 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 5066 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6344:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5073 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L6345:
	.string "while (%d <= $pc && $pc < %d && $running) {"
.text
	mov A, .L6345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6346:
	mov A, B
	add SP, 3
	.loc 7 5075 0
	#   emit_line("switch ($pc) {");
	mov A, .L6347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L6347:
	mov A, B
	.loc 7 5076 0
	#   emit_line("case -1:  // dummy");
.data
	.L6348:
	.string "switch ($pc) {"
.text
	mov A, .L6348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6349:
	mov A, B
	add SP, 1
	.loc 7 5077 0
	#   inc_indent();
.data
	.L6350:
	.string "case -1:  // dummy"
.text
	mov A, .L6350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6351:
	mov A, B
	add SP, 1
	.loc 7 5078 0
	# }
	mov A, .L6352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L6352:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
php_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5088 0
	# }
	.loc 7 5082 0
	#   emit_line("}");
	mov A, .L6353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L6353:
	mov A, B
	.loc 7 5083 0
	#   emit_line("$pc++;");
.data
	.L6354:
	.string "}"
.text
	mov A, .L6354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6355:
	mov A, B
	add SP, 1
	.loc 7 5084 0
	#   dec_indent();
.data
	.L6356:
	.string "$pc++;"
.text
	mov A, .L6356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6357
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6357:
	mov A, B
	add SP, 1
	.loc 7 5085 0
	#   emit_line("}");
	mov A, .L6358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L6358:
	mov A, B
	.loc 7 5086 0
	#   dec_indent();
.data
	.L6359:
	.string "}"
.text
	mov A, .L6359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6360:
	mov A, B
	add SP, 1
	.loc 7 5087 0
	#   emit_line("goto main;");
	mov A, .L6361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L6361:
	mov A, B
	.loc 7 5088 0
	# }
.data
	.L6362:
	.string "goto main;"
.text
	mov A, .L6362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6363:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
php_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5096 0
	# }
	.loc 7 5092 0
	#   emit_line("");
.data
	.L6364:
	.string "break;"
.text
	mov A, .L6364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6365:
	mov A, B
	add SP, 1
	.loc 7 5093 0
	#   dec_indent();
.data
	.L6366:
	.string ""
.text
	mov A, .L6366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6367:
	mov A, B
	add SP, 1
	.loc 7 5094 0
	#   emit_line("case %d:", pc);
	mov A, .L6368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L6368:
	mov A, B
	.loc 7 5095 0
	#   inc_indent();
	.loc 7 5088 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5095 0
	#   inc_indent();
.data
	.L6369:
	.string "case %d:"
.text
	mov A, .L6369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6370:
	mov A, B
	add SP, 2
	.loc 7 5096 0
	# }
	mov A, .L6371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L6371:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
php_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5165 0
	#     error("oops");
	.loc 7 5100 0
	#   case MOV:
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5165 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6372, A, 0
	jmp .L907
	.L6372:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6373, A, 0
	jmp .L908
	.L6373:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6374, A, 0
	jmp .L909
	.L6374:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6375, A, 0
	jmp .L910
	.L6375:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6376, A, 0
	jmp .L911
	.L6376:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6377, A, 0
	jmp .L912
	.L6377:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6378, A, 0
	jmp .L913
	.L6378:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6379, A, 0
	jmp .L914
	.L6379:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6380, A, 0
	jmp .L915
	.L6380:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6381, A, 0
	jmp .L916
	.L6381:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6382, A, 0
	jmp .L917
	.L6382:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6383, A, 0
	jmp .L918
	.L6383:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6384, A, 0
	jmp .L919
	.L6384:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6385, A, 0
	jmp .L920
	.L6385:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6386, A, 0
	jmp .L921
	.L6386:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6387, A, 0
	jmp .L922
	.L6387:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6388, A, 0
	jmp .L923
	.L6388:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6389, A, 0
	jmp .L924
	.L6389:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6390, A, 0
	jmp .L925
	.L6390:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6391, A, 0
	jmp .L926
	.L6391:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6392, A, 0
	jmp .L927
	.L6392:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6393, A, 0
	jmp .L928
	.L6393:
	jmp .L929
	.loc 7 5101 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.L907:
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6394:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5101 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5101 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5101 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
.data
	.L6395:
	.string "%s = %s;"
.text
	mov A, .L6395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6396:
	mov A, B
	add SP, 3
	.loc 7 5103 0
	# 
	jmp .L906
	.loc 7 5105 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.L908:
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6397:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5105 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5105 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5105 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5105 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5105 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
.data
	.L6398:
	.string "%s = (%s + %s) & 16777215;"
.text
	mov A, .L6398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6399:
	mov A, B
	add SP, 4
	.loc 7 5110 0
	# 
	jmp .L906
	.loc 7 5112 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.L909:
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6400:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5112 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5112 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5112 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5112 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5112 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
.data
	.L6401:
	.string "%s = (%s - %s) & 16777215;"
.text
	mov A, .L6401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6402:
	mov A, B
	add SP, 4
	.loc 7 5117 0
	# 
	jmp .L906
	.loc 7 5119 0
	#     emit_line("%s = @$mem[%s] ?: 0; // @undefined index as 0",
	.L910:
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6403:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5119 0
	#     emit_line("%s = @$mem[%s] ?: 0; // @undefined index as 0",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5119 0
	#     emit_line("%s = @$mem[%s] ?: 0; // @undefined index as 0",
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5119 0
	#     emit_line("%s = @$mem[%s] ?: 0; // @undefined index as 0",
.data
	.L6404:
	.string "%s = @$mem[%s] ?: 0; // @undefined index as 0"
.text
	mov A, .L6404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6405:
	mov A, B
	add SP, 3
	.loc 7 5122 0
	# 
	jmp .L906
	.loc 7 5124 0
	#     emit_line("$mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.L911:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5124 0
	#     emit_line("$mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5124 0
	#     emit_line("$mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6406:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5124 0
	#     emit_line("$mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L6407:
	.string "$mem[%s] = %s;"
.text
	mov A, .L6407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6408:
	mov A, B
	add SP, 3
	.loc 7 5126 0
	# 
	jmp .L906
	.loc 7 5128 0
	#     emit_line("printf(\"%%c\", %s);", src_str(inst));
	.L912:
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L6409:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5128 0
	#     emit_line("printf(\"%%c\", %s);", src_str(inst));
.data
	.L6410:
	.string "printf(\"%%c\", %s);"
.text
	mov A, .L6410
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6411:
	mov A, B
	add SP, 2
	.loc 7 5130 0
	# 
	jmp .L906
	.loc 7 5132 0
	#     emit_line("%s = ord(fgetc($stdin));",
	.L913:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5132 0
	#     emit_line("%s = ord(fgetc($stdin));",
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5132 0
	#     emit_line("%s = ord(fgetc($stdin));",
.data
	.L6412:
	.string "%s = ord(fgetc($stdin));"
.text
	mov A, .L6412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6413:
	mov A, B
	add SP, 2
	.loc 7 5135 0
	# 
	jmp .L906
	.loc 7 5137 0
	#     emit_line("$running = false; break;");
	.L914:
.data
	.L6414:
	.string "$running = false; break;"
.text
	mov A, .L6414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6415:
	mov A, B
	add SP, 1
	.loc 7 5139 0
	# 
	jmp .L906
	.loc 7 5141 0
	#     break;
	.L915:
	jmp .L906
	.loc 7 5144 0
	#   case NE:
	.L916:
	.L917:
	.L918:
	.L919:
	.L920:
	.L921:
.data
	.L6416:
	.string "true"
.text
	mov A, .L6416
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L6417:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5144 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5144 0
	#   case NE:
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5144 0
	#   case NE:
.data
	.L6418:
	.string "%s = (%s) | 0;"
.text
	mov A, .L6418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6419:
	mov A, B
	add SP, 3
	.loc 7 5152 0
	# 
	jmp .L906
	.loc 7 5154 0
	#   case JNE:
	.L922:
	.L923:
	.L924:
	.L925:
	.L926:
	.L927:
	.L928:
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L6420:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5154 0
	#   case JNE:
.data
	.L6421:
	.string "true"
.text
	mov A, .L6421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5096 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L6422:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5154 0
	#   case JNE:
.data
	.L6423:
	.string "if (%s) $pc = %s - 1;"
.text
	mov A, .L6423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6424:
	mov A, B
	add SP, 3
	.loc 7 5163 0
	# 
	jmp .L906
	.loc 7 5165 0
	#     error("oops");
	.L929:
.data
	.L6425:
	.string "oops"
.text
	mov A, .L6425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6426:
	mov A, B
	add SP, 1
	.L906:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_php:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5193 0
	# }
	.loc 7 5171 0
	# 
	.loc 7 5165 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6427
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_php
	.L6427:
	mov A, B
	add SP, 1
	.loc 7 5173 0
	#                                          php_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, php_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, php_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, php_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, php_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5165 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L6428:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5179 0
	#   emit_line("main:");
.data
	.L6429:
	.string ""
.text
	mov A, .L6429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6430:
	mov A, B
	add SP, 1
	.loc 7 5180 0
	#   emit_line("while ($running) {");
.data
	.L6431:
	.string "main:"
.text
	mov A, .L6431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6432:
	mov A, B
	add SP, 1
	.loc 7 5181 0
	#   inc_indent();
.data
	.L6433:
	.string "while ($running) {"
.text
	mov A, .L6433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6434:
	mov A, B
	add SP, 1
	.loc 7 5182 0
	#   emit_line("switch ($pc / %d | 0) {", CHUNKED_FUNC_SIZE);
	mov A, .L6435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L6435:
	mov A, B
	.loc 7 5183 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5183 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L6436:
	.string "switch ($pc / %d | 0) {"
.text
	mov A, .L6436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6437:
	mov A, B
	add SP, 2
	.loc 7 5187 0
	#   }
	.loc 7 5184 0
	#     emit_line("case %d:", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 5187 0
	#   }
	.L930:
	.loc 7 5184 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5173 0
	#                                          php_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6438, A, 0
	jmp .L6439
	.L6438:
	.loc 7 5187 0
	#   }
	jmp .L932
	.L6439:
	.loc 7 5185 0
	#     emit_line(" goto proc%d;", i);
	.loc 7 5184 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5185 0
	#     emit_line(" goto proc%d;", i);
.data
	.L6440:
	.string "case %d:"
.text
	mov A, .L6440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6441:
	mov A, B
	add SP, 2
	.loc 7 5186 0
	#     emit_line(" break;");
	.loc 7 5184 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5186 0
	#     emit_line(" break;");
.data
	.L6442:
	.string " goto proc%d;"
.text
	mov A, .L6442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6443:
	mov A, B
	add SP, 2
	.loc 7 5187 0
	#   }
.data
	.L6444:
	.string " break;"
.text
	mov A, .L6444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6445:
	mov A, B
	add SP, 1
	.L931:
	.loc 7 5184 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5187 0
	#   }
	jmp .L930
	.L932:
	.loc 7 5189 0
	#   dec_indent();
.data
	.L6446:
	.string "}"
.text
	mov A, .L6446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6447:
	mov A, B
	add SP, 1
	.loc 7 5190 0
	#   emit_line("}");
	mov A, .L6448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L6448:
	mov A, B
	.loc 7 5191 0
	#   dec_indent();
.data
	.L6449:
	.string "}"
.text
	mov A, .L6449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6450:
	mov A, B
	add SP, 1
	.loc 7 5192 0
	#   emit_line("});");
	mov A, .L6451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L6451:
	mov A, B
	.loc 7 5193 0
	# }
.data
	.L6452:
	.string "});"
.text
	mov A, .L6452
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6453
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6453:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	PietOp:

	.long 0
	.data 0
PIET_COLOR_TABLE:
	.long 0
	.long 0
	.long 0
	.long 255
	.long 255
	.long 255
	.long 255
	.long 192
	.long 192
	.long 255
	.long 0
	.long 0
	.long 192
	.long 0
	.long 0
	.long 255
	.long 255
	.long 192
	.long 255
	.long 255
	.long 0
	.long 192
	.long 192
	.long 0
	.long 192
	.long 255
	.long 192
	.long 0
	.long 255
	.long 0
	.long 0
	.long 192
	.long 0
	.long 192
	.long 255
	.long 255
	.long 0
	.long 255
	.long 255
	.long 0
	.long 192
	.long 192
	.long 192
	.long 192
	.long 255
	.long 0
	.long 0
	.long 255
	.long 0
	.long 0
	.long 192
	.long 255
	.long 192
	.long 255
	.long 255
	.long 0
	.long 255
	.long 192
	.long 0
	.long 192
	.text
piet_emit_a:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5305 0
	# }
	.loc 7 5302 0
	#   *pi = (*pi)->next;
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L6454:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5193 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5303 0
	#   (*pi)->op = op;
	.loc 7 5193 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5304 0
	#   (*pi)->arg = arg;
	.loc 7 5193 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5304 0
	#   (*pi)->arg = arg;
	.loc 7 5193 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5305 0
	# }
	.loc 7 5193 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5305 0
	# }
	.loc 7 5193 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_emit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5309 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5305 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6455
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit_a
	.L6455:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_push_digit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5314 0
	# }
	.loc 8 12 0
	#     }                                           \
	.L933:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5309 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L6456, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L6457:
	.string "assertion failed: v > 0\n"
.text
	mov A, .L6457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L6458:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L6456:
	mov A, 0
	jeq .L6459, A, 0
	jmp .L933
	.L6459:
	.L934:
	.loc 7 5314 0
	# }
	.loc 7 5309 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5193 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5309 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6460
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit_a
	.L6460:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_push:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 19
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	.loc 7 5321 0
	#   }
	.loc 7 5318 0
	#     piet_push_digit(pi, 1);
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5318 0
	#     piet_push_digit(pi, 1);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6461, A, 0
	.loc 7 5321 0
	#   }
	.loc 7 5319 0
	#     piet_emit(pi, PIET_NOT);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_digit
	.L6462:
	mov A, B
	add SP, 2
	.loc 7 5320 0
	#     return;
	.loc 7 5193 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6463:
	mov A, B
	add SP, 2
	.loc 7 5321 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6461:
	.loc 7 5324 0
	#   uint cs = 0;
	.loc 7 5325 0
	#   do {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777199
	mov A, 0
	store A, B
	.loc 7 5328 0
	#   } while (v);
	.L935:
	.loc 7 5327 0
	#     v /= PIET_IMM_BASE;
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5327 0
	#     v /= PIET_IMM_BASE;
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6464
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6464:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5324 0
	#   uint cs = 0;
	mov A, BP
	add A, 16777200
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5327 0
	#     v /= PIET_IMM_BASE;
	.loc 7 5325 0
	#   do {
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777199
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5328 0
	#   } while (v);
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5328 0
	#   } while (v);
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6465
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L6465:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 3
	store A, B
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L6466, A, 0
	.loc 7 5328 0
	#   } while (v);
	jmp .L935
	.L6466:
	.L936:
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	.loc 7 5331 0
	#     if (i != 0) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777198
	mov A, 0
	store A, B
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	.L937:
	.loc 7 5331 0
	#     if (i != 0) {
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5325 0
	#   do {
	mov B, BP
	add B, 16777199
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6467, A, 0
	jmp .L6468
	.L6467:
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	jmp .L939
	.L6468:
	.loc 7 5334 0
	#     }
	.loc 7 5332 0
	#       piet_push_digit(pi, PIET_IMM_BASE);
	.loc 7 5331 0
	#     if (i != 0) {
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5332 0
	#       piet_push_digit(pi, PIET_IMM_BASE);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6469, A, 0
	.loc 7 5334 0
	#     }
	.loc 7 5333 0
	#       piet_emit(pi, PIET_MUL);
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_digit
	.L6470:
	mov A, B
	add SP, 2
	.loc 7 5334 0
	#     }
	.loc 7 5193 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6471
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6471:
	mov A, B
	add SP, 2
	.L6469:
	.loc 7 5336 0
	#     if (v) {
	mov A, 0
	mov B, SP
	.loc 7 5324 0
	#   uint cs = 0;
	mov A, BP
	add A, 16777200
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5336 0
	#     if (v) {
	.loc 7 5325 0
	#   do {
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5331 0
	#     if (i != 0) {
	mov B, BP
	add B, 16777198
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5336 0
	#     if (v) {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777197
	store A, B
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	.loc 7 5336 0
	#     if (v) {
	mov B, BP
	add B, 16777197
	load A, B
	jeq .L6472, A, 0
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	.loc 7 5338 0
	#       if (i != 0)
	.loc 7 5336 0
	#     if (v) {
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_digit
	.L6473:
	mov A, B
	add SP, 2
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	.loc 7 5331 0
	#     if (i != 0) {
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6474, A, 0
	.loc 7 5193 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5314 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6475
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6475:
	mov A, B
	add SP, 2
	.L6474:
	.L6472:
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	.L938:
	.loc 7 5331 0
	#     if (i != 0) {
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777198
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	jmp .L937
	.L939:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_push_minus1:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5348 0
	# }
	.loc 7 5346 0
	#   piet_push(pi, 1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6476
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6476:
	mov A, B
	add SP, 2
	.loc 7 5347 0
	#   piet_emit(pi, PIET_SUB);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6477
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6477:
	mov A, B
	add SP, 2
	.loc 7 5348 0
	# }
	.loc 7 5193 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5339 0
	#         piet_emit(pi, PIET_ADD);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6478
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6478:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_roll:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5364 0
	# }
	.loc 7 5362 0
	#   piet_push(pi, count);
	.loc 7 5348 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6479
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6479:
	mov A, B
	add SP, 2
	.loc 7 5363 0
	#   piet_emit(pi, PIET_ROLL);
	.loc 7 5348 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6480
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6480:
	mov A, B
	add SP, 2
	.loc 7 5364 0
	# }
	.loc 7 5193 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5348 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6481:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_rroll:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5372 0
	# }
	.loc 7 5368 0
	#   piet_push(pi, 1);
	.loc 7 5364 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6482
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6482:
	mov A, B
	add SP, 2
	.loc 7 5369 0
	#   piet_push(pi, count + 1);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5364 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6483:
	mov A, B
	add SP, 2
	.loc 7 5370 0
	#   piet_emit(pi, PIET_SUB);
	.loc 7 5364 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5370 0
	#   piet_emit(pi, PIET_SUB);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5364 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6484:
	mov A, B
	add SP, 2
	.loc 7 5371 0
	#   piet_emit(pi, PIET_ROLL);
	.loc 7 5193 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5364 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6485:
	mov A, B
	add SP, 2
	.loc 7 5372 0
	# }
	.loc 7 5193 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5364 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6486:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_load:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5378 0
	# }
	.loc 7 5376 0
	#   piet_emit(pi, PIET_DUP);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5372 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5376 0
	#   piet_emit(pi, PIET_DUP);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_rroll
	.L6487:
	mov A, B
	add SP, 3
	.loc 7 5377 0
	#   piet_roll(pi, pos + 2, 1);
	.loc 7 5193 0
	# }
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6488
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6488:
	mov A, B
	add SP, 2
	.loc 7 5378 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5372 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5378 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5372 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6489
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_roll
	.L6489:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_store_top:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5384 0
	# }
	.loc 7 5382 0
	#   piet_emit(pi, PIET_POP);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5378 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5382 0
	#   piet_emit(pi, PIET_POP);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5378 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_rroll
	.L6490:
	mov A, B
	add SP, 3
	.loc 7 5383 0
	#   piet_roll(pi, pos + 1, 1);
	.loc 7 5193 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5378 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6491:
	mov A, B
	add SP, 2
	.loc 7 5384 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5378 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5384 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5378 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_roll
	.L6492:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_push_value:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5393 0
	#   }
	.loc 7 5388 0
	#     piet_load(pi, PIET_A + v->reg + stk);
	.loc 7 5384 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6493, A, 0
	.loc 7 5389 0
	#   } else if (v->type == IMM) {
	.loc 7 5348 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5389 0
	#   } else if (v->type == IMM) {
	.loc 7 5384 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6494
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_load
	.L6494:
	mov A, B
	add SP, 2
	jmp .L6495
	.L6493:
	.loc 7 5393 0
	#   }
	.loc 7 5389 0
	#   } else if (v->type == IMM) {
	.loc 7 5384 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6496, A, 0
	.loc 7 5391 0
	#   } else {
	.loc 7 5384 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5391 0
	#   } else {
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6497:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5384 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6498
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6498:
	mov A, B
	add SP, 2
	jmp .L6499
	.L6496:
	.loc 7 5393 0
	#   }
.data
	.L6500:
	.string "invalid value"
.text
	mov A, .L6500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6501:
	mov A, B
	add SP, 1
	.L6499:
	.L6495:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_push_dst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5398 0
	# }
	.loc 7 5393 0
	#   }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5398 0
	# }
	.loc 7 5393 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_value
	.L6502:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_push_src:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5402 0
	# }
	.loc 7 5398 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5402 0
	# }
	.loc 7 5398 0
	# }
	mov B, BP
	add B, 3
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6503
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_value
	.L6503:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_uint_mod:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5408 0
	# }
	.loc 7 5407 0
	#   piet_emit(pi, PIET_MOD);
	mov A, 65536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5402 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6504:
	mov A, B
	add SP, 2
	.loc 7 5408 0
	# }
	.loc 7 5193 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5402 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6505:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5442 0
	#     error("cmp");
	.loc 7 5412 0
	#   if (op == JLT) {
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L6506:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5423 0
	#   }
	.loc 7 5413 0
	#     op = JGT;
	.loc 7 5412 0
	#   if (op == JLT) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6507, A, 0
	.loc 7 5416 0
	#   } else if (op == JGE) {
	.loc 7 5414 0
	#     piet_push_src(pi, inst, stk);
	.loc 6 205 0
	# }
	mov A, 11
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5415 0
	#     piet_push_dst(pi, inst, stk + 1);
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_src
	.L6508:
	mov A, B
	add SP, 3
	.loc 7 5416 0
	#   } else if (op == JGE) {
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5416 0
	#   } else if (op == JGE) {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_dst
	.L6509:
	mov A, B
	add SP, 3
	jmp .L6510
	.L6507:
	.loc 7 5423 0
	#   }
	.loc 7 5416 0
	#   } else if (op == JGE) {
	.loc 7 5412 0
	#   if (op == JLT) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6511, A, 0
	.loc 7 5420 0
	#   } else {
	.loc 7 5418 0
	#     piet_push_src(pi, inst, stk);
	.loc 6 205 0
	# }
	mov A, 12
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5419 0
	#     piet_push_dst(pi, inst, stk + 1);
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_src
	.L6512:
	mov A, B
	add SP, 3
	.loc 7 5420 0
	#   } else {
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5420 0
	#   } else {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_dst
	.L6513:
	mov A, B
	add SP, 3
	jmp .L6514
	.L6511:
	.loc 7 5423 0
	#   }
	.loc 7 5422 0
	#     piet_push_src(pi, inst, stk + 1);
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_dst
	.L6515:
	mov A, B
	add SP, 3
	.loc 7 5423 0
	#   }
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5423 0
	#   }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_src
	.L6516:
	mov A, B
	add SP, 3
	.L6514:
	.L6510:
	.loc 7 5442 0
	#     error("cmp");
	.loc 7 5412 0
	#   if (op == JLT) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6517, A, 0
	jmp .L941
	.L6517:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6518, A, 0
	jmp .L942
	.L6518:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6519, A, 0
	jmp .L943
	.L6519:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6520, A, 0
	jmp .L944
	.L6520:
	jmp .L945
	.loc 7 5426 0
	#     piet_emit(pi, PIET_SUB);
	.L941:
	.loc 7 5193 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6521:
	mov A, B
	add SP, 2
	.loc 7 5428 0
	#     break;
	.loc 7 5193 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6522:
	mov A, B
	add SP, 2
	.loc 7 5429 0
	#   case JNE:
	jmp .L940
	.loc 7 5430 0
	#     piet_emit(pi, PIET_SUB);
	.L942:
	.loc 7 5193 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6523:
	mov A, B
	add SP, 2
	.loc 7 5432 0
	#     piet_emit(pi, PIET_NOT);
	.loc 7 5193 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6524:
	mov A, B
	add SP, 2
	.loc 7 5433 0
	#     break;
	.loc 7 5193 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6525:
	mov A, B
	add SP, 2
	.loc 7 5434 0
	#   case JGT:
	jmp .L940
	.loc 7 5435 0
	#     piet_emit(pi, PIET_GT);
	.L943:
	.loc 7 5193 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6526:
	mov A, B
	add SP, 2
	.loc 7 5437 0
	#   case JLE:
	jmp .L940
	.loc 7 5438 0
	#     piet_emit(pi, PIET_GT);
	.L944:
	.loc 7 5193 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6527:
	mov A, B
	add SP, 2
	.loc 7 5440 0
	#     break;
	.loc 7 5193 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5408 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6528:
	mov A, B
	add SP, 2
	.loc 7 5441 0
	#   default:
	jmp .L940
	.loc 7 5442 0
	#     error("cmp");
	.L945:
.data
	.L6529:
	.string "cmp"
.text
	mov A, .L6529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6530:
	mov A, B
	add SP, 1
	.L940:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 5588 0
	#     error("oops");
	.loc 7 5448 0
	#   case MOV:
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5588 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6531, A, 0
	jmp .L947
	.L6531:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6532, A, 0
	jmp .L948
	.L6532:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6533, A, 0
	jmp .L949
	.L6533:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6534, A, 0
	jmp .L950
	.L6534:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6535, A, 0
	jmp .L951
	.L6535:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6536, A, 0
	jmp .L952
	.L6536:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6537, A, 0
	jmp .L953
	.L6537:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6538, A, 0
	jmp .L954
	.L6538:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6539, A, 0
	jmp .L955
	.L6539:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6540, A, 0
	jmp .L956
	.L6540:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6541, A, 0
	jmp .L957
	.L6541:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6542, A, 0
	jmp .L958
	.L6542:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6543, A, 0
	jmp .L959
	.L6543:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6544, A, 0
	jmp .L960
	.L6544:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6545, A, 0
	jmp .L961
	.L6545:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6546, A, 0
	jmp .L962
	.L6546:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6547, A, 0
	jmp .L963
	.L6547:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6548, A, 0
	jmp .L964
	.L6548:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6549, A, 0
	jmp .L965
	.L6549:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6550, A, 0
	jmp .L966
	.L6550:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6551, A, 0
	jmp .L967
	.L6551:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6552, A, 0
	jmp .L968
	.L6552:
	jmp .L969
	.loc 7 5449 0
	#     piet_push_src(pi, inst, 0);
	.L947:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_src
	.L6553:
	mov A, B
	add SP, 3
	.loc 7 5451 0
	#     break;
	.loc 7 5348 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5451 0
	#     break;
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_store_top
	.L6554:
	mov A, B
	add SP, 2
	.loc 7 5452 0
	# 
	jmp .L946
	.loc 7 5454 0
	#     piet_push_dst(pi, inst, 0);
	.L948:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_dst
	.L6555:
	mov A, B
	add SP, 3
	.loc 7 5456 0
	#     piet_emit(pi, PIET_ADD);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_src
	.L6556:
	mov A, B
	add SP, 3
	.loc 7 5457 0
	#     piet_uint_mod(pi);
	.loc 7 5193 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6557:
	mov A, B
	add SP, 2
	.loc 7 5458 0
	#     piet_store_top(pi, PIET_A + inst->dst.reg);
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_uint_mod
	.L6558:
	mov A, B
	add SP, 1
	.loc 7 5459 0
	#     break;
	.loc 7 5348 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5459 0
	#     break;
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_store_top
	.L6559:
	mov A, B
	add SP, 2
	.loc 7 5460 0
	# 
	jmp .L946
	.loc 7 5462 0
	#     piet_push_dst(pi, inst, 0);
	.L949:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_dst
	.L6560:
	mov A, B
	add SP, 3
	.loc 7 5464 0
	#     piet_emit(pi, PIET_SUB);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_src
	.L6561:
	mov A, B
	add SP, 3
	.loc 7 5465 0
	#     piet_push(pi, 65536);
	.loc 7 5193 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6562:
	mov A, B
	add SP, 2
	.loc 7 5466 0
	#     piet_emit(pi, PIET_ADD);
	mov A, 65536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6563:
	mov A, B
	add SP, 2
	.loc 7 5467 0
	#     piet_uint_mod(pi);
	.loc 7 5193 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6564:
	mov A, B
	add SP, 2
	.loc 7 5468 0
	#     piet_store_top(pi, PIET_A + inst->dst.reg);
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_uint_mod
	.L6565:
	mov A, B
	add SP, 1
	.loc 7 5469 0
	#     break;
	.loc 7 5348 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5469 0
	#     break;
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_store_top
	.L6566:
	mov A, B
	add SP, 2
	.loc 7 5470 0
	# 
	jmp .L946
	.loc 7 5472 0
	#     piet_push_src(pi, inst, 0);
	.L950:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_src
	.L6567:
	mov A, B
	add SP, 3
	.loc 7 5474 0
	#     // Put the address to the bottom of the stack.
	.loc 7 5193 0
	# }
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6568:
	mov A, B
	add SP, 2
	.loc 7 5476 0
	#     piet_push(pi, 1);
	mov A, 65545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6569:
	mov A, B
	add SP, 2
	.loc 7 5477 0
	#     piet_emit(pi, PIET_ROLL);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6570:
	mov A, B
	add SP, 2
	.loc 7 5478 0
	# 
	.loc 7 5193 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6571:
	mov A, B
	add SP, 2
	.loc 7 5480 0
	#     piet_emit(pi, PIET_ADD);
	.loc 7 5348 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5480 0
	#     piet_emit(pi, PIET_ADD);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6572:
	mov A, B
	add SP, 2
	.loc 7 5481 0
	#     piet_push_minus1(pi);
	.loc 7 5193 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6573:
	mov A, B
	add SP, 2
	.loc 7 5482 0
	#     piet_emit(pi, PIET_ROLL);
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_minus1
	.L6574:
	mov A, B
	add SP, 1
	.loc 7 5483 0
	#     piet_emit(pi, PIET_DUP);
	.loc 7 5193 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6575:
	mov A, B
	add SP, 2
	.loc 7 5484 0
	# 
	.loc 7 5193 0
	# }
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6576:
	mov A, B
	add SP, 2
	.loc 7 5487 0
	#     piet_push_minus1(pi);
	mov A, 65545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6577
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6577:
	mov A, B
	add SP, 2
	.loc 7 5488 0
	#     piet_emit(pi, PIET_ROLL);
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_minus1
	.L6578:
	mov A, B
	add SP, 1
	.loc 7 5489 0
	# 
	.loc 7 5193 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6579:
	mov A, B
	add SP, 2
	.loc 7 5491 0
	#     piet_emit(pi, PIET_ADD);
	.loc 7 5348 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5491 0
	#     piet_emit(pi, PIET_ADD);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6580:
	mov A, B
	add SP, 2
	.loc 7 5492 0
	#     piet_push(pi, 1);
	.loc 7 5193 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6581:
	mov A, B
	add SP, 2
	.loc 7 5493 0
	#     piet_emit(pi, PIET_ROLL);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6582:
	mov A, B
	add SP, 2
	.loc 7 5494 0
	# 
	.loc 7 5193 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6583:
	mov A, B
	add SP, 2
	.loc 7 5496 0
	#     break;
	.loc 7 5348 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5496 0
	#     break;
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_store_top
	.L6584:
	mov A, B
	add SP, 2
	.loc 7 5497 0
	# 
	jmp .L946
	.loc 7 5499 0
	#     piet_push_dst(pi, inst, 0);
	.L951:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_dst
	.L6585:
	mov A, B
	add SP, 3
	.loc 7 5501 0
	#     piet_emit(pi, PIET_DUP);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_src
	.L6586:
	mov A, B
	add SP, 3
	.loc 7 5502 0
	# 
	.loc 7 5193 0
	# }
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6587:
	mov A, B
	add SP, 2
	.loc 7 5504 0
	#     piet_emit(pi, PIET_ADD);
	.loc 7 5348 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5504 0
	#     piet_emit(pi, PIET_ADD);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6588:
	mov A, B
	add SP, 2
	.loc 7 5505 0
	#     piet_push_minus1(pi);
	.loc 7 5193 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6589:
	mov A, B
	add SP, 2
	.loc 7 5506 0
	#     piet_emit(pi, PIET_ROLL);
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_minus1
	.L6590:
	mov A, B
	add SP, 1
	.loc 7 5507 0
	#     piet_emit(pi, PIET_POP);
	.loc 7 5193 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6591:
	mov A, B
	add SP, 2
	.loc 7 5508 0
	# 
	.loc 7 5193 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6592:
	mov A, B
	add SP, 2
	.loc 7 5510 0
	#     piet_emit(pi, PIET_ADD);
	.loc 7 5348 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5510 0
	#     piet_emit(pi, PIET_ADD);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6593:
	mov A, B
	add SP, 2
	.loc 7 5511 0
	#     piet_push(pi, 1);
	.loc 7 5193 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6594:
	mov A, B
	add SP, 2
	.loc 7 5512 0
	#     piet_emit(pi, PIET_ROLL);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6595:
	mov A, B
	add SP, 2
	.loc 7 5513 0
	#     break;
	.loc 7 5193 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6596:
	mov A, B
	add SP, 2
	.loc 7 5514 0
	# 
	jmp .L946
	.loc 7 5516 0
	#     piet_push_src(pi, inst, 0);
	.L952:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_src
	.L6597:
	mov A, B
	add SP, 3
	.loc 7 5518 0
	#     break;
	.loc 7 5193 0
	# }
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6598:
	mov A, B
	add SP, 2
	.loc 7 5519 0
	# 
	jmp .L946
	.loc 7 5548 0
	#   }
	.loc 7 5521 0
	#     // TODO: Handle EOF
	.L953:
	.loc 7 5548 0
	#   }
	.loc 7 5526 0
	# #if 0
	.loc 7 5193 0
	# }
	mov A, 14
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6599:
	mov A, B
	add SP, 2
	.loc 7 5546 0
	# 
	.loc 7 5348 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5546 0
	# 
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_store_top
	.L6600:
	mov A, B
	add SP, 2
	.loc 7 5548 0
	#   }
	jmp .L946
	.loc 7 5551 0
	#     piet_emit(pi, PIET_EXIT);
	.L954:
	.loc 7 5193 0
	# }
	mov A, 18
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6601:
	mov A, B
	add SP, 2
	.loc 7 5553 0
	# 
	jmp .L946
	.loc 7 5555 0
	#     break;
	.L955:
	jmp .L946
	.loc 7 5558 0
	#   case NE:
	.L956:
	.L957:
	.L958:
	.L959:
	.L960:
	.L961:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6602
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_cmp
	.L6602:
	mov A, B
	add SP, 3
	.loc 7 5565 0
	#     break;
	.loc 7 5348 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5565 0
	#     break;
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_store_top
	.L6603:
	mov A, B
	add SP, 2
	.loc 7 5566 0
	# 
	jmp .L946
	.loc 7 5568 0
	#   case JNE:
	.L962:
	.L963:
	.L964:
	.L965:
	.L966:
	.L967:
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5568 0
	#   case JNE:
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6604:
	mov A, B
	add SP, 2
	.loc 7 5575 0
	#     piet_push(pi, 2);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_value
	.L6605:
	mov A, B
	add SP, 3
	.loc 7 5576 0
	#     piet_cmp(pi, inst, 3);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6606:
	mov A, B
	add SP, 2
	.loc 7 5577 0
	#     piet_emit(pi, PIET_ROLL);
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6607
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_cmp
	.L6607:
	mov A, B
	add SP, 3
	.loc 7 5578 0
	#     piet_emit(pi, PIET_POP);
	.loc 7 5193 0
	# }
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6608:
	mov A, B
	add SP, 2
	.loc 7 5579 0
	#     piet_emit(pi, PIET_JMP);
	.loc 7 5193 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6609
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6609:
	mov A, B
	add SP, 2
	.loc 7 5580 0
	#     break;
	.loc 7 5193 0
	# }
	mov A, 17
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6610:
	mov A, B
	add SP, 2
	.loc 7 5581 0
	# 
	jmp .L946
	.loc 7 5583 0
	#     piet_push_value(pi, &inst->jmp, 0);
	.L968:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push_value
	.L6611:
	mov A, B
	add SP, 3
	.loc 7 5585 0
	#     break;
	.loc 7 5193 0
	# }
	mov A, 17
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5442 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6612:
	mov A, B
	add SP, 2
	.loc 7 5586 0
	# 
	jmp .L946
	.loc 7 5588 0
	#     error("oops");
	.L969:
.data
	.L6613:
	.string "oops"
.text
	mov A, .L6613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6614
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6614:
	mov A, B
	add SP, 1
	.L946:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_next_color:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5597 0
	# }
	.loc 7 5594 0
	#   uint l = (c + op) % 3;
	.loc 7 5588 0
	#     error("oops");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5595 0
	#   uint h = (c / 3 + op / 3) % 6;
	mov A, 0
	mov B, SP
	.loc 7 5588 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5595 0
	#   uint h = (c / 3 + op / 3) % 6;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6615
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6615:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5596 0
	#   return l + h * 3;
	mov A, 0
	mov B, SP
	.loc 7 5588 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5596 0
	#   return l + h * 3;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6616
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L6616:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5588 0
	#     error("oops");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5596 0
	#   return l + h * 3;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6617
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L6617:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6618
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6618:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5597 0
	# }
	.loc 7 5595 0
	#   uint h = (c / 3 + op / 3) % 6;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5597 0
	# }
	.loc 7 5596 0
	#   return l + h * 3;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5597 0
	# }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6619
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6619:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
piet_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 65552
	.loc 7 5631 0
	# }
	.loc 7 5601 0
	#   for (uint i = 0; i < PIET_INIT_STACK_SIZE; i++) {
	.loc 7 5608 0
	#   }
	.loc 7 5602 0
	#     uint v = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16711670
	mov A, 0
	store A, B
	.loc 7 5608 0
	#   }
	.L970:
	.loc 7 5602 0
	#     uint v = 0;
	mov B, BP
	add B, 16711670
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65545
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6620, A, 0
	jmp .L6621
	.L6620:
	.loc 7 5608 0
	#   }
	jmp .L972
	.L6621:
	.loc 7 5603 0
	#     if (i >= PIET_MEM + 1 && data) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16711669
	mov A, 0
	store A, B
	.loc 7 5606 0
	#     }
	.loc 7 5604 0
	#       v = data->v % 65536;
	.loc 7 5348 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5604 0
	#       v = data->v % 65536;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5602 0
	#     uint v = 0;
	mov B, BP
	add B, 16711670
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L6622, A, 0
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	ne B, 0
	.L6622:
	mov A, B
	jeq .L6623, A, 0
	.loc 7 5606 0
	#     }
	.loc 7 5605 0
	#       data = data->next;
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5605 0
	#       data = data->next;
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6624
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6624:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16711669
	store A, B
	.loc 7 5606 0
	#     }
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.L6623:
	.loc 7 5608 0
	#   }
	.loc 7 5603 0
	#     if (i >= PIET_MEM + 1 && data) {
	mov B, BP
	add B, 16711669
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5608 0
	#   }
	.loc 7 5601 0
	#   for (uint i = 0; i < PIET_INIT_STACK_SIZE; i++) {
	mov A, BP
	add A, 16711671
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5608 0
	#   }
	mov A, 65545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5602 0
	#     uint v = 0;
	mov B, BP
	add B, 16711670
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5608 0
	#   }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L971:
	.loc 7 5602 0
	#     uint v = 0;
	mov B, BP
	add B, 16711670
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16711670
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5608 0
	#   }
	jmp .L970
	.L972:
	.loc 7 5611 0
	#   bool prev_zero = false;
	mov A, 0
	mov B, SP
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16711668
	store A, B
	.file 9 "/Users/nullpo/dev/elvm/libc/stdbool.h"
	.loc 9 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov B, BP
	add B, 16711667
	store A, B
	.loc 7 5620 0
	#   }
	.loc 7 5613 0
	#     uint v = vals[i];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16711666
	mov A, 0
	store A, B
	.loc 7 5620 0
	#   }
	.L973:
	.loc 7 5613 0
	#     uint v = vals[i];
	mov B, BP
	add B, 16711666
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 65545
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6625, A, 0
	jmp .L6626
	.L6625:
	.loc 7 5620 0
	#   }
	jmp .L975
	.L6626:
	.loc 7 5614 0
	#     if (v == 0 && prev_zero) {
	mov A, 0
	mov B, SP
	.loc 7 5601 0
	#   for (uint i = 0; i < PIET_INIT_STACK_SIZE; i++) {
	mov A, BP
	add A, 16711671
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5613 0
	#     uint v = vals[i];
	mov B, BP
	add B, 16711666
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16711665
	store A, B
	.loc 7 5618 0
	#     }
	.loc 7 5615 0
	#       piet_emit(&pi, PIET_DUP);
	.loc 7 5614 0
	#     if (v == 0 && prev_zero) {
	mov B, BP
	add B, 16711665
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5615 0
	#       piet_emit(&pi, PIET_DUP);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L6627, A, 0
	.loc 9 4 0
	# #define true 1
	mov B, BP
	add B, 16711667
	load A, B
	mov B, A
	ne B, 0
	.L6627:
	mov A, B
	jeq .L6628, A, 0
	.loc 7 5616 0
	#     } else {
	.loc 7 5193 0
	# }
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5616 0
	#     } else {
	mov A, BP
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6629
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6629:
	mov A, B
	add SP, 2
	jmp .L6630
	.L6628:
	.loc 7 5618 0
	#     }
	.loc 7 5614 0
	#     if (v == 0 && prev_zero) {
	mov B, BP
	add B, 16711665
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5618 0
	#     }
	mov A, BP
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6631:
	mov A, B
	add SP, 2
	.L6630:
	.loc 7 5620 0
	#   }
	.loc 7 5614 0
	#     if (v == 0 && prev_zero) {
	mov B, BP
	add B, 16711665
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5620 0
	#   }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16711667
	store A, B
	.L974:
	.loc 7 5613 0
	#     uint v = vals[i];
	mov B, BP
	add B, 16711666
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16711666
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5620 0
	#   }
	jmp .L973
	.L975:
	.loc 7 5623 0
	#   for (pi = opi->next; pi; pi = pi->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16711664
	mov A, 0
	store A, B
	.loc 7 5628 0
	#     }
	.loc 7 5624 0
	#     if (pi->op == PIET_PUSH) {
	.loc 7 5611 0
	#   bool prev_zero = false;
	mov B, BP
	add B, 16711668
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 7 5628 0
	#     }
	.L976:
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L6632, A, 0
	jmp .L6633
	.L6632:
	.loc 7 5628 0
	#     }
	jmp .L978
	.L6633:
	.loc 7 5625 0
	#       size += pi->arg;
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5625 0
	#       size += pi->arg;
	.loc 7 5193 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6634, A, 0
	.loc 7 5626 0
	#     } else {
	.loc 7 5623 0
	#   for (pi = opi->next; pi; pi = pi->next) {
	mov B, BP
	add B, 16711664
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5626 0
	#     } else {
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16711664
	store A, B
	jmp .L6635
	.L6634:
	.loc 7 5628 0
	#     }
	.loc 7 5623 0
	#   for (pi = opi->next; pi; pi = pi->next) {
	mov B, BP
	add B, 16711664
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16711664
	store A, B
	load A, SP
	add SP, 1
	.L6635:
	.loc 7 5628 0
	#     }
	.L977:
	.loc 7 5624 0
	#     if (pi->op == PIET_PUSH) {
	.loc 7 5597 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 3
	store A, B
	.loc 7 5628 0
	#     }
	jmp .L976
	.L978:
	.loc 7 5631 0
	# }
	.loc 7 5623 0
	#   for (pi = opi->next; pi; pi = pi->next) {
	mov B, BP
	add B, 16711664
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_piet:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 37
	.loc 7 5845 0
	#     }
	.loc 7 5636 0
	#   PietBlock* pb = &pb_head;
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov A, 0
	mov B, SP
	mov A, BP
	add A, -2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5638 0
	# 
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5640 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5665 0
	#   }
	.loc 7 5641 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 5631 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 5665 0
	#   }
	.L979:
	.loc 7 5641 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L6636, A, 0
	jmp .L6637
	.L6636:
	.loc 7 5665 0
	#   }
	jmp .L981
	.L6637:
	.loc 7 5653 0
	# 
	.loc 7 5642 0
	#       if (pi && pi->op != PIET_JMP) {
	.loc 7 5640 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5642 0
	#       if (pi && pi->op != PIET_JMP) {
	.loc 7 5641 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6638, A, 0
	.loc 7 5653 0
	# 
	.loc 7 5644 0
	#       }
	.loc 7 5643 0
	#         piet_push(&pi, inst->pc);
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, 0
	jeq .L6639, A, 0
	.loc 7 5643 0
	#         piet_push(&pi, inst->pc);
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5643 0
	#         piet_push(&pi, inst->pc);
	.loc 7 5193 0
	# }
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L6639:
	mov A, B
	jeq .L6640, A, 0
	.loc 7 5644 0
	#       }
	.loc 7 5641 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5644 0
	#       }
	mov A, BP
	add A, -4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_push
	.L6641:
	mov A, B
	add SP, 2
	.L6640:
	.loc 7 5647 0
	#       pb = pb->next;
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L6642:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5648 0
	# 
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5650 0
	#       pb->inst = pi;
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L6643:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5651 0
	# 
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5653 0
	# 
	.loc 7 5193 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5653 0
	# 
	mov A, BP
	add A, -4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6644
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit
	.L6644:
	mov A, B
	add SP, 2
	.L6638:
	.loc 7 5664 0
	#     piet_emit_inst(&pi, inst);
	.loc 7 5641 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 5665 0
	#   }
	.loc 7 5641 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5665 0
	#   }
	mov A, BP
	add A, -4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_emit_inst
	.L6645:
	mov A, B
	add SP, 2
	.L980:
	.loc 7 5641 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 5665 0
	#   }
	jmp .L979
	.L981:
	.loc 7 5668 0
	#   int longest_block = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777209
	mov A, 0
	store A, B
	.loc 7 5669 0
	#   for (pb = pb_head.next; pb; pb = pb->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777208
	mov A, 0
	store A, B
	.loc 7 5676 0
	#       longest_block = block_len;
	.loc 7 5670 0
	#     pc++;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5676 0
	#       longest_block = block_len;
	.L982:
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L6646, A, 0
	jmp .L6647
	.L6646:
	.loc 7 5676 0
	#       longest_block = block_len;
	jmp .L984
	.L6647:
	.loc 7 5671 0
	#     int block_len = 0;
	.loc 7 5668 0
	#   int longest_block = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777209
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5672 0
	#     for (pi = pb->inst->next; pi; pi = pi->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777207
	mov A, 0
	store A, B
	.loc 7 5674 0
	#     }
	.loc 7 5673 0
	#       block_len++;
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5674 0
	#     }
	.L985:
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6648, A, 0
	jmp .L6649
	.L6648:
	.loc 7 5674 0
	#     }
	jmp .L987
	.L6649:
	.loc 7 5672 0
	#     for (pi = pb->inst->next; pi; pi = pi->next) {
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777207
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5674 0
	#     }
	.L986:
	.loc 7 5673 0
	#       block_len++;
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5674 0
	#     }
	jmp .L985
	.L987:
	.loc 7 5676 0
	#       longest_block = block_len;
	.loc 7 5669 0
	#   for (pb = pb_head.next; pb; pb = pb->next) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5672 0
	#     for (pi = pb->inst->next; pi; pi = pi->next) {
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6650, A, 0
	.loc 7 5676 0
	#       longest_block = block_len;
	.loc 7 5672 0
	#     for (pi = pb->inst->next; pi; pi = pi->next) {
	mov B, BP
	add B, 16777207
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	.L6650:
	.loc 7 5676 0
	#       longest_block = block_len;
	.L983:
	.loc 7 5670 0
	#     pc++;
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5676 0
	#       longest_block = block_len;
	jmp .L982
	.L984:
	.loc 7 5691 0
	#   uint init_state_size = piet_init_state(module->data, &init_state);
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 5692 0
	# 
	mov A, 0
	mov B, SP
	mov A, BP
	add A, -12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5631 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_init_state
	.L6651:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777203
	store A, B
	.loc 7 5694 0
	#   uint h =
	mov A, 0
	mov B, SP
	.loc 7 5669 0
	#   for (pb = pb_head.next; pb; pb = pb->next) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777202
	store A, B
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	mov A, 0
	mov B, SP
	.loc 7 5668 0
	#   int longest_block = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6652:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5692 0
	# 
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6653
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6653:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L6654:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6655:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777201
	store A, B
	.loc 7 5697 0
	# 
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6656:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6657
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L6657:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777200
	store A, B
	.loc 7 5704 0
	#   uint y = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777199
	mov A, 0
	store A, B
	.loc 7 5705 0
	#   uint x = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777198
	mov A, 0
	store A, B
	.loc 7 5706 0
	#   int dx = 1;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777197
	mov A, 0
	store A, B
	.loc 7 5707 0
	#   pixels[y*w+x++] = 2;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777196
	mov A, 1
	store A, B
	.loc 7 5708 0
	#   for (pi = init_state.next; pi; pi = pi->next) {
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5708 0
	#   for (pi = init_state.next; pi; pi = pi->next) {
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6658:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5708 0
	#   for (pi = init_state.next; pi; pi = pi->next) {
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777197
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5750 0
	#     }
	.loc 7 5709 0
	#     assert(y < h);
	mov B, BP
	add B, 16777206
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5750 0
	#     }
	.L988:
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6659, A, 0
	jmp .L6660
	.L6659:
	.loc 7 5750 0
	#     }
	jmp .L990
	.L6660:
	.loc 8 12 0
	#     }                                           \
	.L991:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L6661, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L6662:
	.string "assertion failed: y < h\n"
.text
	mov A, .L6662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L6663:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L6661:
	mov A, 0
	jeq .L6664, A, 0
	jmp .L991
	.L6664:
	.L992:
	.loc 7 5711 0
	# 
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_next_color
	.L6665:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 5720 0
	#     }
	.loc 7 5713 0
	#       for (uint i = 0; i < pi->next->arg; i++) {
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, 0
	jeq .L6666, A, 0
	.loc 7 5713 0
	#       for (uint i = 0; i < pi->next->arg; i++) {
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5713 0
	#       for (uint i = 0; i < pi->next->arg; i++) {
	.loc 7 5193 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6666:
	mov A, B
	jeq .L6667, A, 0
	.loc 7 5716 0
	#       }
	.loc 7 5714 0
	#         pixels[y*w+x] = c + 2;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777195
	mov A, 0
	store A, B
	.loc 7 5716 0
	#       }
	.L993:
	.loc 7 5714 0
	#         pixels[y*w+x] = c + 2;
	mov B, BP
	add B, 16777195
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6668, A, 0
	jmp .L6669
	.L6668:
	.loc 7 5716 0
	#       }
	jmp .L995
	.L6669:
	.loc 7 5715 0
	#         x += dx;
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5715 0
	#         x += dx;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5715 0
	#         x += dx;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6670:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5716 0
	#       }
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5716 0
	#       }
	.loc 7 5707 0
	#   pixels[y*w+x++] = 2;
	mov B, BP
	add B, 16777196
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777197
	store A, B
	.loc 7 5716 0
	#       }
	.L994:
	.loc 7 5714 0
	#         pixels[y*w+x] = c + 2;
	mov B, BP
	add B, 16777195
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777195
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5716 0
	#       }
	jmp .L993
	.L995:
	jmp .L6671
	.L6667:
	.loc 7 5720 0
	#     }
	.loc 7 5719 0
	#       x += dx;
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5719 0
	#       x += dx;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5719 0
	#       x += dx;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6672:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5720 0
	#     }
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5720 0
	#     }
	.loc 7 5707 0
	#   pixels[y*w+x++] = 2;
	mov B, BP
	add B, 16777196
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777197
	store A, B
	.L6671:
	.loc 7 5729 0
	#     }
	.loc 7 5723 0
	#       pixels[(y+1)*w+x-1] = c + 2;
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5723 0
	#       pixels[(y+1)*w+x-1] = c + 2;
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L6673, A, 0
	.loc 7 5723 0
	#       pixels[(y+1)*w+x-1] = c + 2;
	.loc 7 5707 0
	#   pixels[y*w+x++] = 2;
	mov B, BP
	add B, 16777196
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5723 0
	#       pixels[(y+1)*w+x-1] = c + 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6673:
	mov A, B
	jeq .L6674, A, 0
	.loc 7 5729 0
	#     }
	.loc 7 5724 0
	#       pixels[(y+2)*w+x-1] = c + 2;
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5724 0
	#       pixels[(y+2)*w+x-1] = c + 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5724 0
	#       pixels[(y+2)*w+x-1] = c + 2;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5724 0
	#       pixels[(y+2)*w+x-1] = c + 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6675:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5724 0
	#       pixels[(y+2)*w+x-1] = c + 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5725 0
	#       pixels[(y+3)*w+x-1] = c + 2;
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5725 0
	#       pixels[(y+3)*w+x-1] = c + 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5725 0
	#       pixels[(y+3)*w+x-1] = c + 2;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5725 0
	#       pixels[(y+3)*w+x-1] = c + 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6676:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5725 0
	#       pixels[(y+3)*w+x-1] = c + 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5726 0
	#       x = x-1;
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5726 0
	#       x = x-1;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5726 0
	#       x = x-1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5726 0
	#       x = x-1;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6677
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6677:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5726 0
	#       x = x-1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5727 0
	#       y += 4;
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5727 0
	#       y += 4;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777197
	store A, B
	.loc 7 5728 0
	#       dx = -1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5728 0
	#       dx = -1;
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 5729 0
	#     }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777196
	store A, B
	.L6674:
	.loc 7 5750 0
	#     }
	.loc 7 5732 0
	#       while (x >= w - 2) {
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5732 0
	#       while (x >= w - 2) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 1
	jne .L6679, A, 0
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 2
	load A, B
	eq A, 0
	mov B, A
	ne B, 0
	.L6679:
	mov A, B
	mov B, 0
	jeq .L6678, A, 0
	.loc 7 5732 0
	#       while (x >= w - 2) {
	.loc 7 5707 0
	#   pixels[y*w+x++] = 2;
	mov B, BP
	add B, 16777196
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5732 0
	#       while (x >= w - 2) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L6678:
	mov A, B
	jeq .L6680, A, 0
	.loc 7 5750 0
	#     }
	.loc 7 5735 0
	#       }
	.L996:
	.loc 7 5733 0
	#         pixels[(y+0)*w+x+0] = 1;
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5733 0
	#         pixels[(y+0)*w+x+0] = 1;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L6681, A, 0
	.loc 7 5735 0
	#       }
	.loc 7 5734 0
	#         x--;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5734 0
	#         x--;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5734 0
	#         x--;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6682:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5734 0
	#         x--;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5735 0
	#       }
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777197
	store A, B
	load A, SP
	add SP, 1
	jmp .L6683
	.L6681:
	.loc 7 5735 0
	#       }
	jmp .L997
	.L6683:
	jmp .L996
	.L997:
	.loc 7 5737 0
	#       pixels[(y+0)*w+x-1] = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5737 0
	#       pixels[(y+0)*w+x-1] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5737 0
	#       pixels[(y+0)*w+x-1] = 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6684:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5737 0
	#       pixels[(y+0)*w+x-1] = 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5738 0
	#       pixels[(y-1)*w+x-1] = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5738 0
	#       pixels[(y-1)*w+x-1] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5738 0
	#       pixels[(y-1)*w+x-1] = 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6685:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5738 0
	#       pixels[(y-1)*w+x-1] = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5739 0
	#       pixels[(y-1)*w+x+0] = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5739 0
	#       pixels[(y-1)*w+x+0] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5739 0
	#       pixels[(y-1)*w+x+0] = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6686:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5739 0
	#       pixels[(y-1)*w+x+0] = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5740 0
	#       pixels[(y+1)*w+x+0] = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5740 0
	#       pixels[(y+1)*w+x+0] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5740 0
	#       pixels[(y+1)*w+x+0] = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6687:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5740 0
	#       pixels[(y+1)*w+x+0] = 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5741 0
	#       pixels[(y+2)*w+x+0] = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5741 0
	#       pixels[(y+2)*w+x+0] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5741 0
	#       pixels[(y+2)*w+x+0] = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6688:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5741 0
	#       pixels[(y+2)*w+x+0] = 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5742 0
	#       pixels[(y+3)*w+x+0] = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5742 0
	#       pixels[(y+3)*w+x+0] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5742 0
	#       pixels[(y+3)*w+x+0] = 1;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6689:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5742 0
	#       pixels[(y+3)*w+x+0] = 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5743 0
	#       pixels[(y+3)*w+x-1] = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5743 0
	#       pixels[(y+3)*w+x-1] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5743 0
	#       pixels[(y+3)*w+x-1] = 1;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6690:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5743 0
	#       pixels[(y+3)*w+x-1] = 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5744 0
	#       pixels[(y+2)*w+x-1] = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5744 0
	#       pixels[(y+2)*w+x-1] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5744 0
	#       pixels[(y+2)*w+x-1] = 1;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6691:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5744 0
	#       pixels[(y+2)*w+x-1] = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5745 0
	#       pixels[(y+2)*w+x+1] = 2;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5745 0
	#       pixels[(y+2)*w+x+1] = 2;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5745 0
	#       pixels[(y+2)*w+x+1] = 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6692:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5745 0
	#       pixels[(y+2)*w+x+1] = 2;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5746 0
	#       c = 0;
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5746 0
	#       c = 0;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5746 0
	#       c = 0;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6693:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5746 0
	#       c = 0;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5747 0
	#       x += 2;
	mov A, 0
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 5748 0
	#       y += 2;
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5748 0
	#       y += 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777197
	store A, B
	.loc 7 5749 0
	#       dx = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5749 0
	#       dx = 1;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 5750 0
	#     }
	mov A, 1
	mov B, BP
	add B, 16777196
	store A, B
	.L6680:
	.L989:
	.loc 7 5709 0
	#     assert(y < h);
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5750 0
	#     }
	jmp .L988
	.L990:
	.loc 7 5755 0
	#   }
	.L998:
	.loc 7 5754 0
	#     pixels[y*w+x] = 1;
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6694, A, 0
	jmp .L6695
	.L6694:
	.loc 7 5755 0
	#   }
	jmp .L1000
	.L6695:
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5755 0
	#   }
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6696:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5755 0
	#   }
	.L999:
	.loc 7 5754 0
	#     pixels[y*w+x] = 1;
	.loc 7 5706 0
	#   int dx = 1;
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777197
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5755 0
	#   }
	jmp .L998
	.L1000:
	.loc 7 5758 0
	#   pixels[(y+2)*w+w-1] = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5758 0
	#   pixels[(y+2)*w+w-1] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5758 0
	#   pixels[(y+2)*w+w-1] = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6697:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5758 0
	#   pixels[(y+2)*w+w-1] = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5759 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5759 0
	# 
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5759 0
	# 
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6698:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5759 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5761 0
	# 
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5761 0
	# 
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 5763 0
	#   byte BORDER_TABLE[7];
	mov A, 0
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 5764 0
	#   BORDER_TABLE[0] = 1;
	.loc 7 5765 0
	#   BORDER_TABLE[1] = 2;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5764 0
	#   BORDER_TABLE[0] = 1;
	mov A, BP
	add A, 16777188
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5765 0
	#   BORDER_TABLE[1] = 2;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5766 0
	#   c = piet_next_color(c, PIET_PUSH);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5764 0
	#   BORDER_TABLE[0] = 1;
	mov A, BP
	add A, 16777188
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5766 0
	#   c = piet_next_color(c, PIET_PUSH);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5767 0
	#   BORDER_TABLE[2] = c + 2;
	.loc 7 5193 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_next_color
	.L6699:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 5768 0
	#   c = piet_next_color(c, PIET_SUB);
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5768 0
	#   c = piet_next_color(c, PIET_SUB);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5764 0
	#   BORDER_TABLE[0] = 1;
	mov A, BP
	add A, 16777188
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5768 0
	#   c = piet_next_color(c, PIET_SUB);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5769 0
	#   BORDER_TABLE[3] = c + 2;
	.loc 7 5193 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_next_color
	.L6700:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 5770 0
	#   c = piet_next_color(c, PIET_DUP);
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5770 0
	#   c = piet_next_color(c, PIET_DUP);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5764 0
	#   BORDER_TABLE[0] = 1;
	mov A, BP
	add A, 16777188
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5770 0
	#   c = piet_next_color(c, PIET_DUP);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5771 0
	#   BORDER_TABLE[4] = c + 2;
	.loc 7 5193 0
	# }
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_next_color
	.L6701:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 5772 0
	#   c = piet_next_color(c, PIET_NOT);
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5772 0
	#   c = piet_next_color(c, PIET_NOT);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5764 0
	#   BORDER_TABLE[0] = 1;
	mov A, BP
	add A, 16777188
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5772 0
	#   c = piet_next_color(c, PIET_NOT);
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5773 0
	#   BORDER_TABLE[5] = c + 2;
	.loc 7 5193 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6702
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_next_color
	.L6702:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 5774 0
	#   c = piet_next_color(c, PIET_PTR);
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5774 0
	#   c = piet_next_color(c, PIET_PTR);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5764 0
	#   BORDER_TABLE[0] = 1;
	mov A, BP
	add A, 16777188
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5774 0
	#   c = piet_next_color(c, PIET_PTR);
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5775 0
	#   BORDER_TABLE[6] = c + 2;
	.loc 7 5193 0
	# }
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_next_color
	.L6703:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 5776 0
	# 
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5776 0
	# 
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5764 0
	#   BORDER_TABLE[0] = 1;
	mov A, BP
	add A, 16777188
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5776 0
	# 
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5779 0
	#   }
	.loc 7 5778 0
	#     pixels[(y+i)*w+w-1] = 1;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777187
	mov A, 0
	store A, B
	.loc 7 5779 0
	#   }
	.L1001:
	.loc 7 5778 0
	#     pixels[(y+i)*w+w-1] = 1;
	mov B, BP
	add B, 16777187
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6704, A, 0
	jmp .L6705
	.L6704:
	.loc 7 5779 0
	#   }
	jmp .L1003
	.L6705:
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5779 0
	#   }
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5778 0
	#     pixels[(y+i)*w+w-1] = 1;
	mov B, BP
	add B, 16777187
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6706:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5779 0
	#   }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1002:
	.loc 7 5778 0
	#     pixels[(y+i)*w+w-1] = 1;
	mov B, BP
	add B, 16777187
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777187
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5779 0
	#   }
	jmp .L1001
	.L1003:
	.loc 7 5783 0
	#   }
	.loc 7 5782 0
	#     pixels[(y+3)*w+x] = 1;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777186
	mov A, 0
	store A, B
	.loc 7 5783 0
	#   }
	.L1004:
	.loc 7 5782 0
	#     pixels[(y+3)*w+x] = 1;
	mov B, BP
	add B, 16777186
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6707, A, 0
	jmp .L6708
	.L6707:
	.loc 7 5783 0
	#   }
	jmp .L1006
	.L6708:
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5783 0
	#   }
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5783 0
	#   }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6709:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5782 0
	#     pixels[(y+3)*w+x] = 1;
	mov B, BP
	add B, 16777186
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5783 0
	#   }
	.L1005:
	.loc 7 5782 0
	#     pixels[(y+3)*w+x] = 1;
	mov B, BP
	add B, 16777186
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777186
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5783 0
	#   }
	jmp .L1004
	.L1006:
	.loc 7 5788 0
	#   }
	.loc 7 5786 0
	#     pixels[(y+i)*w] = 1;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777185
	mov A, 3
	store A, B
	.loc 7 5788 0
	#   }
	.L1007:
	.loc 7 5786 0
	#     pixels[(y+i)*w] = 1;
	mov B, BP
	add B, 16777185
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	mov B, BP
	add B, 16777201
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6710, A, 0
	jmp .L6711
	.L6710:
	.loc 7 5788 0
	#   }
	jmp .L1009
	.L6711:
	.loc 7 5787 0
	#     pixels[(y+i)*w+w-1] = BORDER_TABLE[i%7];
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5787 0
	#     pixels[(y+i)*w+w-1] = BORDER_TABLE[i%7];
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5786 0
	#     pixels[(y+i)*w] = 1;
	mov B, BP
	add B, 16777185
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6712:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5788 0
	#   }
	.loc 7 5764 0
	#   BORDER_TABLE[0] = 1;
	mov A, BP
	add A, 16777188
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5788 0
	#   }
	.loc 7 5786 0
	#     pixels[(y+i)*w] = 1;
	mov B, BP
	add B, 16777185
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5788 0
	#   }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6713
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6713:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5788 0
	#   }
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5786 0
	#     pixels[(y+i)*w] = 1;
	mov B, BP
	add B, 16777185
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6714:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5788 0
	#   }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1008:
	.loc 7 5786 0
	#     pixels[(y+i)*w] = 1;
	mov B, BP
	add B, 16777185
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777185
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5788 0
	#   }
	jmp .L1007
	.L1009:
	.loc 7 5791 0
	# 
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5791 0
	# 
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 5828 0
	#       }
	.loc 7 5793 0
	#     assert(y < h);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5828 0
	#       }
	.L1010:
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov B, BP
	add B, 16777213
	load A, B
	jeq .L6715, A, 0
	jmp .L6716
	.L6715:
	.loc 7 5828 0
	#       }
	jmp .L1012
	.L6716:
	.loc 8 12 0
	#     }                                           \
	.L1013:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L6717, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L6718:
	.string "assertion failed: y < h\n"
.text
	mov A, .L6718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6719
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L6719:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L6717:
	mov A, 0
	jeq .L6720, A, 0
	jmp .L1013
	.L6720:
	.L1014:
	.loc 7 5795 0
	#     pixels[y*w+w-3] = 2;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5795 0
	#     pixels[y*w+w-3] = 2;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6721
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6721:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5795 0
	#     pixels[y*w+w-3] = 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5796 0
	#     uint x = w - 3;
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5796 0
	#     uint x = w - 3;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6722:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5796 0
	#     uint x = w - 3;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5797 0
	#     c = 0;
	mov A, 0
	mov B, SP
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777184
	store A, B
	.loc 7 5798 0
	#     bool goto_next = true;
	mov A, 0
	mov B, BP
	add B, 16777199
	store A, B
	.loc 9 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 1
	ne A, 0
	mov B, BP
	add B, 16777183
	store A, B
	.loc 7 5823 0
	#     }
	.loc 7 5800 0
	#       assert(x < w);
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5823 0
	#     }
	.L1015:
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6723, A, 0
	jmp .L6724
	.L6723:
	.loc 7 5823 0
	#     }
	jmp .L1017
	.L6724:
	.loc 8 12 0
	#     }                                           \
	.L1018:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	eq A, 0
	jeq .L6725, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L6726:
	.string "assertion failed: x < w\n"
.text
	mov A, .L6726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L6727:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L6725:
	mov A, 0
	jeq .L6728, A, 0
	jmp .L1018
	.L6728:
	.L1019:
	.loc 7 5816 0
	#       }
	.loc 7 5802 0
	#         assert(pi->arg);
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5802 0
	#         assert(pi->arg);
	.loc 7 5193 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6729, A, 0
	.loc 7 5805 0
	#         }
	.loc 8 12 0
	#     }                                           \
	.L1020:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 1
	load A, B
	eq A, 0
	jeq .L6730, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L6731:
	.string "assertion failed: pi->arg\n"
.text
	mov A, .L6731
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6732
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L6732:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L6730:
	mov A, 0
	jeq .L6733, A, 0
	jmp .L1020
	.L6733:
	.L1021:
	.loc 7 5805 0
	#         }
	.loc 7 5804 0
	#           pixels[(y+i)*w+x] = c + 2;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777182
	mov A, 0
	store A, B
	.loc 7 5805 0
	#         }
	.L1022:
	.loc 7 5804 0
	#           pixels[(y+i)*w+x] = c + 2;
	mov B, BP
	add B, 16777182
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6734, A, 0
	jmp .L6735
	.L6734:
	.loc 7 5805 0
	#         }
	jmp .L1024
	.L6735:
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5805 0
	#         }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5805 0
	#         }
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5804 0
	#           pixels[(y+i)*w+x] = c + 2;
	mov B, BP
	add B, 16777182
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6736
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6736:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5805 0
	#         }
	.L1023:
	.loc 7 5804 0
	#           pixels[(y+i)*w+x] = c + 2;
	mov B, BP
	add B, 16777182
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777182
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5805 0
	#         }
	jmp .L1022
	.L1024:
	jmp .L6737
	.L6729:
	.loc 7 5816 0
	#       }
	.loc 7 5805 0
	#         }
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5805 0
	#         }
	.loc 7 5193 0
	# }
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6738, A, 0
	.loc 7 5808 0
	#       } else if (pi->op == PIET_EXIT) {
	jmp .L1017
	jmp .L6739
	.L6738:
	.loc 7 5816 0
	#       }
	.loc 7 5808 0
	#       } else if (pi->op == PIET_EXIT) {
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5808 0
	#       } else if (pi->op == PIET_EXIT) {
	.loc 7 5193 0
	# }
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6740, A, 0
	.loc 7 5816 0
	#       }
	.loc 7 5810 0
	#         pixels[(y+1)*w+x-1] = 1;
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5810 0
	#         pixels[(y+1)*w+x-1] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5810 0
	#         pixels[(y+1)*w+x-1] = 1;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6741:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5810 0
	#         pixels[(y+1)*w+x-1] = 1;
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5810 0
	#         pixels[(y+1)*w+x-1] = 1;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5810 0
	#         pixels[(y+1)*w+x-1] = 1;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6742:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5811 0
	#         pixels[(y+0)*w+x-2] = 3;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5811 0
	#         pixels[(y+0)*w+x-2] = 3;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5811 0
	#         pixels[(y+0)*w+x-2] = 3;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6743:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5811 0
	#         pixels[(y+0)*w+x-2] = 3;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5812 0
	#         pixels[(y+1)*w+x-2] = 3;
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5812 0
	#         pixels[(y+1)*w+x-2] = 3;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5812 0
	#         pixels[(y+1)*w+x-2] = 3;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6744:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5812 0
	#         pixels[(y+1)*w+x-2] = 3;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5813 0
	#         pixels[(y+2)*w+x-2] = 3;
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5813 0
	#         pixels[(y+2)*w+x-2] = 3;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5813 0
	#         pixels[(y+2)*w+x-2] = 3;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6745:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5813 0
	#         pixels[(y+2)*w+x-2] = 3;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5814 0
	#         goto_next = false;
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5814 0
	#         goto_next = false;
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5814 0
	#         goto_next = false;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6746:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5814 0
	#         goto_next = false;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5815 0
	#         break;
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16777183
	store A, B
	.loc 7 5816 0
	#       }
	jmp .L1017
	.L6740:
	.L6739:
	.L6737:
	.loc 7 5819 0
	#         break;
	.loc 9 4 0
	# #define true 1
	mov B, BP
	add B, 16777183
	load A, B
	eq A, 0
	jeq .L6747, A, 0
	.loc 7 5819 0
	#         break;
	jmp .L1017
	.L6747:
	.loc 7 5822 0
	#       pixels[y*w+x-1] = c + 2;
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp piet_next_color
	.L6748:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 5823 0
	#     }
	.loc 7 5704 0
	#   uint y = 0;
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5823 0
	#     }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5823 0
	#     }
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6749:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5823 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L1016:
	.loc 7 5800 0
	#       assert(x < w);
	.loc 7 5638 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 5800 0
	#       assert(x < w);
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777184
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5823 0
	#     }
	jmp .L1015
	.L1017:
	.loc 7 5828 0
	#       }
	.loc 9 4 0
	# #define true 1
	mov B, BP
	add B, 16777183
	load A, B
	jeq .L6750, A, 0
	.loc 7 5828 0
	#       }
	.loc 7 5827 0
	#         pixels[y*w+x] = 1;
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777184
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5828 0
	#       }
	.L1025:
	.loc 7 5827 0
	#         pixels[y*w+x] = 1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6751, A, 0
	jmp .L6752
	.L6751:
	.loc 7 5828 0
	#       }
	jmp .L1027
	.L6752:
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5828 0
	#       }
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6753:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 5828 0
	#       }
	.L1026:
	.loc 7 5827 0
	#         pixels[y*w+x] = 1;
	.loc 7 5797 0
	#     c = 0;
	mov B, BP
	add B, 16777184
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777184
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5828 0
	#       }
	jmp .L1025
	.L1027:
	.L6750:
	.L1011:
	.loc 7 5793 0
	#     assert(y < h);
	.loc 7 5637 0
	#   PietInst* pi = 0;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 5793 0
	#     assert(y < h);
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5793 0
	#     assert(y < h);
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 5828 0
	#       }
	jmp .L1010
	.L1012:
	.loc 7 5833 0
	# 
	.loc 7 5705 0
	#   uint x = 0;
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5833 0
	# 
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777201
	store A, B
	.loc 7 5835 0
	#   printf("#\n");
.data
	.L6754:
	.string "P6\n"
.text
	mov A, .L6754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L6755:
	mov A, B
	add SP, 1
	.loc 7 5836 0
	#   printf("%d %d\n", w, h);
.data
	.L6756:
	.string "#\n"
.text
	mov A, .L6756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L6757:
	mov A, B
	add SP, 1
	.loc 7 5837 0
	#   printf("255\n");
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	mov B, BP
	add B, 16777201
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5837 0
	#   printf("255\n");
.data
	.L6758:
	.string "%d %d\n"
.text
	mov A, .L6758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L6759:
	mov A, B
	add SP, 3
	.loc 7 5838 0
	# 
.data
	.L6760:
	.string "255\n"
.text
	mov A, .L6760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L6761:
	mov A, B
	add SP, 1
	.loc 7 5845 0
	#     }
	.loc 7 5840 0
	#     for (uint x = 0; x < w; x++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777181
	mov A, 0
	store A, B
	.loc 7 5845 0
	#     }
	.L1028:
	.loc 7 5840 0
	#     for (uint x = 0; x < w; x++) {
	mov B, BP
	add B, 16777181
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5695 0
	#       pc * 7 + (init_state_size / (w - 4 - PIET_IMM_BASE * 2) + 1) * 4 + 10;
	mov B, BP
	add B, 16777201
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6762, A, 0
	jmp .L6763
	.L6762:
	.loc 7 5845 0
	#     }
	jmp .L1030
	.L6763:
	.loc 7 5841 0
	#       byte* c = PIET_COLOR_TABLE[pixels[y*w+x]];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777180
	mov A, 0
	store A, B
	.loc 7 5845 0
	#     }
	.L1031:
	.loc 7 5841 0
	#       byte* c = PIET_COLOR_TABLE[pixels[y*w+x]];
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L6764, A, 0
	jmp .L6765
	.L6764:
	.loc 7 5845 0
	#     }
	jmp .L1033
	.L6765:
	.loc 7 5842 0
	#       putchar(c[0]);
	mov A, 0
	mov B, SP
	.loc 7 5193 0
	# }
	mov A, PIET_COLOR_TABLE
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5842 0
	#       putchar(c[0]);
	.loc 7 5697 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5842 0
	#       putchar(c[0]);
	.loc 7 5840 0
	#     for (uint x = 0; x < w; x++) {
	mov B, BP
	add B, 16777181
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5694 0
	#   uint h =
	mov B, BP
	add B, 16777202
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6766:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5841 0
	#       byte* c = PIET_COLOR_TABLE[pixels[y*w+x]];
	mov B, BP
	add B, 16777180
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L6767:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov A, A
	mov B, BP
	add B, 16777179
	store A, B
	.loc 7 5843 0
	#       putchar(c[1]);
	.loc 7 5842 0
	#       putchar(c[0]);
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5843 0
	#       putchar(c[1]);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 5844 0
	#       putchar(c[2]);
	.loc 7 5842 0
	#       putchar(c[0]);
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5844 0
	#       putchar(c[2]);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 5845 0
	#     }
	.loc 7 5842 0
	#       putchar(c[0]);
	mov B, BP
	add B, 16777179
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5845 0
	#     }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L1032:
	.loc 7 5841 0
	#       byte* c = PIET_COLOR_TABLE[pixels[y*w+x]];
	mov B, BP
	add B, 16777180
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777180
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5845 0
	#     }
	jmp .L1031
	.L1033:
	.L1029:
	.loc 7 5840 0
	#     for (uint x = 0; x < w; x++) {
	mov B, BP
	add B, 16777181
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777181
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5845 0
	#     }
	jmp .L1028
	.L1030:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	g_pietasm_label_id:

	.long 0
	.text
pietasm_gen_label:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5864 0
	# }
	.loc 7 5845 0
	#     }
	mov B, g_pietasm_label_id
	load A, B
	add A, 1
	mov B, g_pietasm_label_id
	store A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_label:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5868 0
	# }
	.loc 7 5864 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5868 0
	# }
.data
	.L6768:
	.string "_track_%u:"
.text
	mov A, .L6768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6769:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_push:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5872 0
	# }
	.loc 7 5868 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5872 0
	# }
.data
	.L6770:
	.string "%d"
.text
	mov A, .L6770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6771:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_pop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5876 0
	# }
.data
	.L6772:
	.string "pop"
.text
	mov A, .L6772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6773:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_dup:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5880 0
	# }
.data
	.L6774:
	.string "dup"
.text
	mov A, .L6774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6775:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_br:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5884 0
	# }
	.loc 7 5880 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5884 0
	# }
.data
	.L6776:
	.string "br._track_%u"
.text
	mov A, .L6776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6777:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_bz:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5888 0
	# }
	.loc 7 5884 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5888 0
	# }
.data
	.L6778:
	.string "bz._track_%u"
.text
	mov A, .L6778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6779:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_roll:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5892 0
	# }
	.loc 7 5888 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5892 0
	# }
.data
	.L6780:
	.string "%d %d roll"
.text
	mov A, .L6780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6781:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_rroll:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5896 0
	# }
	.loc 7 5892 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5896 0
	# }
.data
	.L6782:
	.string "%d -%d roll"
.text
	mov A, .L6782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6783:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_load:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5902 0
	# }
	.loc 7 5900 0
	#   pietasm_dup();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5896 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5900 0
	#   pietasm_dup();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_rroll
	.L6784:
	mov A, B
	add SP, 2
	.loc 7 5901 0
	#   pietasm_roll(pos + 2, 1);
	mov A, .L6785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_dup
	.L6785:
	mov A, B
	.loc 7 5902 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5896 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5902 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_roll
	.L6786:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_store_top:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5908 0
	# }
	.loc 7 5906 0
	#   pietasm_pop();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5906 0
	#   pietasm_pop();
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_rroll
	.L6787:
	mov A, B
	add SP, 2
	.loc 7 5907 0
	#   pietasm_roll(pos + 1, 1);
	mov A, .L6788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_pop
	.L6788:
	mov A, B
	.loc 7 5908 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5902 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5908 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_roll
	.L6789:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_store:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5913 0
	# }
	.loc 7 5912 0
	#   pietasm_store_top(pos);
	.loc 7 5908 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6790:
	mov A, B
	add SP, 1
	.loc 7 5913 0
	# }
	.loc 7 5908 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_store_top
	.L6791:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 5933 0
	#     }
	.loc 7 5918 0
	#   uint loop_id = pietasm_gen_label();
.data
	.L6792:
	.string "65543"
.text
	mov A, .L6792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6793:
	mov A, B
	add SP, 1
	.loc 7 5919 0
	#   uint done_id = pietasm_gen_label();
	mov A, 0
	mov B, SP
	mov A, .L6794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_gen_label
	.L6794:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5920 0
	#   pietasm_label(loop_id);
	mov A, 0
	mov B, SP
	mov A, .L6795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_gen_label
	.L6795:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5921 0
	#   emit_line("1 sub");
	.loc 7 5919 0
	#   uint done_id = pietasm_gen_label();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_label
	.L6796:
	mov A, B
	add SP, 1
	.loc 7 5922 0
	#   emit_line("dup");
.data
	.L6797:
	.string "1 sub"
.text
	mov A, .L6797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6798:
	mov A, B
	add SP, 1
	.loc 7 5923 0
	#   pietasm_bz(done_id);
.data
	.L6799:
	.string "dup"
.text
	mov A, .L6799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6800:
	mov A, B
	add SP, 1
	.loc 7 5924 0
	#   emit_line("0");
	.loc 7 5920 0
	#   pietasm_label(loop_id);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_bz
	.L6801:
	mov A, B
	add SP, 1
	.loc 7 5925 0
	#   pietasm_roll(2, 1);
.data
	.L6802:
	.string "0"
.text
	mov A, .L6802
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6803:
	mov A, B
	add SP, 1
	.loc 7 5926 0
	#   pietasm_br(loop_id);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_roll
	.L6804:
	mov A, B
	add SP, 2
	.loc 7 5927 0
	#   pietasm_label(done_id);
	.loc 7 5919 0
	#   uint done_id = pietasm_gen_label();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_br
	.L6805:
	mov A, B
	add SP, 1
	.loc 7 5928 0
	#   emit_line("");
	.loc 7 5920 0
	#   pietasm_label(loop_id);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_label
	.L6806:
	mov A, B
	add SP, 1
	.loc 7 5929 0
	# 
.data
	.L6807:
	.string ""
.text
	mov A, .L6807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6808:
	mov A, B
	add SP, 1
	.loc 7 5933 0
	#     }
	.loc 7 5931 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 5933 0
	#     }
	.L1034:
	.loc 7 5913 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L6809, A, 0
	jmp .L6810
	.L6809:
	.loc 7 5933 0
	#     }
	jmp .L1036
	.L6810:
	.loc 7 5932 0
	#       pietasm_store(PIETASM_MEM + mp, data->v % 65536);
	.loc 7 5913 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L6811, A, 0
	.loc 7 5933 0
	#     }
	.loc 7 5913 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5933 0
	#     }
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6812:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5845 0
	#     }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5931 0
	#     if (data->v) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_store
	.L6813:
	mov A, B
	add SP, 2
	.L6811:
	.loc 7 5933 0
	#     }
	.L1035:
	.loc 7 5931 0
	#     if (data->v) {
	.loc 7 5913 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 5931 0
	#     if (data->v) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 5933 0
	#     }
	jmp .L1034
	.L1036:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_push_value:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5944 0
	#   }
	.loc 7 5939 0
	#     pietasm_load(PIETASM_A + v->reg + stk);
	.loc 7 5933 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6814, A, 0
	.loc 7 5940 0
	#   } else if (v->type == IMM) {
	.loc 7 5845 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5940 0
	#   } else if (v->type == IMM) {
	.loc 7 5933 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_load
	.L6815:
	mov A, B
	add SP, 1
	jmp .L6816
	.L6814:
	.loc 7 5944 0
	#   }
	.loc 7 5940 0
	#   } else if (v->type == IMM) {
	.loc 7 5933 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6817, A, 0
	.loc 7 5942 0
	#   } else {
	.loc 7 5933 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5942 0
	#   } else {
	mov A, 65536
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L6818:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6819:
	mov A, B
	add SP, 1
	jmp .L6820
	.L6817:
	.loc 7 5944 0
	#   }
.data
	.L6821:
	.string "invalid value"
.text
	mov A, .L6821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6822:
	mov A, B
	add SP, 1
	.L6820:
	.L6816:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_push_dst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5949 0
	# }
	.loc 7 5944 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5949 0
	# }
	.loc 7 5944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6823
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_value
	.L6823:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_push_src:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5953 0
	# }
	.loc 7 5949 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5953 0
	# }
	.loc 7 5949 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6824
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_value
	.L6824:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_uint_mod:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 5958 0
	# }
.data
	.L6825:
	.string "65536 mod"
.text
	mov A, .L6825
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6826
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6826:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 5994 0
	#     error("cmp");
	.loc 7 5962 0
	#   if (op == JLT) {
	mov A, 0
	mov B, SP
	.loc 7 5958 0
	# }
	mov B, BP
	add B, 3
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5962 0
	#   if (op == JLT) {
	.loc 7 5958 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6827
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L6827:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5973 0
	#   }
	.loc 7 5963 0
	#     op = JGT;
	.loc 7 5962 0
	#   if (op == JLT) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6828, A, 0
	.loc 7 5966 0
	#   } else if (op == JGE) {
	.loc 7 5964 0
	#     pietasm_push_src(inst, 0);
	.loc 6 205 0
	# }
	mov A, 11
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5965 0
	#     pietasm_push_dst(inst, 1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5958 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_src
	.L6829:
	mov A, B
	add SP, 2
	.loc 7 5966 0
	#   } else if (op == JGE) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5958 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_dst
	.L6830:
	mov A, B
	add SP, 2
	jmp .L6831
	.L6828:
	.loc 7 5973 0
	#   }
	.loc 7 5966 0
	#   } else if (op == JGE) {
	.loc 7 5962 0
	#   if (op == JLT) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6832, A, 0
	.loc 7 5970 0
	#   } else {
	.loc 7 5968 0
	#     pietasm_push_src(inst, 0);
	.loc 6 205 0
	# }
	mov A, 12
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 5969 0
	#     pietasm_push_dst(inst, 1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5958 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_src
	.L6833:
	mov A, B
	add SP, 2
	.loc 7 5970 0
	#   } else {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5958 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_dst
	.L6834:
	mov A, B
	add SP, 2
	jmp .L6835
	.L6832:
	.loc 7 5973 0
	#   }
	.loc 7 5972 0
	#     pietasm_push_src(inst, 1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5958 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_dst
	.L6836:
	mov A, B
	add SP, 2
	.loc 7 5973 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5958 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_src
	.L6837:
	mov A, B
	add SP, 2
	.L6835:
	.L6831:
	.loc 7 5994 0
	#     error("cmp");
	.loc 7 5962 0
	#   if (op == JLT) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6838, A, 0
	jmp .L1038
	.L6838:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6839, A, 0
	jmp .L1039
	.L6839:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6840, A, 0
	jmp .L1040
	.L6840:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6841, A, 0
	jmp .L1041
	.L6841:
	jmp .L1042
	.loc 7 5976 0
	#     emit_line("sub");
	.L1038:
.data
	.L6842:
	.string "sub"
.text
	mov A, .L6842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6843:
	mov A, B
	add SP, 1
	.loc 7 5978 0
	#     break;
.data
	.L6844:
	.string "not"
.text
	mov A, .L6844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6845:
	mov A, B
	add SP, 1
	.loc 7 5979 0
	#   case JNE:
	jmp .L1037
	.loc 7 5980 0
	#     emit_line("sub");
	.L1039:
.data
	.L6846:
	.string "sub"
.text
	mov A, .L6846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6847:
	mov A, B
	add SP, 1
	.loc 7 5984 0
	#     }
	.loc 7 5982 0
	#       emit_line("not");
	.loc 7 5958 0
	# }
	mov B, BP
	add B, 3
	load A, B
	eq A, 0
	jeq .L6848, A, 0
	.loc 7 5984 0
	#     }
	.loc 7 5983 0
	#       emit_line("not");
.data
	.L6849:
	.string "not"
.text
	mov A, .L6849
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6850:
	mov A, B
	add SP, 1
	.loc 7 5984 0
	#     }
.data
	.L6851:
	.string "not"
.text
	mov A, .L6851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6852:
	mov A, B
	add SP, 1
	.L6848:
	.loc 7 5986 0
	#   case JGT:
	jmp .L1037
	.loc 7 5987 0
	#     emit_line("gt");
	.L1040:
.data
	.L6853:
	.string "gt"
.text
	mov A, .L6853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6854:
	mov A, B
	add SP, 1
	.loc 7 5989 0
	#   case JLE:
	jmp .L1037
	.loc 7 5990 0
	#     emit_line("gt");
	.L1041:
.data
	.L6855:
	.string "gt"
.text
	mov A, .L6855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6856:
	mov A, B
	add SP, 1
	.loc 7 5992 0
	#     break;
.data
	.L6857:
	.string "not"
.text
	mov A, .L6857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6858
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6858:
	mov A, B
	add SP, 1
	.loc 7 5993 0
	#   default:
	jmp .L1037
	.loc 7 5994 0
	#     error("cmp");
	.L1042:
.data
	.L6859:
	.string "cmp"
.text
	mov A, .L6859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6860:
	mov A, B
	add SP, 1
	.L1037:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_reg_jmp_table:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6013 0
	# }
	.loc 7 6003 0
	#   }
	.loc 7 6000 0
	#     pietasm_pop();
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6000 0
	#     pietasm_pop();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6861, A, 0
	.loc 7 6003 0
	#   }
	.loc 7 6001 0
	#     pietasm_br(min_pc);
	mov A, .L6862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_pop
	.L6862:
	mov A, B
	.loc 7 6002 0
	#     return;
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6863
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_br
	.L6863:
	mov A, B
	add SP, 1
	.loc 7 6003 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L6861:
	.loc 7 6006 0
	#   pietasm_dup();
	mov A, 0
	mov B, SP
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6006 0
	#   pietasm_dup();
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L6864:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6007 0
	#   pietasm_push(mid_pc-1);
	mov A, .L6865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_dup
	.L6865:
	mov A, B
	.loc 7 6008 0
	#   emit_line("gt");
	.loc 7 6006 0
	#   pietasm_dup();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6008 0
	#   emit_line("gt");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6866:
	mov A, B
	add SP, 1
	.loc 7 6009 0
	#   pietasm_bz(last_label + mid_pc);
.data
	.L6867:
	.string "gt"
.text
	mov A, .L6867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6868:
	mov A, B
	add SP, 1
	.loc 7 6010 0
	#   pietasm_reg_jmp_table(mid_pc, max_pc, last_label);
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6006 0
	#   pietasm_dup();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6869
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_bz
	.L6869:
	mov A, B
	add SP, 1
	.loc 7 6011 0
	#   pietasm_label(last_label + mid_pc);
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6006 0
	#   pietasm_dup();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_reg_jmp_table
	.L6870:
	mov A, B
	add SP, 3
	.loc 7 6012 0
	#   pietasm_reg_jmp_table(min_pc, mid_pc, last_label);
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6006 0
	#   pietasm_dup();
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6871
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_label
	.L6871:
	mov A, B
	add SP, 1
	.loc 7 6013 0
	# }
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6006 0
	#   pietasm_dup();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 5994 0
	#     error("cmp");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6872
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_reg_jmp_table
	.L6872:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pietasm_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6145 0
	#     error("oops");
	.loc 7 6017 0
	#   switch (inst->op) {
.data
	.L6873:
	.string ""
.text
	mov A, .L6873
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6874
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6874:
	mov A, B
	add SP, 1
	.loc 7 6145 0
	#     error("oops");
	.loc 7 6018 0
	#   case MOV:
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6145 0
	#     error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6875, A, 0
	jmp .L1044
	.L6875:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6876, A, 0
	jmp .L1045
	.L6876:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6877, A, 0
	jmp .L1046
	.L6877:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6878, A, 0
	jmp .L1047
	.L6878:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6879, A, 0
	jmp .L1048
	.L6879:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6880, A, 0
	jmp .L1049
	.L6880:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6881, A, 0
	jmp .L1050
	.L6881:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6882, A, 0
	jmp .L1051
	.L6882:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6883, A, 0
	jmp .L1052
	.L6883:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6884, A, 0
	jmp .L1053
	.L6884:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6885, A, 0
	jmp .L1054
	.L6885:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6886, A, 0
	jmp .L1055
	.L6886:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6887, A, 0
	jmp .L1056
	.L6887:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6888, A, 0
	jmp .L1057
	.L6888:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6889, A, 0
	jmp .L1058
	.L6889:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6890, A, 0
	jmp .L1059
	.L6890:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6891, A, 0
	jmp .L1060
	.L6891:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6892, A, 0
	jmp .L1061
	.L6892:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6893, A, 0
	jmp .L1062
	.L6893:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6894, A, 0
	jmp .L1063
	.L6894:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6895, A, 0
	jmp .L1064
	.L6895:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6896, A, 0
	jmp .L1065
	.L6896:
	jmp .L1066
	.loc 7 6019 0
	#     pietasm_push_src(inst, 0);
	.L1044:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_src
	.L6897:
	mov A, B
	add SP, 2
	.loc 7 6021 0
	#     break;
	.loc 7 5845 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6021 0
	#     break;
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6898
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_store_top
	.L6898:
	mov A, B
	add SP, 1
	.loc 7 6022 0
	# 
	jmp .L1043
	.loc 7 6024 0
	#     pietasm_push_dst(inst, 0);
	.L1045:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_dst
	.L6899:
	mov A, B
	add SP, 2
	.loc 7 6026 0
	#     emit_line("add");
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_src
	.L6900:
	mov A, B
	add SP, 2
	.loc 7 6027 0
	#     pietasm_uint_mod();
.data
	.L6901:
	.string "add"
.text
	mov A, .L6901
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6902
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6902:
	mov A, B
	add SP, 1
	.loc 7 6028 0
	#     pietasm_store_top(PIETASM_A + inst->dst.reg);
	mov A, .L6903
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_uint_mod
	.L6903:
	mov A, B
	.loc 7 6029 0
	#     break;
	.loc 7 5845 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6029 0
	#     break;
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_store_top
	.L6904:
	mov A, B
	add SP, 1
	.loc 7 6030 0
	# 
	jmp .L1043
	.loc 7 6032 0
	#     pietasm_push_dst(inst, 0);
	.L1046:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_dst
	.L6905:
	mov A, B
	add SP, 2
	.loc 7 6034 0
	#     emit_line("sub");
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_src
	.L6906:
	mov A, B
	add SP, 2
	.loc 7 6035 0
	#     pietasm_uint_mod();
.data
	.L6907:
	.string "sub"
.text
	mov A, .L6907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6908
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6908:
	mov A, B
	add SP, 1
	.loc 7 6036 0
	#     pietasm_store_top(PIETASM_A + inst->dst.reg);
	mov A, .L6909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_uint_mod
	.L6909:
	mov A, B
	.loc 7 6037 0
	#     break;
	.loc 7 5845 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6037 0
	#     break;
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_store_top
	.L6910:
	mov A, B
	add SP, 1
	.loc 7 6038 0
	# 
	jmp .L1043
	.loc 7 6040 0
	#     pietasm_push_src(inst, 0);
	.L1047:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_src
	.L6911:
	mov A, B
	add SP, 2
	.loc 7 6042 0
	#     // Put the address to the bottom of the stack.
	mov A, .L6912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_dup
	.L6912:
	mov A, B
	.loc 7 6044 0
	# 
.data
	.L6913:
	.string "65544 1 roll"
.text
	mov A, .L6913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6914
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6914:
	mov A, B
	add SP, 1
	.loc 7 6046 0
	#     emit_line("add");
	.loc 7 5845 0
	#     }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6046 0
	#     emit_line("add");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6915:
	mov A, B
	add SP, 1
	.loc 7 6047 0
	#     emit_line("-1 roll");
.data
	.L6916:
	.string "add"
.text
	mov A, .L6916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6917:
	mov A, B
	add SP, 1
	.loc 7 6048 0
	#     pietasm_dup();
.data
	.L6918:
	.string "-1 roll"
.text
	mov A, .L6918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6919:
	mov A, B
	add SP, 1
	.loc 7 6049 0
	# 
	mov A, .L6920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_dup
	.L6920:
	mov A, B
	.loc 7 6052 0
	#     pietasm_push(PIETASM_MEM + 2);
.data
	.L6921:
	.string "65544 -1 roll"
.text
	mov A, .L6921
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6922
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6922:
	mov A, B
	add SP, 1
	.loc 7 6053 0
	#     emit_line("add");
	.loc 7 5845 0
	#     }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6053 0
	#     emit_line("add");
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6923:
	mov A, B
	add SP, 1
	.loc 7 6054 0
	#     emit_line("1 roll");
.data
	.L6924:
	.string "add"
.text
	mov A, .L6924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6925
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6925:
	mov A, B
	add SP, 1
	.loc 7 6055 0
	# 
.data
	.L6926:
	.string "1 roll"
.text
	mov A, .L6926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6927
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6927:
	mov A, B
	add SP, 1
	.loc 7 6057 0
	#     break;
	.loc 7 5845 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6057 0
	#     break;
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6928
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_store_top
	.L6928:
	mov A, B
	add SP, 1
	.loc 7 6058 0
	# 
	jmp .L1043
	.loc 7 6060 0
	#     pietasm_push_dst(inst, 0);
	.L1048:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6929
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_dst
	.L6929:
	mov A, B
	add SP, 2
	.loc 7 6062 0
	#     pietasm_dup();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6930
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_src
	.L6930:
	mov A, B
	add SP, 2
	.loc 7 6063 0
	# 
	mov A, .L6931
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_dup
	.L6931:
	mov A, B
	.loc 7 6065 0
	#     emit_line("add");
	.loc 7 5845 0
	#     }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6065 0
	#     emit_line("add");
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6932
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6932:
	mov A, B
	add SP, 1
	.loc 7 6066 0
	#     emit_line("-1 roll");
.data
	.L6933:
	.string "add"
.text
	mov A, .L6933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6934
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6934:
	mov A, B
	add SP, 1
	.loc 7 6067 0
	#     pietasm_pop();
.data
	.L6935:
	.string "-1 roll"
.text
	mov A, .L6935
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6936:
	mov A, B
	add SP, 1
	.loc 7 6068 0
	# 
	mov A, .L6937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_pop
	.L6937:
	mov A, B
	.loc 7 6070 0
	#     emit_line("add");
	.loc 7 5845 0
	#     }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6070 0
	#     emit_line("add");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6938:
	mov A, B
	add SP, 1
	.loc 7 6071 0
	#     emit_line("1 roll");
.data
	.L6939:
	.string "add"
.text
	mov A, .L6939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6940:
	mov A, B
	add SP, 1
	.loc 7 6072 0
	#     break;
.data
	.L6941:
	.string "1 roll"
.text
	mov A, .L6941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6942:
	mov A, B
	add SP, 1
	.loc 7 6073 0
	# 
	jmp .L1043
	.loc 7 6075 0
	#     pietasm_push_src(inst, 0);
	.L1049:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_src
	.L6943:
	mov A, B
	add SP, 2
	.loc 7 6077 0
	#     break;
.data
	.L6944:
	.string "out"
.text
	mov A, .L6944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6945:
	mov A, B
	add SP, 1
	.loc 7 6078 0
	# 
	jmp .L1043
	.loc 7 6102 0
	#   }
	.loc 7 6080 0
	#     pietasm_push(256);
	.L1050:
	.loc 7 6102 0
	#   }
	.loc 7 6081 0
	#     emit_line("in");
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6946:
	mov A, B
	add SP, 1
	.loc 7 6082 0
	#     pietasm_dup();
.data
	.L6947:
	.string "in"
.text
	mov A, .L6947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6948:
	mov A, B
	add SP, 1
	.loc 7 6083 0
	#     pietasm_push(256);
	mov A, .L6949
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_dup
	.L6949:
	mov A, B
	.loc 7 6084 0
	#     emit_line("sub");
	mov A, 256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6950:
	mov A, B
	add SP, 1
	.loc 7 6085 0
	# 
.data
	.L6951:
	.string "sub"
.text
	mov A, .L6951
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6952:
	mov A, B
	add SP, 1
	.loc 7 6087 0
	#     uint done_id = pietasm_gen_label();
	mov A, 0
	mov B, SP
	mov A, .L6953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_gen_label
	.L6953:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6088 0
	# 
	mov A, 0
	mov B, SP
	mov A, .L6954
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_gen_label
	.L6954:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6090 0
	#     pietasm_roll(2, 1);
	.loc 7 6087 0
	#     uint done_id = pietasm_gen_label();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_bz
	.L6955:
	mov A, B
	add SP, 1
	.loc 7 6091 0
	#     pietasm_pop();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6956
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_roll
	.L6956:
	mov A, B
	add SP, 2
	.loc 7 6092 0
	#     pietasm_br(done_id);
	mov A, .L6957
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_pop
	.L6957:
	mov A, B
	.loc 7 6093 0
	# 
	.loc 7 6088 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6958
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_br
	.L6958:
	mov A, B
	add SP, 1
	.loc 7 6095 0
	#     pietasm_pop();
	.loc 7 6087 0
	#     uint done_id = pietasm_gen_label();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6959
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_label
	.L6959:
	mov A, B
	add SP, 1
	.loc 7 6096 0
	#     pietasm_push(0);
	mov A, .L6960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_pop
	.L6960:
	mov A, B
	.loc 7 6097 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6961
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push
	.L6961:
	mov A, B
	add SP, 1
	.loc 7 6099 0
	#     pietasm_store_top(PIETASM_A + inst->dst.reg);
	.loc 7 6088 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6962
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_label
	.L6962:
	mov A, B
	add SP, 1
	.loc 7 6100 0
	# 
	.loc 7 5845 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6100 0
	# 
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6963
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_store_top
	.L6963:
	mov A, B
	add SP, 1
	.loc 7 6102 0
	#   }
	jmp .L1043
	.loc 7 6105 0
	#     emit_line("halt");
	.L1051:
.data
	.L6964:
	.string "halt"
.text
	mov A, .L6964
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L6965:
	mov A, B
	add SP, 1
	.loc 7 6107 0
	# 
	jmp .L1043
	.loc 7 6109 0
	#     break;
	.L1052:
	jmp .L1043
	.loc 7 6112 0
	#   case NE:
	.L1053:
	.L1054:
	.L1055:
	.L1056:
	.L1057:
	.L1058:
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_cmp
	.L6966:
	mov A, B
	add SP, 2
	.loc 7 6119 0
	#     break;
	.loc 7 5845 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6119 0
	#     break;
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_store_top
	.L6967:
	mov A, B
	add SP, 1
	.loc 7 6120 0
	# 
	jmp .L1043
	.loc 7 6122 0
	#   case JNE:
	.L1059:
	.L1060:
	.L1061:
	.L1062:
	.L1063:
	.L1064:
	mov A, 1
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_cmp
	.L6968:
	mov A, B
	add SP, 2
	.loc 7 6132 0
	#     }
	.loc 7 6129 0
	#       error("jcc reg");
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6969, A, 0
	.loc 7 6130 0
	#     } else {
.data
	.L6970:
	.string "jcc reg"
.text
	mov A, .L6970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6971:
	mov A, B
	add SP, 1
	jmp .L6972
	.L6969:
	.loc 7 6132 0
	#     }
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_bz
	.L6973:
	mov A, B
	add SP, 1
	.L6972:
	.loc 7 6134 0
	# 
	jmp .L1043
	.loc 7 6141 0
	#     }
	.loc 7 6136 0
	#     if (inst->jmp.type == REG) {
	.L1065:
	.loc 7 6141 0
	#     }
	.loc 7 6136 0
	#     if (inst->jmp.type == REG) {
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L6974, A, 0
	.loc 7 6139 0
	#     } else {
	.loc 7 6138 0
	#       pietasm_br(reg_jmp);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_push_value
	.L6975:
	mov A, B
	add SP, 2
	.loc 7 6139 0
	#     } else {
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_br
	.L6976:
	mov A, B
	add SP, 1
	jmp .L6977
	.L6974:
	.loc 7 6141 0
	#     }
	.loc 7 6013 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_br
	.L6978:
	mov A, B
	add SP, 1
	.L6977:
	.loc 7 6143 0
	# 
	jmp .L1043
	.loc 7 6145 0
	#     error("oops");
	.L1066:
.data
	.L6979:
	.string "oops"
.text
	mov A, .L6979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L6980:
	mov A, B
	add SP, 1
	.L1043:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_pietasm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 6169 0
	# }
	.loc 7 6152 0
	#   }
	.loc 7 6151 0
	#     g_pietasm_label_id = inst->pc;
	mov A, 0
	mov B, SP
	.loc 7 6145 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6152 0
	#   }
	.L1067:
	.loc 7 6151 0
	#     g_pietasm_label_id = inst->pc;
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L6981, A, 0
	jmp .L6982
	.L6981:
	.loc 7 6152 0
	#   }
	jmp .L1069
	.L6982:
	.loc 7 6151 0
	#     g_pietasm_label_id = inst->pc;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, g_pietasm_label_id
	store A, B
	.loc 7 6152 0
	#   }
	.L1068:
	.loc 7 6151 0
	#     g_pietasm_label_id = inst->pc;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6152 0
	#   }
	jmp .L1067
	.L1069:
	.loc 7 6155 0
	#   pietasm_init_state(module->data);
	mov A, 0
	mov B, SP
	mov A, .L6983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_gen_label
	.L6983:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6156 0
	# 
	.loc 7 6145 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_init_state
	.L6984:
	mov A, B
	add SP, 1
	.loc 7 6158 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6165 0
	#   }
	.loc 7 6159 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 6145 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6165 0
	#   }
	.L1070:
	.loc 7 6159 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777212
	load A, B
	jeq .L6985, A, 0
	jmp .L6986
	.L6985:
	.loc 7 6165 0
	#   }
	jmp .L1072
	.L6986:
	.loc 7 6161 0
	#     }
	.loc 7 6160 0
	#       pietasm_label(inst->pc);
	.loc 7 6158 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6160 0
	#       pietasm_label(inst->pc);
	.loc 7 6159 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L6987, A, 0
	.loc 7 6161 0
	#     }
	.loc 7 6159 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_label
	.L6988:
	mov A, B
	add SP, 1
	.L6987:
	.loc 7 6163 0
	# 
	.loc 7 6159 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6165 0
	#   }
	.loc 7 6155 0
	#   pietasm_init_state(module->data);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6159 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_emit_inst
	.L6989:
	mov A, B
	add SP, 2
	.loc 7 6165 0
	#   }
	.L1071:
	.loc 7 6159 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777212
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6165 0
	#   }
	jmp .L1070
	.L1072:
	.loc 7 6168 0
	#   pietasm_reg_jmp_table(0, reg_jmp, pietasm_gen_label());
	.loc 7 6155 0
	#   pietasm_init_state(module->data);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_label
	.L6990:
	mov A, B
	add SP, 1
	.loc 7 6169 0
	# }
	mov A, .L6991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_gen_label
	.L6991:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6155 0
	#   pietasm_init_state(module->data);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6169 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L6992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pietasm_reg_jmp_table
	.L6992:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
PL_REG_NAMES:
	.data 1
	.L6993:
	.string "$a"
	.data 0
	.long .L6993
	.data 1
	.L6994:
	.string "$b"
	.data 0
	.long .L6994
	.data 1
	.L6995:
	.string "$c"
	.data 0
	.long .L6995
	.data 1
	.L6996:
	.string "$d"
	.data 0
	.long .L6996
	.data 1
	.L6997:
	.string "$bp"
	.data 0
	.long .L6997
	.data 1
	.L6998:
	.string "$sp"
	.data 0
	.long .L6998
	.data 1
	.L6999:
	.string "$pc"
	.data 0
	.long .L6999
	.text
init_state_pl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6196 0
	# }
	.loc 7 6179 0
	#   emit_line("use 5.008;");
.data
	.L7000:
	.string "#!/usr/bin/env perl"
.text
	mov A, .L7000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7001:
	mov A, B
	add SP, 1
	.loc 7 6180 0
	#   emit_line("use strict;");
.data
	.L7002:
	.string "use 5.008;"
.text
	mov A, .L7002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7003:
	mov A, B
	add SP, 1
	.loc 7 6181 0
	#   emit_line("use warnings;");
.data
	.L7004:
	.string "use strict;"
.text
	mov A, .L7004
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7005:
	mov A, B
	add SP, 1
	.loc 7 6182 0
	#   emit_line("use utf8;");
.data
	.L7006:
	.string "use warnings;"
.text
	mov A, .L7006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7007:
	mov A, B
	add SP, 1
	.loc 7 6183 0
	#   emit_line("$| = 1;");
.data
	.L7008:
	.string "use utf8;"
.text
	mov A, .L7008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7009
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7009:
	mov A, B
	add SP, 1
	.loc 7 6184 0
	#   emit_line("");
.data
	.L7010:
	.string "$| = 1;"
.text
	mov A, .L7010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7011:
	mov A, B
	add SP, 1
	.loc 7 6185 0
	#   reg_names = PL_REG_NAMES;
.data
	.L7012:
	.string ""
.text
	mov A, .L7012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7013:
	mov A, B
	add SP, 1
	.loc 7 6186 0
	#   for (int i = 0; i < 7; i++) {
	.loc 7 6169 0
	# }
	mov A, PL_REG_NAMES
	mov B, reg_names
	store A, B
	.loc 7 6188 0
	#   }
	.loc 7 6187 0
	#     emit_line("my %s = 0;", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6188 0
	#   }
	.L1073:
	.loc 7 6187 0
	#     emit_line("my %s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7014, A, 0
	jmp .L7015
	.L7014:
	.loc 7 6188 0
	#   }
	jmp .L1075
	.L7015:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6187 0
	#     emit_line("my %s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6188 0
	#   }
.data
	.L7016:
	.string "my %s = 0;"
.text
	mov A, .L7016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7017:
	mov A, B
	add SP, 2
	.L1074:
	.loc 7 6187 0
	#     emit_line("my %s = 0;", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6188 0
	#   }
	jmp .L1073
	.L1075:
	.loc 7 6190 0
	#   inc_indent();
.data
	.L7018:
	.string "my @mem = ("
.text
	mov A, .L7018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7019:
	mov A, B
	add SP, 1
	.loc 7 6191 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov A, .L7020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7020:
	mov A, B
	.loc 7 6193 0
	#   }
	.loc 7 6192 0
	#     emit_line("%d,", data->v);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 6193 0
	#   }
	.L1076:
	.loc 7 6169 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L7021, A, 0
	jmp .L7022
	.L7021:
	.loc 7 6193 0
	#   }
	jmp .L1078
	.L7022:
	.loc 7 6169 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6193 0
	#   }
.data
	.L7023:
	.string "%d,"
.text
	mov A, .L7023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7024:
	mov A, B
	add SP, 2
	.L1077:
	.loc 7 6192 0
	#     emit_line("%d,", data->v);
	.loc 7 6169 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 6192 0
	#     emit_line("%d,", data->v);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6193 0
	#   }
	jmp .L1076
	.L1078:
	.loc 7 6195 0
	#   emit_line(");");
	mov A, .L7025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7025:
	mov A, B
	.loc 7 6196 0
	# }
.data
	.L7026:
	.string ");"
.text
	mov A, .L7026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7027:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
pl_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6265 0
	#     error("oops");
	.loc 7 6200 0
	#   case MOV:
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6265 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7028, A, 0
	jmp .L1080
	.L7028:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7029, A, 0
	jmp .L1081
	.L7029:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7030, A, 0
	jmp .L1082
	.L7030:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7031, A, 0
	jmp .L1083
	.L7031:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7032, A, 0
	jmp .L1084
	.L7032:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7033, A, 0
	jmp .L1085
	.L7033:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7034, A, 0
	jmp .L1086
	.L7034:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7035, A, 0
	jmp .L1087
	.L7035:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7036, A, 0
	jmp .L1088
	.L7036:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7037, A, 0
	jmp .L1089
	.L7037:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7038, A, 0
	jmp .L1090
	.L7038:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7039, A, 0
	jmp .L1091
	.L7039:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7040, A, 0
	jmp .L1092
	.L7040:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7041, A, 0
	jmp .L1093
	.L7041:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7042, A, 0
	jmp .L1094
	.L7042:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7043, A, 0
	jmp .L1095
	.L7043:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7044, A, 0
	jmp .L1096
	.L7044:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7045, A, 0
	jmp .L1097
	.L7045:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7046, A, 0
	jmp .L1098
	.L7046:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7047, A, 0
	jmp .L1099
	.L7047:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7048, A, 0
	jmp .L1100
	.L7048:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7049, A, 0
	jmp .L1101
	.L7049:
	jmp .L1102
	.loc 7 6201 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.L1080:
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7050:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6201 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6201 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6201 0
	#     emit_line("%s = %s;", reg_names[inst->dst.reg], src_str(inst));
.data
	.L7051:
	.string "%s = %s;"
.text
	mov A, .L7051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7052:
	mov A, B
	add SP, 3
	.loc 7 6203 0
	# 
	jmp .L1079
	.loc 7 6205 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.L1081:
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7053:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6205 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6205 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6205 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6205 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6205 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR ";",
.data
	.L7054:
	.string "%s = (%s + %s) & 16777215;"
.text
	mov A, .L7054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7055
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7055:
	mov A, B
	add SP, 4
	.loc 7 6209 0
	# 
	jmp .L1079
	.loc 7 6211 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.L1082:
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7056:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6211 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6211 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6211 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6211 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6211 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR ";",
.data
	.L7057:
	.string "%s = (%s - %s) & 16777215;"
.text
	mov A, .L7057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7058
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7058:
	mov A, B
	add SP, 4
	.loc 7 6215 0
	# 
	jmp .L1079
	.loc 7 6217 0
	#     emit_line("%s = $mem[%s]||0;", reg_names[inst->dst.reg], src_str(inst));
	.L1083:
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7059:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6217 0
	#     emit_line("%s = $mem[%s]||0;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6217 0
	#     emit_line("%s = $mem[%s]||0;", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6217 0
	#     emit_line("%s = $mem[%s]||0;", reg_names[inst->dst.reg], src_str(inst));
.data
	.L7060:
	.string "%s = $mem[%s]||0;"
.text
	mov A, .L7060
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7061:
	mov A, B
	add SP, 3
	.loc 7 6219 0
	# 
	jmp .L1079
	.loc 7 6221 0
	#     emit_line("$mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.L1084:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6221 0
	#     emit_line("$mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6221 0
	#     emit_line("$mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7062:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6221 0
	#     emit_line("$mem[%s] = %s;", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L7063:
	.string "$mem[%s] = %s;"
.text
	mov A, .L7063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7064:
	mov A, B
	add SP, 3
	.loc 7 6223 0
	# 
	jmp .L1079
	.loc 7 6225 0
	#     emit_line("print chr(%s);", src_str(inst));
	.L1085:
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7065:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6225 0
	#     emit_line("print chr(%s);", src_str(inst));
.data
	.L7066:
	.string "print chr(%s);"
.text
	mov A, .L7066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7067:
	mov A, B
	add SP, 2
	.loc 7 6227 0
	# 
	jmp .L1079
	.loc 7 6229 0
	#     emit_line("$c = getc(); %s = defined $c ? ord($c) : 0;",
	.L1086:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6229 0
	#     emit_line("$c = getc(); %s = defined $c ? ord($c) : 0;",
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6229 0
	#     emit_line("$c = getc(); %s = defined $c ? ord($c) : 0;",
.data
	.L7068:
	.string "$c = getc(); %s = defined $c ? ord($c) : 0;"
.text
	mov A, .L7068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7069
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7069:
	mov A, B
	add SP, 2
	.loc 7 6232 0
	# 
	jmp .L1079
	.loc 7 6234 0
	#     emit_line("exit;");
	.L1087:
.data
	.L7070:
	.string "exit;"
.text
	mov A, .L7070
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7071
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7071:
	mov A, B
	add SP, 1
	.loc 7 6236 0
	# 
	jmp .L1079
	.loc 7 6238 0
	#     break;
	.L1088:
	jmp .L1079
	.loc 7 6241 0
	#   case NE:
	.L1089:
	.L1090:
	.L1091:
	.L1092:
	.L1093:
	.L1094:
.data
	.L7072:
	.string "1"
.text
	mov A, .L7072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L7073:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6241 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6241 0
	#   case NE:
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6241 0
	#   case NE:
.data
	.L7074:
	.string "%s = %s ? 1 : 0;"
.text
	mov A, .L7074
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7075
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7075:
	mov A, B
	add SP, 3
	.loc 7 6249 0
	# 
	jmp .L1079
	.loc 7 6251 0
	#   case JNE:
	.L1095:
	.L1096:
	.L1097:
	.L1098:
	.L1099:
	.L1100:
.data
	.L7076:
	.string "1"
.text
	mov A, .L7076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7077
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L7077:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6251 0
	#   case JNE:
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7078
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L7078:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6251 0
	#   case JNE:
.data
	.L7079:
	.string "$pc = %s - 1 if %s;"
.text
	mov A, .L7079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7080:
	mov A, B
	add SP, 3
	.loc 7 6259 0
	#   case JMP:
	jmp .L1079
	.loc 7 6260 0
	#     emit_line("$pc = %s - 1;",
	.L1101:
	.loc 7 6196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L7081:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6260 0
	#     emit_line("$pc = %s - 1;",
.data
	.L7082:
	.string "$pc = %s - 1;"
.text
	mov A, .L7082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7083:
	mov A, B
	add SP, 2
	.loc 7 6263 0
	# 
	jmp .L1079
	.loc 7 6265 0
	#     error("oops");
	.L1102:
.data
	.L7084:
	.string "oops"
.text
	mov A, .L7084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L7085:
	mov A, B
	add SP, 1
	.L1079:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_pl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6295 0
	# }
	.loc 7 6271 0
	#   emit_line("");
	.loc 7 6265 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_pl
	.L7086:
	mov A, B
	add SP, 1
	.loc 7 6272 0
	# 
.data
	.L7087:
	.string ""
.text
	mov A, .L7087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7088:
	mov A, B
	add SP, 1
	.loc 7 6274 0
	#   emit_line("my @codes; @codes = (");
.data
	.L7089:
	.string ""
.text
	mov A, .L7089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7090:
	mov A, B
	add SP, 1
	.loc 7 6275 0
	#   inc_indent();
.data
	.L7091:
	.string "my @codes; @codes = ("
.text
	mov A, .L7091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7092:
	mov A, B
	add SP, 1
	.loc 7 6276 0
	# 
	mov A, .L7093
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7093:
	mov A, B
	.loc 7 6278 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6290 0
	#   }
	.loc 7 6279 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 6265 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6290 0
	#   }
	.L1103:
	.loc 7 6279 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L7094, A, 0
	jmp .L7095
	.L7094:
	.loc 7 6290 0
	#   }
	jmp .L1105
	.L7095:
	.loc 7 6288 0
	#     }
	.loc 7 6280 0
	#       if (prev_pc != -1) {
	.loc 7 6278 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6280 0
	#       if (prev_pc != -1) {
	.loc 7 6279 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L7096, A, 0
	.loc 7 6288 0
	#     }
	.loc 7 6284 0
	#       }
	.loc 7 6281 0
	#         emit_line("goto $codes[++$pc];");
	.loc 7 6278 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6281 0
	#         emit_line("goto $codes[++$pc];");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L7097, A, 0
	.loc 7 6284 0
	#       }
	.loc 7 6282 0
	#         dec_indent();
.data
	.L7098:
	.string "goto $codes[++$pc];"
.text
	mov A, .L7098
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7099:
	mov A, B
	add SP, 1
	.loc 7 6283 0
	#         emit_line("},");
	mov A, .L7100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7100:
	mov A, B
	.loc 7 6284 0
	#       }
.data
	.L7101:
	.string "},"
.text
	mov A, .L7101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7102:
	mov A, B
	add SP, 1
	.L7097:
	.loc 7 6286 0
	#       inc_indent();
.data
	.L7103:
	.string "sub {"
.text
	mov A, .L7103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7104:
	mov A, B
	add SP, 1
	.loc 7 6287 0
	#       prev_pc = inst->pc;
	mov A, .L7105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7105:
	mov A, B
	.loc 7 6288 0
	#     }
	.loc 7 6279 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L7096:
	.loc 7 6290 0
	#   }
	.loc 7 6279 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp pl_emit_inst
	.L7106:
	mov A, B
	add SP, 1
	.loc 7 6290 0
	#   }
	.L1104:
	.loc 7 6279 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6290 0
	#   }
	jmp .L1103
	.L1105:
	.loc 7 6293 0
	#   emit_line("});");
	mov A, .L7107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7107:
	mov A, B
	.loc 7 6294 0
	#   emit_line("$codes[0]->();");
.data
	.L7108:
	.string "});"
.text
	mov A, .L7108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7109
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7109:
	mov A, B
	add SP, 1
	.loc 7 6295 0
	# }
.data
	.L7110:
	.string "$codes[0]->();"
.text
	mov A, .L7110
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7111:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_state_py:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6308 0
	#     }
	.loc 7 6301 0
	#   for (int i = 0; i < 7; i++) {
.data
	.L7112:
	.string "import sys"
.text
	mov A, .L7112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7113
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7113:
	mov A, B
	add SP, 1
	.loc 7 6303 0
	#   }
	.loc 7 6302 0
	#     emit_line("%s = 0", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6303 0
	#   }
	.L1106:
	.loc 7 6302 0
	#     emit_line("%s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7114, A, 0
	jmp .L7115
	.L7114:
	.loc 7 6303 0
	#   }
	jmp .L1108
	.L7115:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6302 0
	#     emit_line("%s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6303 0
	#   }
.data
	.L7116:
	.string "%s = 0"
.text
	mov A, .L7116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7117:
	mov A, B
	add SP, 2
	.L1107:
	.loc 7 6302 0
	#     emit_line("%s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6303 0
	#   }
	jmp .L1106
	.L1108:
	.loc 7 6305 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L7118:
	.string "mem = [0] * (1 << 24)"
.text
	mov A, .L7118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7119:
	mov A, B
	add SP, 1
	.loc 7 6308 0
	#     }
	.loc 7 6306 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 6308 0
	#     }
	.L1109:
	.loc 7 6295 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L7120, A, 0
	jmp .L7121
	.L7120:
	.loc 7 6308 0
	#     }
	jmp .L1111
	.L7121:
	.loc 7 6307 0
	#       emit_line("mem[%d] = %d", mp, data->v);
	.loc 7 6295 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L7122, A, 0
	.loc 7 6308 0
	#     }
	.loc 7 6295 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6306 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6308 0
	#     }
.data
	.L7123:
	.string "mem[%d] = %d"
.text
	mov A, .L7123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7124:
	mov A, B
	add SP, 3
	.L7122:
	.L1110:
	.loc 7 6306 0
	#     if (data->v) {
	.loc 7 6295 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 6306 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6308 0
	#     }
	jmp .L1109
	.L1111:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
py_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6328 0
	# }
	.loc 7 6314 0
	#   emit_line("def func%d():", func_id);
.data
	.L7125:
	.string ""
.text
	mov A, .L7125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7126:
	mov A, B
	add SP, 1
	.loc 7 6315 0
	#   inc_indent();
	.loc 7 6308 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6315 0
	#   inc_indent();
.data
	.L7127:
	.string "def func%d():"
.text
	mov A, .L7127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7128:
	mov A, B
	add SP, 2
	.loc 7 6316 0
	#   for (int i = 0; i < 7; i++) {
	mov A, .L7129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7129:
	mov A, B
	.loc 7 6318 0
	#   }
	.loc 7 6317 0
	#     emit_line("global %s", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6318 0
	#   }
	.L1112:
	.loc 7 6317 0
	#     emit_line("global %s", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7130, A, 0
	jmp .L7131
	.L7130:
	.loc 7 6318 0
	#   }
	jmp .L1114
	.L7131:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6317 0
	#     emit_line("global %s", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6318 0
	#   }
.data
	.L7132:
	.string "global %s"
.text
	mov A, .L7132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7133:
	mov A, B
	add SP, 2
	.L1113:
	.loc 7 6317 0
	#     emit_line("global %s", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6318 0
	#   }
	jmp .L1112
	.L1114:
	.loc 7 6320 0
	#   emit_line("");
.data
	.L7134:
	.string "global mem"
.text
	mov A, .L7134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7135:
	mov A, B
	add SP, 1
	.loc 7 6321 0
	# 
.data
	.L7136:
	.string ""
.text
	mov A, .L7136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7137:
	mov A, B
	add SP, 1
	.loc 7 6323 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 6308 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6323 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7138:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6323 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 6308 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7139:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6323 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L7140:
	.string "while %d <= pc and pc < %d:"
.text
	mov A, .L7140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7141:
	mov A, B
	add SP, 3
	.loc 7 6325 0
	#   emit_line("if False:");
	mov A, .L7142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7142:
	mov A, B
	.loc 7 6326 0
	#   inc_indent();
.data
	.L7143:
	.string "if False:"
.text
	mov A, .L7143
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7144:
	mov A, B
	add SP, 1
	.loc 7 6327 0
	#   emit_line("pass");
	mov A, .L7145
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7145:
	mov A, B
	.loc 7 6328 0
	# }
.data
	.L7146:
	.string "pass"
.text
	mov A, .L7146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7147:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
py_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6335 0
	# }
	.loc 7 6332 0
	#   emit_line("pc += 1");
	mov A, .L7148
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7148:
	mov A, B
	.loc 7 6333 0
	#   dec_indent();
.data
	.L7149:
	.string "pc += 1"
.text
	mov A, .L7149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7150
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7150:
	mov A, B
	add SP, 1
	.loc 7 6334 0
	#   dec_indent();
	mov A, .L7151
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7151:
	mov A, B
	.loc 7 6335 0
	# }
	mov A, .L7152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7152:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
py_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6342 0
	# }
	.loc 7 6339 0
	#   dec_indent();
.data
	.L7153:
	.string ""
.text
	mov A, .L7153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7154:
	mov A, B
	add SP, 1
	.loc 7 6340 0
	#   emit_line("elif pc == %d:", pc);
	mov A, .L7155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7155:
	mov A, B
	.loc 7 6341 0
	#   inc_indent();
	.loc 7 6335 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6341 0
	#   inc_indent();
.data
	.L7156:
	.string "elif pc == %d:"
.text
	mov A, .L7156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7157:
	mov A, B
	add SP, 2
	.loc 7 6342 0
	# }
	mov A, .L7158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7158:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
py_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6408 0
	#     error("oops");
	.loc 7 6346 0
	#   case MOV:
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6408 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7159, A, 0
	jmp .L1116
	.L7159:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7160, A, 0
	jmp .L1117
	.L7160:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7161, A, 0
	jmp .L1118
	.L7161:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7162, A, 0
	jmp .L1119
	.L7162:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7163, A, 0
	jmp .L1120
	.L7163:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7164, A, 0
	jmp .L1121
	.L7164:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7165, A, 0
	jmp .L1122
	.L7165:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7166, A, 0
	jmp .L1123
	.L7166:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7167, A, 0
	jmp .L1124
	.L7167:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7168, A, 0
	jmp .L1125
	.L7168:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7169, A, 0
	jmp .L1126
	.L7169:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7170, A, 0
	jmp .L1127
	.L7170:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7171, A, 0
	jmp .L1128
	.L7171:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7172, A, 0
	jmp .L1129
	.L7172:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7173, A, 0
	jmp .L1130
	.L7173:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7174, A, 0
	jmp .L1131
	.L7174:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7175, A, 0
	jmp .L1132
	.L7175:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7176, A, 0
	jmp .L1133
	.L7176:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7177, A, 0
	jmp .L1134
	.L7177:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7178, A, 0
	jmp .L1135
	.L7178:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7179, A, 0
	jmp .L1136
	.L7179:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7180, A, 0
	jmp .L1137
	.L7180:
	jmp .L1138
	.loc 7 6347 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.L1116:
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7181:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6347 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6347 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6347 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
.data
	.L7182:
	.string "%s = %s"
.text
	mov A, .L7182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7183:
	mov A, B
	add SP, 3
	.loc 7 6349 0
	# 
	jmp .L1115
	.loc 7 6351 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.L1117:
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7184:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6351 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6351 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6351 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6351 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6351 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
.data
	.L7185:
	.string "%s = (%s + %s) & 16777215"
.text
	mov A, .L7185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7186:
	mov A, B
	add SP, 4
	.loc 7 6355 0
	# 
	jmp .L1115
	.loc 7 6357 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.L1118:
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7187:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6357 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6357 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6357 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6357 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6357 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
.data
	.L7188:
	.string "%s = (%s - %s) & 16777215"
.text
	mov A, .L7188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7189:
	mov A, B
	add SP, 4
	.loc 7 6361 0
	# 
	jmp .L1115
	.loc 7 6363 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.L1119:
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7190
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7190:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6363 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6363 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6363 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
.data
	.L7191:
	.string "%s = mem[%s]"
.text
	mov A, .L7191
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7192:
	mov A, B
	add SP, 3
	.loc 7 6365 0
	# 
	jmp .L1115
	.loc 7 6367 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.L1120:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6367 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6367 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7193:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6367 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L7194:
	.string "mem[%s] = %s"
.text
	mov A, .L7194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7195:
	mov A, B
	add SP, 3
	.loc 7 6369 0
	# 
	jmp .L1115
	.loc 7 6371 0
	#     emit_line("sys.stdout.write(chr(%s))", src_str(inst));
	.L1121:
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7196:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6371 0
	#     emit_line("sys.stdout.write(chr(%s))", src_str(inst));
.data
	.L7197:
	.string "sys.stdout.write(chr(%s))"
.text
	mov A, .L7197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7198:
	mov A, B
	add SP, 2
	.loc 7 6373 0
	# 
	jmp .L1115
	.loc 7 6375 0
	#     emit_line("_ = sys.stdin.read(1); %s = ord(_) if _ else 0",
	.L1122:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6375 0
	#     emit_line("_ = sys.stdin.read(1); %s = ord(_) if _ else 0",
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6375 0
	#     emit_line("_ = sys.stdin.read(1); %s = ord(_) if _ else 0",
.data
	.L7199:
	.string "_ = sys.stdin.read(1); %s = ord(_) if _ else 0"
.text
	mov A, .L7199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7200:
	mov A, B
	add SP, 2
	.loc 7 6378 0
	# 
	jmp .L1115
	.loc 7 6380 0
	#     emit_line("sys.exit(0)");
	.L1123:
.data
	.L7201:
	.string "sys.exit(0)"
.text
	mov A, .L7201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7202:
	mov A, B
	add SP, 1
	.loc 7 6382 0
	# 
	jmp .L1115
	.loc 7 6384 0
	#     break;
	.L1124:
	jmp .L1115
	.loc 7 6387 0
	#   case NE:
	.L1125:
	.L1126:
	.L1127:
	.L1128:
	.L1129:
	.L1130:
.data
	.L7203:
	.string "True"
.text
	mov A, .L7203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L7204:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6387 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6387 0
	#   case NE:
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6387 0
	#   case NE:
.data
	.L7205:
	.string "%s = int(%s)"
.text
	mov A, .L7205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7206:
	mov A, B
	add SP, 3
	.loc 7 6395 0
	# 
	jmp .L1115
	.loc 7 6397 0
	#   case JNE:
	.L1131:
	.L1132:
	.L1133:
	.L1134:
	.L1135:
	.L1136:
	.L1137:
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L7207:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6397 0
	#   case JNE:
.data
	.L7208:
	.string "True"
.text
	mov A, .L7208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6342 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L7209:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6397 0
	#   case JNE:
.data
	.L7210:
	.string "if %s: pc = %s - 1"
.text
	mov A, .L7210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7211:
	mov A, B
	add SP, 3
	.loc 7 6406 0
	# 
	jmp .L1115
	.loc 7 6408 0
	#     error("oops");
	.L1138:
.data
	.L7212:
	.string "oops"
.text
	mov A, .L7212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7213
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L7213:
	mov A, B
	add SP, 1
	.L1115:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_py:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6429 0
	# }
	.loc 7 6414 0
	# 
	.loc 7 6408 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_py
	.L7214:
	mov A, B
	add SP, 1
	.loc 7 6416 0
	#                                          py_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, py_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, py_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, py_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, py_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6408 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L7215:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6422 0
	#   emit_line("while True:");
.data
	.L7216:
	.string ""
.text
	mov A, .L7216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7217:
	mov A, B
	add SP, 1
	.loc 7 6423 0
	#   inc_indent();
.data
	.L7218:
	.string "while True:"
.text
	mov A, .L7218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7219:
	mov A, B
	add SP, 1
	.loc 7 6424 0
	#   emit_line("if False: pass");
	mov A, .L7220
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7220:
	mov A, B
	.loc 7 6425 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L7221:
	.string "if False: pass"
.text
	mov A, .L7221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7222
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7222:
	mov A, B
	add SP, 1
	.loc 7 6427 0
	#   }
	.loc 7 6426 0
	#     emit_line("elif pc < %d: func%d()", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 6427 0
	#   }
	.L1139:
	.loc 7 6426 0
	#     emit_line("elif pc < %d: func%d()", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6416 0
	#                                          py_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7223, A, 0
	jmp .L7224
	.L7223:
	.loc 7 6427 0
	#   }
	jmp .L1141
	.L7224:
	.loc 7 6426 0
	#     emit_line("elif pc < %d: func%d()", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6427 0
	#   }
	.loc 7 6426 0
	#     emit_line("elif pc < %d: func%d()", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6427 0
	#   }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7225:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6427 0
	#   }
.data
	.L7226:
	.string "elif pc < %d: func%d()"
.text
	mov A, .L7226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7227:
	mov A, B
	add SP, 3
	.L1140:
	.loc 7 6426 0
	#     emit_line("elif pc < %d: func%d()", (i + 1) * CHUNKED_FUNC_SIZE, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6427 0
	#   }
	jmp .L1139
	.L1141:
	.loc 7 6429 0
	# }
	mov A, .L7228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7228:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
ps_op_names:
	.data 1
	.L7229:
	.string "eq"
	.data 0
	.long .L7229
	.data 1
	.L7230:
	.string "ne"
	.data 0
	.long .L7230
	.data 1
	.L7231:
	.string "lt"
	.data 0
	.long .L7231
	.data 1
	.L7232:
	.string "gt"
	.data 0
	.long .L7232
	.data 1
	.L7233:
	.string "le"
	.data 0
	.long .L7233
	.data 1
	.L7234:
	.string "ge"
	.data 0
	.long .L7234
	.text
ps_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 6471 0
	# }
	.loc 7 6440 0
	#     }
	.loc 7 6439 0
	#         emit_line("/%s 0 def", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6440 0
	#     }
	.L1142:
	.loc 7 6439 0
	#         emit_line("/%s 0 def", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7235, A, 0
	jmp .L7236
	.L7235:
	.loc 7 6440 0
	#     }
	jmp .L1144
	.L7236:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6439 0
	#         emit_line("/%s 0 def", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6440 0
	#     }
.data
	.L7237:
	.string "/%s 0 def"
.text
	mov A, .L7237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7238:
	mov A, B
	add SP, 2
	.L1143:
	.loc 7 6439 0
	#         emit_line("/%s 0 def", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6440 0
	#     }
	jmp .L1142
	.L1144:
	.loc 7 6443 0
	#     int ps_array_size=1<<ps_array_size_shift;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 15
	store A, B
	.loc 7 6444 0
	#     emit_line("/mem %d array def", 1 << (24 - ps_array_size_shift));
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6443 0
	#     int ps_array_size=1<<ps_array_size_shift;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L7239:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6445 0
	#     emit_line("/zeros{");
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6443 0
	#     int ps_array_size=1<<ps_array_size_shift;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L7240:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6445 0
	#     emit_line("/zeros{");
.data
	.L7241:
	.string "/mem %d array def"
.text
	mov A, .L7241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7242:
	mov A, B
	add SP, 2
	.loc 7 6446 0
	#     emit_line(" %d array dup", ps_array_size);
.data
	.L7243:
	.string "/zeros{"
.text
	mov A, .L7243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7244:
	mov A, B
	add SP, 1
	.loc 7 6447 0
	#     emit_line(" 0 1 %d{", ps_array_size-1);
	.loc 7 6444 0
	#     emit_line("/mem %d array def", 1 << (24 - ps_array_size_shift));
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6447 0
	#     emit_line(" 0 1 %d{", ps_array_size-1);
.data
	.L7245:
	.string " %d array dup"
.text
	mov A, .L7245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7246:
	mov A, B
	add SP, 2
	.loc 7 6448 0
	#     emit_line("  0 put dup");
	.loc 7 6444 0
	#     emit_line("/mem %d array def", 1 << (24 - ps_array_size_shift));
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6448 0
	#     emit_line("  0 put dup");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L7247:
	.string " 0 1 %d{"
.text
	mov A, .L7247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7248:
	mov A, B
	add SP, 2
	.loc 7 6449 0
	#     emit_line(" }for");
.data
	.L7249:
	.string "  0 put dup"
.text
	mov A, .L7249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7250:
	mov A, B
	add SP, 1
	.loc 7 6450 0
	#     emit_line(" pop");
.data
	.L7251:
	.string " }for"
.text
	mov A, .L7251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7252:
	mov A, B
	add SP, 1
	.loc 7 6451 0
	#     emit_line("}def");
.data
	.L7253:
	.string " pop"
.text
	mov A, .L7253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7254:
	mov A, B
	add SP, 1
	.loc 7 6452 0
	#     emit_line("/mem_addr{");
.data
	.L7255:
	.string "}def"
.text
	mov A, .L7255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7256:
	mov A, B
	add SP, 1
	.loc 7 6453 0
	#     emit_line(" mem 1 index %d idiv get", ps_array_size);
.data
	.L7257:
	.string "/mem_addr{"
.text
	mov A, .L7257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7258:
	mov A, B
	add SP, 1
	.loc 7 6454 0
	#     emit_line(" dup null eq{");
	.loc 7 6444 0
	#     emit_line("/mem %d array def", 1 << (24 - ps_array_size_shift));
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6454 0
	#     emit_line(" dup null eq{");
.data
	.L7259:
	.string " mem 1 index %d idiv get"
.text
	mov A, .L7259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7260
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7260:
	mov A, B
	add SP, 2
	.loc 7 6455 0
	#     emit_line("  pop zeros");
.data
	.L7261:
	.string " dup null eq{"
.text
	mov A, .L7261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7262:
	mov A, B
	add SP, 1
	.loc 7 6456 0
	#     emit_line("  mem 2 index %d idiv 2 index put", ps_array_size);
.data
	.L7263:
	.string "  pop zeros"
.text
	mov A, .L7263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7264:
	mov A, B
	add SP, 1
	.loc 7 6457 0
	#     emit_line(" }if");
	.loc 7 6444 0
	#     emit_line("/mem %d array def", 1 << (24 - ps_array_size_shift));
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6457 0
	#     emit_line(" }if");
.data
	.L7265:
	.string "  mem 2 index %d idiv 2 index put"
.text
	mov A, .L7265
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7266:
	mov A, B
	add SP, 2
	.loc 7 6458 0
	#     emit_line(" exch %d mod", ps_array_size);
.data
	.L7267:
	.string " }if"
.text
	mov A, .L7267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7268:
	mov A, B
	add SP, 1
	.loc 7 6459 0
	#     emit_line("}def");
	.loc 7 6444 0
	#     emit_line("/mem %d array def", 1 << (24 - ps_array_size_shift));
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6459 0
	#     emit_line("}def");
.data
	.L7269:
	.string " exch %d mod"
.text
	mov A, .L7269
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7270:
	mov A, B
	add SP, 2
	.loc 7 6460 0
	# 
.data
	.L7271:
	.string "}def"
.text
	mov A, .L7271
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7272
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7272:
	mov A, B
	add SP, 1
	.loc 7 6462 0
	#     emit_line("/stdin (%%stdin) (r) file def");
.data
	.L7273:
	.string "/stdout (%%stdout) (w) file def"
.text
	mov A, .L7273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7274:
	mov A, B
	add SP, 1
	.loc 7 6463 0
	# 
.data
	.L7275:
	.string "/stdin (%%stdin) (r) file def"
.text
	mov A, .L7275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7276
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7276:
	mov A, B
	add SP, 1
	.loc 7 6465 0
	#     emit_line("/func_table %d array def", num_funcs);
	mov A, 0
	mov B, SP
	.loc 7 6429 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7277
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L7277:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6465 0
	#     emit_line("/func_table %d array def", num_funcs);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 6466 0
	#     emit_line("0 1 %d{", num_funcs-1);
	.loc 7 6465 0
	#     emit_line("/func_table %d array def", num_funcs);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6466 0
	#     emit_line("0 1 %d{", num_funcs-1);
.data
	.L7278:
	.string "/func_table %d array def"
.text
	mov A, .L7278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7279:
	mov A, B
	add SP, 2
	.loc 7 6467 0
	#     inc_indent();
	.loc 7 6465 0
	#     emit_line("/func_table %d array def", num_funcs);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6467 0
	#     inc_indent();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L7280:
	.string "0 1 %d{"
.text
	mov A, .L7280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7281:
	mov A, B
	add SP, 2
	.loc 7 6468 0
	#     emit_line("func_table exch %d array put", CHUNKED_FUNC_SIZE);
	mov A, .L7282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7282:
	mov A, B
	.loc 7 6469 0
	#     dec_indent();
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6469 0
	#     dec_indent();
.data
	.L7283:
	.string "func_table exch %d array put"
.text
	mov A, .L7283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7284:
	mov A, B
	add SP, 2
	.loc 7 6470 0
	#     emit_line("}for");
	mov A, .L7285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7285:
	mov A, B
	.loc 7 6471 0
	# }
.data
	.L7286:
	.string "}for"
.text
	mov A, .L7286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7287:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ps_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6479 0
	# }
	.loc 7 6475 0
	#     emit_line("func_table %d get", func_id);
.data
	.L7288:
	.string ""
.text
	mov A, .L7288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7289:
	mov A, B
	add SP, 1
	.loc 7 6476 0
	#     // dummy
	.loc 7 6471 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6476 0
	#     // dummy
.data
	.L7290:
	.string "func_table %d get"
.text
	mov A, .L7290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7291:
	mov A, B
	add SP, 2
	.loc 7 6478 0
	#     inc_indent();
.data
	.L7292:
	.string "dup 0 {"
.text
	mov A, .L7292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7293:
	mov A, B
	add SP, 1
	.loc 7 6479 0
	# }
	mov A, .L7294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7294:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ps_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6485 0
	# }
	.loc 7 6483 0
	#     emit_line("} put");
	mov A, .L7295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7295:
	mov A, B
	.loc 7 6484 0
	#     emit_line("pop");
.data
	.L7296:
	.string "} put"
.text
	mov A, .L7296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7297:
	mov A, B
	add SP, 1
	.loc 7 6485 0
	# }
.data
	.L7298:
	.string "pop"
.text
	mov A, .L7298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7299:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ps_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6493 0
	# }
	.loc 7 6489 0
	#     emit_line("} put");
	mov A, .L7300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7300:
	mov A, B
	.loc 7 6490 0
	#     emit_line("");
.data
	.L7301:
	.string "} put"
.text
	mov A, .L7301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7302:
	mov A, B
	add SP, 1
	.loc 7 6491 0
	#     emit_line("dup %d %d mod {", pc, CHUNKED_FUNC_SIZE);
.data
	.L7303:
	.string ""
.text
	mov A, .L7303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7304:
	mov A, B
	add SP, 1
	.loc 7 6492 0
	#     inc_indent();
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6485 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6492 0
	#     inc_indent();
.data
	.L7305:
	.string "dup %d %d mod {"
.text
	mov A, .L7305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7306:
	mov A, B
	add SP, 3
	.loc 7 6493 0
	# }
	mov A, .L7307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7307:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ps_value_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6504 0
	#     }
	.loc 7 6497 0
	#         case REG:
	.loc 7 6493 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7308, A, 0
	jmp .L1146
	.L7308:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7309, A, 0
	jmp .L1147
	.L7309:
	jmp .L1148
	.loc 7 6498 0
	#             return format("%s", reg_names[value->reg]);
	.L1146:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6498 0
	#             return format("%s", reg_names[value->reg]);
	.loc 7 6493 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6498 0
	#             return format("%s", reg_names[value->reg]);
.data
	.L7310:
	.string "%s"
.text
	mov A, .L7310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L7311:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6500 0
	#             return format("%d", value->imm);
	.L1147:
	.loc 7 6493 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6500 0
	#             return format("%d", value->imm);
.data
	.L7312:
	.string "%d"
.text
	mov A, .L7312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L7313:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 6502 0
	#             error("invalid value");
	.L1148:
.data
	.L7314:
	.string "invalid value"
.text
	mov A, .L7314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L7315:
	mov A, B
	add SP, 1
	.loc 7 6504 0
	#     }
	jmp .L1145
	.L1145:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ps_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6581 0
	#     }
	.loc 7 6509 0
	#     const char *reg_name;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6510 0
	# 
	.loc 7 6578 0
	#     }
	.loc 7 6512 0
	#         case MOV:
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 6578 0
	#     }
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7316, A, 0
	jmp .L1150
	.L7316:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7317, A, 0
	jmp .L1151
	.L7317:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7318, A, 0
	jmp .L1152
	.L7318:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7319, A, 0
	jmp .L1153
	.L7319:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7320, A, 0
	jmp .L1154
	.L7320:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7321, A, 0
	jmp .L1155
	.L7321:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7322, A, 0
	jmp .L1156
	.L7322:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7323, A, 0
	jmp .L1157
	.L7323:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7324, A, 0
	jmp .L1158
	.L7324:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7325, A, 0
	jmp .L1159
	.L7325:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7326, A, 0
	jmp .L1160
	.L7326:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7327, A, 0
	jmp .L1161
	.L7327:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7328, A, 0
	jmp .L1162
	.L7328:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7329, A, 0
	jmp .L1163
	.L7329:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7330, A, 0
	jmp .L1164
	.L7330:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7331, A, 0
	jmp .L1165
	.L7331:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7332, A, 0
	jmp .L1166
	.L7332:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7333, A, 0
	jmp .L1167
	.L7333:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7334, A, 0
	jmp .L1168
	.L7334:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7335, A, 0
	jmp .L1169
	.L7335:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7336, A, 0
	jmp .L1170
	.L7336:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7337, A, 0
	jmp .L1171
	.L7337:
	jmp .L1172
	.loc 7 6513 0
	#             emit_line("/%s %s def",
	.L1150:
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7338:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6513 0
	#             emit_line("/%s %s def",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6513 0
	#             emit_line("/%s %s def",
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6513 0
	#             emit_line("/%s %s def",
.data
	.L7339:
	.string "/%s %s def"
.text
	mov A, .L7339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7340:
	mov A, B
	add SP, 3
	.loc 7 6516 0
	#         case ADD:
	jmp .L1149
	.loc 7 6517 0
	#             reg_name=reg_names[inst->dst.reg];
	.L1151:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6517 0
	#             reg_name=reg_names[inst->dst.reg];
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6519 0
	#                     reg_name, reg_name, ps_value_str(&inst->src));
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7341:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6510 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6519 0
	#                     reg_name, reg_name, ps_value_str(&inst->src));
.data
	.L7342:
	.string "/%s %s %s add 16#FFFFFF and def"
.text
	mov A, .L7342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7343:
	mov A, B
	add SP, 4
	.loc 7 6521 0
	#         case SUB:
	jmp .L1149
	.loc 7 6522 0
	#             reg_name=reg_names[inst->dst.reg];
	.L1152:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6522 0
	#             reg_name=reg_names[inst->dst.reg];
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6524 0
	#                     reg_name, reg_name, ps_value_str(&inst->src));
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7344:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6510 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6524 0
	#                     reg_name, reg_name, ps_value_str(&inst->src));
.data
	.L7345:
	.string "/%s %s %s sub 16#FFFFFF and def"
.text
	mov A, .L7345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7346:
	mov A, B
	add SP, 4
	.loc 7 6526 0
	#         case LOAD:
	jmp .L1149
	.loc 7 6527 0
	#             emit_line("/%s %s mem_addr get def",
	.L1153:
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7347:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6527 0
	#             emit_line("/%s %s mem_addr get def",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6527 0
	#             emit_line("/%s %s mem_addr get def",
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6527 0
	#             emit_line("/%s %s mem_addr get def",
.data
	.L7348:
	.string "/%s %s mem_addr get def"
.text
	mov A, .L7348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7349:
	mov A, B
	add SP, 3
	.loc 7 6530 0
	#         case STORE:
	jmp .L1149
	.loc 7 6531 0
	#             emit_line("%s mem_addr %s put",
	.L1154:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6531 0
	#             emit_line("%s mem_addr %s put",
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6531 0
	#             emit_line("%s mem_addr %s put",
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7350:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6531 0
	#             emit_line("%s mem_addr %s put",
.data
	.L7351:
	.string "%s mem_addr %s put"
.text
	mov A, .L7351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7352:
	mov A, B
	add SP, 3
	.loc 7 6534 0
	#         case EXIT:
	jmp .L1149
	.loc 7 6535 0
	#             emit_line("quit");
	.L1155:
.data
	.L7353:
	.string "quit"
.text
	mov A, .L7353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7354:
	mov A, B
	add SP, 1
	.loc 7 6537 0
	#         case JEQ:
	jmp .L1149
	.loc 7 6538 0
	#         case JNE:
	.L1156:
	.L1157:
	.L1158:
	.L1159:
	.L1160:
	.L1161:
	.loc 7 6429 0
	# }
	mov A, ps_op_names
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6538 0
	#         case JNE:
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6538 0
	#         case JNE:
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7355:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6538 0
	#         case JNE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6538 0
	#         case JNE:
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6538 0
	#         case JNE:
.data
	.L7356:
	.string "%s %s %s{"
.text
	mov A, .L7356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7357
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7357:
	mov A, B
	add SP, 4
	.loc 7 6547 0
	#             emit_line("}{");
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7358:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6547 0
	#             emit_line("}{");
.data
	.L7359:
	.string " /pc %s def"
.text
	mov A, .L7359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7360:
	mov A, B
	add SP, 2
	.loc 7 6548 0
	#             if(inst->next) emit_line(" /pc %d def", inst->next->pc);
.data
	.L7361:
	.string "}{"
.text
	mov A, .L7361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7362:
	mov A, B
	add SP, 1
	.loc 7 6549 0
	#             emit_line("}ifelse");
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	jeq .L7363, A, 0
	.loc 7 6549 0
	#             emit_line("}ifelse");
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6549 0
	#             emit_line("}ifelse");
.data
	.L7364:
	.string " /pc %d def"
.text
	mov A, .L7364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7365:
	mov A, B
	add SP, 2
	.L7363:
	.loc 7 6550 0
	#             jumped=1;
.data
	.L7366:
	.string "}ifelse"
.text
	mov A, .L7366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7367:
	mov A, B
	add SP, 1
	.loc 7 6551 0
	#             break;
	mov A, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6552 0
	#         case JMP:
	jmp .L1149
	.loc 7 6553 0
	#             emit_line("/pc %s def", ps_value_str(&inst->jmp));
	.L1162:
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7368:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6553 0
	#             emit_line("/pc %s def", ps_value_str(&inst->jmp));
.data
	.L7369:
	.string "/pc %s def"
.text
	mov A, .L7369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7370:
	mov A, B
	add SP, 2
	.loc 7 6555 0
	#             break;
	mov A, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6556 0
	#         case PUTC:
	jmp .L1149
	.loc 7 6557 0
	#             emit_line("stdout %s write", ps_value_str(&inst->src));
	.L1163:
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7371:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6557 0
	#             emit_line("stdout %s write", ps_value_str(&inst->src));
.data
	.L7372:
	.string "stdout %s write"
.text
	mov A, .L7372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7373:
	mov A, B
	add SP, 2
	.loc 7 6559 0
	#         case GETC:
	jmp .L1149
	.loc 7 6560 0
	#             emit_line("/%s stdin read not{0}if def", reg_names[inst->dst.reg]);
	.L1164:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6560 0
	#             emit_line("/%s stdin read not{0}if def", reg_names[inst->dst.reg]);
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6560 0
	#             emit_line("/%s stdin read not{0}if def", reg_names[inst->dst.reg]);
.data
	.L7374:
	.string "/%s stdin read not{0}if def"
.text
	mov A, .L7374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7375:
	mov A, B
	add SP, 2
	.loc 7 6562 0
	#         case EQ:
	jmp .L1149
	.loc 7 6563 0
	#         case NE:
	.L1165:
	.L1166:
	.L1167:
	.L1168:
	.L1169:
	.L1170:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6563 0
	#         case NE:
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6570 0
	#                     reg_name, reg_name, ps_value_str(&inst->src),
	.loc 7 6429 0
	# }
	mov A, ps_op_names
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6570 0
	#                     reg_name, reg_name, ps_value_str(&inst->src),
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6570 0
	#                     reg_name, reg_name, ps_value_str(&inst->src),
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_value_str
	.L7376:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6510 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6570 0
	#                     reg_name, reg_name, ps_value_str(&inst->src),
.data
	.L7377:
	.string "/%s %s %s %s{1}{0}ifelse def"
.text
	mov A, .L7377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7378:
	mov A, B
	add SP, 5
	.loc 7 6573 0
	#         case DUMP:
	jmp .L1149
	.loc 7 6574 0
	#             break;
	.L1171:
	jmp .L1149
	.loc 7 6576 0
	#             error("unknown operator");
	.L1172:
.data
	.L7379:
	.string "unknown operator"
.text
	mov A, .L7379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L7380:
	mov A, B
	add SP, 1
	.loc 7 6578 0
	#     }
	jmp .L1149
	.L1149:
	.loc 7 6581 0
	#     }
	.loc 7 6580 0
	#         emit_line("/pc %d def", inst->next->pc);
	.loc 7 6509 0
	#     const char *reg_name;
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	mov B, 0
	jeq .L7382, A, 0
	.loc 7 6580 0
	#         emit_line("/pc %d def", inst->next->pc);
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, A
	ne B, 0
	.L7382:
	mov A, B
	mov B, 0
	jeq .L7381, A, 0
	.loc 7 6580 0
	#         emit_line("/pc %d def", inst->next->pc);
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6580 0
	#         emit_line("/pc %d def", inst->next->pc);
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L7381:
	mov A, B
	jeq .L7383, A, 0
	.loc 7 6581 0
	#     }
	.loc 7 6504 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6581 0
	#     }
.data
	.L7384:
	.string "/pc %d def"
.text
	mov A, .L7384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7385:
	mov A, B
	add SP, 2
	.L7383:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ps_max_pc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6593 0
	# }
	.loc 7 6586 0
	#     while(inst){
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6591 0
	#     }
	.L1173:
	.loc 7 6581 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	jeq .L7386, A, 0
	.loc 7 6591 0
	#     }
	.loc 7 6589 0
	#         }
	.loc 7 6588 0
	#             n=inst->pc;
	.loc 7 6586 0
	#     while(inst){
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6588 0
	#             n=inst->pc;
	.loc 7 6581 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7387, A, 0
	.loc 7 6589 0
	#         }
	.loc 7 6581 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L7387:
	.loc 7 6591 0
	#     }
	.loc 7 6581 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 2
	store A, B
	jmp .L7388
	.L7386:
	.loc 7 6591 0
	#     }
	jmp .L1174
	.L7388:
	jmp .L1173
	.L1174:
	.loc 7 6593 0
	# }
	.loc 7 6586 0
	#     while(inst){
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_ps:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6620 0
	# }
	.loc 7 6597 0
	#     emit_chunked_main_loop(
	.loc 7 6593 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_max_pc
	.L7389:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7390
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ps_init_state
	.L7390:
	mov A, B
	add SP, 1
	.loc 7 6598 0
	#             module->text,
	mov A, ps_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, ps_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, ps_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, ps_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6593 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L7391:
	mov A, B
	add SP, 5
	.loc 7 6604 0
	# 
.data
	.L7392:
	.string ""
.text
	mov A, .L7392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7393:
	mov A, B
	add SP, 1
	.loc 7 6606 0
	#     for(int mp=0; data; data=data->next, mp++){
	mov A, 0
	mov B, SP
	.loc 7 6593 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6609 0
	#         }
	.loc 7 6607 0
	#         if(data->v){
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 6609 0
	#         }
	.L1175:
	.loc 7 6606 0
	#     for(int mp=0; data; data=data->next, mp++){
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L7394, A, 0
	jmp .L7395
	.L7394:
	.loc 7 6609 0
	#         }
	jmp .L1177
	.L7395:
	.loc 7 6608 0
	#             emit_line("%d mem_addr %d put", mp, data->v);
	.loc 7 6606 0
	#     for(int mp=0; data; data=data->next, mp++){
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	jeq .L7396, A, 0
	.loc 7 6609 0
	#         }
	.loc 7 6606 0
	#     for(int mp=0; data; data=data->next, mp++){
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6607 0
	#         if(data->v){
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6609 0
	#         }
.data
	.L7397:
	.string "%d mem_addr %d put"
.text
	mov A, .L7397
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7398:
	mov A, B
	add SP, 3
	.L7396:
	.L1176:
	.loc 7 6607 0
	#         if(data->v){
	.loc 7 6606 0
	#     for(int mp=0; data; data=data->next, mp++){
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6607 0
	#         if(data->v){
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6609 0
	#         }
	jmp .L1175
	.L1177:
	.loc 7 6612 0
	# 
.data
	.L7399:
	.string ""
.text
	mov A, .L7399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7400:
	mov A, B
	add SP, 1
	.loc 7 6614 0
	#     inc_indent();
.data
	.L7401:
	.string "{"
.text
	mov A, .L7401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7402:
	mov A, B
	add SP, 1
	.loc 7 6615 0
	#     emit_line("func_table pc %d idiv get", CHUNKED_FUNC_SIZE);
	mov A, .L7403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7403:
	mov A, B
	.loc 7 6616 0
	#     emit_line("pc %d mod get", CHUNKED_FUNC_SIZE);
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6616 0
	#     emit_line("pc %d mod get", CHUNKED_FUNC_SIZE);
.data
	.L7404:
	.string "func_table pc %d idiv get"
.text
	mov A, .L7404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7405:
	mov A, B
	add SP, 2
	.loc 7 6617 0
	#     emit_line("exec");
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6617 0
	#     emit_line("exec");
.data
	.L7406:
	.string "pc %d mod get"
.text
	mov A, .L7406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7407:
	mov A, B
	add SP, 2
	.loc 7 6618 0
	#     dec_indent();
.data
	.L7408:
	.string "exec"
.text
	mov A, .L7408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7409:
	mov A, B
	add SP, 1
	.loc 7 6619 0
	#     emit_line("}loop");
	mov A, .L7410
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7410:
	mov A, B
	.loc 7 6620 0
	# }
.data
	.L7411:
	.string "}loop"
.text
	mov A, .L7411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7412:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
RB_REG_NAMES:
	.data 1
	.L7413:
	.string "@a"
	.data 0
	.long .L7413
	.data 1
	.L7414:
	.string "@b"
	.data 0
	.long .L7414
	.data 1
	.L7415:
	.string "@c"
	.data 0
	.long .L7415
	.data 1
	.L7416:
	.string "@d"
	.data 0
	.long .L7416
	.data 1
	.L7417:
	.string "@bp"
	.data 0
	.long .L7417
	.data 1
	.L7418:
	.string "@sp"
	.data 0
	.long .L7418
	.data 1
	.L7419:
	.string "@pc"
	.data 0
	.long .L7419
	.text
init_state_rb:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6637 0
	#     }
	.loc 7 6630 0
	#   for (int i = 0; i < 7; i++) {
	.loc 7 6620 0
	# }
	mov A, RB_REG_NAMES
	mov B, reg_names
	store A, B
	.loc 7 6632 0
	#   }
	.loc 7 6631 0
	#     emit_line("%s = 0", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 6632 0
	#   }
	.L1178:
	.loc 7 6631 0
	#     emit_line("%s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7420, A, 0
	jmp .L7421
	.L7420:
	.loc 7 6632 0
	#   }
	jmp .L1180
	.L7421:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6631 0
	#     emit_line("%s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6632 0
	#   }
.data
	.L7422:
	.string "%s = 0"
.text
	mov A, .L7422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7423:
	mov A, B
	add SP, 2
	.L1179:
	.loc 7 6631 0
	#     emit_line("%s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6632 0
	#   }
	jmp .L1178
	.L1180:
	.loc 7 6634 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L7424:
	.string "@mem = [0] * (1 << 24)"
.text
	mov A, .L7424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7425:
	mov A, B
	add SP, 1
	.loc 7 6637 0
	#     }
	.loc 7 6635 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 6637 0
	#     }
	.L1181:
	.loc 7 6620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L7426, A, 0
	jmp .L7427
	.L7426:
	.loc 7 6637 0
	#     }
	jmp .L1183
	.L7427:
	.loc 7 6636 0
	#       emit_line("@mem[%d] = %d", mp, data->v);
	.loc 7 6620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L7428, A, 0
	.loc 7 6637 0
	#     }
	.loc 7 6620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6635 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6637 0
	#     }
.data
	.L7429:
	.string "@mem[%d] = %d"
.text
	mov A, .L7429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7430:
	mov A, B
	add SP, 3
	.L7428:
	.L1182:
	.loc 7 6635 0
	#     if (data->v) {
	.loc 7 6620 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 6635 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6637 0
	#     }
	jmp .L1181
	.L1183:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
rb_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6650 0
	# }
	.loc 7 6643 0
	#   emit_line("def func%d", func_id);
.data
	.L7431:
	.string ""
.text
	mov A, .L7431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7432:
	mov A, B
	add SP, 1
	.loc 7 6644 0
	#   inc_indent();
	.loc 7 6637 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6644 0
	#   inc_indent();
.data
	.L7433:
	.string "def func%d"
.text
	mov A, .L7433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7434:
	mov A, B
	add SP, 2
	.loc 7 6645 0
	#   emit_line("while %d <= @pc && @pc < %d",
	mov A, .L7435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7435:
	mov A, B
	.loc 7 6646 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 6637 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6646 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7436:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6646 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 6637 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L7437:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6646 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L7438:
	.string "while %d <= @pc && @pc < %d"
.text
	mov A, .L7438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7439:
	mov A, B
	add SP, 3
	.loc 7 6648 0
	#   emit_line("case @pc");
	mov A, .L7440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7440:
	mov A, B
	.loc 7 6649 0
	#   inc_indent();
.data
	.L7441:
	.string "case @pc"
.text
	mov A, .L7441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7442:
	mov A, B
	add SP, 1
	.loc 7 6650 0
	# }
	mov A, .L7443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7443:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
rb_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6660 0
	# }
	.loc 7 6654 0
	#   emit_line("end");
	mov A, .L7444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7444:
	mov A, B
	.loc 7 6655 0
	#   emit_line("@pc += 1");
.data
	.L7445:
	.string "end"
.text
	mov A, .L7445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7446:
	mov A, B
	add SP, 1
	.loc 7 6656 0
	#   dec_indent();
.data
	.L7447:
	.string "@pc += 1"
.text
	mov A, .L7447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7448:
	mov A, B
	add SP, 1
	.loc 7 6657 0
	#   emit_line("end");
	mov A, .L7449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7449:
	mov A, B
	.loc 7 6658 0
	#   dec_indent();
.data
	.L7450:
	.string "end"
.text
	mov A, .L7450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7451:
	mov A, B
	add SP, 1
	.loc 7 6659 0
	#   emit_line("end");
	mov A, .L7452
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7452:
	mov A, B
	.loc 7 6660 0
	# }
.data
	.L7453:
	.string "end"
.text
	mov A, .L7453
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7454:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
rb_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6667 0
	# }
	.loc 7 6664 0
	#   dec_indent();
.data
	.L7455:
	.string ""
.text
	mov A, .L7455
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7456
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7456:
	mov A, B
	add SP, 1
	.loc 7 6665 0
	#   emit_line("when %d", pc);
	mov A, .L7457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7457:
	mov A, B
	.loc 7 6666 0
	#   inc_indent();
	.loc 7 6660 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6666 0
	#   inc_indent();
.data
	.L7458:
	.string "when %d"
.text
	mov A, .L7458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7459
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7459:
	mov A, B
	add SP, 2
	.loc 7 6667 0
	# }
	mov A, .L7460
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7460:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
rb_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 6733 0
	#     error("oops");
	.loc 7 6671 0
	#   case MOV:
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6733 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7461, A, 0
	jmp .L1185
	.L7461:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7462, A, 0
	jmp .L1186
	.L7462:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7463, A, 0
	jmp .L1187
	.L7463:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7464, A, 0
	jmp .L1188
	.L7464:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7465, A, 0
	jmp .L1189
	.L7465:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7466, A, 0
	jmp .L1190
	.L7466:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7467, A, 0
	jmp .L1191
	.L7467:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7468, A, 0
	jmp .L1192
	.L7468:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7469, A, 0
	jmp .L1193
	.L7469:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7470, A, 0
	jmp .L1194
	.L7470:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7471, A, 0
	jmp .L1195
	.L7471:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7472, A, 0
	jmp .L1196
	.L7472:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7473, A, 0
	jmp .L1197
	.L7473:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7474, A, 0
	jmp .L1198
	.L7474:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7475, A, 0
	jmp .L1199
	.L7475:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7476, A, 0
	jmp .L1200
	.L7476:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7477, A, 0
	jmp .L1201
	.L7477:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7478, A, 0
	jmp .L1202
	.L7478:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7479, A, 0
	jmp .L1203
	.L7479:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7480, A, 0
	jmp .L1204
	.L7480:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7481, A, 0
	jmp .L1205
	.L7481:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7482, A, 0
	jmp .L1206
	.L7482:
	jmp .L1207
	.loc 7 6672 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.L1185:
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7483
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7483:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6672 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6672 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6672 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst));
.data
	.L7484:
	.string "%s = %s"
.text
	mov A, .L7484
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7485:
	mov A, B
	add SP, 3
	.loc 7 6674 0
	# 
	jmp .L1184
	.loc 7 6676 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.L1186:
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7486:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6676 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6676 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6676 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6676 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6676 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
.data
	.L7487:
	.string "%s = (%s + %s) & 16777215"
.text
	mov A, .L7487
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7488
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7488:
	mov A, B
	add SP, 4
	.loc 7 6680 0
	# 
	jmp .L1184
	.loc 7 6682 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.L1187:
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7489
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7489:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6682 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
.data
	.L7490:
	.string "%s = (%s - %s) & 16777215"
.text
	mov A, .L7490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7491
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7491:
	mov A, B
	add SP, 4
	.loc 7 6686 0
	# 
	jmp .L1184
	.loc 7 6688 0
	#     emit_line("%s = @mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.L1188:
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7492
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7492:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6688 0
	#     emit_line("%s = @mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6688 0
	#     emit_line("%s = @mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6688 0
	#     emit_line("%s = @mem[%s]", reg_names[inst->dst.reg], src_str(inst));
.data
	.L7493:
	.string "%s = @mem[%s]"
.text
	mov A, .L7493
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7494
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7494:
	mov A, B
	add SP, 3
	.loc 7 6690 0
	# 
	jmp .L1184
	.loc 7 6692 0
	#     emit_line("@mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.L1189:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6692 0
	#     emit_line("@mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6692 0
	#     emit_line("@mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7495
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7495:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6692 0
	#     emit_line("@mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L7496:
	.string "@mem[%s] = %s"
.text
	mov A, .L7496
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7497:
	mov A, B
	add SP, 3
	.loc 7 6694 0
	# 
	jmp .L1184
	.loc 7 6696 0
	#     emit_line("putc %s", src_str(inst));
	.L1190:
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7498
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L7498:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6696 0
	#     emit_line("putc %s", src_str(inst));
.data
	.L7499:
	.string "putc %s"
.text
	mov A, .L7499
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7500:
	mov A, B
	add SP, 2
	.loc 7 6698 0
	# 
	jmp .L1184
	.loc 7 6700 0
	#     emit_line("c = STDIN.getc; %s = c ? c.ord : 0",
	.L1191:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6700 0
	#     emit_line("c = STDIN.getc; %s = c ? c.ord : 0",
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6700 0
	#     emit_line("c = STDIN.getc; %s = c ? c.ord : 0",
.data
	.L7501:
	.string "c = STDIN.getc; %s = c ? c.ord : 0"
.text
	mov A, .L7501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7502:
	mov A, B
	add SP, 2
	.loc 7 6703 0
	# 
	jmp .L1184
	.loc 7 6705 0
	#     emit_line("exit");
	.L1192:
.data
	.L7503:
	.string "exit"
.text
	mov A, .L7503
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7504:
	mov A, B
	add SP, 1
	.loc 7 6707 0
	# 
	jmp .L1184
	.loc 7 6709 0
	#     break;
	.L1193:
	jmp .L1184
	.loc 7 6712 0
	#   case NE:
	.L1194:
	.L1195:
	.L1196:
	.L1197:
	.L1198:
	.L1199:
.data
	.L7505:
	.string "true"
.text
	mov A, .L7505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L7506:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6712 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6712 0
	#   case NE:
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6712 0
	#   case NE:
.data
	.L7507:
	.string "%s = %s ? 1 : 0"
.text
	mov A, .L7507
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7508:
	mov A, B
	add SP, 3
	.loc 7 6720 0
	# 
	jmp .L1184
	.loc 7 6722 0
	#   case JNE:
	.L1200:
	.L1201:
	.L1202:
	.L1203:
	.L1204:
	.L1205:
	.L1206:
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L7509:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6722 0
	#   case JNE:
.data
	.L7510:
	.string "true"
.text
	mov A, .L7510
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6667 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7511
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L7511:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6722 0
	#   case JNE:
.data
	.L7512:
	.string "%s && @pc = %s - 1"
.text
	mov A, .L7512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7513:
	mov A, B
	add SP, 3
	.loc 7 6731 0
	# 
	jmp .L1184
	.loc 7 6733 0
	#     error("oops");
	.L1207:
.data
	.L7514:
	.string "oops"
.text
	mov A, .L7514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L7515:
	mov A, B
	add SP, 1
	.L1184:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_rb:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6758 0
	# }
	.loc 7 6739 0
	#   emit_line("");
	.loc 7 6733 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_rb
	.L7516:
	mov A, B
	add SP, 1
	.loc 7 6740 0
	# 
.data
	.L7517:
	.string ""
.text
	mov A, .L7517
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7518
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7518:
	mov A, B
	add SP, 1
	.loc 7 6742 0
	#                                          rb_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, rb_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, rb_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, rb_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, rb_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6733 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L7519:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6748 0
	#   emit_line("while true");
.data
	.L7520:
	.string ""
.text
	mov A, .L7520
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7521:
	mov A, B
	add SP, 1
	.loc 7 6749 0
	#   inc_indent();
.data
	.L7522:
	.string "while true"
.text
	mov A, .L7522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7523:
	mov A, B
	add SP, 1
	.loc 7 6750 0
	#   emit_line("case @pc / %d", CHUNKED_FUNC_SIZE);
	mov A, .L7524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L7524:
	mov A, B
	.loc 7 6751 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6751 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L7525:
	.string "case @pc / %d"
.text
	mov A, .L7525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7526:
	mov A, B
	add SP, 2
	.loc 7 6754 0
	#   }
	.loc 7 6752 0
	#     emit_line("when %d", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 6754 0
	#   }
	.L1208:
	.loc 7 6752 0
	#     emit_line("when %d", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6742 0
	#                                          rb_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7527, A, 0
	jmp .L7528
	.L7527:
	.loc 7 6754 0
	#   }
	jmp .L1210
	.L7528:
	.loc 7 6753 0
	#     emit_line(" func%d", i);
	.loc 7 6752 0
	#     emit_line("when %d", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6753 0
	#     emit_line(" func%d", i);
.data
	.L7529:
	.string "when %d"
.text
	mov A, .L7529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7530:
	mov A, B
	add SP, 2
	.loc 7 6754 0
	#   }
	.loc 7 6752 0
	#     emit_line("when %d", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6754 0
	#   }
.data
	.L7531:
	.string " func%d"
.text
	mov A, .L7531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7532:
	mov A, B
	add SP, 2
	.L1209:
	.loc 7 6752 0
	#     emit_line("when %d", i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6754 0
	#   }
	jmp .L1208
	.L1210:
	.loc 7 6756 0
	#   dec_indent();
.data
	.L7533:
	.string "end"
.text
	mov A, .L7533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7534:
	mov A, B
	add SP, 1
	.loc 7 6757 0
	#   emit_line("end");
	mov A, .L7535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L7535:
	mov A, B
	.loc 7 6758 0
	# }
.data
	.L7536:
	.string "end"
.text
	mov A, .L7536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7537:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
SED_REG_NAMES:
	.long 65
	.long 66
	.long 67
	.long 68
	.long 70
	.long 83
	.long 0
	.text
sed_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 6797 0
	# }
	.loc 7 6770 0
	#   emit_line("/^$/{x\ns/$/a,/\nx\nbin_done\n}");
.data
	.L7538:
	.string ":in_loop"
.text
	mov A, .L7538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7539:
	mov A, B
	add SP, 1
	.loc 7 6771 0
	#   for (int i = 1; i < 128; i++) {
.data
	.L7540:
	.string "/^$/{x\ns/$/a,/\nx\nbin_done\n}"
.text
	mov A, .L7540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7541:
	mov A, B
	add SP, 1
	.loc 7 6782 0
	#   }
	.loc 7 6772 0
	#     if (i == 10)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 1
	store A, B
	.loc 7 6782 0
	#   }
	.L1211:
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 128
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7542, A, 0
	jmp .L7543
	.L7542:
	.loc 7 6782 0
	#   }
	jmp .L1213
	.L7543:
	.loc 7 6773 0
	#       continue;
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6773 0
	#       continue;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7544, A, 0
	jmp .L1212
	.L7544:
	.loc 7 6775 0
	#     putchar('^');
	mov A, 47
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 6776 0
	#     if (i == '$' || i == '.' || i == '/' ||
	mov A, 94
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 6779 0
	#     }
	.loc 7 6777 0
	#         i == '[' || i == '\\' || i == ']') {
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6777 0
	#         i == '[' || i == '\\' || i == ']') {
	mov A, 36
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L7549, A, 0
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6777 0
	#         i == '[' || i == '\\' || i == ']') {
	mov A, 46
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L7549:
	mov A, B
	mov B, 1
	jne .L7548, A, 0
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6777 0
	#         i == '[' || i == '\\' || i == ']') {
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L7548:
	mov A, B
	mov B, 1
	jne .L7547, A, 0
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6777 0
	#         i == '[' || i == '\\' || i == ']') {
	mov A, 91
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L7547:
	mov A, B
	mov B, 1
	jne .L7546, A, 0
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6777 0
	#         i == '[' || i == '\\' || i == ']') {
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L7546:
	mov A, B
	mov B, 1
	jne .L7545, A, 0
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6777 0
	#         i == '[' || i == '\\' || i == ']') {
	mov A, 93
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L7545:
	mov A, B
	jeq .L7550, A, 0
	.loc 7 6779 0
	#     }
	mov A, 92
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L7550:
	.loc 7 6781 0
	#     emit_line("/{s/.//\nx\ns/$/%x,/\nx\nbin_loop\n}", i);
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 6782 0
	#   }
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6782 0
	#   }
.data
	.L7551:
	.string "/{s/.//\nx\ns/$/%x,/\nx\nbin_loop\n}"
.text
	mov A, .L7551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7552:
	mov A, B
	add SP, 2
	.L1212:
	.loc 7 6772 0
	#     if (i == 10)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6782 0
	#   }
	jmp .L1211
	.L1213:
	.loc 7 6784 0
	#   emit_line("${");
.data
	.L7553:
	.string ":in_done"
.text
	mov A, .L7553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7554:
	mov A, B
	add SP, 1
	.loc 7 6785 0
	# 
.data
	.L7555:
	.string "${"
.text
	mov A, .L7555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7556:
	mov A, B
	add SP, 1
	.loc 7 6787 0
	#   emit_line("s/a,$//");
.data
	.L7557:
	.string "x"
.text
	mov A, .L7557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7558:
	mov A, B
	add SP, 1
	.loc 7 6788 0
	#   emit_line("s/.*/i=& /");
.data
	.L7559:
	.string "s/a,$//"
.text
	mov A, .L7559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7560:
	mov A, B
	add SP, 1
	.loc 7 6789 0
	#   for (int i = 0; i < 6; i++) {
.data
	.L7561:
	.string "s/.*/i=& /"
.text
	mov A, .L7561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7562:
	mov A, B
	add SP, 1
	.loc 7 6791 0
	#   }
	.loc 7 6790 0
	#     emit_line("s/$/%c=0 /", SED_REG_NAMES[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 6791 0
	#   }
	.L1214:
	.loc 7 6790 0
	#     emit_line("s/$/%c=0 /", SED_REG_NAMES[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7563, A, 0
	jmp .L7564
	.L7563:
	.loc 7 6791 0
	#   }
	jmp .L1216
	.L7564:
	.loc 7 6758 0
	# }
	mov A, SED_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6790 0
	#     emit_line("s/$/%c=0 /", SED_REG_NAMES[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6791 0
	#   }
.data
	.L7565:
	.string "s/$/%c=0 /"
.text
	mov A, .L7565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7566:
	mov A, B
	add SP, 2
	.L1215:
	.loc 7 6790 0
	#     emit_line("s/$/%c=0 /", SED_REG_NAMES[i]);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6791 0
	#   }
	jmp .L1214
	.L1216:
	.loc 7 6793 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L7567:
	.string "s/$/o= /"
.text
	mov A, .L7567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7568:
	mov A, B
	add SP, 1
	.loc 7 6795 0
	#   }
	.loc 7 6794 0
	#     emit_line("s/$/m%x=%x /", mp, data->v);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 6795 0
	#   }
	.L1217:
	.loc 7 6758 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L7569, A, 0
	jmp .L7570
	.L7569:
	.loc 7 6795 0
	#   }
	jmp .L1219
	.L7570:
	.loc 7 6758 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6794 0
	#     emit_line("s/$/m%x=%x /", mp, data->v);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6795 0
	#   }
.data
	.L7571:
	.string "s/$/m%x=%x /"
.text
	mov A, .L7571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7572:
	mov A, B
	add SP, 3
	.L1218:
	.loc 7 6794 0
	#     emit_line("s/$/m%x=%x /", mp, data->v);
	.loc 7 6758 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 6794 0
	#     emit_line("s/$/m%x=%x /", mp, data->v);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6795 0
	#   }
	jmp .L1217
	.L1219:
	.loc 7 6797 0
	# }
.data
	.L7573:
	.string "x"
.text
	mov A, .L7573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7574:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sed_emit_value:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6806 0
	#   }
	.loc 7 6801 0
	#     emit_line("G");
	.loc 7 6797 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7575, A, 0
	.loc 7 6803 0
	#               SED_REG_NAMES[v->reg], SED_REG_NAMES[v->reg]);
	.loc 7 6802 0
	#     emit_line("s/\\n[^%c]* %c=\\([^ ]*\\).*/\\1/",
.data
	.L7576:
	.string "G"
.text
	mov A, .L7576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7577
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7577:
	mov A, B
	add SP, 1
	.loc 7 6803 0
	#               SED_REG_NAMES[v->reg], SED_REG_NAMES[v->reg]);
	.loc 7 6758 0
	# }
	mov A, SED_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6803 0
	#               SED_REG_NAMES[v->reg], SED_REG_NAMES[v->reg]);
	.loc 7 6797 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6803 0
	#               SED_REG_NAMES[v->reg], SED_REG_NAMES[v->reg]);
	.loc 7 6758 0
	# }
	mov A, SED_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6803 0
	#               SED_REG_NAMES[v->reg], SED_REG_NAMES[v->reg]);
	.loc 7 6797 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6803 0
	#               SED_REG_NAMES[v->reg], SED_REG_NAMES[v->reg]);
.data
	.L7578:
	.string "s/\\n[^%c]* %c=\\([^ ]*\\).*/\\1/"
.text
	mov A, .L7578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7579:
	mov A, B
	add SP, 3
	jmp .L7580
	.L7575:
	.loc 7 6806 0
	#   }
	.loc 7 6797 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6806 0
	#   }
.data
	.L7581:
	.string "s/$/%x/"
.text
	mov A, .L7581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7582:
	mov A, B
	add SP, 2
	.L7580:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sed_emit_src:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6811 0
	# }
	.loc 7 6806 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_value
	.L7583:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sed_emit_dst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6815 0
	# }
	.loc 7 6811 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_value
	.L7584:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sed_emit_dst_src:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6821 0
	# }
	.loc 7 6819 0
	#   emit_line("s/$/ /");
	.loc 7 6815 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_dst
	.L7585:
	mov A, B
	add SP, 1
	.loc 7 6820 0
	#   sed_emit_src(inst);
.data
	.L7586:
	.string "s/$/ /"
.text
	mov A, .L7586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7587:
	mov A, B
	add SP, 1
	.loc 7 6821 0
	# }
	.loc 7 6815 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_src
	.L7588:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sed_emit_set_dst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6829 0
	# }
	.loc 7 6825 0
	#   emit_line("s/^\\([^\\n]*\\)\\n\\([^%c]* %c=\\)[^ ]*/\\2\\1/",
.data
	.L7589:
	.string "G"
.text
	mov A, .L7589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7590:
	mov A, B
	add SP, 1
	.loc 7 6826 0
	#             SED_REG_NAMES[inst->dst.reg], SED_REG_NAMES[inst->dst.reg]);
	.loc 7 6758 0
	# }
	mov A, SED_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6826 0
	#             SED_REG_NAMES[inst->dst.reg], SED_REG_NAMES[inst->dst.reg]);
	.loc 7 6821 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6826 0
	#             SED_REG_NAMES[inst->dst.reg], SED_REG_NAMES[inst->dst.reg]);
	.loc 7 6758 0
	# }
	mov A, SED_REG_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6826 0
	#             SED_REG_NAMES[inst->dst.reg], SED_REG_NAMES[inst->dst.reg]);
	.loc 7 6821 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6826 0
	#             SED_REG_NAMES[inst->dst.reg], SED_REG_NAMES[inst->dst.reg]);
.data
	.L7591:
	.string "s/^\\([^\\n]*\\)\\n\\([^%c]* %c=\\)[^ ]*/\\2\\1/"
.text
	mov A, .L7591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7592:
	mov A, B
	add SP, 3
	.loc 7 6828 0
	#   emit_line("s/.*//");
.data
	.L7593:
	.string "x"
.text
	mov A, .L7593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7594:
	mov A, B
	add SP, 1
	.loc 7 6829 0
	# }
.data
	.L7595:
	.string "s/.*//"
.text
	mov A, .L7595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7596:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S1.id:
	.long 0
	.text
sed_emit_add:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6857 0
	# }
	.loc 7 6834 0
	#   emit_line(" s/\\(.*\\) \\([0-9a-f]*\\)"
	.loc 7 6829 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_dst_src
	.L7597:
	mov A, B
	add SP, 1
	.loc 7 6835 0
	#             "/\\1@ \\2@ fedcba9876543210 fedcba9876543210;/");
.data
	.L7598:
	.string " s/\\(.*\\) \\([0-9a-f]*\\)/\\1@ \\2@ fedcba9876543210 fedcba9876543210;/"
.text
	mov A, .L7598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7599:
	mov A, B
	add SP, 1
	.loc 7 6837 0
	#   emit_line(" s/\\(.\\)@\\([^@]*\\)\\(.\\)@\\(.\\)\\? "
	.loc 7 6833 0
	#   sed_emit_dst_src(inst);
	mov B, .S1.id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6837 0
	#   emit_line(" s/\\(.\\)@\\([^@]*\\)\\(.\\)@\\(.\\)\\? "
.data
	.L7600:
	.string ":add_loop_%d"
.text
	mov A, .L7600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7601:
	mov A, B
	add SP, 2
	.loc 7 6838 0
	#             "\\([^ ]*\\1\\([^ ]*\\)\\) [^;]*\\(\\3[^;]*\\);"
.data
	.L7602:
	.string " s/\\(.\\)@\\([^@]*\\)\\(.\\)@\\(.\\)\\? \\([^ ]*\\1\\([^ ]*\\)\\) [^;]*\\(\\3[^;]*\\);/@\\2; \\4\\6\\7\\5 \\5 \\5;/"
.text
	mov A, .L7602
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7603:
	mov A, B
	add SP, 1
	.loc 7 6841 0
	#             "[0-9a-f]* \\([^;]*\\);\\(.*\\)/@\\3 \\4;\\1\\5/");
.data
	.L7604:
	.string " s/; .\\{16\\}\\(.\\)\\([0-9a-f]\\{15\\}\\([0-9a-f]\\)\\)\\?[0-9a-f]* \\([^;]*\\);\\(.*\\)/@\\3 \\4;\\1\\5/"
.text
	mov A, .L7604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7605:
	mov A, B
	add SP, 1
	.loc 7 6844 0
	#   emit_line("  s/^@/0@/");
.data
	.L7606:
	.string " /^@ @/!{"
.text
	mov A, .L7606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7607
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7607:
	mov A, B
	add SP, 1
	.loc 7 6845 0
	#   emit_line("  s/ @/ 0@/");
.data
	.L7608:
	.string "  s/^@/0@/"
.text
	mov A, .L7608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7609
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7609:
	mov A, B
	add SP, 1
	.loc 7 6846 0
	#   emit_line("  badd_loop_%d", id);
.data
	.L7610:
	.string "  s/ @/ 0@/"
.text
	mov A, .L7610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7611:
	mov A, B
	add SP, 1
	.loc 7 6847 0
	#   emit_line(" }");
	.loc 7 6833 0
	#   sed_emit_dst_src(inst);
	mov B, .S1.id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6847 0
	#   emit_line(" }");
.data
	.L7612:
	.string "  badd_loop_%d"
.text
	mov A, .L7612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7613:
	mov A, B
	add SP, 2
	.loc 7 6848 0
	# 
.data
	.L7614:
	.string " }"
.text
	mov A, .L7614
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7615
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7615:
	mov A, B
	add SP, 1
	.loc 7 6850 0
	#   emit_line(" s/.*;//");
.data
	.L7616:
	.string " s/@ @. .*;/;1/"
.text
	mov A, .L7616
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7617
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7617:
	mov A, B
	add SP, 1
	.loc 7 6851 0
	#   emit_line(" s/.*\\(......\\)$/\\1/");
.data
	.L7618:
	.string " s/.*;//"
.text
	mov A, .L7618
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7619
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7619:
	mov A, B
	add SP, 1
	.loc 7 6852 0
	#   emit_line(" s/^0*\\([0-9a-f]\\)/\\1/");
.data
	.L7620:
	.string " s/.*\\(......\\)$/\\1/"
.text
	mov A, .L7620
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7621
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7621:
	mov A, B
	add SP, 1
	.loc 7 6853 0
	# 
.data
	.L7622:
	.string " s/^0*\\([0-9a-f]\\)/\\1/"
.text
	mov A, .L7622
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7623
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7623:
	mov A, B
	add SP, 1
	.loc 7 6855 0
	# 
	.loc 7 6829 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7624
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_set_dst
	.L7624:
	mov A, B
	add SP, 1
	.loc 7 6857 0
	# }
	.loc 7 6833 0
	#   sed_emit_dst_src(inst);
	mov B, .S1.id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, .S1.id
	store A, B
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S2.id:
	.long 0
	.text
sed_emit_sub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6886 0
	# }
	.loc 7 6862 0
	#   emit_line("s/^/1000000/");
	.loc 7 6857 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7625
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_dst_src
	.L7625:
	mov A, B
	add SP, 1
	.loc 7 6863 0
	#   emit_line(" s/\\(.*\\) \\([0-9a-f]*\\)"
.data
	.L7626:
	.string "s/^/1000000/"
.text
	mov A, .L7626
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7627
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7627:
	mov A, B
	add SP, 1
	.loc 7 6864 0
	#             "/\\1@ \\2@x fedcba9876543210 0123456789abcdef;@\\1 \\2/");
.data
	.L7628:
	.string " s/\\(.*\\) \\([0-9a-f]*\\)/\\1@ \\2@x fedcba9876543210 0123456789abcdef;@\\1 \\2/"
.text
	mov A, .L7628
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7629
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7629:
	mov A, B
	add SP, 1
	.loc 7 6866 0
	#   emit_line(" s/\\(.\\)@\\([^@]*\\)\\(.\\)@\\(.\\)\\? "
	.loc 7 6861 0
	#   sed_emit_dst_src(inst);
	mov B, .S2.id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6866 0
	#   emit_line(" s/\\(.\\)@\\([^@]*\\)\\(.\\)@\\(.\\)\\? "
.data
	.L7630:
	.string ":sub_loop_%d"
.text
	mov A, .L7630
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7631:
	mov A, B
	add SP, 2
	.loc 7 6867 0
	#             "\\([^ ]*\\1\\([^ ]*\\)\\) \\([^;]*\\3\\([^;]*\\)\\);"
.data
	.L7632:
	.string " s/\\(.\\)@\\([^@]*\\)\\(.\\)@\\(.\\)\\? \\([^ ]*\\1\\([^ ]*\\)\\) \\([^;]*\\3\\([^;]*\\)\\);/@\\2; \\4\\8\\1\\6\\5 \\5 \\7;/"
.text
	mov A, .L7632
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7633
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7633:
	mov A, B
	add SP, 1
	.loc 7 6870 0
	#             "[0-9a-f]* \\(.*\\);\\(.*\\)/@\\3 \\4;\\1\\5/");
.data
	.L7634:
	.string " s/; .\\{16\\}\\(.\\)\\([0-9a-f]\\{15\\}\\([^ ]\\)\\)\\?[0-9a-f]* \\(.*\\);\\(.*\\)/@\\3 \\4;\\1\\5/"
.text
	mov A, .L7634
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7635
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7635:
	mov A, B
	add SP, 1
	.loc 7 6873 0
	#   emit_line("  s/^@/0@/");
.data
	.L7636:
	.string " /^@ @/!{"
.text
	mov A, .L7636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7637:
	mov A, B
	add SP, 1
	.loc 7 6874 0
	#   emit_line("  s/ @/ 0@/");
.data
	.L7638:
	.string "  s/^@/0@/"
.text
	mov A, .L7638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7639
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7639:
	mov A, B
	add SP, 1
	.loc 7 6875 0
	#   emit_line("  bsub_loop_%d", id);
.data
	.L7640:
	.string "  s/ @/ 0@/"
.text
	mov A, .L7640
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7641:
	mov A, B
	add SP, 1
	.loc 7 6876 0
	#   emit_line(" }");
	.loc 7 6861 0
	#   sed_emit_dst_src(inst);
	mov B, .S2.id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6876 0
	#   emit_line(" }");
.data
	.L7642:
	.string "  bsub_loop_%d"
.text
	mov A, .L7642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7643:
	mov A, B
	add SP, 2
	.loc 7 6877 0
	# 
.data
	.L7644:
	.string " }"
.text
	mov A, .L7644
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7645:
	mov A, B
	add SP, 1
	.loc 7 6879 0
	#   emit_line(" s/@.*//");
.data
	.L7646:
	.string " s/@ @. .*;/;/"
.text
	mov A, .L7646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7647:
	mov A, B
	add SP, 1
	.loc 7 6880 0
	#   emit_line(" s/.*\\(......\\)$/\\1/");
.data
	.L7648:
	.string " s/@.*//"
.text
	mov A, .L7648
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7649:
	mov A, B
	add SP, 1
	.loc 7 6881 0
	#   emit_line(" s/^0*\\([0-9a-f]\\)/\\1/");
.data
	.L7650:
	.string " s/.*\\(......\\)$/\\1/"
.text
	mov A, .L7650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7651:
	mov A, B
	add SP, 1
	.loc 7 6882 0
	# 
.data
	.L7652:
	.string " s/^0*\\([0-9a-f]\\)/\\1/"
.text
	mov A, .L7652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7653
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7653:
	mov A, B
	add SP, 1
	.loc 7 6884 0
	# 
	.loc 7 6857 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_set_dst
	.L7654:
	mov A, B
	add SP, 1
	.loc 7 6886 0
	# }
	.loc 7 6861 0
	#   sed_emit_dst_src(inst);
	mov B, .S2.id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, .S2.id
	store A, B
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S3.id:
	.long 0
	.text
sed_emit_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 6935 0
	#   }
	.loc 7 6891 0
	#   sed_emit_dst_src(inst);
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6886 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L7655:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 6892 0
	#   if (op == JLT || op == JLE) {
	.loc 7 6886 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_dst_src
	.L7656:
	mov A, B
	add SP, 1
	.loc 7 6895 0
	#   }
	.loc 7 6893 0
	#     emit_line("s/\\(.*\\) \\(.*\\)/\\2 \\1/");
	.loc 7 6891 0
	#   sed_emit_dst_src(inst);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6893 0
	#     emit_line("s/\\(.*\\) \\(.*\\)/\\2 \\1/");
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L7657, A, 0
	.loc 7 6893 0
	#     emit_line("s/\\(.*\\) \\(.*\\)/\\2 \\1/");
	.loc 7 6891 0
	#   sed_emit_dst_src(inst);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6893 0
	#     emit_line("s/\\(.*\\) \\(.*\\)/\\2 \\1/");
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L7657:
	mov A, B
	jeq .L7658, A, 0
	.loc 7 6895 0
	#   }
	.loc 7 6894 0
	#     op = op == JLT ? JGT : JGE;
.data
	.L7659:
	.string "s/\\(.*\\) \\(.*\\)/\\2 \\1/"
.text
	mov A, .L7659
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7660
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7660:
	mov A, B
	add SP, 1
	.loc 7 6895 0
	#   }
	.loc 7 6891 0
	#   sed_emit_dst_src(inst);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6895 0
	#   }
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7661, A, 0
	mov A, 11
	jmp .L7662
	.L7661:
	mov A, 13
	.L7662:
	mov B, BP
	add B, 16777215
	store A, B
	.L7658:
	.loc 7 6935 0
	#   }
	.loc 7 6891 0
	#   sed_emit_dst_src(inst);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 6935 0
	#   }
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7663, A, 0
	jmp .L1221
	.L7663:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7664, A, 0
	jmp .L1222
	.L7664:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7665, A, 0
	jmp .L1223
	.L7665:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7666, A, 0
	jmp .L1224
	.L7666:
	jmp .L1220
	.loc 7 6899 0
	#     emit_line("s/^\\(.*\\) \\1$/1/");
	.L1221:
.data
	.L7667:
	.string "s/^\\(.*\\) \\1$/1/"
.text
	mov A, .L7667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7668:
	mov A, B
	add SP, 1
	.loc 7 6901 0
	#     break;
.data
	.L7669:
	.string "s/^.* .*$/0/"
.text
	mov A, .L7669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7670:
	mov A, B
	add SP, 1
	.loc 7 6902 0
	# 
	jmp .L1220
	.loc 7 6904 0
	#     emit_line("s/^\\(.*\\) \\1$/0/");
	.L1222:
.data
	.L7671:
	.string "s/^\\(.*\\) \\1$/0/"
.text
	mov A, .L7671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7672:
	mov A, B
	add SP, 1
	.loc 7 6906 0
	#     break;
.data
	.L7673:
	.string "s/^.* .*$/1/"
.text
	mov A, .L7673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7674:
	mov A, B
	add SP, 1
	.loc 7 6907 0
	# 
	jmp .L1220
	.loc 7 6909 0
	#   case JGT:
	.L1223:
	.L1224:
.data
	.L7675:
	.string "s/^..* $/1/"
.text
	mov A, .L7675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7676:
	mov A, B
	add SP, 1
	.loc 7 6912 0
	#     emit_line("s/^....* ..$/1/");
.data
	.L7677:
	.string "s/^...* .$/1/"
.text
	mov A, .L7677
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7678:
	mov A, B
	add SP, 1
	.loc 7 6913 0
	#     emit_line("s/^.....* ...$/1/");
.data
	.L7679:
	.string "s/^....* ..$/1/"
.text
	mov A, .L7679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7680:
	mov A, B
	add SP, 1
	.loc 7 6914 0
	#     emit_line("s/^......* ....$/1/");
.data
	.L7681:
	.string "s/^.....* ...$/1/"
.text
	mov A, .L7681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7682:
	mov A, B
	add SP, 1
	.loc 7 6915 0
	#     emit_line("s/^...... .....$/1/");
.data
	.L7683:
	.string "s/^......* ....$/1/"
.text
	mov A, .L7683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7684:
	mov A, B
	add SP, 1
	.loc 7 6916 0
	#     emit_line("s/^ ..*$/0/");
.data
	.L7685:
	.string "s/^...... .....$/1/"
.text
	mov A, .L7685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7686:
	mov A, B
	add SP, 1
	.loc 7 6917 0
	#     emit_line("s/^. ...*$/0/");
.data
	.L7687:
	.string "s/^ ..*$/0/"
.text
	mov A, .L7687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7688:
	mov A, B
	add SP, 1
	.loc 7 6918 0
	#     emit_line("s/^.. ....*$/0/");
.data
	.L7689:
	.string "s/^. ...*$/0/"
.text
	mov A, .L7689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7690:
	mov A, B
	add SP, 1
	.loc 7 6919 0
	#     emit_line("s/^... .....*$/0/");
.data
	.L7691:
	.string "s/^.. ....*$/0/"
.text
	mov A, .L7691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7692:
	mov A, B
	add SP, 1
	.loc 7 6920 0
	#     emit_line("s/^.... ......*$/0/");
.data
	.L7693:
	.string "s/^... .....*$/0/"
.text
	mov A, .L7693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7694:
	mov A, B
	add SP, 1
	.loc 7 6921 0
	#     emit_line("s/^..... ......$/0/");
.data
	.L7695:
	.string "s/^.... ......*$/0/"
.text
	mov A, .L7695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7696:
	mov A, B
	add SP, 1
	.loc 7 6922 0
	#     emit_line(":cmp_loop_%d", id);
.data
	.L7697:
	.string "s/^..... ......$/0/"
.text
	mov A, .L7697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7698:
	mov A, B
	add SP, 1
	.loc 7 6923 0
	#     emit_line("/^\\(.\\).* \\1/{");
	.loc 7 6890 0
	#   uint op = normalize_cond(inst->op, false);
	mov B, .S3.id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6923 0
	#     emit_line("/^\\(.\\).* \\1/{");
.data
	.L7699:
	.string ":cmp_loop_%d"
.text
	mov A, .L7699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7700:
	mov A, B
	add SP, 2
	.loc 7 6924 0
	#     emit_line(" s/^\\(.\\)\\(.*\\) \\1/\\2 /");
.data
	.L7701:
	.string "/^\\(.\\).* \\1/{"
.text
	mov A, .L7701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7702
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7702:
	mov A, B
	add SP, 1
	.loc 7 6925 0
	#     emit_line(" bcmp_loop_%d", id);
.data
	.L7703:
	.string " s/^\\(.\\)\\(.*\\) \\1/\\2 /"
.text
	mov A, .L7703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7704:
	mov A, B
	add SP, 1
	.loc 7 6926 0
	#     emit_line("}");
	.loc 7 6890 0
	#   uint op = normalize_cond(inst->op, false);
	mov B, .S3.id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6926 0
	#     emit_line("}");
.data
	.L7705:
	.string " bcmp_loop_%d"
.text
	mov A, .L7705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7706:
	mov A, B
	add SP, 2
	.loc 7 6927 0
	#     emit_line("s/$/;fedcba9876543210/");
.data
	.L7707:
	.string "}"
.text
	mov A, .L7707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7708:
	mov A, B
	add SP, 1
	.loc 7 6928 0
	#     emit_line("s/^\\(.\\).* \\(.\\).*;.*\\1.*\\2.*/1/");
.data
	.L7709:
	.string "s/$/;fedcba9876543210/"
.text
	mov A, .L7709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7710
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7710:
	mov A, B
	add SP, 1
	.loc 7 6929 0
	#     if (op == JGE)
.data
	.L7711:
	.string "s/^\\(.\\).* \\(.\\).*;.*\\1.*\\2.*/1/"
.text
	mov A, .L7711
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7712:
	mov A, B
	add SP, 1
	.loc 7 6930 0
	#       emit_line("s/^\\(.*\\) \\1;.*/1/");
	.loc 7 6891 0
	#   sed_emit_dst_src(inst);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6930 0
	#       emit_line("s/^\\(.*\\) \\1;.*/1/");
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7713, A, 0
	.loc 7 6930 0
	#       emit_line("s/^\\(.*\\) \\1;.*/1/");
.data
	.L7714:
	.string "s/^\\(.*\\) \\1;.*/1/"
.text
	mov A, .L7714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7715
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7715:
	mov A, B
	add SP, 1
	.L7713:
	.loc 7 6932 0
	#     emit_line("s/;.*//");
.data
	.L7716:
	.string "s/^.* .*/0/"
.text
	mov A, .L7716
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7717:
	mov A, B
	add SP, 1
	.loc 7 6933 0
	#     id++;
.data
	.L7718:
	.string "s/;.*//"
.text
	mov A, .L7718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7719
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7719:
	mov A, B
	add SP, 1
	.loc 7 6934 0
	#     break;
	.loc 7 6890 0
	#   uint op = normalize_cond(inst->op, false);
	mov B, .S3.id
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, .S3.id
	store A, B
	load A, SP
	add SP, 1
	.loc 7 6935 0
	#   }
	jmp .L1220
	.L1220:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sed_emit_jmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 6944 0
	#   }
	.loc 7 6940 0
	#     sed_emit_value(&inst->jmp);
	.loc 7 6935 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7720, A, 0
	.loc 7 6942 0
	#   } else {
	.loc 7 6941 0
	#     emit_line("bjmp_reg");
	.loc 7 6935 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7721
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_value
	.L7721:
	mov A, B
	add SP, 1
	.loc 7 6942 0
	#   } else {
.data
	.L7722:
	.string "bjmp_reg"
.text
	mov A, .L7722
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7723:
	mov A, B
	add SP, 1
	jmp .L7724
	.L7720:
	.loc 7 6944 0
	#   }
	.loc 7 6935 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 6944 0
	#   }
.data
	.L7725:
	.string "bpc_%x"
.text
	mov A, .L7725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7726:
	mov A, B
	add SP, 2
	.L7724:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sed_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7045 0
	#     error("oops");
	.loc 7 6949 0
	#   case MOV:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7727, A, 0
	jmp .L1226
	.L7727:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7728, A, 0
	jmp .L1227
	.L7728:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7729, A, 0
	jmp .L1228
	.L7729:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7730, A, 0
	jmp .L1229
	.L7730:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7731, A, 0
	jmp .L1230
	.L7731:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7732, A, 0
	jmp .L1231
	.L7732:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7733, A, 0
	jmp .L1232
	.L7733:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7734, A, 0
	jmp .L1233
	.L7734:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7735, A, 0
	jmp .L1234
	.L7735:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7736, A, 0
	jmp .L1235
	.L7736:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7737, A, 0
	jmp .L1236
	.L7737:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7738, A, 0
	jmp .L1237
	.L7738:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7739, A, 0
	jmp .L1238
	.L7739:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7740, A, 0
	jmp .L1239
	.L7740:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7741, A, 0
	jmp .L1240
	.L7741:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7742, A, 0
	jmp .L1241
	.L7742:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7743, A, 0
	jmp .L1242
	.L7743:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7744, A, 0
	jmp .L1243
	.L7744:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7745, A, 0
	jmp .L1244
	.L7745:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7746, A, 0
	jmp .L1245
	.L7746:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7747, A, 0
	jmp .L1246
	.L7747:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7748, A, 0
	jmp .L1247
	.L7748:
	jmp .L1248
	.loc 7 6950 0
	#     sed_emit_src(inst);
	.L1226:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_src
	.L7749:
	mov A, B
	add SP, 1
	.loc 7 6952 0
	#     break;
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_set_dst
	.L7750:
	mov A, B
	add SP, 1
	.loc 7 6953 0
	# 
	jmp .L1225
	.loc 7 6955 0
	#     sed_emit_add(inst);
	.L1227:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_add
	.L7751:
	mov A, B
	add SP, 1
	.loc 7 6957 0
	# 
	jmp .L1225
	.loc 7 6959 0
	#     sed_emit_sub(inst);
	.L1228:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_sub
	.L7752:
	mov A, B
	add SP, 1
	.loc 7 6961 0
	# 
	jmp .L1225
	.loc 7 6963 0
	#     sed_emit_src(inst);
	.L1229:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_src
	.L7753:
	mov A, B
	add SP, 1
	.loc 7 6965 0
	#     emit_line("s/^\\([^\\n]*\\)\\n.*m\\1=\\([^ ]*\\).*/@\\2/");
.data
	.L7754:
	.string "G"
.text
	mov A, .L7754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7755:
	mov A, B
	add SP, 1
	.loc 7 6966 0
	#     emit_line("/^@/!s/.*/0/");
.data
	.L7756:
	.string "s/^\\([^\\n]*\\)\\n.*m\\1=\\([^ ]*\\).*/@\\2/"
.text
	mov A, .L7756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7757:
	mov A, B
	add SP, 1
	.loc 7 6967 0
	#     emit_line("s/^@//");
.data
	.L7758:
	.string "/^@/!s/.*/0/"
.text
	mov A, .L7758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7759:
	mov A, B
	add SP, 1
	.loc 7 6968 0
	#     sed_emit_set_dst(inst);
.data
	.L7760:
	.string "s/^@//"
.text
	mov A, .L7760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7761:
	mov A, B
	add SP, 1
	.loc 7 6969 0
	#     break;
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_set_dst
	.L7762:
	mov A, B
	add SP, 1
	.loc 7 6970 0
	# 
	jmp .L1225
	.loc 7 6972 0
	#     sed_emit_dst_src(inst);
	.L1230:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_dst_src
	.L7763:
	mov A, B
	add SP, 1
	.loc 7 6974 0
	#     emit_line("/ \\([^\\n]*\\)\\n.*m\\1=/"
.data
	.L7764:
	.string "G"
.text
	mov A, .L7764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7765:
	mov A, B
	add SP, 1
	.loc 7 6975 0
	#               "s/^\\([^ ]*\\) \\([^\\n]*\\)\\n\\(.*m\\2=\\)[^ ]*/@\\3\\1/");
.data
	.L7766:
	.string "/ \\([^\\n]*\\)\\n.*m\\1=/s/^\\([^ ]*\\) \\([^\\n]*\\)\\n\\(.*m\\2=\\)[^ ]*/@\\3\\1/"
.text
	mov A, .L7766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7767:
	mov A, B
	add SP, 1
	.loc 7 6977 0
	#               "s/^\\([^ ]*\\) \\([^\\n]*\\)\\n\\(.*\\)/\\3m\\2=\\1 /");
.data
	.L7768:
	.string "/^@/!s/^\\([^ ]*\\) \\([^\\n]*\\)\\n\\(.*\\)/\\3m\\2=\\1 /"
.text
	mov A, .L7768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7769:
	mov A, B
	add SP, 1
	.loc 7 6979 0
	#     emit_line("x");
.data
	.L7770:
	.string "s/^@//"
.text
	mov A, .L7770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7771:
	mov A, B
	add SP, 1
	.loc 7 6980 0
	#     emit_line("s/.*//");
.data
	.L7772:
	.string "x"
.text
	mov A, .L7772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7773:
	mov A, B
	add SP, 1
	.loc 7 6981 0
	#     break;
.data
	.L7774:
	.string "s/.*//"
.text
	mov A, .L7774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7775:
	mov A, B
	add SP, 1
	.loc 7 6982 0
	# 
	jmp .L1225
	.loc 7 6984 0
	#     sed_emit_src(inst);
	.L1231:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_src
	.L7776:
	mov A, B
	add SP, 1
	.loc 7 6986 0
	#     emit_line("s/.*\\(..\\)$/\\1/");
.data
	.L7777:
	.string "s/^/0/"
.text
	mov A, .L7777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7778:
	mov A, B
	add SP, 1
	.loc 7 6987 0
	#     emit_line("G");
.data
	.L7779:
	.string "s/.*\\(..\\)$/\\1/"
.text
	mov A, .L7779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7780:
	mov A, B
	add SP, 1
	.loc 7 6988 0
	#     emit_line("s/^\\(..\\)\\n\\(.*o=[^ ]*\\)/\\2\\1/");
.data
	.L7781:
	.string "G"
.text
	mov A, .L7781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7782:
	mov A, B
	add SP, 1
	.loc 7 6989 0
	#     emit_line("x");
.data
	.L7783:
	.string "s/^\\(..\\)\\n\\(.*o=[^ ]*\\)/\\2\\1/"
.text
	mov A, .L7783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7784:
	mov A, B
	add SP, 1
	.loc 7 6990 0
	#     emit_line("s/.*//");
.data
	.L7785:
	.string "x"
.text
	mov A, .L7785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7786:
	mov A, B
	add SP, 1
	.loc 7 6991 0
	#     break;
.data
	.L7787:
	.string "s/.*//"
.text
	mov A, .L7787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7788:
	mov A, B
	add SP, 1
	.loc 7 6992 0
	# 
	jmp .L1225
	.loc 7 7004 0
	#   }
	.loc 7 6994 0
	#     emit_line("g");
	.L1232:
	.loc 7 7004 0
	#   }
	.loc 7 6995 0
	#     emit_line("/i= /s/.*/0/");
.data
	.L7789:
	.string "g"
.text
	mov A, .L7789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7790:
	mov A, B
	add SP, 1
	.loc 7 6996 0
	#     emit_line("/i=[^ ]/{");
.data
	.L7791:
	.string "/i= /s/.*/0/"
.text
	mov A, .L7791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7792
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7792:
	mov A, B
	add SP, 1
	.loc 7 6997 0
	#     emit_line("s/.*i=\\([^,]*\\),.*/\\1/");
.data
	.L7793:
	.string "/i=[^ ]/{"
.text
	mov A, .L7793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7794:
	mov A, B
	add SP, 1
	.loc 7 6998 0
	#     emit_line("x");
.data
	.L7795:
	.string "s/.*i=\\([^,]*\\),.*/\\1/"
.text
	mov A, .L7795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7796:
	mov A, B
	add SP, 1
	.loc 7 6999 0
	#     emit_line("s/i=[^,]*,/i=/");
.data
	.L7797:
	.string "x"
.text
	mov A, .L7797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7798:
	mov A, B
	add SP, 1
	.loc 7 7000 0
	#     emit_line("x");
.data
	.L7799:
	.string "s/i=[^,]*,/i=/"
.text
	mov A, .L7799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7800:
	mov A, B
	add SP, 1
	.loc 7 7001 0
	#     emit_line("}");
.data
	.L7801:
	.string "x"
.text
	mov A, .L7801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7802
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7802:
	mov A, B
	add SP, 1
	.loc 7 7002 0
	#     sed_emit_set_dst(inst);
.data
	.L7803:
	.string "}"
.text
	mov A, .L7803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7804:
	mov A, B
	add SP, 1
	.loc 7 7003 0
	#     break;
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_set_dst
	.L7805:
	mov A, B
	add SP, 1
	.loc 7 7004 0
	#   }
	jmp .L1225
	.loc 7 7007 0
	#     emit_line("bexit");
	.L1233:
.data
	.L7806:
	.string "bexit"
.text
	mov A, .L7806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7807:
	mov A, B
	add SP, 1
	.loc 7 7009 0
	# 
	jmp .L1225
	.loc 7 7011 0
	#     //emit_line("x");
	.L1234:
	jmp .L1225
	.loc 7 7017 0
	#   case NE:
	.L1235:
	.L1236:
	.L1237:
	.L1238:
	.L1239:
	.L1240:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_cmp
	.L7808:
	mov A, B
	add SP, 1
	.loc 7 7024 0
	#     break;
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_set_dst
	.L7809:
	mov A, B
	add SP, 1
	.loc 7 7025 0
	# 
	jmp .L1225
	.loc 7 7027 0
	#   case JNE:
	.L1241:
	.L1242:
	.L1243:
	.L1244:
	.L1245:
	.L1246:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_cmp
	.L7810:
	mov A, B
	add SP, 1
	.loc 7 7034 0
	#     emit_line(" s/.//");
.data
	.L7811:
	.string "/^1$/{"
.text
	mov A, .L7811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7812:
	mov A, B
	add SP, 1
	.loc 7 7035 0
	#     sed_emit_jmp(inst);
.data
	.L7813:
	.string " s/.//"
.text
	mov A, .L7813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7814:
	mov A, B
	add SP, 1
	.loc 7 7036 0
	#     emit_line("}");
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_jmp
	.L7815:
	mov A, B
	add SP, 1
	.loc 7 7037 0
	#     emit_line("s/.//");
.data
	.L7816:
	.string "}"
.text
	mov A, .L7816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7817:
	mov A, B
	add SP, 1
	.loc 7 7038 0
	#     break;
.data
	.L7818:
	.string "s/.//"
.text
	mov A, .L7818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7819:
	mov A, B
	add SP, 1
	.loc 7 7039 0
	# 
	jmp .L1225
	.loc 7 7041 0
	#     sed_emit_jmp(inst);
	.L1247:
	.loc 7 6944 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_jmp
	.L7820:
	mov A, B
	add SP, 1
	.loc 7 7043 0
	# 
	jmp .L1225
	.loc 7 7045 0
	#     error("oops");
	.L1248:
.data
	.L7821:
	.string "oops"
.text
	mov A, .L7821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L7822:
	mov A, B
	add SP, 1
	.L1225:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S4.WIDTH:
	.long 4096
	.long 256
	.long 16
	.long 1
	.text
sed_emit_jmp_table_rec:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 7063 0
	#     }
	.loc 7 7054 0
	#   for (int i = 0; i < 16 && pc <= last_pc; i++, pc += w) {
	mov A, 0
	mov B, SP
	.loc 7 7051 0
	#     4096, 256, 16, 1
	mov A, .S4.WIDTH
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7063 0
	#     }
	.loc 7 7055 0
	#     reg[depth] = i > 9 ? 'a' + i - 10 : '0' + i;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 7063 0
	#     }
	.L1249:
	.loc 7 7055 0
	#     reg[depth] = i > 9 ? 'a' + i - 10 : '0' + i;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 0
	jeq .L7823, A, 0
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L7823:
	mov A, B
	jeq .L7824, A, 0
	jmp .L7825
	.L7824:
	.loc 7 7063 0
	#     }
	jmp .L1251
	.L7825:
	.loc 7 7056 0
	#     reg[depth+1] = 0;
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7055 0
	#     reg[depth] = i > 9 ? 'a' + i - 10 : '0' + i;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7826, A, 0
	.loc 7 7056 0
	#     reg[depth+1] = 0;
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7055 0
	#     reg[depth] = i > 9 ? 'a' + i - 10 : '0' + i;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7056 0
	#     reg[depth+1] = 0;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L7827
	.L7826:
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7055 0
	#     reg[depth] = i > 9 ? 'a' + i - 10 : '0' + i;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	.L7827:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7056 0
	#     reg[depth+1] = 0;
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7057 0
	#     if (depth == 3) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7057 0
	#     if (depth == 3) {
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7057 0
	#     if (depth == 3) {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7063 0
	#     }
	.loc 7 7058 0
	#       emit_line("/^%s$/bpc_%x", reg, pc);
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7058 0
	#       emit_line("/^%s$/bpc_%x", reg, pc);
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7828, A, 0
	.loc 7 7059 0
	#     } else {
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7059 0
	#     } else {
.data
	.L7829:
	.string "/^%s$/bpc_%x"
.text
	mov A, .L7829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7830:
	mov A, B
	add SP, 3
	jmp .L7831
	.L7828:
	.loc 7 7063 0
	#     }
	.loc 7 7061 0
	#       sed_emit_jmp_table_rec(depth + 1, reg, pc, last_pc);
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7061 0
	#       sed_emit_jmp_table_rec(depth + 1, reg, pc, last_pc);
.data
	.L7832:
	.string "/^%s/{"
.text
	mov A, .L7832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7833:
	mov A, B
	add SP, 2
	.loc 7 7062 0
	#       emit_line("}");
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7062 0
	#       emit_line("}");
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7062 0
	#       emit_line("}");
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_jmp_table_rec
	.L7834:
	mov A, B
	add SP, 4
	.loc 7 7063 0
	#     }
.data
	.L7835:
	.string "}"
.text
	mov A, .L7835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7836:
	mov A, B
	add SP, 1
	.L7831:
	.L1250:
	.loc 7 7055 0
	#     reg[depth] = i > 9 ? 'a' + i - 10 : '0' + i;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7045 0
	#     error("oops");
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7054 0
	#   for (int i = 0; i < 16 && pc <= last_pc; i++, pc += w) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 4
	store A, B
	.loc 7 7063 0
	#     }
	jmp .L1249
	.L1251:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sed_emit_jmp_table:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 7074 0
	# }
	.loc 7 7069 0
	#   emit_line(":jmp_reg");
.data
	.L7837:
	.string ""
.text
	mov A, .L7837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7838:
	mov A, B
	add SP, 1
	.loc 7 7070 0
	#   emit_line("s/^/000/");
.data
	.L7839:
	.string ":jmp_reg"
.text
	mov A, .L7839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7840:
	mov A, B
	add SP, 1
	.loc 7 7071 0
	#   emit_line("s/.*\\(....\\)/\\1/");
.data
	.L7841:
	.string "s/^/000/"
.text
	mov A, .L7841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7842:
	mov A, B
	add SP, 1
	.loc 7 7072 0
	#   char reg[5];
.data
	.L7843:
	.string "s/.*\\(....\\)/\\1/"
.text
	mov A, .L7843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7844:
	mov A, B
	add SP, 1
	.loc 7 7073 0
	#   sed_emit_jmp_table_rec(0, reg, 0, last_pc);
	.loc 7 7074 0
	# }
	.loc 7 7063 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7074 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7073 0
	#   sed_emit_jmp_table_rec(0, reg, 0, last_pc);
	mov A, BP
	add A, 16777211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7074 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_jmp_table_rec
	.L7845:
	mov A, B
	add SP, 4
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_sed:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 9
	.loc 7 7123 0
	# }
	.loc 7 7078 0
	# 
	.loc 7 7074 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_init_state
	.L7846:
	mov A, B
	add SP, 1
	.loc 7 7080 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7088 0
	#   }
	.loc 7 7081 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 7074 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7088 0
	#   }
	.L1252:
	.loc 7 7081 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L7847, A, 0
	jmp .L7848
	.L7847:
	.loc 7 7088 0
	#   }
	jmp .L1254
	.L7848:
	.loc 7 7085 0
	#     }
	.loc 7 7082 0
	#       emit_line("");
	.loc 7 7080 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7082 0
	#       emit_line("");
	.loc 7 7081 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L7849, A, 0
	.loc 7 7085 0
	#     }
	.loc 7 7083 0
	#       emit_line(":pc_%x", inst->pc);
.data
	.L7850:
	.string ""
.text
	mov A, .L7850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7851:
	mov A, B
	add SP, 1
	.loc 7 7084 0
	#       emit_line("s/.*//");
	.loc 7 7081 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7084 0
	#       emit_line("s/.*//");
.data
	.L7852:
	.string ":pc_%x"
.text
	mov A, .L7852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7853:
	mov A, B
	add SP, 2
	.loc 7 7085 0
	#     }
.data
	.L7854:
	.string "s/.*//"
.text
	mov A, .L7854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7855:
	mov A, B
	add SP, 1
	.L7849:
	.loc 7 7087 0
	#     sed_emit_inst(inst);
	.loc 7 7081 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7088 0
	#   }
	.loc 7 7081 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_inst
	.L7856:
	mov A, B
	add SP, 1
	.loc 7 7088 0
	#   }
	.L1253:
	.loc 7 7081 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7088 0
	#   }
	jmp .L1252
	.L1254:
	.loc 7 7091 0
	# 
	.loc 7 7080 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sed_emit_jmp_table
	.L7857:
	mov A, B
	add SP, 1
	.loc 7 7093 0
	#   emit_line(":exit");
.data
	.L7858:
	.string ""
.text
	mov A, .L7858
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7859:
	mov A, B
	add SP, 1
	.loc 7 7094 0
	#   emit_line("s/.*//");
.data
	.L7860:
	.string ":exit"
.text
	mov A, .L7860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7861
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7861:
	mov A, B
	add SP, 1
	.loc 7 7095 0
	#   emit_line("x");
.data
	.L7862:
	.string "s/.*//"
.text
	mov A, .L7862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7863
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7863:
	mov A, B
	add SP, 1
	.loc 7 7096 0
	#   emit_line("s/.*o=\\([^ ]*\\).*/\\1/");
.data
	.L7864:
	.string "x"
.text
	mov A, .L7864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7865:
	mov A, B
	add SP, 1
	.loc 7 7097 0
	#   emit_line(":out_loop");
.data
	.L7866:
	.string "s/.*o=\\([^ ]*\\).*/\\1/"
.text
	mov A, .L7866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7867:
	mov A, B
	add SP, 1
	.loc 7 7098 0
	#   emit_line("/^$/bout_done");
.data
	.L7868:
	.string ":out_loop"
.text
	mov A, .L7868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7869
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7869:
	mov A, B
	add SP, 1
	.loc 7 7099 0
	#   for (int i = 0; i < 256; i++) {
.data
	.L7870:
	.string "/^$/bout_done"
.text
	mov A, .L7870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7871
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7871:
	mov A, B
	add SP, 1
	.loc 7 7115 0
	#     }
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 7115 0
	#     }
	.L1255:
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7872, A, 0
	jmp .L7873
	.L7872:
	.loc 7 7115 0
	#     }
	jmp .L1257
	.L7873:
	.loc 7 7101 0
	#     if (i == 10) {
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7101 0
	#     if (i == 10) {
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7874
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L7874:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7101 0
	#     if (i == 10) {
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7875
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L7875:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L7876:
	.string "/^%x%x/{s/..//\nx\n"
.text
	mov A, .L7876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L7877:
	mov A, B
	add SP, 3
	.loc 7 7115 0
	#     }
	.loc 7 7102 0
	#       emit_line("p\ns/.*//\nx\n}");
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7102 0
	#       emit_line("p\ns/.*//\nx\n}");
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7878, A, 0
	.loc 7 7103 0
	#     } else {
.data
	.L7879:
	.string "p\ns/.*//\nx\n}"
.text
	mov A, .L7879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7880:
	mov A, B
	add SP, 1
	jmp .L7881
	.L7878:
	.loc 7 7115 0
	#     }
	.loc 7 7105 0
	#       buf[0] = i;
	.loc 7 7106 0
	#       buf[1] = 0;
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7106 0
	#       buf[1] = 0;
	.loc 7 7105 0
	#       buf[0] = i;
	mov A, BP
	add A, 16777207
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7106 0
	#       buf[1] = 0;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7107 0
	#       if (i == '/' || i == '\\' || i == '&') {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7105 0
	#       buf[0] = i;
	mov A, BP
	add A, 16777207
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7107 0
	#       if (i == '/' || i == '\\' || i == '&') {
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7113 0
	#       }
	.loc 7 7108 0
	#         buf[0] = '\\';
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7108 0
	#         buf[0] = '\\';
	mov A, 47
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L7883, A, 0
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7108 0
	#         buf[0] = '\\';
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L7883:
	mov A, B
	mov B, 1
	jne .L7882, A, 0
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7108 0
	#         buf[0] = '\\';
	mov A, 38
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L7882:
	mov A, B
	jeq .L7884, A, 0
	.loc 7 7111 0
	#       } else if (i == 0 || (i >= 0xc2 && i <= 0xfd)) {
	.loc 7 7109 0
	#         buf[1] = i;
	mov A, 92
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7105 0
	#       buf[0] = i;
	mov A, BP
	add A, 16777207
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7109 0
	#         buf[1] = i;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7110 0
	#         buf[2] = 0;
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7110 0
	#         buf[2] = 0;
	.loc 7 7105 0
	#       buf[0] = i;
	mov A, BP
	add A, 16777207
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7110 0
	#         buf[2] = 0;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7111 0
	#       } else if (i == 0 || (i >= 0xc2 && i <= 0xfd)) {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7105 0
	#       buf[0] = i;
	mov A, BP
	add A, 16777207
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7111 0
	#       } else if (i == 0 || (i >= 0xc2 && i <= 0xfd)) {
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L7885
	.L7884:
	.loc 7 7113 0
	#       }
	.loc 7 7111 0
	#       } else if (i == 0 || (i >= 0xc2 && i <= 0xfd)) {
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7111 0
	#       } else if (i == 0 || (i >= 0xc2 && i <= 0xfd)) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L7886, A, 0
	mov A, 194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L7887, A, 0
	.loc 7 7111 0
	#       } else if (i == 0 || (i >= 0xc2 && i <= 0xfd)) {
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7111 0
	#       } else if (i == 0 || (i >= 0xc2 && i <= 0xfd)) {
	mov A, 253
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L7887:
	mov A, B
	mov B, A
	ne B, 0
	.L7886:
	mov A, B
	jeq .L7888, A, 0
	.loc 7 7113 0
	#       }
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7113 0
	#       }
.data
	.L7889:
	.string "\\x%x"
.text
	mov A, .L7889
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7105 0
	#       buf[0] = i;
	mov A, BP
	add A, 16777207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7890
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sprintf
	.L7890:
	mov A, B
	add SP, 3
	.L7888:
	.L7885:
	.loc 7 7115 0
	#     }
	.loc 7 7105 0
	#       buf[0] = i;
	mov A, BP
	add A, 16777207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7115 0
	#     }
.data
	.L7891:
	.string "s/$/%s/\nx\n}"
.text
	mov A, .L7891
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7892
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7892:
	mov A, B
	add SP, 2
	.L7881:
	.L1256:
	.loc 7 7100 0
	#     printf("/^%x%x/{s/..//\nx\n", i / 16, i % 16);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7115 0
	#     }
	jmp .L1255
	.L1257:
	.loc 7 7118 0
	#   emit_line(":out_done");
.data
	.L7893:
	.string "bout_loop"
.text
	mov A, .L7893
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7894
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7894:
	mov A, B
	add SP, 1
	.loc 7 7119 0
	#   emit_line("x");
.data
	.L7895:
	.string ":out_done"
.text
	mov A, .L7895
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7896
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7896:
	mov A, B
	add SP, 1
	.loc 7 7120 0
	#   emit_line("p");
.data
	.L7897:
	.string "x"
.text
	mov A, .L7897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7898
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7898:
	mov A, B
	add SP, 1
	.loc 7 7121 0
	# 
.data
	.L7899:
	.string "p"
.text
	mov A, .L7899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7900:
	mov A, B
	add SP, 1
	.loc 7 7123 0
	# }
.data
	.L7901:
	.string "}"
.text
	mov A, .L7901
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7902
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7902:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sh_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 7134 0
	#     }
	.loc 7 7130 0
	#   }
	.loc 7 7129 0
	#     emit_line("%s=0", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 7130 0
	#   }
	.L1258:
	.loc 7 7129 0
	#     emit_line("%s=0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L7903, A, 0
	jmp .L7904
	.L7903:
	.loc 7 7130 0
	#   }
	jmp .L1260
	.L7904:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7129 0
	#     emit_line("%s=0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7130 0
	#   }
.data
	.L7905:
	.string "%s=0"
.text
	mov A, .L7905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7906:
	mov A, B
	add SP, 2
	.L1259:
	.loc 7 7129 0
	#     emit_line("%s=0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7130 0
	#   }
	jmp .L1258
	.L1260:
	.loc 7 7134 0
	#     }
	.loc 7 7132 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 7134 0
	#     }
	.L1261:
	.loc 7 7123 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L7907, A, 0
	jmp .L7908
	.L7907:
	.loc 7 7134 0
	#     }
	jmp .L1263
	.L7908:
	.loc 7 7133 0
	#       emit_line("m%d=%d", mp, data->v);
	.loc 7 7123 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L7909, A, 0
	.loc 7 7134 0
	#     }
	.loc 7 7123 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7132 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7134 0
	#     }
.data
	.L7910:
	.string "m%d=%d"
.text
	mov A, .L7910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7911:
	mov A, B
	add SP, 3
	.L7909:
	.L1262:
	.loc 7 7132 0
	#     if (data->v) {
	.loc 7 7123 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7132 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7134 0
	#     }
	jmp .L1261
	.L1263:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sh_value_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7145 0
	#   }
	.loc 7 7140 0
	#     return format("$%s", reg_names[v->reg]);
	.loc 7 7134 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7912, A, 0
	.loc 7 7141 0
	#   } else if (v->type == IMM) {
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7141 0
	#   } else if (v->type == IMM) {
	.loc 7 7134 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7141 0
	#   } else if (v->type == IMM) {
.data
	.L7913:
	.string "$%s"
.text
	mov A, .L7913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7914
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L7914:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L7915
	.L7912:
	.loc 7 7145 0
	#   }
	.loc 7 7141 0
	#   } else if (v->type == IMM) {
	.loc 7 7134 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7916, A, 0
	.loc 7 7143 0
	#   } else {
	.loc 7 7134 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7143 0
	#   } else {
.data
	.L7917:
	.string "%d"
.text
	mov A, .L7917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L7918:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L7919
	.L7916:
	.loc 7 7145 0
	#   }
.data
	.L7920:
	.string "invalid value"
.text
	mov A, .L7920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7921
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L7921:
	mov A, B
	add SP, 1
	.L7919:
	.L7915:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sh_src_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7150 0
	# }
	.loc 7 7145 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7922
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_value_str
	.L7922:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sh_cmp_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	.loc 7 7154 0
	#   const char* op_str;
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7150 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7923
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L7923:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7155 0
	#   switch (op) {
	.loc 7 7171 0
	#       error("oops");
	.loc 7 7154 0
	#   const char* op_str;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7171 0
	#       error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7924, A, 0
	jmp .L1265
	.L7924:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7925, A, 0
	jmp .L1266
	.L7925:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7926, A, 0
	jmp .L1267
	.L7926:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7927, A, 0
	jmp .L1268
	.L7927:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7928, A, 0
	jmp .L1269
	.L7928:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7929, A, 0
	jmp .L1270
	.L7929:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7930, A, 0
	jmp .L1271
	.L7930:
	jmp .L1272
	.loc 7 7157 0
	#       op_str = "=="; break;
	.L1265:
.data
	.L7931:
	.string "=="
.text
	mov A, .L7931
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7158 0
	#     case JNE:
	jmp .L1264
	.loc 7 7159 0
	#       op_str = "!="; break;
	.L1266:
.data
	.L7932:
	.string "!="
.text
	mov A, .L7932
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7160 0
	#     case JLT:
	jmp .L1264
	.loc 7 7161 0
	#       op_str = "<"; break;
	.L1267:
.data
	.L7933:
	.string "<"
.text
	mov A, .L7933
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7162 0
	#     case JGT:
	jmp .L1264
	.loc 7 7163 0
	#       op_str = ">"; break;
	.L1268:
.data
	.L7934:
	.string ">"
.text
	mov A, .L7934
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7164 0
	#     case JLE:
	jmp .L1264
	.loc 7 7165 0
	#       op_str = "<="; break;
	.L1269:
.data
	.L7935:
	.string "<="
.text
	mov A, .L7935
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7166 0
	#     case JGE:
	jmp .L1264
	.loc 7 7167 0
	#       op_str = ">="; break;
	.L1270:
.data
	.L7936:
	.string ">="
.text
	mov A, .L7936
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7168 0
	#     case JMP:
	jmp .L1264
	.loc 7 7169 0
	#       return "1";
	.L1271:
.data
	.L7937:
	.string "1"
.text
	mov A, .L7937
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 7171 0
	#       error("oops");
	.L1272:
.data
	.L7938:
	.string "oops"
.text
	mov A, .L7938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L7939:
	mov A, B
	add SP, 1
	.L1264:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	.loc 7 7150 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_src_str
	.L7940:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7155 0
	#   switch (op) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	.loc 7 7150 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
.data
	.L7941:
	.string "$(( $%s %s %s ))"
.text
	mov A, .L7941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L7942:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sh_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7254 0
	#     error("oops");
	.loc 7 7179 0
	#   case MOV:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7254 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7943, A, 0
	jmp .L1274
	.L7943:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7944, A, 0
	jmp .L1275
	.L7944:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7945, A, 0
	jmp .L1276
	.L7945:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7946, A, 0
	jmp .L1277
	.L7946:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7947, A, 0
	jmp .L1278
	.L7947:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7948, A, 0
	jmp .L1279
	.L7948:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7949, A, 0
	jmp .L1280
	.L7949:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7950, A, 0
	jmp .L1281
	.L7950:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7951, A, 0
	jmp .L1282
	.L7951:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7952, A, 0
	jmp .L1283
	.L7952:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7953, A, 0
	jmp .L1284
	.L7953:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7954, A, 0
	jmp .L1285
	.L7954:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7955, A, 0
	jmp .L1286
	.L7955:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7956, A, 0
	jmp .L1287
	.L7956:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7957, A, 0
	jmp .L1288
	.L7957:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7958, A, 0
	jmp .L1289
	.L7958:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7959, A, 0
	jmp .L1290
	.L7959:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7960, A, 0
	jmp .L1291
	.L7960:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7961, A, 0
	jmp .L1292
	.L7961:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7962, A, 0
	jmp .L1293
	.L7962:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7963, A, 0
	jmp .L1294
	.L7963:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L7964, A, 0
	jmp .L1295
	.L7964:
	jmp .L1296
	.loc 7 7180 0
	#     emit_line("%s=%s", reg_names[inst->dst.reg], sh_src_str(inst));
	.L1274:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_src_str
	.L7965:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7180 0
	#     emit_line("%s=%s", reg_names[inst->dst.reg], sh_src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7180 0
	#     emit_line("%s=%s", reg_names[inst->dst.reg], sh_src_str(inst));
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7180 0
	#     emit_line("%s=%s", reg_names[inst->dst.reg], sh_src_str(inst));
.data
	.L7966:
	.string "%s=%s"
.text
	mov A, .L7966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7967:
	mov A, B
	add SP, 3
	.loc 7 7182 0
	# 
	jmp .L1273
	.loc 7 7184 0
	#     emit_line("%s=$(( ($%s + %s) & " UINT_MAX_STR " ))",
	.L1275:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_src_str
	.L7968:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7184 0
	#     emit_line("%s=$(( ($%s + %s) & " UINT_MAX_STR " ))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7184 0
	#     emit_line("%s=$(( ($%s + %s) & " UINT_MAX_STR " ))",
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7184 0
	#     emit_line("%s=$(( ($%s + %s) & " UINT_MAX_STR " ))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7184 0
	#     emit_line("%s=$(( ($%s + %s) & " UINT_MAX_STR " ))",
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7184 0
	#     emit_line("%s=$(( ($%s + %s) & " UINT_MAX_STR " ))",
.data
	.L7969:
	.string "%s=$(( ($%s + %s) & 16777215 ))"
.text
	mov A, .L7969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7970:
	mov A, B
	add SP, 4
	.loc 7 7188 0
	# 
	jmp .L1273
	.loc 7 7190 0
	#     emit_line("%s=$(( ($%s - %s) & " UINT_MAX_STR "))",
	.L1276:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_src_str
	.L7971:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7190 0
	#     emit_line("%s=$(( ($%s - %s) & " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7190 0
	#     emit_line("%s=$(( ($%s - %s) & " UINT_MAX_STR "))",
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7190 0
	#     emit_line("%s=$(( ($%s - %s) & " UINT_MAX_STR "))",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7190 0
	#     emit_line("%s=$(( ($%s - %s) & " UINT_MAX_STR "))",
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7190 0
	#     emit_line("%s=$(( ($%s - %s) & " UINT_MAX_STR "))",
.data
	.L7972:
	.string "%s=$(( ($%s - %s) & 16777215))"
.text
	mov A, .L7972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7973:
	mov A, B
	add SP, 4
	.loc 7 7194 0
	# 
	jmp .L1273
	.loc 7 7196 0
	#     emit_line("eval z=\\$m%s", sh_src_str(inst));
	.L1277:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_src_str
	.L7974:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7196 0
	#     emit_line("eval z=\\$m%s", sh_src_str(inst));
.data
	.L7975:
	.string "eval z=\\$m%s"
.text
	mov A, .L7975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7976:
	mov A, B
	add SP, 2
	.loc 7 7198 0
	#     break;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7198 0
	#     break;
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7198 0
	#     break;
.data
	.L7977:
	.string "%s=$(( $z + 0 ))"
.text
	mov A, .L7977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7978:
	mov A, B
	add SP, 2
	.loc 7 7199 0
	# 
	jmp .L1273
	.loc 7 7201 0
	#     emit_line("eval m%s=$%s", sh_src_str(inst), reg_names[inst->dst.reg]);
	.L1278:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7201 0
	#     emit_line("eval m%s=$%s", sh_src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7201 0
	#     emit_line("eval m%s=$%s", sh_src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_src_str
	.L7979:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7201 0
	#     emit_line("eval m%s=$%s", sh_src_str(inst), reg_names[inst->dst.reg]);
.data
	.L7980:
	.string "eval m%s=$%s"
.text
	mov A, .L7980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7981:
	mov A, B
	add SP, 3
	.loc 7 7203 0
	# 
	jmp .L1273
	.loc 7 7205 0
	#     emit_line("t=$((%s&255))", sh_src_str(inst));
	.L1279:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_src_str
	.L7982:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7205 0
	#     emit_line("t=$((%s&255))", sh_src_str(inst));
.data
	.L7983:
	.string "t=$((%s&255))"
.text
	mov A, .L7983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7984:
	mov A, B
	add SP, 2
	.loc 7 7207 0
	#     break;
.data
	.L7985:
	.string "printf \"\\\\$(printf '%%03o' $t)\""
.text
	mov A, .L7985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7986:
	mov A, B
	add SP, 1
	.loc 7 7208 0
	# 
	jmp .L1273
	.loc 7 7210 0
	#     emit_line("if read -rn1 t; then");
	.L1280:
.data
	.L7987:
	.string "if read -rn1 t; then"
.text
	mov A, .L7987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7988:
	mov A, B
	add SP, 1
	.loc 7 7212 0
	#     emit_line("  %s=10", reg_names[inst->dst.reg]);
.data
	.L7989:
	.string " if [ -z $t ]; then"
.text
	mov A, .L7989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7990:
	mov A, B
	add SP, 1
	.loc 7 7213 0
	#     emit_line(" else");
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7213 0
	#     emit_line(" else");
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7213 0
	#     emit_line(" else");
.data
	.L7991:
	.string "  %s=10"
.text
	mov A, .L7991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7992:
	mov A, B
	add SP, 2
	.loc 7 7214 0
	#     emit_line("  %s=$(printf '%%d' \"'$t'\")", reg_names[inst->dst.reg]);
.data
	.L7993:
	.string " else"
.text
	mov A, .L7993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7994:
	mov A, B
	add SP, 1
	.loc 7 7215 0
	#     emit_line(" fi");
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7215 0
	#     emit_line(" fi");
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7215 0
	#     emit_line(" fi");
.data
	.L7995:
	.string "  %s=$(printf '%%d' \"'$t'\")"
.text
	mov A, .L7995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7996
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7996:
	mov A, B
	add SP, 2
	.loc 7 7216 0
	#     emit_line("else");
.data
	.L7997:
	.string " fi"
.text
	mov A, .L7997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L7998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L7998:
	mov A, B
	add SP, 1
	.loc 7 7217 0
	#     emit_line(" %s=0", reg_names[inst->dst.reg]);
.data
	.L7999:
	.string "else"
.text
	mov A, .L7999
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8000:
	mov A, B
	add SP, 1
	.loc 7 7218 0
	#     emit_line("fi");
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7218 0
	#     emit_line("fi");
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7218 0
	#     emit_line("fi");
.data
	.L8001:
	.string " %s=0"
.text
	mov A, .L8001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8002:
	mov A, B
	add SP, 2
	.loc 7 7219 0
	#     break;
.data
	.L8003:
	.string "fi"
.text
	mov A, .L8003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8004
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8004:
	mov A, B
	add SP, 1
	.loc 7 7220 0
	# 
	jmp .L1273
	.loc 7 7222 0
	#     emit_line("exit");
	.L1281:
.data
	.L8005:
	.string "exit"
.text
	mov A, .L8005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8006:
	mov A, B
	add SP, 1
	.loc 7 7224 0
	# 
	jmp .L1273
	.loc 7 7226 0
	#     break;
	.L1282:
	jmp .L1273
	.loc 7 7229 0
	#   case NE:
	.L1283:
	.L1284:
	.L1285:
	.L1286:
	.L1287:
	.L1288:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_cmp_str
	.L8007:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7229 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7229 0
	#   case NE:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7229 0
	#   case NE:
.data
	.L8008:
	.string "%s=%s"
.text
	mov A, .L8008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8009
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8009:
	mov A, B
	add SP, 3
	.loc 7 7237 0
	# 
	jmp .L1273
	.loc 7 7239 0
	#   case JNE:
	.L1289:
	.L1290:
	.L1291:
	.L1292:
	.L1293:
	.L1294:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_cmp_str
	.L8010:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7239 0
	#   case JNE:
.data
	.L8011:
	.string "if [ %s = 1 ]; then"
.text
	mov A, .L8011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8012:
	mov A, B
	add SP, 2
	.loc 7 7246 0
	#     emit_line("fi");
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_value_str
	.L8013:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7246 0
	#     emit_line("fi");
.data
	.L8014:
	.string " pc=$(( %s - 1 ))"
.text
	mov A, .L8014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8015:
	mov A, B
	add SP, 2
	.loc 7 7247 0
	#     break;
.data
	.L8016:
	.string "fi"
.text
	mov A, .L8016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8017:
	mov A, B
	add SP, 1
	.loc 7 7248 0
	# 
	jmp .L1273
	.loc 7 7250 0
	#     emit_line("pc=$(( %s - 1 ))", sh_value_str(&inst->jmp));
	.L1295:
	.loc 7 7174 0
	#                 reg_names[inst->dst.reg], op_str, sh_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_value_str
	.L8018:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7250 0
	#     emit_line("pc=$(( %s - 1 ))", sh_value_str(&inst->jmp));
.data
	.L8019:
	.string "pc=$(( %s - 1 ))"
.text
	mov A, .L8019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8020:
	mov A, B
	add SP, 2
	.loc 7 7252 0
	# 
	jmp .L1273
	.loc 7 7254 0
	#     error("oops");
	.L1296:
.data
	.L8021:
	.string "oops"
.text
	mov A, .L8021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8022:
	mov A, B
	add SP, 1
	.L1273:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_sh:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 7285 0
	# }
	.loc 7 7260 0
	#   emit_line("");
	.loc 7 7254 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_init_state
	.L8023:
	mov A, B
	add SP, 1
	.loc 7 7261 0
	# 
.data
	.L8024:
	.string ""
.text
	mov A, .L8024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8025:
	mov A, B
	add SP, 1
	.loc 7 7263 0
	#   emit_line("case $pc in");
.data
	.L8026:
	.string "while true; do"
.text
	mov A, .L8026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8027:
	mov A, B
	add SP, 1
	.loc 7 7264 0
	#   int prev_pc = -1;
.data
	.L8028:
	.string "case $pc in"
.text
	mov A, .L8028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8029:
	mov A, B
	add SP, 1
	.loc 7 7265 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7277 0
	#   }
	.loc 7 7266 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 7254 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7277 0
	#   }
	.L1297:
	.loc 7 7266 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L8030, A, 0
	jmp .L8031
	.L8030:
	.loc 7 7277 0
	#   }
	jmp .L1299
	.L8031:
	.loc 7 7274 0
	#     }
	.loc 7 7267 0
	#       if (prev_pc != -1) {
	.loc 7 7265 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7267 0
	#       if (prev_pc != -1) {
	.loc 7 7266 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8032, A, 0
	.loc 7 7274 0
	#     }
	.loc 7 7271 0
	#       }
	.loc 7 7268 0
	#         emit_line(";;");
	.loc 7 7265 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7268 0
	#         emit_line(";;");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8033, A, 0
	.loc 7 7271 0
	#       }
	.loc 7 7269 0
	#         dec_indent();
.data
	.L8034:
	.string ";;"
.text
	mov A, .L8034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8035:
	mov A, B
	add SP, 1
	.loc 7 7270 0
	#         emit_line("");
	mov A, .L8036
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8036:
	mov A, B
	.loc 7 7271 0
	#       }
.data
	.L8037:
	.string ""
.text
	mov A, .L8037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8038:
	mov A, B
	add SP, 1
	.L8033:
	.loc 7 7273 0
	#       inc_indent();
	.loc 7 7266 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7273 0
	#       inc_indent();
.data
	.L8039:
	.string "%d)"
.text
	mov A, .L8039
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8040
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8040:
	mov A, B
	add SP, 2
	.loc 7 7274 0
	#     }
	mov A, .L8041
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8041:
	mov A, B
	.L8032:
	.loc 7 7276 0
	#     sh_emit_inst(inst);
	.loc 7 7266 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7277 0
	#   }
	.loc 7 7266 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8042
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sh_emit_inst
	.L8042:
	mov A, B
	add SP, 1
	.loc 7 7277 0
	#   }
	.L1298:
	.loc 7 7266 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7277 0
	#   }
	jmp .L1297
	.L1299:
	.loc 7 7280 0
	#   dec_indent();
.data
	.L8043:
	.string ";;"
.text
	mov A, .L8043
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8044
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8044:
	mov A, B
	add SP, 1
	.loc 7 7281 0
	#   emit_line("esac");
	mov A, .L8045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8045:
	mov A, B
	.loc 7 7282 0
	#   emit_line("");
.data
	.L8046:
	.string "esac"
.text
	mov A, .L8046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8047:
	mov A, B
	add SP, 1
	.loc 7 7283 0
	#   emit_line("pc=$(( $pc + 1 ))");
.data
	.L8048:
	.string ""
.text
	mov A, .L8048
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8049:
	mov A, B
	add SP, 1
	.loc 7 7284 0
	#   emit_line("done");
.data
	.L8050:
	.string "pc=$(( $pc + 1 ))"
.text
	mov A, .L8050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8051:
	mov A, B
	add SP, 1
	.loc 7 7285 0
	# }
.data
	.L8052:
	.string "done"
.text
	mov A, .L8052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8053:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
COL_NAMES:
	.data 1
	.L8054:
	.string "a"
	.data 0
	.long .L8054
	.data 1
	.L8055:
	.string "b"
	.data 0
	.long .L8055
	.data 1
	.L8056:
	.string "c"
	.data 0
	.long .L8056
	.data 1
	.L8057:
	.string "d"
	.data 0
	.long .L8057
	.data 1
	.L8058:
	.string "bp"
	.data 0
	.long .L8058
	.data 1
	.L8059:
	.string "sp"
	.data 0
	.long .L8059
	.data 1
	.L8060:
	.string "pc"
	.data 0
	.long .L8060
	.data 1
	.L8061:
	.string "step"
	.data 0
	.long .L8061
	.data 1
	.L8062:
	.string "running"
	.data 0
	.long .L8062
	.data 1
	.L8063:
	.string "mem"
	.data 0
	.long .L8063
	.data 1
	.L8064:
	.string "stdin"
	.data 0
	.long .L8064
	.data 1
	.L8065:
	.string "stdout"
	.data 0
	.long .L8065
	.text
sqlite3_add_expr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7330 0
	# }
	.loc 7 7324 0
	#   e->pc = pc;
	mov A, 0
	mov B, SP
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L8066:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7325 0
	#   e->step = step;
	.loc 7 7285 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7324 0
	#   e->pc = pc;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7326 0
	#   e->expr = expr_str;
	.loc 7 7285 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7324 0
	#   e->pc = pc;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7327 0
	#   e->next = 0;
	.loc 7 7285 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7324 0
	#   e->pc = pc;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7328 0
	#   expr->next = e;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7324 0
	#   e->pc = pc;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7329 0
	#   return e;
	.loc 7 7324 0
	#   e->pc = pc;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7330 0
	# }
	.loc 7 7324 0
	#   e->pc = pc;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sqlite3_cmp_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 7346 0
	# }
	.loc 7 7334 0
	#   const char* op_str;
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7330 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L8067:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7335 0
	#   switch (op) {
	.loc 7 7343 0
	#       error("oops");
	.loc 7 7334 0
	#   const char* op_str;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7343 0
	#       error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8068, A, 0
	jmp .L1301
	.L8068:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8069, A, 0
	jmp .L1302
	.L8069:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8070, A, 0
	jmp .L1303
	.L8070:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8071, A, 0
	jmp .L1304
	.L8071:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8072, A, 0
	jmp .L1305
	.L8072:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8073, A, 0
	jmp .L1306
	.L8073:
	jmp .L1307
	.loc 7 7337 0
	#     case JNE: op_str = "<>"; break;
	.L1301:
.data
	.L8074:
	.string "="
.text
	mov A, .L8074
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1300
	.loc 7 7338 0
	#     case JLT: op_str = "<"; break;
	.L1302:
.data
	.L8075:
	.string "<>"
.text
	mov A, .L8075
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1300
	.loc 7 7339 0
	#     case JGT: op_str = ">"; break;
	.L1303:
.data
	.L8076:
	.string "<"
.text
	mov A, .L8076
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1300
	.loc 7 7340 0
	#     case JLE: op_str = "<="; break;
	.L1304:
.data
	.L8077:
	.string ">"
.text
	mov A, .L8077
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1300
	.loc 7 7341 0
	#     case JGE: op_str = ">="; break;
	.L1305:
.data
	.L8078:
	.string "<="
.text
	mov A, .L8078
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1300
	.loc 7 7342 0
	#     default:
	.L1306:
.data
	.L8079:
	.string ">="
.text
	mov A, .L8079
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1300
	.loc 7 7343 0
	#       error("oops");
	.L1307:
.data
	.L8080:
	.string "oops"
.text
	mov A, .L8080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8081:
	mov A, B
	add SP, 1
	.L1300:
	.loc 7 7346 0
	# }
	.loc 7 7330 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8082:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7335 0
	#   switch (op) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7346 0
	# }
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7346 0
	# }
	.loc 7 7330 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7346 0
	# }
.data
	.L8083:
	.string "%s %s %s"
.text
	mov A, .L8083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8084:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sqlite3_transpose_insts:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 7 7471 0
	# }
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 7352 0
	#   SQLite3Col col_idx = 0;
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7353 0
	#   const char* expr = NULL;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 7354 0
	#   int updcols = 0;
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7355 0
	# 
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 7467 0
	#     prev_pc = inst->pc;
	.L1308:
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L8085, A, 0
	jmp .L8086
	.L8085:
	.loc 7 7467 0
	#     prev_pc = inst->pc;
	jmp .L1310
	.L8086:
	.loc 7 7365 0
	#     }
	.loc 7 7358 0
	#       if (prev_pc != -1) {
	.loc 7 7352 0
	#   SQLite3Col col_idx = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7358 0
	#       if (prev_pc != -1) {
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8087, A, 0
	.loc 7 7365 0
	#     }
	.loc 7 7362 0
	#       }
	.loc 7 7359 0
	#         step++;
	.loc 7 7352 0
	#   SQLite3Col col_idx = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7359 0
	#         step++;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8088, A, 0
	.loc 7 7362 0
	#       }
	.loc 7 7360 0
	#         cols[SQLITE3_PC] = sqlite3_add_expr(cols[SQLITE3_PC], prev_pc, step, "pc+1");
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7361 0
	#         cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], prev_pc, step, "0");
.data
	.L8089:
	.string "pc+1"
.text
	mov A, .L8089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7352 0
	#   SQLite3Col col_idx = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7361 0
	#         cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], prev_pc, step, "0");
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_add_expr
	.L8090:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7361 0
	#         cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], prev_pc, step, "0");
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7362 0
	#       }
.data
	.L8091:
	.string "0"
.text
	mov A, .L8091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7352 0
	#   SQLite3Col col_idx = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7362 0
	#       }
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8092
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_add_expr
	.L8092:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7362 0
	#       }
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L8088:
	.loc 7 7364 0
	#       step = 0;
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 7365 0
	#     }
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.L8087:
	.loc 7 7368 0
	#                  ((inst->dst.type == REG) ? (1 << inst->dst.reg) : 0);
	mov A, 0
	mov B, SP
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8093, A, 0
	.loc 7 7368 0
	#                  ((inst->dst.type == REG) ? (1 << inst->dst.reg) : 0);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8094
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L8094:
	mov A, B
	add SP, 2
	jmp .L8095
	.L8093:
	.loc 7 7368 0
	#                  ((inst->dst.type == REG) ? (1 << inst->dst.reg) : 0);
	mov A, 0
	.L8095:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8096, A, 0
	.loc 7 7368 0
	#                  ((inst->dst.type == REG) ? (1 << inst->dst.reg) : 0);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8097
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L8097:
	mov A, B
	add SP, 2
	jmp .L8098
	.L8096:
	.loc 7 7368 0
	#                  ((inst->dst.type == REG) ? (1 << inst->dst.reg) : 0);
	mov A, 0
	.L8098:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L8099:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 7373 0
	#     }
	.loc 7 7371 0
	#       step++;
	.loc 7 7368 0
	#                  ((inst->dst.type == REG) ? (1 << inst->dst.reg) : 0);
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7355 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L8100:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7371 0
	#       step++;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8101, A, 0
	.loc 7 7373 0
	#     }
	.loc 7 7372 0
	#       updcols = 0;
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7373 0
	#     }
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	.L8101:
	.loc 7 7454 0
	#       error("oops");
	.loc 7 7376 0
	#     case MOV:
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 7454 0
	#       error("oops");
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8102, A, 0
	jmp .L1312
	.L8102:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8103, A, 0
	jmp .L1313
	.L8103:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8104, A, 0
	jmp .L1314
	.L8104:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8105, A, 0
	jmp .L1315
	.L8105:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8106, A, 0
	jmp .L1316
	.L8106:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8107, A, 0
	jmp .L1317
	.L8107:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8108, A, 0
	jmp .L1318
	.L8108:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8109, A, 0
	jmp .L1319
	.L8109:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8110, A, 0
	jmp .L1320
	.L8110:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8111, A, 0
	jmp .L1321
	.L8111:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8112, A, 0
	jmp .L1322
	.L8112:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8113, A, 0
	jmp .L1323
	.L8113:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8114, A, 0
	jmp .L1324
	.L8114:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8115, A, 0
	jmp .L1325
	.L8115:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8116, A, 0
	jmp .L1326
	.L8116:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8117, A, 0
	jmp .L1327
	.L8117:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8118, A, 0
	jmp .L1328
	.L8118:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8119, A, 0
	jmp .L1329
	.L8119:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8120, A, 0
	jmp .L1330
	.L8120:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8121, A, 0
	jmp .L1331
	.L8121:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8122, A, 0
	jmp .L1332
	.L8122:
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8123, A, 0
	jmp .L1333
	.L8123:
	jmp .L1334
	.loc 7 7377 0
	#       col_idx = (SQLite3Col)inst->dst.reg;
	.L1312:
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7379 0
	#       break;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8124:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7380 0
	# 
	jmp .L1311
	.loc 7 7382 0
	#       col_idx = (SQLite3Col)inst->dst.reg;
	.L1313:
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7384 0
	#                     COL_NAMES[inst->dst.reg], src_str(inst));
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8125:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7384 0
	#                     COL_NAMES[inst->dst.reg], src_str(inst));
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7384 0
	#                     COL_NAMES[inst->dst.reg], src_str(inst));
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7384 0
	#                     COL_NAMES[inst->dst.reg], src_str(inst));
.data
	.L8126:
	.string "(%s + %s) & 16777215"
.text
	mov A, .L8126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8127:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7386 0
	# 
	jmp .L1311
	.loc 7 7388 0
	#       col_idx = (SQLite3Col)inst->dst.reg;
	.L1314:
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7390 0
	#                 COL_NAMES[inst->dst.reg], src_str(inst));
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8128:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7390 0
	#                 COL_NAMES[inst->dst.reg], src_str(inst));
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7390 0
	#                 COL_NAMES[inst->dst.reg], src_str(inst));
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7390 0
	#                 COL_NAMES[inst->dst.reg], src_str(inst));
.data
	.L8129:
	.string "(%s - %s) & 16777215"
.text
	mov A, .L8129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8130:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7392 0
	# 
	jmp .L1311
	.loc 7 7394 0
	#       col_idx = (SQLite3Col)inst->dst.reg;
	.L1315:
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7396 0
	#       break;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8131:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7396 0
	#       break;
.data
	.L8132:
	.string "coalesce(json_extract(mem, '$.'||%s),0)"
.text
	mov A, .L8132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8133:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7397 0
	# 
	jmp .L1311
	.loc 7 7399 0
	#       col_idx = SQLITE3_MEM;
	.L1316:
	.loc 7 7285 0
	# }
	mov A, 9
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7401 0
	#                     src_str(inst), COL_NAMES[inst->dst.reg]);
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7401 0
	#                     src_str(inst), COL_NAMES[inst->dst.reg]);
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7401 0
	#                     src_str(inst), COL_NAMES[inst->dst.reg]);
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8134:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7401 0
	#                     src_str(inst), COL_NAMES[inst->dst.reg]);
.data
	.L8135:
	.string "json_set(mem, '$.'||%s, %s)"
.text
	mov A, .L8135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8136:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7403 0
	# 
	jmp .L1311
	.loc 7 7405 0
	#       col_idx = SQLITE3_OUT;
	.L1317:
	.loc 7 7285 0
	# }
	mov A, 11
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7407 0
	#       break;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8137:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7407 0
	#       break;
.data
	.L8138:
	.string "stdout||char(%s)"
.text
	mov A, .L8138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8139:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7408 0
	# 
	jmp .L1311
	.loc 7 7410 0
	#       cols[SQLITE3_IN] = sqlite3_add_expr(cols[SQLITE3_IN], inst->pc, step,
	.L1318:
.data
	.L8140:
	.string "substr(stdin, 2)"
.text
	mov A, .L8140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7410 0
	#       cols[SQLITE3_IN] = sqlite3_add_expr(cols[SQLITE3_IN], inst->pc, step,
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7410 0
	#       cols[SQLITE3_IN] = sqlite3_add_expr(cols[SQLITE3_IN], inst->pc, step,
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_add_expr
	.L8141:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7410 0
	#       cols[SQLITE3_IN] = sqlite3_add_expr(cols[SQLITE3_IN], inst->pc, step,
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7413 0
	#       // todo: can't read a single byte from multibyte character
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7415 0
	#       break;
.data
	.L8142:
	.string "CASE WHEN length(stdin) = 0 THEN 0 ELSE unicode(stdin) END"
.text
	mov A, .L8142
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7416 0
	# 
	jmp .L1311
	.loc 7 7418 0
	#       col_idx = SQLITE3_RUN;
	.L1319:
	.loc 7 7285 0
	# }
	mov A, 8
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7420 0
	#       break;
.data
	.L8143:
	.string "0"
.text
	mov A, .L8143
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7421 0
	# 
	jmp .L1311
	.loc 7 7423 0
	#       goto next_inst;
	.L1320:
	jmp .L1335
	.loc 7 7426 0
	#     case NE:
	.L1321:
	.L1322:
	.L1323:
	.L1324:
	.L1325:
	.L1326:
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7433 0
	#       break;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_cmp_str
	.L8144:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7434 0
	# 
	jmp .L1311
	.loc 7 7436 0
	#     case JNE:
	.L1327:
	.L1328:
	.L1329:
	.L1330:
	.L1331:
	.L1332:
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8145
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_cmp_str
	.L8145:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7436 0
	#     case JNE:
.data
	.L8146:
	.string "CASE WHEN %s THEN 0 ELSE step+1 END"
.text
	mov A, .L8146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8147:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7443 0
	#       col_idx = SQLITE3_PC;
	.loc 7 7354 0
	#   int updcols = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7443 0
	#       col_idx = SQLITE3_PC;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7443 0
	#       col_idx = SQLITE3_PC;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8148
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_add_expr
	.L8148:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7443 0
	#       col_idx = SQLITE3_PC;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7444 0
	#       expr = format("CASE WHEN %s THEN %s ELSE pc END",
	.loc 7 7285 0
	# }
	mov A, 6
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7445 0
	#                     sqlite3_cmp_str(inst), value_str(&inst->jmp));
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L8149:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7445 0
	#                     sqlite3_cmp_str(inst), value_str(&inst->jmp));
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8150
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_cmp_str
	.L8150:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7445 0
	#                     sqlite3_cmp_str(inst), value_str(&inst->jmp));
.data
	.L8151:
	.string "CASE WHEN %s THEN %s ELSE pc END"
.text
	mov A, .L8151
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8152:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7447 0
	#     case JMP:
	jmp .L1311
	.loc 7 7448 0
	#       cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], inst->pc, step, "0");
	.L1333:
.data
	.L8153:
	.string "0"
.text
	mov A, .L8153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7448 0
	#       cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], inst->pc, step, "0");
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7448 0
	#       cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], inst->pc, step, "0");
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_add_expr
	.L8154:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7448 0
	#       cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], inst->pc, step, "0");
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7450 0
	#       expr = value_str(&inst->jmp);
	.loc 7 7285 0
	# }
	mov A, 6
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7451 0
	#       break;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L8155:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 7452 0
	# 
	jmp .L1311
	.loc 7 7454 0
	#       error("oops");
	.L1334:
.data
	.L8156:
	.string "oops"
.text
	mov A, .L8156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8157:
	mov A, B
	add SP, 1
	.L1311:
	.loc 7 7458 0
	# 
	.loc 7 7354 0
	#   int updcols = 0;
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7458 0
	# 
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7458 0
	# 
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7353 0
	#   const char* expr = NULL;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_add_expr
	.L8158:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7458 0
	# 
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7353 0
	#   const char* expr = NULL;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7464 0
	#     }
	.loc 7 7460 0
	#       step++;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L8160, A, 0
	.loc 7 7460 0
	#       step++;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L8160:
	mov A, B
	mov B, 1
	jne .L8159, A, 0
	.loc 7 7460 0
	#       step++;
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L8159:
	mov A, B
	jeq .L8161, A, 0
	.loc 7 7462 0
	#     } else {
	.loc 7 7461 0
	#       updcols = 0;
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7462 0
	#     } else {
	mov A, 0
	mov B, BP
	add B, 16777211
	store A, B
	jmp .L8162
	.L8161:
	.loc 7 7464 0
	#     }
	.loc 7 7355 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7464 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7353 0
	#   const char* expr = NULL;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L8163:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L8164:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777211
	store A, B
	.L8162:
	.loc 7 7467 0
	#     prev_pc = inst->pc;
	.L1335:
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7467 0
	#     prev_pc = inst->pc;
	.L1309:
	.loc 7 7357 0
	#     if (prev_pc != inst-> pc) {
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7467 0
	#     prev_pc = inst->pc;
	jmp .L1308
	.L1310:
	.loc 7 7470 0
	#   cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], prev_pc, step, "0");
.data
	.L8165:
	.string "pc+1"
.text
	mov A, .L8165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7352 0
	#   SQLite3Col col_idx = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7470 0
	#   cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], prev_pc, step, "0");
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8166
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_add_expr
	.L8166:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7470 0
	#   cols[SQLITE3_STEP] = sqlite3_add_expr(cols[SQLITE3_STEP], prev_pc, step, "0");
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7471 0
	# }
.data
	.L8167:
	.string "0"
.text
	mov A, .L8167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7351 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7352 0
	#   SQLite3Col col_idx = 0;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7471 0
	# }
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8168
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_add_expr
	.L8168:
	mov A, B
	add SP, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7471 0
	# }
	.loc 7 7346 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sqlite3_emit_stdin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7478 0
	# }
	.loc 7 7476 0
	#   emit_line("CREATE TABLE stdin(i BLOB);");
.data
	.L8169:
	.string "DROP TABLE IF EXISTS stdin;"
.text
	mov A, .L8169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8170:
	mov A, B
	add SP, 1
	.loc 7 7477 0
	#   emit_line("INSERT INTO stdin(i) VALUES(readfile('input.txt'));");
.data
	.L8171:
	.string "CREATE TABLE stdin(i BLOB);"
.text
	mov A, .L8171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8172:
	mov A, B
	add SP, 1
	.loc 7 7478 0
	# }
.data
	.L8173:
	.string "INSERT INTO stdin(i) VALUES(readfile('input.txt'));"
.text
	mov A, .L8173
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8174:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
sqlite3_emit_column:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 7536 0
	#     }
	.loc 7 7484 0
	#   }
	.loc 7 7482 0
	#     emit_line(COL_NAMES[col]);
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7482 0
	#     emit_line(COL_NAMES[col]);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8175, A, 0
	.loc 7 7484 0
	#   }
	.loc 7 7483 0
	#     return;
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8176
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8176:
	mov A, B
	add SP, 1
	.loc 7 7484 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L8175:
	.loc 7 7487 0
	#   int prev_pc = -1;
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7488 0
	#   
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7490 0
	#   for (; ce != NULL; ce = ce->next) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7490 0
	#   for (; ce != NULL; ce = ce->next) {
.data
	.L8177:
	.string "CASE pc / %d"
.text
	mov A, .L8177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8178:
	mov A, B
	add SP, 2
	.loc 7 7523 0
	#   }
	.L1336:
	.loc 7 7491 0
	#     int part = ce->pc / CHUNKED_FUNC_SIZE;
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7491 0
	#     int part = ce->pc / CHUNKED_FUNC_SIZE;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8179, A, 0
	jmp .L8180
	.L8179:
	.loc 7 7523 0
	#   }
	jmp .L1338
	.L8180:
	.loc 7 7492 0
	#     if (ce->pc != prev_pc) {
	mov A, 0
	mov B, SP
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L8181:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7519 0
	#     }
	.loc 7 7493 0
	#       if (prev_pc != -1) {
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7488 0
	#   
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8182, A, 0
	.loc 7 7519 0
	#     }
	.loc 7 7501 0
	#       }
	.loc 7 7494 0
	#         // end step
	.loc 7 7488 0
	#   
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7494 0
	#         // end step
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8183, A, 0
	.loc 7 7501 0
	#       }
	.loc 7 7499 0
	#         }
	.loc 7 7496 0
	#           emit_line("ELSE step + 1 END");
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8184, A, 0
	.loc 7 7497 0
	#         } else {
.data
	.L8185:
	.string "ELSE step + 1 END"
.text
	mov A, .L8185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8186:
	mov A, B
	add SP, 1
	jmp .L8187
	.L8184:
	.loc 7 7499 0
	#         }
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7499 0
	#         }
.data
	.L8188:
	.string "ELSE %s END"
.text
	mov A, .L8188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8189:
	mov A, B
	add SP, 2
	.L8187:
	.loc 7 7501 0
	#       }
	mov A, .L8190
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8190:
	mov A, B
	.L8183:
	.loc 7 7515 0
	#       }
	.loc 7 7503 0
	#         if (prev_pc != -1) {
	.loc 7 7492 0
	#     if (ce->pc != prev_pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7487 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8191, A, 0
	.loc 7 7515 0
	#       }
	.loc 7 7511 0
	#         }
	.loc 7 7504 0
	#           // end pc
	.loc 7 7488 0
	#   
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7504 0
	#           // end pc
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8192, A, 0
	.loc 7 7511 0
	#         }
	.loc 7 7509 0
	#           }
	.loc 7 7506 0
	#             emit_line("END");
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L8193, A, 0
	.loc 7 7506 0
	#             emit_line("END");
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L8193:
	mov A, B
	jeq .L8194, A, 0
	.loc 7 7507 0
	#           } else {
.data
	.L8195:
	.string "END"
.text
	mov A, .L8195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8196:
	mov A, B
	add SP, 1
	jmp .L8197
	.L8194:
	.loc 7 7509 0
	#           }
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7509 0
	#           }
.data
	.L8198:
	.string "ELSE %s END"
.text
	mov A, .L8198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8199:
	mov A, B
	add SP, 2
	.L8197:
	.loc 7 7511 0
	#         }
	mov A, .L8200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8200:
	mov A, B
	.L8192:
	.loc 7 7513 0
	#         inc_indent();
	.loc 7 7492 0
	#     if (ce->pc != prev_pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7513 0
	#         inc_indent();
.data
	.L8201:
	.string "WHEN %d THEN"
.text
	mov A, .L8201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8202:
	mov A, B
	add SP, 2
	.loc 7 7514 0
	#         emit_line("CASE pc");
	mov A, .L8203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8203:
	mov A, B
	.loc 7 7515 0
	#       }
.data
	.L8204:
	.string "CASE pc"
.text
	mov A, .L8204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8205:
	mov A, B
	add SP, 1
	.L8191:
	.loc 7 7517 0
	#       inc_indent();
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7517 0
	#       inc_indent();
.data
	.L8206:
	.string "WHEN %d THEN"
.text
	mov A, .L8206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8207:
	mov A, B
	add SP, 2
	.loc 7 7518 0
	#       emit_line("CASE step");
	mov A, .L8208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8208:
	mov A, B
	.loc 7 7519 0
	#     }
.data
	.L8209:
	.string "CASE step"
.text
	mov A, .L8209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8210:
	mov A, B
	add SP, 1
	.L8182:
	.loc 7 7521 0
	#     prev_part = part;
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7521 0
	#     prev_part = part;
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7521 0
	#     prev_part = part;
.data
	.L8211:
	.string "WHEN %d THEN %s"
.text
	mov A, .L8211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8212:
	mov A, B
	add SP, 3
	.loc 7 7522 0
	#     prev_pc = ce->pc;
	.loc 7 7492 0
	#     if (ce->pc != prev_pc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7523 0
	#   }
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7523 0
	#   }
	.L1337:
	.loc 7 7491 0
	#     int part = ce->pc / CHUNKED_FUNC_SIZE;
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7523 0
	#   }
	jmp .L1336
	.L1338:
	.loc 7 7529 0
	#   }
	.loc 7 7526 0
	#     emit_line("ELSE step+1 END");
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8213, A, 0
	.loc 7 7527 0
	#   } else {
.data
	.L8214:
	.string "ELSE step+1 END"
.text
	mov A, .L8214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8215:
	mov A, B
	add SP, 1
	jmp .L8216
	.L8213:
	.loc 7 7529 0
	#   }
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7529 0
	#   }
.data
	.L8217:
	.string "ELSE %s END"
.text
	mov A, .L8217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8218:
	mov A, B
	add SP, 2
	.L8216:
	.loc 7 7536 0
	#     }
	.loc 7 7531 0
	#     dec_indent();
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 7536 0
	#     }
	.L1339:
	.loc 7 7531 0
	#     dec_indent();
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8219, A, 0
	jmp .L8220
	.L8219:
	.loc 7 7536 0
	#     }
	jmp .L1341
	.L8220:
	.loc 7 7532 0
	#     if (col == SQLITE3_PC || col == SQLITE3_STEP) {
	mov A, .L8221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8221:
	mov A, B
	.loc 7 7536 0
	#     }
	.loc 7 7533 0
	#       emit_line("END");
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L8222, A, 0
	.loc 7 7533 0
	#       emit_line("END");
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L8222:
	mov A, B
	jeq .L8223, A, 0
	.loc 7 7534 0
	#     } else {
.data
	.L8224:
	.string "END"
.text
	mov A, .L8224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8225:
	mov A, B
	add SP, 1
	jmp .L8226
	.L8223:
	.loc 7 7536 0
	#     }
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7478 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7536 0
	#     }
.data
	.L8227:
	.string "ELSE %s END"
.text
	mov A, .L8227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8228:
	mov A, B
	add SP, 2
	.L8226:
	.L1340:
	.loc 7 7531 0
	#     dec_indent();
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7536 0
	#     }
	jmp .L1339
	.L1341:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_sqlite3:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 66
	.loc 7 7594 0
	#             " WHERE running = 0;");
	.loc 7 7543 0
	#   SQLite3CaseExpr roots[SQLITE3_NUM_COLS] = {};
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov B, reg_names
	store A, B
	.loc 7 7544 0
	#   SQLite3CaseExpr* cols[SQLITE3_NUM_COLS];
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 7545 0
	#   for (int i = 0; i < SQLITE3_NUM_COLS; i++) {
	.loc 7 7548 0
	#   }
	.loc 7 7546 0
	#     roots[i].next = NULL;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777155
	mov A, 0
	store A, B
	.loc 7 7548 0
	#   }
	.L1342:
	.loc 7 7546 0
	#     roots[i].next = NULL;
	mov B, BP
	add B, 16777155
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8229, A, 0
	jmp .L8230
	.L8229:
	.loc 7 7548 0
	#   }
	jmp .L1344
	.L8230:
	.loc 7 7547 0
	#     cols[i] = &roots[i];
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7544 0
	#   SQLite3CaseExpr* cols[SQLITE3_NUM_COLS];
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7546 0
	#     roots[i].next = NULL;
	mov B, BP
	add B, 16777155
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L8231:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7548 0
	#   }
	.loc 7 7544 0
	#   SQLite3CaseExpr* cols[SQLITE3_NUM_COLS];
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7546 0
	#     roots[i].next = NULL;
	mov B, BP
	add B, 16777155
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L8232:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7548 0
	#   }
	.loc 7 7545 0
	#   for (int i = 0; i < SQLITE3_NUM_COLS; i++) {
	mov A, BP
	add A, 16777156
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7546 0
	#     roots[i].next = NULL;
	mov B, BP
	add B, 16777155
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7548 0
	#   }
	.L1343:
	.loc 7 7546 0
	#     roots[i].next = NULL;
	mov B, BP
	add B, 16777155
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777155
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7548 0
	#   }
	jmp .L1342
	.L1344:
	.loc 7 7550 0
	#   for (int i = 0; i < SQLITE3_NUM_COLS; i++) {
	.loc 7 7545 0
	#   for (int i = 0; i < SQLITE3_NUM_COLS; i++) {
	mov A, BP
	add A, 16777156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7550 0
	#   for (int i = 0; i < SQLITE3_NUM_COLS; i++) {
	.loc 7 7536 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_transpose_insts
	.L8233:
	mov A, B
	add SP, 2
	.loc 7 7552 0
	#   }
	.loc 7 7551 0
	#     cols[i] = roots[i].next;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777154
	mov A, 0
	store A, B
	.loc 7 7552 0
	#   }
	.L1345:
	.loc 7 7551 0
	#     cols[i] = roots[i].next;
	mov B, BP
	add B, 16777154
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8234, A, 0
	jmp .L8235
	.L8234:
	.loc 7 7552 0
	#   }
	jmp .L1347
	.L8235:
	.loc 7 7544 0
	#   SQLite3CaseExpr* cols[SQLITE3_NUM_COLS];
	mov A, BP
	add A, 16777168
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7551 0
	#     cols[i] = roots[i].next;
	mov B, BP
	add B, 16777154
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L8236:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7552 0
	#   }
	.loc 7 7545 0
	#   for (int i = 0; i < SQLITE3_NUM_COLS; i++) {
	mov A, BP
	add A, 16777156
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7551 0
	#     cols[i] = roots[i].next;
	mov B, BP
	add B, 16777154
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 7552 0
	#   }
	.L1346:
	.loc 7 7551 0
	#     cols[i] = roots[i].next;
	mov B, BP
	add B, 16777154
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777154
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7552 0
	#   }
	jmp .L1345
	.L1347:
	.loc 7 7555 0
	# 
	mov A, .L8237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_emit_stdin
	.L8237:
	mov A, B
	.loc 7 7557 0
	#   inc_indent();
.data
	.L8238:
	.string "WITH"
.text
	mov A, .L8238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8239:
	mov A, B
	add SP, 1
	.loc 7 7558 0
	#   emit_line("elvm AS (");
	mov A, .L8240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8240:
	mov A, B
	.loc 7 7559 0
	#   inc_indent();
.data
	.L8241:
	.string "elvm AS ("
.text
	mov A, .L8241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8242:
	mov A, B
	add SP, 1
	.loc 7 7560 0
	#   emit_line("SELECT");
	mov A, .L8243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8243:
	mov A, B
	.loc 7 7561 0
	#   inc_indent();
.data
	.L8244:
	.string "SELECT"
.text
	mov A, .L8244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8245:
	mov A, B
	add SP, 1
	.loc 7 7562 0
	#   for (int i = 0; i < 7; i++) {
	mov A, .L8246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8246:
	mov A, B
	.loc 7 7564 0
	#   }
	.loc 7 7563 0
	#     emit_line("0 %s,", COL_NAMES[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777153
	mov A, 0
	store A, B
	.loc 7 7564 0
	#   }
	.L1348:
	.loc 7 7563 0
	#     emit_line("0 %s,", COL_NAMES[i]);
	mov B, BP
	add B, 16777153
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8247, A, 0
	jmp .L8248
	.L8247:
	.loc 7 7564 0
	#   }
	jmp .L1350
	.L8248:
	.loc 7 7285 0
	# }
	mov A, COL_NAMES
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7563 0
	#     emit_line("0 %s,", COL_NAMES[i]);
	mov B, BP
	add B, 16777153
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7564 0
	#   }
.data
	.L8249:
	.string "0 %s,"
.text
	mov A, .L8249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8250:
	mov A, B
	add SP, 2
	.L1349:
	.loc 7 7563 0
	#     emit_line("0 %s,", COL_NAMES[i]);
	mov B, BP
	add B, 16777153
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777153
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7564 0
	#   }
	jmp .L1348
	.L1350:
	.loc 7 7566 0
	#   emit_line("1 running,");
.data
	.L8251:
	.string "0 step,"
.text
	mov A, .L8251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8252:
	mov A, B
	add SP, 1
	.loc 7 7567 0
	#   emit_line("json('{");
.data
	.L8253:
	.string "1 running,"
.text
	mov A, .L8253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8254:
	mov A, B
	add SP, 1
	.loc 7 7568 0
	#   int mp = 0;
.data
	.L8255:
	.string "json('{"
.text
	mov A, .L8255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8256:
	mov A, B
	add SP, 1
	.loc 7 7569 0
	#   for (Data* data = module->data; data; data = data->next, mp++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777152
	mov A, 0
	store A, B
	.loc 7 7572 0
	#     }
	.loc 7 7570 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	.loc 7 7536 0
	#     }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777151
	store A, B
	.loc 7 7572 0
	#     }
	.L1351:
	.loc 7 7570 0
	#     if (data->v) {
	mov B, BP
	add B, 16777151
	load A, B
	jeq .L8257, A, 0
	jmp .L8258
	.L8257:
	.loc 7 7572 0
	#     }
	jmp .L1353
	.L8258:
	.loc 7 7571 0
	#       emit_line(" %c\"%d\":%d", mp ? ',' : ' ', mp, data->v);
	.loc 7 7570 0
	#     if (data->v) {
	mov B, BP
	add B, 16777151
	load A, B
	mov B, A
	load A, B
	jeq .L8259, A, 0
	.loc 7 7572 0
	#     }
	.loc 7 7570 0
	#     if (data->v) {
	mov B, BP
	add B, 16777151
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7569 0
	#   for (Data* data = module->data; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777152
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7572 0
	#     }
	.loc 7 7569 0
	#   for (Data* data = module->data; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777152
	load A, B
	jeq .L8260, A, 0
	.loc 7 7572 0
	#     }
	mov A, 44
	jmp .L8261
	.L8260:
	mov A, 32
	.L8261:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L8262:
	.string " %c\"%d\":%d"
.text
	mov A, .L8262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8263:
	mov A, B
	add SP, 4
	.L8259:
	.L1352:
	.loc 7 7570 0
	#     if (data->v) {
	mov B, BP
	add B, 16777151
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777151
	store A, B
	.loc 7 7569 0
	#   for (Data* data = module->data; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777152
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777152
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7572 0
	#     }
	jmp .L1351
	.L1353:
	.loc 7 7575 0
	#   emit_line("(SELECT i FROM stdin) stdin,");
.data
	.L8264:
	.string "}') mem,"
.text
	mov A, .L8264
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8265
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8265:
	mov A, B
	add SP, 1
	.loc 7 7576 0
	#   emit_line("'' stdout,");
.data
	.L8266:
	.string "(SELECT i FROM stdin) stdin,"
.text
	mov A, .L8266
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8267
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8267:
	mov A, B
	add SP, 1
	.loc 7 7577 0
	#   emit_line("0 cycle");
.data
	.L8268:
	.string "'' stdout,"
.text
	mov A, .L8268
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8269
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8269:
	mov A, B
	add SP, 1
	.loc 7 7578 0
	#   dec_indent();
.data
	.L8270:
	.string "0 cycle"
.text
	mov A, .L8270
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8271
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8271:
	mov A, B
	add SP, 1
	.loc 7 7579 0
	#   emit_line("UNION ALL SELECT");
	mov A, .L8272
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8272:
	mov A, B
	.loc 7 7580 0
	#   inc_indent();
.data
	.L8273:
	.string "UNION ALL SELECT"
.text
	mov A, .L8273
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8274
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8274:
	mov A, B
	add SP, 1
	.loc 7 7581 0
	# 
	mov A, .L8275
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8275:
	mov A, B
	.loc 7 7585 0
	#   }
	.loc 7 7583 0
	#     sqlite3_emit_column(cols[i], i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777150
	mov A, 0
	store A, B
	.loc 7 7585 0
	#   }
	.L1354:
	.loc 7 7583 0
	#     sqlite3_emit_column(cols[i], i);
	mov B, BP
	add B, 16777150
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7285 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8276, A, 0
	jmp .L8277
	.L8276:
	.loc 7 7585 0
	#   }
	jmp .L1356
	.L8277:
	.loc 7 7584 0
	#     emit_line(",");
	.loc 7 7583 0
	#     sqlite3_emit_column(cols[i], i);
	mov B, BP
	add B, 16777150
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7584 0
	#     emit_line(",");
	.loc 7 7545 0
	#   for (int i = 0; i < SQLITE3_NUM_COLS; i++) {
	mov A, BP
	add A, 16777156
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7583 0
	#     sqlite3_emit_column(cols[i], i);
	mov B, BP
	add B, 16777150
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8278
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp sqlite3_emit_column
	.L8278:
	mov A, B
	add SP, 2
	.loc 7 7585 0
	#   }
.data
	.L8279:
	.string ","
.text
	mov A, .L8279
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8280
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8280:
	mov A, B
	add SP, 1
	.L1355:
	.loc 7 7583 0
	#     sqlite3_emit_column(cols[i], i);
	mov B, BP
	add B, 16777150
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777150
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7585 0
	#   }
	jmp .L1354
	.L1356:
	.loc 7 7587 0
	#   dec_indent();
.data
	.L8281:
	.string "cycle + 1"
.text
	mov A, .L8281
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8282
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8282:
	mov A, B
	add SP, 1
	.loc 7 7588 0
	#   emit_line("FROM elvm WHERE running = 1");
	mov A, .L8283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8283:
	mov A, B
	.loc 7 7589 0
	#   dec_indent();
.data
	.L8284:
	.string "FROM elvm WHERE running = 1"
.text
	mov A, .L8284
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8285:
	mov A, B
	add SP, 1
	.loc 7 7590 0
	#   emit_line(")");
	mov A, .L8286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8286:
	mov A, B
	.loc 7 7591 0
	#   dec_indent();
.data
	.L8287:
	.string ")"
.text
	mov A, .L8287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8288:
	mov A, B
	add SP, 1
	.loc 7 7592 0
	# 
	mov A, .L8289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8289:
	mov A, B
	.loc 7 7594 0
	#             " WHERE running = 0;");
.data
	.L8290:
	.string "SELECT writefile('output.txt', stdout) FROM elvm WHERE running = 0;"
.text
	mov A, .L8290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8291:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
swift_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7611 0
	# }
	.loc 7 7602 0
	#   emit_line("private func func%d() {", func_id);
.data
	.L8292:
	.string ""
.text
	mov A, .L8292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8293:
	mov A, B
	add SP, 1
	.loc 7 7603 0
	#   inc_indent();
	.loc 7 7594 0
	#             " WHERE running = 0;");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7603 0
	#   inc_indent();
.data
	.L8294:
	.string "private func func%d() {"
.text
	mov A, .L8294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8295:
	mov A, B
	add SP, 2
	.loc 7 7604 0
	#   emit_line("while %d <= pc && pc < %d {",
	mov A, .L8296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8296:
	mov A, B
	.loc 7 7605 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 7594 0
	#             " WHERE running = 0;");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7605 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L8297:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7605 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 7594 0
	#             " WHERE running = 0;");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L8298:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7605 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L8299:
	.string "while %d <= pc && pc < %d {"
.text
	mov A, .L8299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8300:
	mov A, B
	add SP, 3
	.loc 7 7607 0
	#   emit_line("switch pc {");
	mov A, .L8301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8301:
	mov A, B
	.loc 7 7608 0
	#   emit_line("case -1:  /* dummy */");
.data
	.L8302:
	.string "switch pc {"
.text
	mov A, .L8302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8303:
	mov A, B
	add SP, 1
	.loc 7 7609 0
	#   inc_indent();
.data
	.L8304:
	.string "case -1:  /* dummy */"
.text
	mov A, .L8304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8305:
	mov A, B
	add SP, 1
	.loc 7 7610 0
	#   emit_line("break");
	mov A, .L8306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8306:
	mov A, B
	.loc 7 7611 0
	# }
.data
	.L8307:
	.string "break"
.text
	mov A, .L8307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8308:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
swift_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7623 0
	# }
	.loc 7 7615 0
	#   emit_line("default:");
	mov A, .L8309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8309:
	mov A, B
	.loc 7 7616 0
	#   emit_line("  break");
.data
	.L8310:
	.string "default:"
.text
	mov A, .L8310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8311:
	mov A, B
	add SP, 1
	.loc 7 7617 0
	#   emit_line("}");
.data
	.L8312:
	.string "  break"
.text
	mov A, .L8312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8313:
	mov A, B
	add SP, 1
	.loc 7 7618 0
	#   emit_line("pc += 1");
.data
	.L8314:
	.string "}"
.text
	mov A, .L8314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8315:
	mov A, B
	add SP, 1
	.loc 7 7619 0
	#   dec_indent();
.data
	.L8316:
	.string "pc += 1"
.text
	mov A, .L8316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8317:
	mov A, B
	add SP, 1
	.loc 7 7620 0
	#   emit_line("}");
	mov A, .L8318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8318:
	mov A, B
	.loc 7 7621 0
	#   dec_indent();
.data
	.L8319:
	.string "}"
.text
	mov A, .L8319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8320:
	mov A, B
	add SP, 1
	.loc 7 7622 0
	#   emit_line("}");
	mov A, .L8321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8321:
	mov A, B
	.loc 7 7623 0
	# }
.data
	.L8322:
	.string "}"
.text
	mov A, .L8322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8323:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
swift_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7630 0
	# }
	.loc 7 7627 0
	#   dec_indent();
.data
	.L8324:
	.string ""
.text
	mov A, .L8324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8325:
	mov A, B
	add SP, 1
	.loc 7 7628 0
	#   emit_line("case %d:", pc);
	mov A, .L8326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8326:
	mov A, B
	.loc 7 7629 0
	#   inc_indent();
	.loc 7 7623 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7629 0
	#   inc_indent();
.data
	.L8327:
	.string "case %d:"
.text
	mov A, .L8327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8328:
	mov A, B
	add SP, 2
	.loc 7 7630 0
	# }
	mov A, .L8329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8329:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
swift_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 7707 0
	#     error("oops");
	.loc 7 7634 0
	#   case MOV:
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7707 0
	#     error("oops");
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8330, A, 0
	jmp .L1358
	.L8330:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8331, A, 0
	jmp .L1359
	.L8331:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8332, A, 0
	jmp .L1360
	.L8332:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8333, A, 0
	jmp .L1361
	.L8333:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8334, A, 0
	jmp .L1362
	.L8334:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8335, A, 0
	jmp .L1363
	.L8335:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8336, A, 0
	jmp .L1364
	.L8336:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8337, A, 0
	jmp .L1365
	.L8337:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8338, A, 0
	jmp .L1366
	.L8338:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8339, A, 0
	jmp .L1367
	.L8339:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8340, A, 0
	jmp .L1368
	.L8340:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8341, A, 0
	jmp .L1369
	.L8341:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8342, A, 0
	jmp .L1370
	.L8342:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8343, A, 0
	jmp .L1371
	.L8343:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8344, A, 0
	jmp .L1372
	.L8344:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8345, A, 0
	jmp .L1373
	.L8345:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8346, A, 0
	jmp .L1374
	.L8346:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8347, A, 0
	jmp .L1375
	.L8347:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8348, A, 0
	jmp .L1376
	.L8348:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8349, A, 0
	jmp .L1377
	.L8349:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8350, A, 0
	jmp .L1378
	.L8350:
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8351, A, 0
	jmp .L1379
	.L8351:
	jmp .L1380
	.loc 7 7640 0
	#         /* emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst)); */
	.loc 7 7635 0
	#     {
	.L1358:
	.loc 7 7640 0
	#         /* emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst)); */
	.loc 7 7637 0
	#       const char *_r = src_str(inst);
	mov A, 0
	mov B, SP
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7637 0
	#       const char *_r = src_str(inst);
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7638 0
	#       if (strcmp(_l, _r)) {
	mov A, 0
	mov B, SP
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8352:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7640 0
	#         /* emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst)); */
	.loc 7 7639 0
	#         emit_line("%s = %s", _l, _r);
	.loc 7 7638 0
	#       if (strcmp(_l, _r)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7637 0
	#       const char *_r = src_str(inst);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L8353:
	mov A, B
	add SP, 2
	jeq .L8354, A, 0
	.loc 7 7640 0
	#         /* emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst)); */
	.loc 7 7638 0
	#       if (strcmp(_l, _r)) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7637 0
	#       const char *_r = src_str(inst);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7640 0
	#         /* emit_line("%s = %s", reg_names[inst->dst.reg], src_str(inst)); */
.data
	.L8355:
	.string "%s = %s"
.text
	mov A, .L8355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8356:
	mov A, B
	add SP, 3
	.L8354:
	.loc 7 7644 0
	# 
	jmp .L1357
	.loc 7 7646 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.L1359:
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8357
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8357:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7646 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7646 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7646 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7646 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7646 0
	#     emit_line("%s = (%s + %s) & " UINT_MAX_STR,
.data
	.L8358:
	.string "%s = (%s + %s) & 16777215"
.text
	mov A, .L8358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8359:
	mov A, B
	add SP, 4
	.loc 7 7650 0
	# 
	jmp .L1357
	.loc 7 7652 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.L1360:
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8360:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7652 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7652 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7652 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7652 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7652 0
	#     emit_line("%s = (%s - %s) & " UINT_MAX_STR,
.data
	.L8361:
	.string "%s = (%s - %s) & 16777215"
.text
	mov A, .L8361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8362:
	mov A, B
	add SP, 4
	.loc 7 7656 0
	# 
	jmp .L1357
	.loc 7 7658 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.L1361:
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8363:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7658 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7658 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7658 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], src_str(inst));
.data
	.L8364:
	.string "%s = mem[%s]"
.text
	mov A, .L8364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8365:
	mov A, B
	add SP, 3
	.loc 7 7660 0
	# 
	jmp .L1357
	.loc 7 7662 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.L1362:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7662 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7662 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8366:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7662 0
	#     emit_line("mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L8367:
	.string "mem[%s] = %s"
.text
	mov A, .L8367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8368:
	mov A, B
	add SP, 3
	.loc 7 7664 0
	# 
	jmp .L1357
	.loc 7 7666 0
	#     emit_line("print(\"\\(UnicodeScalar(%s)!)\", terminator:\"\")", src_str(inst));
	.L1363:
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L8369:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7666 0
	#     emit_line("print(\"\\(UnicodeScalar(%s)!)\", terminator:\"\")", src_str(inst));
.data
	.L8370:
	.string "print(\"\\(UnicodeScalar(%s)!)\", terminator:\"\")"
.text
	mov A, .L8370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8371:
	mov A, B
	add SP, 2
	.loc 7 7668 0
	# 
	jmp .L1357
	.loc 7 7670 0
	#     emit_line("if true {");
	.L1364:
.data
	.L8372:
	.string "if true {"
.text
	mov A, .L8372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8373:
	mov A, B
	add SP, 1
	.loc 7 7672 0
	#     emit_line("let _c = getchar()");
	mov A, .L8374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8374:
	mov A, B
	.loc 7 7673 0
	#     emit_line("%s = _c == -1 ? 0 : Int(_c)", reg_names[inst->dst.reg]);
.data
	.L8375:
	.string "let _c = getchar()"
.text
	mov A, .L8375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8376:
	mov A, B
	add SP, 1
	.loc 7 7674 0
	#     dec_indent();
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7674 0
	#     dec_indent();
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7674 0
	#     dec_indent();
.data
	.L8377:
	.string "%s = _c == -1 ? 0 : Int(_c)"
.text
	mov A, .L8377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8378:
	mov A, B
	add SP, 2
	.loc 7 7675 0
	#     emit_line("}");
	mov A, .L8379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8379:
	mov A, B
	.loc 7 7676 0
	#     break;
.data
	.L8380:
	.string "}"
.text
	mov A, .L8380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8381:
	mov A, B
	add SP, 1
	.loc 7 7677 0
	# 
	jmp .L1357
	.loc 7 7679 0
	#     emit_line("exit(0)");
	.L1365:
.data
	.L8382:
	.string "exit(0)"
.text
	mov A, .L8382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8383:
	mov A, B
	add SP, 1
	.loc 7 7681 0
	# 
	jmp .L1357
	.loc 7 7683 0
	#     break;
	.L1366:
	jmp .L1357
	.loc 7 7686 0
	#   case NE:
	.L1367:
	.L1368:
	.L1369:
	.L1370:
	.L1371:
	.L1372:
.data
	.L8384:
	.string "true"
.text
	mov A, .L8384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L8385:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7686 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7686 0
	#   case NE:
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7686 0
	#   case NE:
.data
	.L8386:
	.string "%s = %s ? 1 : 0"
.text
	mov A, .L8386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8387
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8387:
	mov A, B
	add SP, 3
	.loc 7 7694 0
	# 
	jmp .L1357
	.loc 7 7696 0
	#   case JNE:
	.L1373:
	.L1374:
	.L1375:
	.L1376:
	.L1377:
	.L1378:
	.L1379:
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8388
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L8388:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7696 0
	#   case JNE:
.data
	.L8389:
	.string "true"
.text
	mov A, .L8389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7630 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8390
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L8390:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7696 0
	#   case JNE:
.data
	.L8391:
	.string "if %s { pc = %s - 1 }"
.text
	mov A, .L8391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8392
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8392:
	mov A, B
	add SP, 3
	.loc 7 7705 0
	# 
	jmp .L1357
	.loc 7 7707 0
	#     error("oops");
	.L1380:
.data
	.L8393:
	.string "oops"
.text
	mov A, .L8393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8394:
	mov A, B
	add SP, 1
	.L1357:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
swift_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 7735 0
	# }
	.loc 7 7713 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7726 0
	#     }
	.loc 7 7714 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 7726 0
	#     }
	.L1381:
	.loc 7 7707 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	jeq .L8395, A, 0
	jmp .L8396
	.L8395:
	.loc 7 7726 0
	#     }
	jmp .L1383
	.L8396:
	.loc 7 7715 0
	#       int mc = mp / 1000;
	.loc 7 7707 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L8397, A, 0
	.loc 7 7726 0
	#     }
	.loc 7 7716 0
	#       while (prev_mc != mc) {
	mov A, 0
	mov B, SP
	.loc 7 7714 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7716 0
	#       while (prev_mc != mc) {
	mov A, 1000
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L8398:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7724 0
	#       }
	.L1384:
	.loc 7 7717 0
	#         if (prev_mc != -1) {
	.loc 7 7713 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7716 0
	#       while (prev_mc != mc) {
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8399, A, 0
	.loc 7 7724 0
	#       }
	.loc 7 7720 0
	#         }
	.loc 7 7718 0
	#           dec_indent();
	.loc 7 7713 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7718 0
	#           dec_indent();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8400, A, 0
	.loc 7 7720 0
	#         }
	.loc 7 7719 0
	#           emit_line("}");
	mov A, .L8401
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8401:
	mov A, B
	.loc 7 7720 0
	#         }
.data
	.L8402:
	.string "}"
.text
	mov A, .L8402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8403:
	mov A, B
	add SP, 1
	.L8400:
	.loc 7 7722 0
	#         emit_line("private func init%d() {", prev_mc);
	.loc 7 7713 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7723 0
	#         inc_indent();
	.loc 7 7713 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7723 0
	#         inc_indent();
.data
	.L8404:
	.string "private func init%d() {"
.text
	mov A, .L8404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8405:
	mov A, B
	add SP, 2
	.loc 7 7724 0
	#       }
	mov A, .L8406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8406:
	mov A, B
	jmp .L8407
	.L8399:
	jmp .L1385
	.L8407:
	jmp .L1384
	.L1385:
	.loc 7 7726 0
	#     }
	.loc 7 7707 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7714 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7726 0
	#     }
.data
	.L8408:
	.string "mem[%d] = %d"
.text
	mov A, .L8408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8409:
	mov A, B
	add SP, 3
	.L8397:
	.L1382:
	.loc 7 7714 0
	#     if (data->v) {
	.loc 7 7707 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7714 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7726 0
	#     }
	jmp .L1381
	.L1383:
	.loc 7 7732 0
	#   }
	.loc 7 7730 0
	#     dec_indent();
	.loc 7 7713 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7730 0
	#     dec_indent();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8410, A, 0
	.loc 7 7732 0
	#   }
	.loc 7 7731 0
	#     emit_line("}");
	mov A, .L8411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8411:
	mov A, B
	.loc 7 7732 0
	#   }
.data
	.L8412:
	.string "}"
.text
	mov A, .L8412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8413:
	mov A, B
	add SP, 1
	.L8410:
	.loc 7 7735 0
	# }
	.loc 7 7713 0
	#   for (int mp = 0; data; data = data->next, mp++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7735 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_swift:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 7769 0
	# }
	.loc 7 7739 0
	#   for (int i = 0; i < 7; i++) {
.data
	.L8414:
	.string "import Foundation"
.text
	mov A, .L8414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8415:
	mov A, B
	add SP, 1
	.loc 7 7741 0
	#   }
	.loc 7 7740 0
	#     emit_line("private var %s: Int = 0", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 7741 0
	#   }
	.L1386:
	.loc 7 7740 0
	#     emit_line("private var %s: Int = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8416, A, 0
	jmp .L8417
	.L8416:
	.loc 7 7741 0
	#   }
	jmp .L1388
	.L8417:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7740 0
	#     emit_line("private var %s: Int = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7741 0
	#   }
.data
	.L8418:
	.string "private var %s: Int = 0"
.text
	mov A, .L8418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8419:
	mov A, B
	add SP, 2
	.L1387:
	.loc 7 7740 0
	#     emit_line("private var %s: Int = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7741 0
	#   }
	jmp .L1386
	.L1388:
	.loc 7 7743 0
	# 
.data
	.L8420:
	.string "private var mem = [Int](repeating: 0, count: 1<<24)"
.text
	mov A, .L8420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8421:
	mov A, B
	add SP, 1
	.loc 7 7745 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 7735 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp swift_init_state
	.L8422:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7747 0
	#   int num_funcs = emit_chunked_main_loop(module->text,
	mov A, 256
	mov B, CHUNKED_FUNC_SIZE
	store A, B
	.loc 7 7748 0
	#                                          swift_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, swift_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, swift_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, swift_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, swift_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7735 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L8423:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 7753 0
	#   for (int i = 0; i < num_inits; i++) {
.data
	.L8424:
	.string ""
.text
	mov A, .L8424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8425:
	mov A, B
	add SP, 1
	.loc 7 7755 0
	#   }
	.loc 7 7754 0
	#     emit_line("init%d()", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 7755 0
	#   }
	.L1389:
	.loc 7 7754 0
	#     emit_line("init%d()", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7745 0
	# 
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8426, A, 0
	jmp .L8427
	.L8426:
	.loc 7 7755 0
	#   }
	jmp .L1391
	.L8427:
	.loc 7 7754 0
	#     emit_line("init%d()", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7755 0
	#   }
.data
	.L8428:
	.string "init%d()"
.text
	mov A, .L8428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8429:
	mov A, B
	add SP, 2
	.L1390:
	.loc 7 7754 0
	#     emit_line("init%d()", i);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777212
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7755 0
	#   }
	jmp .L1389
	.L1391:
	.loc 7 7757 0
	#   emit_line("while true {");
.data
	.L8430:
	.string ""
.text
	mov A, .L8430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8431:
	mov A, B
	add SP, 1
	.loc 7 7758 0
	#   inc_indent();
.data
	.L8432:
	.string "while true {"
.text
	mov A, .L8432
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8433:
	mov A, B
	add SP, 1
	.loc 7 7759 0
	#   emit_line("switch pc / %d | 0 {", CHUNKED_FUNC_SIZE);
	mov A, .L8434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8434:
	mov A, B
	.loc 7 7760 0
	#   for (int i = 0; i < num_funcs; i++) {
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7760 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L8435:
	.string "switch pc / %d | 0 {"
.text
	mov A, .L8435
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8436:
	mov A, B
	add SP, 2
	.loc 7 7763 0
	#   }
	.loc 7 7761 0
	#     emit_line("case %d:", i);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 7763 0
	#   }
	.L1392:
	.loc 7 7761 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7748 0
	#                                          swift_emit_func_prologue,
	mov B, BP
	add B, 16777213
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8437, A, 0
	jmp .L8438
	.L8437:
	.loc 7 7763 0
	#   }
	jmp .L1394
	.L8438:
	.loc 7 7762 0
	#     emit_line(" func%d()", i);
	.loc 7 7761 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7762 0
	#     emit_line(" func%d()", i);
.data
	.L8439:
	.string "case %d:"
.text
	mov A, .L8439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8440
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8440:
	mov A, B
	add SP, 2
	.loc 7 7763 0
	#   }
	.loc 7 7761 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7763 0
	#   }
.data
	.L8441:
	.string " func%d()"
.text
	mov A, .L8441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8442:
	mov A, B
	add SP, 2
	.L1393:
	.loc 7 7761 0
	#     emit_line("case %d:", i);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7763 0
	#   }
	jmp .L1392
	.L1394:
	.loc 7 7765 0
	#   emit_line(" break");
.data
	.L8443:
	.string "default:"
.text
	mov A, .L8443
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8444:
	mov A, B
	add SP, 1
	.loc 7 7766 0
	#   emit_line("}");
.data
	.L8445:
	.string " break"
.text
	mov A, .L8445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8446:
	mov A, B
	add SP, 1
	.loc 7 7767 0
	#   dec_indent();
.data
	.L8447:
	.string "}"
.text
	mov A, .L8447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8448:
	mov A, B
	add SP, 1
	.loc 7 7768 0
	#   emit_line("}");
	mov A, .L8449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8449:
	mov A, B
	.loc 7 7769 0
	# }
.data
	.L8450:
	.string "}"
.text
	mov A, .L8450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8451:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tex_value_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7780 0
	#   }
	.loc 7 7775 0
	#     return format("\\@reg@%s", reg_names[v->reg]);
	.loc 7 7769 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8452, A, 0
	.loc 7 7776 0
	#   } else if (v->type == IMM) {
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7776 0
	#   } else if (v->type == IMM) {
	.loc 7 7769 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7776 0
	#   } else if (v->type == IMM) {
.data
	.L8453:
	.string "\\@reg@%s"
.text
	mov A, .L8453
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8454:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L8455
	.L8452:
	.loc 7 7780 0
	#   }
	.loc 7 7776 0
	#   } else if (v->type == IMM) {
	.loc 7 7769 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8456, A, 0
	.loc 7 7778 0
	#   } else {
	.loc 7 7769 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7778 0
	#   } else {
.data
	.L8457:
	.string "%d"
.text
	mov A, .L8457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8458:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L8459
	.L8456:
	.loc 7 7780 0
	#   }
.data
	.L8460:
	.string "invalid value"
.text
	mov A, .L8460
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8461
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8461:
	mov A, B
	add SP, 1
	.L8459:
	.L8455:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tex_src_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 7785 0
	# }
	.loc 7 7780 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_value_str
	.L8462:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tex_cmp_op_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 7799 0
	#       error("oops");
	.loc 7 7789 0
	#   switch (op) {
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7785 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L8463:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7799 0
	#       error("oops");
	.loc 7 7789 0
	#   switch (op) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8464, A, 0
	jmp .L1396
	.L8464:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8465, A, 0
	jmp .L1397
	.L8465:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8466, A, 0
	jmp .L1398
	.L8466:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8467, A, 0
	jmp .L1399
	.L8467:
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8468, A, 0
	jmp .L1400
	.L8468:
	jmp .L1401
	.loc 7 7791 0
	#       return "=";
	.L1396:
.data
	.L8469:
	.string "="
.text
	mov A, .L8469
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 7793 0
	#     case JLT:
	.L1397:
	.L1398:
.data
	.L8470:
	.string "<"
.text
	mov A, .L8470
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 7796 0
	#     case JGT:
	.L1399:
	.L1400:
.data
	.L8471:
	.string ">"
.text
	mov A, .L8471
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 7799 0
	#       error("oops");
	.L1401:
.data
	.L8472:
	.string "oops"
.text
	mov A, .L8472
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8473:
	mov A, B
	add SP, 1
	.L1395:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tex_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 7909 0
	#     error("oops");
	.loc 7 7805 0
	#   case MOV:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7909 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8474, A, 0
	jmp .L1403
	.L8474:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8475, A, 0
	jmp .L1404
	.L8475:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8476, A, 0
	jmp .L1405
	.L8476:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8477, A, 0
	jmp .L1406
	.L8477:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8478, A, 0
	jmp .L1407
	.L8478:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8479, A, 0
	jmp .L1408
	.L8479:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8480, A, 0
	jmp .L1409
	.L8480:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8481, A, 0
	jmp .L1410
	.L8481:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8482, A, 0
	jmp .L1411
	.L8482:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8483, A, 0
	jmp .L1412
	.L8483:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8484, A, 0
	jmp .L1413
	.L8484:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8485, A, 0
	jmp .L1414
	.L8485:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8486, A, 0
	jmp .L1415
	.L8486:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8487, A, 0
	jmp .L1416
	.L8487:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8488, A, 0
	jmp .L1417
	.L8488:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8489, A, 0
	jmp .L1418
	.L8489:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8490, A, 0
	jmp .L1419
	.L8490:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8491, A, 0
	jmp .L1420
	.L8491:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8492, A, 0
	jmp .L1421
	.L8492:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8493, A, 0
	jmp .L1422
	.L8493:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8494, A, 0
	jmp .L1423
	.L8494:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8495, A, 0
	jmp .L1424
	.L8495:
	jmp .L1425
	.loc 7 7806 0
	#     emit_line("\\edef\\@reg@%s{%s}%%", reg_names[inst->dst.reg], tex_src_str(inst));
	.L1403:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8496
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8496:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7806 0
	#     emit_line("\\edef\\@reg@%s{%s}%%", reg_names[inst->dst.reg], tex_src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7806 0
	#     emit_line("\\edef\\@reg@%s{%s}%%", reg_names[inst->dst.reg], tex_src_str(inst));
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7806 0
	#     emit_line("\\edef\\@reg@%s{%s}%%", reg_names[inst->dst.reg], tex_src_str(inst));
.data
	.L8497:
	.string "\\edef\\@reg@%s{%s}%%"
.text
	mov A, .L8497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8498
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8498:
	mov A, B
	add SP, 3
	.loc 7 7808 0
	# 
	jmp .L1402
	.loc 7 7810 0
	#     emit_line("\\count0=\\@reg@%s\\relax", reg_names[inst->dst.reg]);
	.L1404:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7810 0
	#     emit_line("\\count0=\\@reg@%s\\relax", reg_names[inst->dst.reg]);
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7810 0
	#     emit_line("\\count0=\\@reg@%s\\relax", reg_names[inst->dst.reg]);
.data
	.L8499:
	.string "\\count0=\\@reg@%s\\relax"
.text
	mov A, .L8499
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8500:
	mov A, B
	add SP, 2
	.loc 7 7812 0
	#     emit_line("\\ifnum\\count0>%d\\advance\\count0by-%s\\fi", UINT_MAX, "16777216");
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8501:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7812 0
	#     emit_line("\\ifnum\\count0>%d\\advance\\count0by-%s\\fi", UINT_MAX, "16777216");
.data
	.L8502:
	.string "\\advance\\count0by%s\\relax"
.text
	mov A, .L8502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8503
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8503:
	mov A, B
	add SP, 2
	.loc 7 7813 0
	#     emit_line("\\edef\\@reg@%s{\\the\\count0}%%", reg_names[inst->dst.reg]);
.data
	.L8504:
	.string "16777216"
.text
	mov A, .L8504
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16777215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L8505:
	.string "\\ifnum\\count0>%d\\advance\\count0by-%s\\fi"
.text
	mov A, .L8505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8506:
	mov A, B
	add SP, 3
	.loc 7 7814 0
	#     break;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7814 0
	#     break;
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7814 0
	#     break;
.data
	.L8507:
	.string "\\edef\\@reg@%s{\\the\\count0}%%"
.text
	mov A, .L8507
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8508:
	mov A, B
	add SP, 2
	.loc 7 7815 0
	# 
	jmp .L1402
	.loc 7 7817 0
	#     emit_line("\\count0=\\@reg@%s\\relax", reg_names[inst->dst.reg]);
	.L1405:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7817 0
	#     emit_line("\\count0=\\@reg@%s\\relax", reg_names[inst->dst.reg]);
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7817 0
	#     emit_line("\\count0=\\@reg@%s\\relax", reg_names[inst->dst.reg]);
.data
	.L8509:
	.string "\\count0=\\@reg@%s\\relax"
.text
	mov A, .L8509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8510
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8510:
	mov A, B
	add SP, 2
	.loc 7 7819 0
	#     emit_line("\\ifnum\\count0<0\\advance\\count0by%s\\fi", "16777216");
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8511
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8511:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7819 0
	#     emit_line("\\ifnum\\count0<0\\advance\\count0by%s\\fi", "16777216");
.data
	.L8512:
	.string "\\advance\\count0by-%s\\relax"
.text
	mov A, .L8512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8513:
	mov A, B
	add SP, 2
	.loc 7 7820 0
	#     emit_line("\\edef\\@reg@%s{\\the\\count0}%%", reg_names[inst->dst.reg]);
.data
	.L8514:
	.string "16777216"
.text
	mov A, .L8514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L8515:
	.string "\\ifnum\\count0<0\\advance\\count0by%s\\fi"
.text
	mov A, .L8515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8516:
	mov A, B
	add SP, 2
	.loc 7 7821 0
	#     break;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7821 0
	#     break;
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7821 0
	#     break;
.data
	.L8517:
	.string "\\edef\\@reg@%s{\\the\\count0}%%"
.text
	mov A, .L8517
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8518
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8518:
	mov A, B
	add SP, 2
	.loc 7 7822 0
	# 
	jmp .L1402
	.loc 7 7824 0
	#     emit_line("\\def\\@reg@%s{0}%%", reg_names[inst->dst.reg]);
	.L1406:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7824 0
	#     emit_line("\\def\\@reg@%s{0}%%", reg_names[inst->dst.reg]);
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7824 0
	#     emit_line("\\def\\@reg@%s{0}%%", reg_names[inst->dst.reg]);
.data
	.L8519:
	.string "\\def\\@reg@%s{0}%%"
.text
	mov A, .L8519
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8520
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8520:
	mov A, B
	add SP, 2
	.loc 7 7826 0
	#               tex_src_str(inst), reg_names[inst->dst.reg], tex_src_str(inst));
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8521:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7826 0
	#               tex_src_str(inst), reg_names[inst->dst.reg], tex_src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7826 0
	#               tex_src_str(inst), reg_names[inst->dst.reg], tex_src_str(inst));
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7826 0
	#               tex_src_str(inst), reg_names[inst->dst.reg], tex_src_str(inst));
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8522:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7826 0
	#               tex_src_str(inst), reg_names[inst->dst.reg], tex_src_str(inst));
.data
	.L8523:
	.string "\\expandafter\\ifx\\csname @mem@%s\\endcsname\\relax\\else\\edef\\@reg@%s{\\csname @mem@%s\\endcsname}\\fi"
.text
	mov A, .L8523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8524
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8524:
	mov A, B
	add SP, 4
	.loc 7 7828 0
	# 
	jmp .L1402
	.loc 7 7830 0
	#     emit_line("\\expandafter\\let\\csname @mem@%s\\endcsname\\@reg@%s",
	.L1407:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7830 0
	#     emit_line("\\expandafter\\let\\csname @mem@%s\\endcsname\\@reg@%s",
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7830 0
	#     emit_line("\\expandafter\\let\\csname @mem@%s\\endcsname\\@reg@%s",
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8525:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7830 0
	#     emit_line("\\expandafter\\let\\csname @mem@%s\\endcsname\\@reg@%s",
.data
	.L8526:
	.string "\\expandafter\\let\\csname @mem@%s\\endcsname\\@reg@%s"
.text
	mov A, .L8526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8527
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8527:
	mov A, B
	add SP, 3
	.loc 7 7833 0
	# 
	jmp .L1402
	.loc 7 7835 0
	#     // a output char c is represented by C where C is the code of c.
	.L1408:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8528
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8528:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7835 0
	#     // a output char c is represented by C where C is the code of c.
.data
	.L8529:
	.string "\\immediate\\write\\@out{%s}%%"
.text
	mov A, .L8529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8530:
	mov A, B
	add SP, 2
	.loc 7 7838 0
	# 
	jmp .L1402
	.loc 7 7840 0
	#     // input is also...
	.L1409:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7840 0
	#     // input is also...
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7840 0
	#     // input is also...
.data
	.L8531:
	.string "\\read-1to\\@temp\\count0=\\@temp\\edef\\@reg@%s{\\the\\count0}%%"
.text
	mov A, .L8531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8532:
	mov A, B
	add SP, 2
	.loc 7 7843 0
	# 
	jmp .L1402
	.loc 7 7845 0
	#     emit_line("\\let\\@@next\\relax");
	.L1410:
.data
	.L8533:
	.string "\\let\\@@next\\relax"
.text
	mov A, .L8533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8534:
	mov A, B
	add SP, 1
	.loc 7 7847 0
	# 
	jmp .L1402
	.loc 7 7849 0
	#     break;
	.L1411:
	jmp .L1402
	.loc 7 7852 0
	#   case LT:
	.L1412:
	.L1413:
	.L1414:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7852 0
	#   case LT:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7852 0
	#   case LT:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7852 0
	#   case LT:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7852 0
	#   case LT:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8535
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8535:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7852 0
	#   case LT:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8536
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_cmp_op_str
	.L8536:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7852 0
	#   case LT:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7852 0
	#   case LT:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7852 0
	#   case LT:
.data
	.L8537:
	.string "\\ifnum\\@reg@%s%s%s\\edef\\@reg@%s{1}\\else\\edef\\@reg@%s{0}\\fi%%"
.text
	mov A, .L8537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8538:
	mov A, B
	add SP, 6
	.loc 7 7861 0
	#   case NE:
	jmp .L1402
	.loc 7 7862 0
	#     emit_line("\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{0}\\else\\edef\\@reg@%s{1}\\fi%%",
	.L1415:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7862 0
	#     emit_line("\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{0}\\else\\edef\\@reg@%s{1}\\fi%%",
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7862 0
	#     emit_line("\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{0}\\else\\edef\\@reg@%s{1}\\fi%%",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7862 0
	#     emit_line("\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{0}\\else\\edef\\@reg@%s{1}\\fi%%",
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7862 0
	#     emit_line("\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{0}\\else\\edef\\@reg@%s{1}\\fi%%",
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8539:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7862 0
	#     emit_line("\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{0}\\else\\edef\\@reg@%s{1}\\fi%%",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7862 0
	#     emit_line("\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{0}\\else\\edef\\@reg@%s{1}\\fi%%",
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7862 0
	#     emit_line("\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{0}\\else\\edef\\@reg@%s{1}\\fi%%",
.data
	.L8540:
	.string "\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{0}\\else\\edef\\@reg@%s{1}\\fi%%"
.text
	mov A, .L8540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8541:
	mov A, B
	add SP, 5
	.loc 7 7866 0
	#   case LE:
	jmp .L1402
	.loc 7 7867 0
	#   case GE:
	.L1416:
	.L1417:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8542:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_cmp_op_str
	.L8543:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8544:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7867 0
	#   case GE:
.data
	.L8545:
	.string "\\ifnum\\@reg@%s=%s\\edef\\@reg@%s{1}\\else\\ifnum\\@reg@%s%s%s\\edef\\@reg@%s{1}\\else\\edef\\@reg@%s{0}\\fi\\fi%%"
.text
	mov A, .L8545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8546
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8546:
	mov A, B
	add SP, 9
	.loc 7 7876 0
	# 
	jmp .L1402
	.loc 7 7878 0
	#   case JLT:
	.L1418:
	.L1419:
	.L1420:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8547
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_value_str
	.L8547:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7878 0
	#   case JLT:
.data
	.L8548:
	.string "\\count0=%s\\relax\\advance\\count0by-1\\relax"
.text
	mov A, .L8548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8549:
	mov A, B
	add SP, 2
	.loc 7 7882 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8550:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7882 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_cmp_op_str
	.L8551:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7882 0
	#               reg_names[inst->dst.reg],
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7882 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7882 0
	#               reg_names[inst->dst.reg],
.data
	.L8552:
	.string "\\ifnum\\@reg@%s%s%s\\edef\\@reg@pc{\\the\\count0}\\fi"
.text
	mov A, .L8552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8553:
	mov A, B
	add SP, 4
	.loc 7 7886 0
	#   case JNE:
	jmp .L1402
	.loc 7 7887 0
	#     emit_line("\\count0=%s\\relax\\advance\\count0by-1\\relax", tex_value_str(&inst->jmp));
	.L1421:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_value_str
	.L8554:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7887 0
	#     emit_line("\\count0=%s\\relax\\advance\\count0by-1\\relax", tex_value_str(&inst->jmp));
.data
	.L8555:
	.string "\\count0=%s\\relax\\advance\\count0by-1\\relax"
.text
	mov A, .L8555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8556:
	mov A, B
	add SP, 2
	.loc 7 7889 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8557:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7889 0
	#               reg_names[inst->dst.reg],
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7889 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7889 0
	#               reg_names[inst->dst.reg],
.data
	.L8558:
	.string "\\ifnum\\@reg@%s=%s\\else\\edef\\@reg@pc{\\the\\count0}\\fi"
.text
	mov A, .L8558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8559:
	mov A, B
	add SP, 3
	.loc 7 7892 0
	#   case JLE:
	jmp .L1402
	.loc 7 7893 0
	#   case JGE:
	.L1422:
	.L1423:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_value_str
	.L8560:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7893 0
	#   case JGE:
.data
	.L8561:
	.string "\\count0=%s\\relax\\advance\\count0by-1\\relax"
.text
	mov A, .L8561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8562:
	mov A, B
	add SP, 2
	.loc 7 7896 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8563:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7896 0
	#               reg_names[inst->dst.reg],
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7896 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7896 0
	#               reg_names[inst->dst.reg],
.data
	.L8564:
	.string "\\ifnum\\@reg@%s=%s\\edef\\@reg@pc{\\the\\count0}\\fi"
.text
	mov A, .L8564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8565:
	mov A, B
	add SP, 3
	.loc 7 7899 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_src_str
	.L8566:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7899 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_cmp_op_str
	.L8567:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7899 0
	#               reg_names[inst->dst.reg],
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7899 0
	#               reg_names[inst->dst.reg],
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7899 0
	#               reg_names[inst->dst.reg],
.data
	.L8568:
	.string "\\ifnum\\@reg@%s%s%s\\edef\\@reg@pc{\\the\\count0}\\fi"
.text
	mov A, .L8568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8569:
	mov A, B
	add SP, 4
	.loc 7 7903 0
	#   case JMP:
	jmp .L1402
	.loc 7 7904 0
	#     emit_line("\\count0=%s\\relax\\advance\\count0by-1\\relax", tex_value_str(&inst->jmp));
	.L1424:
	.loc 7 7799 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_value_str
	.L8570:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7904 0
	#     emit_line("\\count0=%s\\relax\\advance\\count0by-1\\relax", tex_value_str(&inst->jmp));
.data
	.L8571:
	.string "\\count0=%s\\relax\\advance\\count0by-1\\relax"
.text
	mov A, .L8571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8572:
	mov A, B
	add SP, 2
	.loc 7 7906 0
	#     break;
.data
	.L8573:
	.string "\\edef\\@reg@pc{\\the\\count0}%%"
.text
	mov A, .L8573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8574:
	mov A, B
	add SP, 1
	.loc 7 7907 0
	# 
	jmp .L1402
	.loc 7 7909 0
	#     error("oops");
	.L1425:
.data
	.L8575:
	.string "oops"
.text
	mov A, .L8575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8576:
	mov A, B
	add SP, 1
	.L1402:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tex_init_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 7926 0
	# }
	.loc 7 7917 0
	#   }
	.loc 7 7916 0
	#     emit_line("\\def\\@reg@%s{0}", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 7917 0
	#   }
	.L1426:
	.loc 7 7916 0
	#     emit_line("\\def\\@reg@%s{0}", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8577, A, 0
	jmp .L8578
	.L8577:
	.loc 7 7917 0
	#   }
	jmp .L1428
	.L8578:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7916 0
	#     emit_line("\\def\\@reg@%s{0}", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7917 0
	#   }
.data
	.L8579:
	.string "\\def\\@reg@%s{0}"
.text
	mov A, .L8579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8580:
	mov A, B
	add SP, 2
	.L1427:
	.loc 7 7916 0
	#     emit_line("\\def\\@reg@%s{0}", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7917 0
	#   }
	jmp .L1426
	.L1428:
	.loc 7 7923 0
	#     }
	.loc 7 7921 0
	#     if(data->v != 0) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 7923 0
	#     }
	.L1429:
	.loc 7 7909 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	jeq .L8581, A, 0
	jmp .L8582
	.L8581:
	.loc 7 7923 0
	#     }
	jmp .L1431
	.L8582:
	.loc 7 7922 0
	#       emit_line("\\expandafter\\def\\csname @mem@%d\\endcsname{%d}", mp, data->v);
	.loc 7 7909 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7922 0
	#       emit_line("\\expandafter\\def\\csname @mem@%d\\endcsname{%d}", mp, data->v);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8583, A, 0
	.loc 7 7923 0
	#     }
	.loc 7 7909 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7921 0
	#     if(data->v != 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7923 0
	#     }
.data
	.L8584:
	.string "\\expandafter\\def\\csname @mem@%d\\endcsname{%d}"
.text
	mov A, .L8584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8585:
	mov A, B
	add SP, 3
	.L8583:
	.L1430:
	.loc 7 7921 0
	#     if(data->v != 0) {
	.loc 7 7909 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7921 0
	#     if(data->v != 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7923 0
	#     }
	jmp .L1429
	.L1431:
	.loc 7 7926 0
	# }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_tex:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 7970 0
	# }
	.loc 7 7930 0
	# 
.data
	.L8586:
	.string "\\catcode`\\@=11\\relax"
.text
	mov A, .L8586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8587:
	mov A, B
	add SP, 1
	.loc 7 7933 0
	# 
	.loc 7 7926 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_init_state
	.L8588:
	mov A, B
	add SP, 1
	.loc 7 7937 0
	#   //emit_line("\\immediate\\openout\\@out=\\@file\\relax");
.data
	.L8589:
	.string "\\newwrite\\@out"
.text
	mov A, .L8589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8590:
	mov A, B
	add SP, 1
	.loc 7 7939 0
	# 
.data
	.L8591:
	.string "\\immediate\\openout\\@out=\\jobname.tex.elvm.out\\relax"
.text
	mov A, .L8591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8592:
	mov A, B
	add SP, 1
	.loc 7 7942 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7951 0
	#   }
	.loc 7 7943 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 7926 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7951 0
	#   }
	.L1432:
	.loc 7 7943 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L8593, A, 0
	jmp .L8594
	.L8593:
	.loc 7 7951 0
	#   }
	jmp .L1434
	.L8594:
	.loc 7 7948 0
	#     }
	.loc 7 7944 0
	#       if(prev_pc != -1) {
	.loc 7 7942 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7944 0
	#       if(prev_pc != -1) {
	.loc 7 7943 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8595, A, 0
	.loc 7 7948 0
	#     }
	.loc 7 7946 0
	#       }
	.loc 7 7945 0
	#         emit_line("}");
	.loc 7 7942 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7945 0
	#         emit_line("}");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8596, A, 0
	.loc 7 7946 0
	#       }
.data
	.L8597:
	.string "}"
.text
	mov A, .L8597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8598:
	mov A, B
	add SP, 1
	.L8596:
	.loc 7 7948 0
	#     }
	.loc 7 7943 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7948 0
	#     }
.data
	.L8599:
	.string "\\expandafter\\def\\csname @inst@%d\\endcsname{%%"
.text
	mov A, .L8599
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8600:
	mov A, B
	add SP, 2
	.L8595:
	.loc 7 7950 0
	#     tex_emit_inst(inst);
	.loc 7 7943 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 7951 0
	#   }
	.loc 7 7943 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tex_emit_inst
	.L8601:
	mov A, B
	add SP, 1
	.loc 7 7951 0
	#   }
	.L1433:
	.loc 7 7943 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 7951 0
	#   }
	jmp .L1432
	.L1434:
	.loc 7 7954 0
	#   }
	.loc 7 7953 0
	#     emit_line("}");
	.loc 7 7942 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7953 0
	#     emit_line("}");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8602, A, 0
	.loc 7 7954 0
	#   }
.data
	.L8603:
	.string "}"
.text
	mov A, .L8603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8604:
	mov A, B
	add SP, 1
	.L8602:
	.loc 7 7958 0
	#   emit_line("\\let\\@@next\\@loop@main");
.data
	.L8605:
	.string "\\def\\@loop@main{%%"
.text
	mov A, .L8605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8606:
	mov A, B
	add SP, 1
	.loc 7 7959 0
	#   // execute instraction
.data
	.L8607:
	.string "\\let\\@@next\\@loop@main"
.text
	mov A, .L8607
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8608:
	mov A, B
	add SP, 1
	.loc 7 7961 0
	#   // increment pc
.data
	.L8609:
	.string "\\csname @inst@\\@reg@pc\\endcsname"
.text
	mov A, .L8609
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8610:
	mov A, B
	add SP, 1
	.loc 7 7963 0
	#   emit_line("\\advance\\count0by1\\relax");
.data
	.L8611:
	.string "\\count0=\\@reg@pc\\relax"
.text
	mov A, .L8611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8612:
	mov A, B
	add SP, 1
	.loc 7 7964 0
	#   emit_line("\\edef\\@reg@pc{\\the\\count0}%%");
.data
	.L8613:
	.string "\\advance\\count0by1\\relax"
.text
	mov A, .L8613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8614
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8614:
	mov A, B
	add SP, 1
	.loc 7 7965 0
	#   emit_line("\\@@next}\\@loop@main");
.data
	.L8615:
	.string "\\edef\\@reg@pc{\\the\\count0}%%"
.text
	mov A, .L8615
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8616
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8616:
	mov A, B
	add SP, 1
	.loc 7 7966 0
	# 
.data
	.L8617:
	.string "\\@@next}\\@loop@main"
.text
	mov A, .L8617
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8618
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8618:
	mov A, B
	add SP, 1
	.loc 7 7969 0
	#   emit_line("\\bye");
.data
	.L8619:
	.string "\\immediate\\closeout\\@out"
.text
	mov A, .L8619
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8620
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8620:
	mov A, B
	add SP, 1
	.loc 7 7970 0
	# }
.data
	.L8621:
	.string "\\bye"
.text
	mov A, .L8621
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8622
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8622:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_state_tf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 8025 0
	# }
	.loc 7 7976 0
	#   emit_line("import tensorflow as tf");
.data
	.L8623:
	.string "import sys"
.text
	mov A, .L8623
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8624
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8624:
	mov A, B
	add SP, 1
	.loc 7 7977 0
	#   emit_line("from tensorflow.python.framework import function");
.data
	.L8625:
	.string "import tensorflow as tf"
.text
	mov A, .L8625
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8626
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8626:
	mov A, B
	add SP, 1
	.loc 7 7978 0
	#   emit_line("from tensorflow.python.framework import tensor_shape");
.data
	.L8627:
	.string "from tensorflow.python.framework import function"
.text
	mov A, .L8627
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8628
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8628:
	mov A, B
	add SP, 1
	.loc 7 7979 0
	#   emit_line("");
.data
	.L8629:
	.string "from tensorflow.python.framework import tensor_shape"
.text
	mov A, .L8629
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8630
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8630:
	mov A, B
	add SP, 1
	.loc 7 7980 0
	# 
.data
	.L8631:
	.string ""
.text
	mov A, .L8631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8632
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8632:
	mov A, B
	add SP, 1
	.loc 7 7984 0
	#   }
	.loc 7 7982 0
	#     //emit_line("%s = tf.Variable(0, name='%s')", reg_names[i], reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 7984 0
	#   }
	.L1435:
	.loc 7 7982 0
	#     //emit_line("%s = tf.Variable(0, name='%s')", reg_names[i], reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8633, A, 0
	jmp .L8634
	.L8633:
	.loc 7 7984 0
	#   }
	jmp .L1437
	.L8634:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7982 0
	#     //emit_line("%s = tf.Variable(0, name='%s')", reg_names[i], reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7984 0
	#   }
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7982 0
	#     //emit_line("%s = tf.Variable(0, name='%s')", reg_names[i], reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7984 0
	#   }
.data
	.L8635:
	.string "%s = tf.constant(0, name='%s')"
.text
	mov A, .L8635
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8636:
	mov A, B
	add SP, 3
	.L1436:
	.loc 7 7982 0
	#     //emit_line("%s = tf.Variable(0, name='%s')", reg_names[i], reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7984 0
	#   }
	jmp .L1435
	.L1437:
	.loc 7 7988 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L8637:
	.string "data = []"
.text
	mov A, .L8637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8638:
	mov A, B
	add SP, 1
	.loc 7 7990 0
	#   }
	.loc 7 7989 0
	#     emit_line("data.append(%d)", data->v);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 7990 0
	#   }
	.L1438:
	.loc 7 7970 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L8639, A, 0
	jmp .L8640
	.L8639:
	.loc 7 7990 0
	#   }
	jmp .L1440
	.L8640:
	.loc 7 7970 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 7990 0
	#   }
.data
	.L8641:
	.string "data.append(%d)"
.text
	mov A, .L8641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8642:
	mov A, B
	add SP, 2
	.L1439:
	.loc 7 7989 0
	#     emit_line("data.append(%d)", data->v);
	.loc 7 7970 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 7989 0
	#     emit_line("data.append(%d)", data->v);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 7990 0
	#   }
	jmp .L1438
	.L1440:
	.loc 7 7992 0
	#             "tf.zeros([(1<<24)-len(data)], dtype=tf.int32, name='mem')])");
.data
	.L8643:
	.string "mem = tf.concat(0, [data, tf.zeros([(1<<24)-len(data)], dtype=tf.int32, name='mem')])"
.text
	mov A, .L8643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8644
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8644:
	mov A, B
	add SP, 1
	.loc 7 7994 0
	#   emit_line("out = tf.constant('', name='out')");
.data
	.L8645:
	.string "done = tf.constant(0, name='done')"
.text
	mov A, .L8645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8646
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8646:
	mov A, B
	add SP, 1
	.loc 7 7995 0
	#   emit_line("CHAR_TBL = tf.constant([chr(i) for i in xrange(256)])");
.data
	.L8647:
	.string "out = tf.constant('', name='out')"
.text
	mov A, .L8647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8648
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8648:
	mov A, B
	add SP, 1
	.loc 7 7996 0
	#   emit_line("input = map(ord, sys.stdin.read())");
.data
	.L8649:
	.string "CHAR_TBL = tf.constant([chr(i) for i in xrange(256)])"
.text
	mov A, .L8649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8650:
	mov A, B
	add SP, 1
	.loc 7 7997 0
	#   emit_line("INPUT_LEN = len(input)");
.data
	.L8651:
	.string "input = map(ord, sys.stdin.read())"
.text
	mov A, .L8651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8652:
	mov A, B
	add SP, 1
	.loc 7 7998 0
	#   emit_line("INPUT = tf.placeholder("
.data
	.L8653:
	.string "INPUT_LEN = len(input)"
.text
	mov A, .L8653
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8654:
	mov A, B
	add SP, 1
	.loc 7 7999 0
	#             "shape=[INPUT_LEN], dtype=tf.int32)");
.data
	.L8655:
	.string "INPUT = tf.placeholder(shape=[INPUT_LEN], dtype=tf.int32)"
.text
	mov A, .L8655
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8656:
	mov A, B
	add SP, 1
	.loc 7 8001 0
	#   emit_line("");
.data
	.L8657:
	.string "inp = tf.constant(-1, name='inp')"
.text
	mov A, .L8657
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8658:
	mov A, B
	add SP, 1
	.loc 7 8002 0
	#   emit_line("def read_input(inp):");
.data
	.L8659:
	.string ""
.text
	mov A, .L8659
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8660
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8660:
	mov A, B
	add SP, 1
	.loc 7 8003 0
	#   inc_indent();
.data
	.L8661:
	.string "def read_input(inp):"
.text
	mov A, .L8661
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8662
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8662:
	mov A, B
	add SP, 1
	.loc 7 8004 0
	#   emit_line("global INPUT");
	mov A, .L8663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8663:
	mov A, B
	.loc 7 8005 0
	#   emit_line("global INPUT_LEN");
.data
	.L8664:
	.string "global INPUT"
.text
	mov A, .L8664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8665
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8665:
	mov A, B
	add SP, 1
	.loc 7 8006 0
	#   emit_line("inp = inp + tf.constant(1)");
.data
	.L8666:
	.string "global INPUT_LEN"
.text
	mov A, .L8666
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8667:
	mov A, B
	add SP, 1
	.loc 7 8007 0
	#   emit_line("r = tf.cond(tf.less(inp, INPUT_LEN),"
.data
	.L8668:
	.string "inp = inp + tf.constant(1)"
.text
	mov A, .L8668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8669:
	mov A, B
	add SP, 1
	.loc 7 8008 0
	#             " lambda: INPUT[inp], lambda: tf.constant(0))");
.data
	.L8670:
	.string "r = tf.cond(tf.less(inp, INPUT_LEN), lambda: INPUT[inp], lambda: tf.constant(0))"
.text
	mov A, .L8670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8671:
	mov A, B
	add SP, 1
	.loc 7 8010 0
	#   emit_line("return r, inp");
.data
	.L8672:
	.string "r.set_shape(())"
.text
	mov A, .L8672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8673:
	mov A, B
	add SP, 1
	.loc 7 8011 0
	#   dec_indent();
.data
	.L8674:
	.string "return r, inp"
.text
	mov A, .L8674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8675:
	mov A, B
	add SP, 1
	.loc 7 8012 0
	# 
	mov A, .L8676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8676:
	mov A, B
	.loc 7 8014 0
	#   emit_line("@function.Defun(tf.int32, tf.int32)");
.data
	.L8677:
	.string ""
.text
	mov A, .L8677
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8678:
	mov A, B
	add SP, 1
	.loc 7 8015 0
	#   emit_line("def elvm_add(x, y):");
.data
	.L8679:
	.string "@function.Defun(tf.int32, tf.int32)"
.text
	mov A, .L8679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8680:
	mov A, B
	add SP, 1
	.loc 7 8016 0
	#   emit_line("  return (x + y) %% 16777216");
.data
	.L8681:
	.string "def elvm_add(x, y):"
.text
	mov A, .L8681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8682
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8682:
	mov A, B
	add SP, 1
	.loc 7 8017 0
	#   emit_line("");
.data
	.L8683:
	.string "  return (x + y) %% 16777216"
.text
	mov A, .L8683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8684
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8684:
	mov A, B
	add SP, 1
	.loc 7 8018 0
	#   emit_line("@function.Defun(tf.int32, tf.int32)");
.data
	.L8685:
	.string ""
.text
	mov A, .L8685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8686:
	mov A, B
	add SP, 1
	.loc 7 8019 0
	#   emit_line("def elvm_sub(x, y):");
.data
	.L8687:
	.string "@function.Defun(tf.int32, tf.int32)"
.text
	mov A, .L8687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8688:
	mov A, B
	add SP, 1
	.loc 7 8020 0
	#   emit_line("  return (x - y + 16777216) %% 16777216");
.data
	.L8689:
	.string "def elvm_sub(x, y):"
.text
	mov A, .L8689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8690:
	mov A, B
	add SP, 1
	.loc 7 8021 0
	#   emit_line("");
.data
	.L8691:
	.string "  return (x - y + 16777216) %% 16777216"
.text
	mov A, .L8691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8692:
	mov A, B
	add SP, 1
	.loc 7 8022 0
	#   emit_line("@function.Defun(tf.int32, tf.int32, tf.int32)");
.data
	.L8693:
	.string ""
.text
	mov A, .L8693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8694:
	mov A, B
	add SP, 1
	.loc 7 8023 0
	#   emit_line("def elvm_store(mem, x, y):");
.data
	.L8695:
	.string "@function.Defun(tf.int32, tf.int32, tf.int32)"
.text
	mov A, .L8695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8696
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8696:
	mov A, B
	add SP, 1
	.loc 7 8024 0
	#   emit_line("  return tf.concat(0, [mem[:y], [x], mem[y+1:]])");
.data
	.L8697:
	.string "def elvm_store(mem, x, y):"
.text
	mov A, .L8697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8698:
	mov A, B
	add SP, 1
	.loc 7 8025 0
	# }
.data
	.L8699:
	.string "  return tf.concat(0, [mem[:y], [x], mem[y+1:]])"
.text
	mov A, .L8699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8700:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tf_value_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8034 0
	#   }
	.loc 7 8029 0
	#     return reg_names[v->reg];
	.loc 7 8025 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8701, A, 0
	.loc 7 8030 0
	#   } else if (v->type == IMM) {
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8030 0
	#   } else if (v->type == IMM) {
	.loc 7 8025 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L8702
	.L8701:
	.loc 7 8034 0
	#   }
	.loc 7 8030 0
	#   } else if (v->type == IMM) {
	.loc 7 8025 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8703, A, 0
	.loc 7 8032 0
	#   } else {
	.loc 7 8025 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8032 0
	#   } else {
.data
	.L8704:
	.string "tf.constant(%d)"
.text
	mov A, .L8704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8705:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L8706
	.L8703:
	.loc 7 8034 0
	#   }
.data
	.L8707:
	.string "invalid value"
.text
	mov A, .L8707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8708:
	mov A, B
	add SP, 1
	.L8706:
	.L8702:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tf_src_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8039 0
	# }
	.loc 7 8034 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_value_str
	.L8709:
	mov A, B
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S5.OPS:
	.data 1
	.L8710:
	.string "equal"
	.data 0
	.long .L8710
	.data 1
	.L8711:
	.string "not_equal"
	.data 0
	.long .L8711
	.data 1
	.L8712:
	.string "less"
	.data 0
	.long .L8712
	.data 1
	.L8713:
	.string "greater"
	.data 0
	.long .L8713
	.data 1
	.L8714:
	.string "less_equal"
	.data 0
	.long .L8714
	.data 1
	.L8715:
	.string "greater_equal"
	.data 0
	.long .L8715
	.text
tf_cmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	.loc 7 8043 0
	#   static const char* OPS[] = {
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8039 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8716
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L8716:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	.loc 7 8039 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_src_str
	.L8717:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	.loc 7 8039 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_value_str
	.L8718:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	.loc 7 8044 0
	#     "equal", "not_equal", "less", "greater", "less_equal", "greater_equal"
	mov A, .S5.OPS
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	.loc 7 8043 0
	#   static const char* OPS[] = {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
.data
	.L8719:
	.string "tf.%s(%s, %s)"
.text
	mov A, .L8719
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8720
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp format
	.L8720:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tf_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8125 0
	#     error("oops");
	.loc 7 8052 0
	#   case MOV:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8125 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8721, A, 0
	jmp .L1442
	.L8721:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8722, A, 0
	jmp .L1443
	.L8722:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8723, A, 0
	jmp .L1444
	.L8723:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8724, A, 0
	jmp .L1445
	.L8724:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8725, A, 0
	jmp .L1446
	.L8725:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8726, A, 0
	jmp .L1447
	.L8726:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8727, A, 0
	jmp .L1448
	.L8727:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8728, A, 0
	jmp .L1449
	.L8728:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8729, A, 0
	jmp .L1450
	.L8729:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8730, A, 0
	jmp .L1451
	.L8730:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8731, A, 0
	jmp .L1452
	.L8731:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8732, A, 0
	jmp .L1453
	.L8732:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8733, A, 0
	jmp .L1454
	.L8733:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8734, A, 0
	jmp .L1455
	.L8734:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8735, A, 0
	jmp .L1456
	.L8735:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8736, A, 0
	jmp .L1457
	.L8736:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8737, A, 0
	jmp .L1458
	.L8737:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8738, A, 0
	jmp .L1459
	.L8738:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8739, A, 0
	jmp .L1460
	.L8739:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8740, A, 0
	jmp .L1461
	.L8740:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8741, A, 0
	jmp .L1462
	.L8741:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8742, A, 0
	jmp .L1463
	.L8742:
	jmp .L1464
	.loc 7 8053 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], tf_src_str(inst));
	.L1442:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_src_str
	.L8743:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8053 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], tf_src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8053 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], tf_src_str(inst));
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8053 0
	#     emit_line("%s = %s", reg_names[inst->dst.reg], tf_src_str(inst));
.data
	.L8744:
	.string "%s = %s"
.text
	mov A, .L8744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8745:
	mov A, B
	add SP, 3
	.loc 7 8055 0
	# 
	jmp .L1441
	.loc 7 8057 0
	#     emit_line("%s = elvm_add(%s, %s)",
	.L1443:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_src_str
	.L8746:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8057 0
	#     emit_line("%s = elvm_add(%s, %s)",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8057 0
	#     emit_line("%s = elvm_add(%s, %s)",
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8057 0
	#     emit_line("%s = elvm_add(%s, %s)",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8057 0
	#     emit_line("%s = elvm_add(%s, %s)",
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8057 0
	#     emit_line("%s = elvm_add(%s, %s)",
.data
	.L8747:
	.string "%s = elvm_add(%s, %s)"
.text
	mov A, .L8747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8748:
	mov A, B
	add SP, 4
	.loc 7 8061 0
	#     break;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8061 0
	#     break;
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8061 0
	#     break;
.data
	.L8749:
	.string "%s.set_shape(())"
.text
	mov A, .L8749
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8750
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8750:
	mov A, B
	add SP, 2
	.loc 7 8062 0
	# 
	jmp .L1441
	.loc 7 8064 0
	#     emit_line("%s = elvm_sub(%s, %s)",
	.L1444:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_src_str
	.L8751:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8064 0
	#     emit_line("%s = elvm_sub(%s, %s)",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8064 0
	#     emit_line("%s = elvm_sub(%s, %s)",
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8064 0
	#     emit_line("%s = elvm_sub(%s, %s)",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8064 0
	#     emit_line("%s = elvm_sub(%s, %s)",
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8064 0
	#     emit_line("%s = elvm_sub(%s, %s)",
.data
	.L8752:
	.string "%s = elvm_sub(%s, %s)"
.text
	mov A, .L8752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8753:
	mov A, B
	add SP, 4
	.loc 7 8068 0
	#     break;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8068 0
	#     break;
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8068 0
	#     break;
.data
	.L8754:
	.string "%s.set_shape(())"
.text
	mov A, .L8754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8755:
	mov A, B
	add SP, 2
	.loc 7 8069 0
	# 
	jmp .L1441
	.loc 7 8071 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], tf_src_str(inst));
	.L1445:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_src_str
	.L8756:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8071 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], tf_src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8071 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], tf_src_str(inst));
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8071 0
	#     emit_line("%s = mem[%s]", reg_names[inst->dst.reg], tf_src_str(inst));
.data
	.L8757:
	.string "%s = mem[%s]"
.text
	mov A, .L8757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8758:
	mov A, B
	add SP, 3
	.loc 7 8075 0
	#     break;
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8075 0
	#     break;
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8075 0
	#     break;
.data
	.L8759:
	.string "%s.set_shape(())"
.text
	mov A, .L8759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8760:
	mov A, B
	add SP, 2
	.loc 7 8076 0
	# 
	jmp .L1441
	.loc 7 8078 0
	#     emit_line("mem = elvm_store(mem, %s, %s)",
	.L1446:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_src_str
	.L8761:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8078 0
	#     emit_line("mem = elvm_store(mem, %s, %s)",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8078 0
	#     emit_line("mem = elvm_store(mem, %s, %s)",
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8078 0
	#     emit_line("mem = elvm_store(mem, %s, %s)",
.data
	.L8762:
	.string "mem = elvm_store(mem, %s, %s)"
.text
	mov A, .L8762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8763:
	mov A, B
	add SP, 3
	.loc 7 8081 0
	# 
	jmp .L1441
	.loc 7 8083 0
	#     emit_line("out = out + CHAR_TBL[tf.mod(%s, 256)]", tf_src_str(inst));
	.L1447:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_src_str
	.L8764:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8083 0
	#     emit_line("out = out + CHAR_TBL[tf.mod(%s, 256)]", tf_src_str(inst));
.data
	.L8765:
	.string "out = out + CHAR_TBL[tf.mod(%s, 256)]"
.text
	mov A, .L8765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8766:
	mov A, B
	add SP, 2
	.loc 7 8085 0
	#     break;
.data
	.L8767:
	.string "out.set_shape(())"
.text
	mov A, .L8767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8768:
	mov A, B
	add SP, 1
	.loc 7 8086 0
	# 
	jmp .L1441
	.loc 7 8088 0
	#     emit_line("%s, inp = read_input(inp)",
	.L1448:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8088 0
	#     emit_line("%s, inp = read_input(inp)",
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8088 0
	#     emit_line("%s, inp = read_input(inp)",
.data
	.L8769:
	.string "%s, inp = read_input(inp)"
.text
	mov A, .L8769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8770:
	mov A, B
	add SP, 2
	.loc 7 8091 0
	# 
	jmp .L1441
	.loc 7 8093 0
	#     emit_line("done = tf.constant(1)");
	.L1449:
.data
	.L8771:
	.string "done = tf.constant(1)"
.text
	mov A, .L8771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8772:
	mov A, B
	add SP, 1
	.loc 7 8095 0
	# 
	jmp .L1441
	.loc 7 8097 0
	#     break;
	.L1450:
	jmp .L1441
	.loc 7 8100 0
	#   case NE:
	.L1451:
	.L1452:
	.L1453:
	.L1454:
	.L1455:
	.L1456:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_cmp
	.L8773:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8100 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8100 0
	#   case NE:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8100 0
	#   case NE:
.data
	.L8774:
	.string "%s = tf.cond(%s, lambda: tf.constant(1), lambda: tf.constant(0))"
.text
	mov A, .L8774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8775:
	mov A, B
	add SP, 3
	.loc 7 8109 0
	# 
	jmp .L1441
	.loc 7 8111 0
	#   case JNE:
	.L1457:
	.L1458:
	.L1459:
	.L1460:
	.L1461:
	.L1462:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_value_str
	.L8776:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8111 0
	#   case JNE:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_cmp
	.L8777:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8111 0
	#   case JNE:
.data
	.L8778:
	.string "pc = tf.cond(%s, lambda: %s - 1, lambda: pc)"
.text
	mov A, .L8778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8779:
	mov A, B
	add SP, 3
	.loc 7 8119 0
	# 
	jmp .L1441
	.loc 7 8121 0
	#     emit_line("pc = %s - 1", tf_value_str(&inst->jmp));
	.L1463:
	.loc 7 8047 0
	#                 OPS[op - JEQ], tf_value_str(&inst->dst), tf_src_str(inst));
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8780
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_value_str
	.L8780:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8121 0
	#     emit_line("pc = %s - 1", tf_value_str(&inst->jmp));
.data
	.L8781:
	.string "pc = %s - 1"
.text
	mov A, .L8781
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8782
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8782:
	mov A, B
	add SP, 2
	.loc 7 8123 0
	# 
	jmp .L1441
	.loc 7 8125 0
	#     error("oops");
	.L1464:
.data
	.L8783:
	.string "oops"
.text
	mov A, .L8783
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8784
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8784:
	mov A, B
	add SP, 1
	.L1441:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tf_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8133 0
	# }
	.loc 7 8131 0
	#   emit_line("return [%s]", args);
.data
	.L8785:
	.string "pc = pc + 1"
.text
	mov A, .L8785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8786:
	mov A, B
	add SP, 1
	.loc 7 8132 0
	#   dec_indent();
	.loc 7 8125 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8132 0
	#   dec_indent();
.data
	.L8787:
	.string "return [%s]"
.text
	mov A, .L8787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8788
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8788:
	mov A, B
	add SP, 2
	.loc 7 8133 0
	# }
	mov A, .L8789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8789:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S6.STATE_ARGS_STR:
	.long 97
	.long 44
	.long 98
	.long 44
	.long 99
	.long 44
	.long 100
	.long 44
	.long 98
	.long 112
	.long 44
	.long 115
	.long 112
	.long 44
	.long 112
	.long 99
	.long 44
	.long 100
	.long 111
	.long 110
	.long 101
	.long 44
	.long 109
	.long 101
	.long 109
	.long 44
	.long 111
	.long 117
	.long 116
	.long 44
	.long 105
	.long 110
	.long 112
	.long 0
	.text
target_tf:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 8187 0
	# }
	.loc 7 8137 0
	# 
	.loc 7 8133 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_tf
	.L8790:
	mov A, B
	add SP, 1
	.loc 7 8140 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8152 0
	#   }
	.loc 7 8141 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 8133 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8152 0
	#   }
	.L1465:
	.loc 7 8141 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L8791, A, 0
	jmp .L8792
	.L8791:
	.loc 7 8152 0
	#   }
	jmp .L1467
	.L8792:
	.loc 7 8149 0
	#     }
	.loc 7 8142 0
	#       if (inst->pc) {
	.loc 7 8140 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8142 0
	#       if (inst->pc) {
	.loc 7 8141 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L8793, A, 0
	.loc 7 8149 0
	#     }
	.loc 7 8144 0
	#       }
	.loc 7 8143 0
	#         tf_emit_func_epilogue(STATE_ARGS_STR);
	.loc 7 8141 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	jeq .L8794, A, 0
	.loc 7 8144 0
	#       }
	.loc 7 8139 0
	#   int prev_pc = -1;
	mov A, .S6.STATE_ARGS_STR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8795
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_emit_func_epilogue
	.L8795:
	mov A, B
	add SP, 1
	.L8794:
	.loc 7 8146 0
	#       emit_line("def pc_%d(%s):", inst->pc, STATE_ARGS_STR);
.data
	.L8796:
	.string ""
.text
	mov A, .L8796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8797
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8797:
	mov A, B
	add SP, 1
	.loc 7 8147 0
	#       inc_indent();
	.loc 7 8139 0
	#   int prev_pc = -1;
	mov A, .S6.STATE_ARGS_STR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8147 0
	#       inc_indent();
	.loc 7 8141 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8147 0
	#       inc_indent();
.data
	.L8798:
	.string "def pc_%d(%s):"
.text
	mov A, .L8798
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8799:
	mov A, B
	add SP, 3
	.loc 7 8148 0
	#       emit_line("global CHAR_TBL");
	mov A, .L8800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8800:
	mov A, B
	.loc 7 8149 0
	#     }
.data
	.L8801:
	.string "global CHAR_TBL"
.text
	mov A, .L8801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8802
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8802:
	mov A, B
	add SP, 1
	.L8793:
	.loc 7 8151 0
	#     tf_emit_inst(inst);
	.loc 7 8141 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8152 0
	#   }
	.loc 7 8141 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_emit_inst
	.L8803:
	mov A, B
	add SP, 1
	.loc 7 8152 0
	#   }
	.L1466:
	.loc 7 8141 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8152 0
	#   }
	jmp .L1465
	.L1467:
	.loc 7 8154 0
	# 
	.loc 7 8139 0
	#   int prev_pc = -1;
	mov A, .S6.STATE_ARGS_STR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8804
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tf_emit_func_epilogue
	.L8804:
	mov A, B
	add SP, 1
	.loc 7 8156 0
	#   emit_line("def run_step(%s):", STATE_ARGS_STR);
.data
	.L8805:
	.string ""
.text
	mov A, .L8805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8806:
	mov A, B
	add SP, 1
	.loc 7 8157 0
	#   inc_indent();
	.loc 7 8139 0
	#   int prev_pc = -1;
	mov A, .S6.STATE_ARGS_STR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8157 0
	#   inc_indent();
.data
	.L8807:
	.string "def run_step(%s):"
.text
	mov A, .L8807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8808:
	mov A, B
	add SP, 2
	.loc 7 8158 0
	#   //emit_line("pc = tf.Print(pc, [pc])");
	mov A, .L8809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8809:
	mov A, B
	.loc 7 8160 0
	#   for (int i = 0; i < prev_pc; i++) {
.data
	.L8810:
	.string "fn_pairs = []"
.text
	mov A, .L8810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8811:
	mov A, B
	add SP, 1
	.loc 7 8162 0
	#               i, i, STATE_ARGS_STR);
	.loc 7 8161 0
	#     emit_line("fn_pairs.append((tf.equal(pc, %d), lambda: pc_%d(%s)))",
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777213
	mov A, 0
	store A, B
	.loc 7 8162 0
	#               i, i, STATE_ARGS_STR);
	.L1468:
	.loc 7 8161 0
	#     emit_line("fn_pairs.append((tf.equal(pc, %d), lambda: pc_%d(%s)))",
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8140 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8812, A, 0
	jmp .L8813
	.L8812:
	.loc 7 8162 0
	#               i, i, STATE_ARGS_STR);
	jmp .L1470
	.L8813:
	.loc 7 8139 0
	#   int prev_pc = -1;
	mov A, .S6.STATE_ARGS_STR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8161 0
	#     emit_line("fn_pairs.append((tf.equal(pc, %d), lambda: pc_%d(%s)))",
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8162 0
	#               i, i, STATE_ARGS_STR);
.data
	.L8814:
	.string "fn_pairs.append((tf.equal(pc, %d), lambda: pc_%d(%s)))"
.text
	mov A, .L8814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8815:
	mov A, B
	add SP, 4
	.L1469:
	.loc 7 8161 0
	#     emit_line("fn_pairs.append((tf.equal(pc, %d), lambda: pc_%d(%s)))",
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777213
	store A, B
	load A, SP
	add SP, 1
	.loc 7 8162 0
	#               i, i, STATE_ARGS_STR);
	jmp .L1468
	.L1470:
	.loc 7 8165 0
	#             prev_pc, STATE_ARGS_STR);
	.loc 7 8139 0
	#   int prev_pc = -1;
	mov A, .S6.STATE_ARGS_STR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8140 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8165 0
	#             prev_pc, STATE_ARGS_STR);
.data
	.L8816:
	.string "r = tf.case(fn_pairs, lambda: pc_%d(%s))"
.text
	mov A, .L8816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8817:
	mov A, B
	add SP, 3
	.loc 7 8167 0
	#   emit_line("return r");
.data
	.L8818:
	.string "r[8].set_shape([1<<24])"
.text
	mov A, .L8818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8819:
	mov A, B
	add SP, 1
	.loc 7 8168 0
	#   dec_indent();
.data
	.L8820:
	.string "return r"
.text
	mov A, .L8820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8821:
	mov A, B
	add SP, 1
	.loc 7 8169 0
	# 
	mov A, .L8822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8822:
	mov A, B
	.loc 7 8171 0
	#   emit_line("loop = tf.while_loop(");
.data
	.L8823:
	.string ""
.text
	mov A, .L8823
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8824
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8824:
	mov A, B
	add SP, 1
	.loc 7 8172 0
	#   inc_indent();
.data
	.L8825:
	.string "loop = tf.while_loop("
.text
	mov A, .L8825
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8826
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8826:
	mov A, B
	add SP, 1
	.loc 7 8173 0
	#   emit_line("lambda %s: tf.equal(done, 0),", STATE_ARGS_STR);
	mov A, .L8827
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L8827:
	mov A, B
	.loc 7 8174 0
	#   emit_line("run_step,");
	.loc 7 8139 0
	#   int prev_pc = -1;
	mov A, .S6.STATE_ARGS_STR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8174 0
	#   emit_line("run_step,");
.data
	.L8828:
	.string "lambda %s: tf.equal(done, 0),"
.text
	mov A, .L8828
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8829
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8829:
	mov A, B
	add SP, 2
	.loc 7 8175 0
	#   emit_line("loop_vars=[%s])", STATE_ARGS_STR);
.data
	.L8830:
	.string "run_step,"
.text
	mov A, .L8830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8831:
	mov A, B
	add SP, 1
	.loc 7 8176 0
	#   dec_indent();
	.loc 7 8139 0
	#   int prev_pc = -1;
	mov A, .S6.STATE_ARGS_STR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8176 0
	#   dec_indent();
.data
	.L8832:
	.string "loop_vars=[%s])"
.text
	mov A, .L8832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8833:
	mov A, B
	add SP, 2
	.loc 7 8177 0
	# 
	mov A, .L8834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L8834:
	mov A, B
	.loc 7 8179 0
	#   emit_line("sess = tf.Session()");
.data
	.L8835:
	.string ""
.text
	mov A, .L8835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8836:
	mov A, B
	add SP, 1
	.loc 7 8180 0
	#   emit_line("tf.train.write_graph(loop[9].graph.as_graph_def(),"
.data
	.L8837:
	.string "sess = tf.Session()"
.text
	mov A, .L8837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8838:
	mov A, B
	add SP, 1
	.loc 7 8181 0
	#             " '/tmp', 'graph.pbtxt')");
.data
	.L8839:
	.string "tf.train.write_graph(loop[9].graph.as_graph_def(), '/tmp', 'graph.pbtxt')"
.text
	mov A, .L8839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8840:
	mov A, B
	add SP, 1
	.loc 7 8183 0
	#   emit_line("r = sess.run(loop, feed_dict={INPUT: input})");
.data
	.L8841:
	.string "tf.initialize_all_variables().run(session=sess)"
.text
	mov A, .L8841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8842:
	mov A, B
	add SP, 1
	.loc 7 8184 0
	# 
.data
	.L8843:
	.string "r = sess.run(loop, feed_dict={INPUT: input})"
.text
	mov A, .L8843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8844:
	mov A, B
	add SP, 1
	.loc 7 8186 0
	#   emit_line("sys.stdout.write(r[9])");
.data
	.L8845:
	.string ""
.text
	mov A, .L8845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8846:
	mov A, B
	add SP, 1
	.loc 7 8187 0
	# }
.data
	.L8847:
	.string "sys.stdout.write(r[9])"
.text
	mov A, .L8847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8848:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	tm_next_state:

	.long 0
	.text
tm_new_state:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8196 0
	# }
	.loc 7 8187 0
	# }
	mov B, tm_next_state
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, tm_next_state
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data
	tm_q_reject:

	.long 0
	.data 0
tm_symbol_names:
	.data 1
	.L8849:
	.string "_"
	.data 0
	.long .L8849
	.data 1
	.L8850:
	.string "^"
	.data 0
	.long .L8850
	.data 1
	.L8851:
	.string "$"
	.data 0
	.long .L8851
	.data 1
	.L8852:
	.string "0"
	.data 0
	.long .L8852
	.data 1
	.L8853:
	.string "1"
	.data 0
	.long .L8853
	.data 1
	.L8854:
	.string "r"
	.data 0
	.long .L8854
	.data 1
	.L8855:
	.string "a"
	.data 0
	.long .L8855
	.data 1
	.L8856:
	.string "v"
	.data 0
	.long .L8856
	.data 1
	.L8857:
	.string "o"
	.data 0
	.long .L8857
	.data 1
	.L8858:
	.string "s"
	.data 0
	.long .L8858
	.data 1
	.L8859:
	.string "d"
	.data 0
	.long .L8859
	.data 0
tm_bit:
	.long 3
	.long 4
	.data 0
tm_word_size:
	.long 24
	.text
tm_intcmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8220 0
	#   else if (x < y) return -1;
	.loc 7 8196 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8860, A, 0
	.loc 7 8220 0
	#   else if (x < y) return -1;
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L8861
	.L8860:
	.loc 7 8196 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8862, A, 0
	.loc 7 8220 0
	#   else if (x < y) return -1;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L8863
	.L8862:
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L8863:
	.L8861:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_comment:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 8230 0
	# }
	.loc 7 8226 0
	#   va_start(ap, fmt);
	.loc 7 8227 0
	#   char* r = vformat(fmt, ap);
	mov A, BP
	add A, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8228 0
	#   va_end(ap);
	mov A, 0
	mov B, SP
	.loc 7 8226 0
	#   va_start(ap, fmt);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8220 0
	#   else if (x < y) return -1;
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp vformat
	.L8864:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8230 0
	# }
	.loc 7 8228 0
	#   va_end(ap);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8230 0
	# }
.data
	.L8865:
	.string "// %s\n"
.text
	mov A, .L8865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8866
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L8866:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_transition:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8248 0
	# }
	.loc 7 8240 0
	#   if (d == -1)      dname = "L";
	.loc 7 8241 0
	#   else if (d == 0)  dname = "N"; 
	.loc 7 8230 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8241 0
	#   else if (d == 0)  dname = "N"; 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8867, A, 0
.data
	.L8868:
	.string "L"
.text
	mov A, .L8868
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L8869
	.L8867:
	.loc 7 8230 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8241 0
	#   else if (d == 0)  dname = "N"; 
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8870, A, 0
.data
	.L8871:
	.string "N"
.text
	mov A, .L8871
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L8872
	.L8870:
	.loc 7 8230 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8241 0
	#   else if (d == 0)  dname = "N"; 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8873, A, 0
.data
	.L8874:
	.string "R"
.text
	mov A, .L8874
	mov B, BP
	add B, 16777215
	store A, B
	jmp .L8875
	.L8873:
	.loc 7 8230 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8241 0
	#   else if (d == 0)  dname = "N"; 
.data
	.L8876:
	.string "invalid direction %d"
.text
	mov A, .L8876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L8877:
	mov A, B
	add SP, 2
	.L8875:
	.L8872:
	.L8869:
	.loc 7 8245 0
	# 	    q, tm_symbol_names[a], 
	.loc 7 8240 0
	#   if (d == -1)      dname = "L";
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8245 0
	# 	    q, tm_symbol_names[a], 
	.loc 7 8196 0
	# }
	mov A, tm_symbol_names
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8230 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8245 0
	# 	    q, tm_symbol_names[a], 
	.loc 7 8196 0
	# }
	mov A, tm_symbol_names
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8230 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8245 0
	# 	    q, tm_symbol_names[a], 
.data
	.L8878:
	.string "%d %s %d %s %s"
.text
	mov A, .L8878
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L8879:
	mov A, B
	add SP, 6
	.loc 7 8248 0
	# }
	.loc 7 8230 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_write:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8257 0
	# }
	.loc 7 8255 0
	#     tm_transition(q, a, b, d, r);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L1471:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8880, A, 0
	jmp .L8881
	.L8880:
	.loc 7 8255 0
	#     tm_transition(q, a, b, d, r);
	jmp .L1473
	.L8881:
	.loc 7 8248 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8255 0
	#     tm_transition(q, a, b, d, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8248 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8882:
	mov A, B
	add SP, 5
	.loc 7 8255 0
	#     tm_transition(q, a, b, d, r);
	.L1472:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L1471
	.L1473:
	.loc 7 8257 0
	# }
	.loc 7 8248 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_write_if:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8271 0
	# }
	.loc 7 8268 0
	#     if (s == a) tm_transition(q, s, ba, da, ra); 
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L1474:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8883, A, 0
	jmp .L8884
	.L8883:
	.loc 7 8268 0
	#     if (s == a) tm_transition(q, s, ba, da, ra); 
	jmp .L1476
	.L8884:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8257 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8885, A, 0
	.loc 7 8268 0
	#     if (s == a) tm_transition(q, s, ba, da, ra); 
	.loc 7 8257 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8268 0
	#     if (s == a) tm_transition(q, s, ba, da, ra); 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8257 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8886
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8886:
	mov A, B
	add SP, 5
	jmp .L8887
	.L8885:
	.loc 7 8268 0
	#     if (s == a) tm_transition(q, s, ba, da, ra); 
	.loc 7 8257 0
	# }
	mov B, BP
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8268 0
	#     if (s == a) tm_transition(q, s, ba, da, ra); 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8257 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8888:
	mov A, B
	add SP, 5
	.L8887:
	.loc 7 8268 0
	#     if (s == a) tm_transition(q, s, ba, da, ra); 
	.L1475:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L1474
	.L1476:
	.loc 7 8271 0
	# }
	.loc 7 8257 0
	# }
	mov B, BP
	add B, 9
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_write_if2:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8282 0
	# }
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L1477:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8889, A, 0
	jmp .L8890
	.L8889:
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	jmp .L1479
	.L8890:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8271 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8891, A, 0
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	.loc 7 8271 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8892
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8892:
	mov A, B
	add SP, 5
	jmp .L8893
	.L8891:
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8271 0
	# }
	mov B, BP
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8894, A, 0
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	.loc 7 8271 0
	# }
	mov B, BP
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8895
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8895:
	mov A, B
	add SP, 5
	jmp .L8896
	.L8894:
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	.loc 7 8271 0
	# }
	mov B, BP
	add B, 13
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 12
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 11
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8271 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8897:
	mov A, B
	add SP, 5
	.L8896:
	.L8893:
	.loc 7 8278 0
	#     if (s == a1)      tm_transition(q, s, b1, d1, r1); 
	.L1478:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L1477
	.L1479:
	.loc 7 8282 0
	# }
	.loc 7 8271 0
	# }
	mov B, BP
	add B, 13
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_move:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8290 0
	# }
	.loc 7 8288 0
	#     tm_transition(q, s, s, d, r);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L1480:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8898, A, 0
	jmp .L8899
	.L8898:
	.loc 7 8288 0
	#     tm_transition(q, s, s, d, r);
	jmp .L1482
	.L8899:
	.loc 7 8282 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8288 0
	#     tm_transition(q, s, s, d, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8282 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8900:
	mov A, B
	add SP, 5
	.loc 7 8288 0
	#     tm_transition(q, s, s, d, r);
	.L1481:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L1480
	.L1482:
	.loc 7 8290 0
	# }
	.loc 7 8282 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_move_if:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8304 0
	# }
	.loc 7 8301 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L1483:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8901, A, 0
	jmp .L8902
	.L8901:
	.loc 7 8301 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	jmp .L1485
	.L8902:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8290 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8903, A, 0
	.loc 7 8301 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	.loc 7 8290 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8301 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8904:
	mov A, B
	add SP, 5
	jmp .L8905
	.L8903:
	.loc 7 8301 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	.loc 7 8290 0
	# }
	mov B, BP
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8301 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8290 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8906:
	mov A, B
	add SP, 5
	.L8905:
	.loc 7 8301 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	.L1484:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L1483
	.L1485:
	.loc 7 8304 0
	# }
	.loc 7 8290 0
	# }
	mov B, BP
	add B, 7
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_move_if2:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8321 0
	# }
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L1486:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8907, A, 0
	jmp .L8908
	.L8907:
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	jmp .L1488
	.L8908:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8304 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8909, A, 0
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	.loc 7 8304 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8304 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8910:
	mov A, B
	add SP, 5
	jmp .L8911
	.L8909:
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8304 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L8912, A, 0
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	.loc 7 8304 0
	# }
	mov B, BP
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8304 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8913:
	mov A, B
	add SP, 5
	jmp .L8914
	.L8912:
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	.loc 7 8304 0
	# }
	mov B, BP
	add B, 10
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8304 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8915
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L8915:
	mov A, B
	add SP, 5
	.L8914:
	.L8911:
	.loc 7 8317 0
	#     if (s == a)      tm_transition(q, s, s, da, ra);
	.L1487:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L1486
	.L1488:
	.loc 7 8321 0
	# }
	.loc 7 8304 0
	# }
	mov B, BP
	add B, 10
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_noop:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8327 0
	# }
	.loc 7 8321 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8327 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8321 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8916
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8916:
	mov A, B
	add SP, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_insert:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 8339 0
	# }
	.loc 7 8335 0
	#   tm_write_if2(q,  TM_ZERO, a,    d, q0, TM_ONE, a,    d, q1, a,    d, r);
	mov A, 0
	mov B, SP
	mov A, .L8917
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8917:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	mov A, 0
	mov B, SP
	mov A, .L8918
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8918:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8336 0
	#   tm_write_if2(q0, TM_ZERO, TM_ZERO, d, q0, TM_ONE, TM_ZERO, d, q1, TM_ZERO, d, r);
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8335 0
	#   tm_write_if2(q,  TM_ZERO, a,    d, q0, TM_ONE, a,    d, q1, a,    d, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8335 0
	#   tm_write_if2(q,  TM_ZERO, a,    d, q0, TM_ONE, a,    d, q1, a,    d, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8919
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_if2
	.L8919:
	mov A, B
	add SP, 12
	.loc 7 8337 0
	#   tm_write_if2(q1, TM_ZERO, TM_ONE,  d, q0, TM_ONE, TM_ONE,  d, q1, TM_ONE,  d, r);
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8335 0
	#   tm_write_if2(q,  TM_ZERO, a,    d, q0, TM_ONE, a,    d, q1, a,    d, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8335 0
	#   tm_write_if2(q,  TM_ZERO, a,    d, q0, TM_ONE, a,    d, q1, a,    d, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8335 0
	#   tm_write_if2(q,  TM_ZERO, a,    d, q0, TM_ONE, a,    d, q1, a,    d, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8920
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_if2
	.L8920:
	mov A, B
	add SP, 12
	.loc 7 8338 0
	#   return r;
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8335 0
	#   tm_write_if2(q,  TM_ZERO, a,    d, q0, TM_ONE, a,    d, q1, a,    d, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8335 0
	#   tm_write_if2(q,  TM_ZERO, a,    d, q0, TM_ONE, a,    d, q1, a,    d, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8335 0
	#   tm_write_if2(q,  TM_ZERO, a,    d, q0, TM_ONE, a,    d, q1, a,    d, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8921
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_if2
	.L8921:
	mov A, B
	add SP, 12
	.loc 7 8339 0
	# }
	.loc 7 8327 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_write_tm_bits:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8353 0
	# }
	.loc 7 8350 0
	#       q = tm_move(q, +1, tm_new_state());
	.loc 7 8346 0
	#     if (mode & TM_SKIP_BEFORE_DST)
	mov A, 0
	mov B, SP
	.loc 7 8339 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8346 0
	#     if (mode & TM_SKIP_BEFORE_DST)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8350 0
	#       q = tm_move(q, +1, tm_new_state());
	.L1489:
	.loc 7 8346 0
	#     if (mode & TM_SKIP_BEFORE_DST)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L8922, A, 0
	jmp .L8923
	.L8922:
	.loc 7 8350 0
	#       q = tm_move(q, +1, tm_new_state());
	jmp .L1491
	.L8923:
	.loc 7 8347 0
	#       q = tm_move(q, +1, tm_new_state());
	.loc 7 8339 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8924
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L8924:
	mov A, B
	add SP, 2
	jeq .L8925, A, 0
	.loc 7 8347 0
	#       q = tm_move(q, +1, tm_new_state());
	mov A, .L8926
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8926:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8339 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8927
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8927:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.L8925:
	.loc 7 8349 0
	#     if (mode & TM_SKIP_AFTER_DST)
	mov A, .L8928
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8928:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8346 0
	#     if (mode & TM_SKIP_BEFORE_DST)
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8929
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L8929:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8339 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8930
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L8930:
	mov A, B
	add SP, 2
	jeq .L8931, A, 0
	.loc 7 8196 0
	# }
	mov A, 4
	jmp .L8932
	.L8931:
	mov A, 3
	.L8932:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8339 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8933
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L8933:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8350 0
	#       q = tm_move(q, +1, tm_new_state());
	.loc 7 8339 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8934
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L8934:
	mov A, B
	add SP, 2
	jeq .L8935, A, 0
	.loc 7 8350 0
	#       q = tm_move(q, +1, tm_new_state());
	mov A, .L8936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8936:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8339 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8937:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.L8935:
	.loc 7 8350 0
	#       q = tm_move(q, +1, tm_new_state());
	.L1490:
	.loc 7 8346 0
	#     if (mode & TM_SKIP_BEFORE_DST)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 8350 0
	#       q = tm_move(q, +1, tm_new_state());
	jmp .L1489
	.L1491:
	.loc 7 8353 0
	# }
	.loc 7 8339 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_noop
	.L8938:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_erase_tm_bits:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 8360 0
	# }
	.loc 7 8357 0
	#   tm_write_if2(erase, TM_ZERO, TM_BLANK, +1, skip, TM_ONE, TM_BLANK, +1, skip, TM_BLANK, 0, r);
	mov A, 0
	mov B, SP
	.loc 7 8353 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8357 0
	#   tm_write_if2(erase, TM_ZERO, TM_BLANK, +1, skip, TM_ONE, TM_BLANK, +1, skip, TM_BLANK, 0, r);
	mov A, 0
	mov B, SP
	mov A, .L8939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8939:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8358 0
	#   tm_move(skip, +1, erase);
	.loc 7 8353 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8358 0
	#   tm_move(skip, +1, erase);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8357 0
	#   tm_write_if2(erase, TM_ZERO, TM_BLANK, +1, skip, TM_ONE, TM_BLANK, +1, skip, TM_BLANK, 0, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8358 0
	#   tm_move(skip, +1, erase);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8357 0
	#   tm_write_if2(erase, TM_ZERO, TM_BLANK, +1, skip, TM_ONE, TM_BLANK, +1, skip, TM_BLANK, 0, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8358 0
	#   tm_move(skip, +1, erase);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8357 0
	#   tm_write_if2(erase, TM_ZERO, TM_BLANK, +1, skip, TM_ONE, TM_BLANK, +1, skip, TM_BLANK, 0, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_if2
	.L8940:
	mov A, B
	add SP, 12
	.loc 7 8359 0
	#   return r;
	.loc 7 8357 0
	#   tm_write_if2(erase, TM_ZERO, TM_BLANK, +1, skip, TM_ONE, TM_BLANK, +1, skip, TM_BLANK, 0, r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8359 0
	#   return r;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8357 0
	#   tm_write_if2(erase, TM_ZERO, TM_BLANK, +1, skip, TM_ONE, TM_BLANK, +1, skip, TM_BLANK, 0, r);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8941:
	mov A, B
	add SP, 3
	.loc 7 8360 0
	# }
	.loc 7 8353 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_find:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8369 0
	# }
	.loc 7 8367 0
	#   tm_move_if2(q, a, 0, r_yes, marker, 0, r_no, d, q);
	mov A, 0
	mov B, SP
	.loc 7 8360 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8367 0
	#   tm_move_if2(q, a, 0, r_yes, marker, 0, r_no, d, q);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L8942, A, 0
	.loc 7 8196 0
	# }
	mov A, 1
	jmp .L8943
	.L8942:
	mov A, 2
	.L8943:
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8368 0
	#   return r_yes;
	.loc 7 8360 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8368 0
	#   return r_yes;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8367 0
	#   tm_move_if2(q, a, 0, r_yes, marker, 0, r_no, d, q);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8360 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8368 0
	#   return r_yes;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8360 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L8944:
	mov A, B
	add SP, 9
	.loc 7 8369 0
	# }
	.loc 7 8360 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_rewind:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8376 0
	# }
	.loc 7 8375 0
	#   return r;
	.loc 7 8369 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8375 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8369 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8375 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8369 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if
	.L8945:
	mov A, B
	add SP, 6
	.loc 7 8376 0
	# }
	.loc 7 8369 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_ffwd:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8381 0
	# }
	.loc 7 8380 0
	#   return r;
	.loc 7 8376 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8380 0
	#   return r;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8376 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8380 0
	#   return r;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8376 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if
	.L8946:
	mov A, B
	add SP, 6
	.loc 7 8381 0
	# }
	.loc 7 8376 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_find_location:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 8404 0
	# }
	.loc 7 8388 0
	#   q = tm_find(q, +1, type, tm_new_state(), r_notfound);   // _[r]_0_1 ... _v_0_1
	mov A, 0
	mov B, SP
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8389 0
	#   q = tm_move(q, +1, tm_new_state());                     // _r[_]0_1 ... _v_0_1
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8389 0
	#   q = tm_move(q, +1, tm_new_state());                     // _r[_]0_1 ... _v_0_1
	mov A, .L8947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8947:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8389 0
	#   q = tm_move(q, +1, tm_new_state());                     // _r[_]0_1 ... _v_0_1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L8948:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8390 0
	#   for (int i=width-1; i>=0; i--) {
	mov A, .L8949
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8949:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8950:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8398 0
	#   }
	.loc 7 8391 0
	#     q = tm_move(q, +1, tm_new_state());                   // _r_[0]_1 ... _v_0_1
	mov A, 0
	mov B, SP
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8391 0
	#     q = tm_move(q, +1, tm_new_state());                   // _r_[0]_1 ... _v_0_1
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8398 0
	#   }
	.L1492:
	.loc 7 8391 0
	#     q = tm_move(q, +1, tm_new_state());                   // _r_[0]_1 ... _v_0_1
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L8951, A, 0
	jmp .L8952
	.L8951:
	.loc 7 8398 0
	#   }
	jmp .L1494
	.L8952:
	.loc 7 8392 0
	#     tm_symbol_t tm_bit = (1<<i)&addr ? TM_ONE : TM_ZERO;
	mov A, .L8953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8953:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8954
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8954:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8393 0
	#     int q_match = tm_new_state();
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8391 0
	#     q = tm_move(q, +1, tm_new_state());                   // _r_[0]_1 ... _v_0_1
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L8955:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8956
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L8956:
	mov A, B
	add SP, 2
	jeq .L8957, A, 0
	.loc 7 8196 0
	# }
	mov A, 4
	jmp .L8958
	.L8957:
	mov A, 3
	.L8958:
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8394 0
	#     tm_move_if(q,
	mov A, 0
	mov B, SP
	mov A, .L8959
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8959:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8395 0
	# 	       tm_bit, +1, q_match,                       // _r_0[_]1 ... _v_0_1
	.loc 7 8388 0
	#   q = tm_find(q, +1, type, tm_new_state(), r_notfound);   // _[r]_0_1 ... _v_0_1
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8395 0
	# 	       tm_bit, +1, q_match,                       // _r_0[_]1 ... _v_0_1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8394 0
	#     tm_move_if(q,
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8395 0
	# 	       tm_bit, +1, q_match,                       // _r_0[_]1 ... _v_0_1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8393 0
	#     int q_match = tm_new_state();
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if
	.L8960:
	mov A, B
	add SP, 6
	.loc 7 8398 0
	#   }
	.loc 7 8394 0
	#     tm_move_if(q,
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8398 0
	#   }
	.L1493:
	.loc 7 8391 0
	#     q = tm_move(q, +1, tm_new_state());                   // _r_[0]_1 ... _v_0_1
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 8398 0
	#   }
	jmp .L1492
	.L1494:
	.loc 7 8400 0
	#   tm_move_if(q,
	mov A, .L8961
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8961:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8962
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8962:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8401 0
	# 	     TM_VALUE, +1, r_found,                       // _r_0_1 ... _v[_]0_1
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8401 0
	# 	     TM_VALUE, +1, r_found,                       // _r_0_1 ... _v[_]0_1
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8401 0
	# 	     TM_VALUE, +1, r_found,                       // _r_0_1 ... _v[_]0_1
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8963
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if
	.L8963:
	mov A, B
	add SP, 6
	.loc 7 8404 0
	# }
	.loc 7 8381 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_new_location:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8415 0
	# }
	.loc 7 8408 0
	#   q = tm_write(q, type, +1, tm_new_state());
	mov A, .L8964
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8964:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8404 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_ffwd
	.L8965:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8409 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L8966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8966:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8404 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L8967:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8410 0
	#   q = tm_write_tm_bits(q, addr, awidth, TM_SKIP_AFTER_DST, tm_new_state());
	mov A, .L8968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8968:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8404 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8969:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8411 0
	#   q = tm_write(q, TM_VALUE, +1, tm_new_state());
	mov A, .L8970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8970:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8404 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_tm_bits
	.L8971:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8412 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L8972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8972:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8404 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L8973:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8413 0
	#   q = tm_write_tm_bits(q, val, tm_word_size, TM_SKIP_AFTER_DST, tm_new_state());
	mov A, .L8974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8974:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8404 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8975:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8414 0
	#   return tm_write(q, TM_END, -1, r);
	mov A, .L8976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8976:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8404 0
	# }
	mov B, BP
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_tm_bits
	.L8977:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8415 0
	# }
	.loc 7 8404 0
	# }
	mov B, BP
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8415 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8404 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L8978:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_find_register:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8420 0
	# }
	.loc 7 8419 0
	#   return tm_find_location(q, TM_REGISTER, reg, 3, r, tm_q_reject);
	mov A, .L8979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8979:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8415 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_rewind
	.L8980:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8420 0
	# }
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8415 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8420 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8415 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8415 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_location
	.L8981:
	mov A, B
	add SP, 6
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_find_memory:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8430 0
	# }
	.loc 7 8424 0
	#   int q_append = tm_new_state();
	mov A, .L8982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8982:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8420 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_rewind
	.L8983:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8425 0
	#   tm_find_location(q, TM_ADDRESS, addr, tm_word_size, r, q_append);
	mov A, 0
	mov B, SP
	mov A, .L8984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8984:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8426 0
	#   q = tm_new_location(q_append, TM_ADDRESS, addr, tm_word_size, 0, tm_new_state());
	.loc 7 8425 0
	#   tm_find_location(q, TM_ADDRESS, addr, tm_word_size, r, q_append);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8420 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8420 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8420 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_location
	.L8985:
	mov A, B
	add SP, 6
	.loc 7 8427 0
	#   q = tm_find(q, -1, TM_VALUE, tm_new_state(), tm_q_reject);
	mov A, .L8986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8986:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8420 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8425 0
	#   tm_find_location(q, TM_ADDRESS, addr, tm_word_size, r, q_append);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_location
	.L8987:
	mov A, B
	add SP, 6
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8428 0
	#   tm_move(q, +1, r);
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8428 0
	#   tm_move(q, +1, r);
	mov A, .L8988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8988:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8428 0
	#   tm_move(q, +1, r);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8420 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L8989:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8429 0
	#   return r;
	.loc 7 8420 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8429 0
	#   return r;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8420 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L8990:
	mov A, B
	add SP, 3
	.loc 7 8430 0
	# }
	.loc 7 8420 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_copy:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 7
	.loc 7 8484 0
	# }
	.loc 7 8441 0
	#   int q_cleansrc = tm_new_state(), q_cleandst = tm_new_state();
	mov A, 0
	mov B, SP
	mov A, .L8991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8991:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov A, .L8992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8992:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8442 0
	#   int q_nexttm_bit = q;                                  
	mov A, 0
	mov B, SP
	mov A, .L8993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8993:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov A, 0
	mov B, SP
	mov A, .L8994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8994:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8443 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 8456 0
	# 		 TM_ZERO, TM_SRC, 0, q_store[0], 
	.loc 7 8445 0
	#     // Write TM_SRC, then store tm_bit
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8445 0
	#     // Write TM_SRC, then store tm_bit
	.loc 7 8196 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L8995:
	mov A, B
	add SP, 2
	jeq .L8996, A, 0
	.loc 7 8450 0
	# 		TM_ZERO, 0, q_store[0],                    // s[0]_1 ... d_x
	.loc 7 8448 0
	#     q = tm_move(q, +1, tm_new_state());                    // s[0]_1 ... d_x
	mov A, .L8997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8997:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L8998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L8998:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8449 0
	#     tm_move_if2(q,
	mov A, .L8999
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L8999:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9000:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8450 0
	# 		TM_ZERO, 0, q_store[0],                    // s[0]_1 ... d_x
	.loc 7 8442 0
	#   int q_nexttm_bit = q;                                  
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8450 0
	# 		TM_ZERO, 0, q_store[0],                    // s[0]_1 ... d_x
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8441 0
	#   int q_cleansrc = tm_new_state(), q_cleandst = tm_new_state();
	mov A, BP
	add A, 16777214
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8450 0
	# 		TM_ZERO, 0, q_store[0],                    // s[0]_1 ... d_x
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8450 0
	# 		TM_ZERO, 0, q_store[0],                    // s[0]_1 ... d_x
	.loc 7 8441 0
	#   int q_cleansrc = tm_new_state(), q_cleandst = tm_new_state();
	mov A, BP
	add A, 16777214
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8450 0
	# 		TM_ZERO, 0, q_store[0],                    // s[0]_1 ... d_x
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9001:
	mov A, B
	add SP, 9
	jmp .L9002
	.L8996:
	.loc 7 8456 0
	# 		 TM_ZERO, TM_SRC, 0, q_store[0], 
	.loc 7 8442 0
	#   int q_nexttm_bit = q;                                  
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8456 0
	# 		 TM_ZERO, TM_SRC, 0, q_store[0], 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8456 0
	# 		 TM_ZERO, TM_SRC, 0, q_store[0], 
	.loc 7 8441 0
	#   int q_cleansrc = tm_new_state(), q_cleandst = tm_new_state();
	mov A, BP
	add A, 16777214
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8456 0
	# 		 TM_ZERO, TM_SRC, 0, q_store[0], 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8456 0
	# 		 TM_ZERO, TM_SRC, 0, q_store[0], 
	.loc 7 8441 0
	#   int q_cleansrc = tm_new_state(), q_cleandst = tm_new_state();
	mov A, BP
	add A, 16777214
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8456 0
	# 		 TM_ZERO, TM_SRC, 0, q_store[0], 
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_if2
	.L9003:
	mov A, B
	add SP, 12
	.L9002:
	.loc 7 8461 0
	#   for (int b=0; b<2; b++) {
	mov A, 0
	mov B, SP
	mov A, .L9004
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9004:
	mov A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 8467 0
	#   }
	.loc 7 8462 0
	#     q = q_store[b];
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777209
	mov A, 0
	store A, B
	.loc 7 8467 0
	#   }
	.L1495:
	.loc 7 8462 0
	#     q = q_store[b];
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9005, A, 0
	jmp .L9006
	.L9005:
	.loc 7 8467 0
	#   }
	jmp .L1497
	.L9006:
	.loc 7 8463 0
	#     q = tm_find(q, d, TM_DST, tm_new_state(), tm_q_reject);    // s0_1 ... [d]_x
	.loc 7 8441 0
	#   int q_cleansrc = tm_new_state(), q_cleandst = tm_new_state();
	mov A, BP
	add A, 16777214
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8462 0
	#     q = q_store[b];
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8464 0
	#     if (mode & TM_SKIP_BEFORE_DST)
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8464 0
	#     if (mode & TM_SKIP_BEFORE_DST)
	mov A, .L9007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9007:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9008:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8465 0
	#       q = tm_write(q, TM_BLANK, +1, tm_new_state());
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8465 0
	#       q = tm_write(q, TM_BLANK, +1, tm_new_state());
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9009
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L9009:
	mov A, B
	add SP, 2
	jeq .L9010, A, 0
	.loc 7 8465 0
	#       q = tm_write(q, TM_BLANK, +1, tm_new_state());
	mov A, .L9011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9011:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9012:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.L9010:
	.loc 7 8467 0
	#   }
	.loc 7 8461 0
	#   for (int b=0; b<2; b++) {
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8467 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, tm_bit
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8462 0
	#     q = q_store[b];
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9013:
	mov A, B
	add SP, 4
	.loc 7 8467 0
	#   }
	.L1496:
	.loc 7 8462 0
	#     q = q_store[b];
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777209
	store A, B
	load A, SP
	add SP, 1
	.loc 7 8467 0
	#   }
	jmp .L1495
	.L1497:
	.loc 7 8469 0
	#   if (mode & TM_SKIP_AFTER_DST)
	.loc 7 8461 0
	#   for (int b=0; b<2; b++) {
	mov B, BP
	add B, 16777210
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8470 0
	#     q = tm_move(q, +1, tm_new_state());                  // s0_1 ... 0[_]x
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8470 0
	#     q = tm_move(q, +1, tm_new_state());                  // s0_1 ... 0[_]x
	.loc 7 8196 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L9014:
	mov A, B
	add SP, 2
	jeq .L9015, A, 0
	.loc 7 8470 0
	#     q = tm_move(q, +1, tm_new_state());                  // s0_1 ... 0[_]x
	mov A, .L9016
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9016:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9017
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9017:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.L9015:
	.loc 7 8472 0
	#   q = tm_find(q, -d, TM_SRC, tm_new_state(), tm_q_reject);     // [s]0_1 ... 0dx
	mov A, .L9018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9018:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9019:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8473 0
	#   q = tm_write(q, TM_BLANK, +1, tm_new_state());            // _[0]_1 ... 0dx
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8473 0
	#   q = tm_write(q, TM_BLANK, +1, tm_new_state());            // _[0]_1 ... 0dx
	mov A, .L9020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9020:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8473 0
	#   q = tm_write(q, TM_BLANK, +1, tm_new_state());            // _[0]_1 ... 0dx
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9021:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8474 0
	#   if (mode & (TM_SKIP_BEFORE_SRC|TM_SKIP_AFTER_SRC))
	mov A, .L9022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9022:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9023:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8475 0
	#     tm_move(q, +1, q_nexttm_bit);                        // _0[_]1 ... 0dx
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8475 0
	#     tm_move(q, +1, q_nexttm_bit);                        // _0[_]1 ... 0dx
	.loc 7 8196 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L9024:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L9025:
	mov A, B
	add SP, 2
	jeq .L9026, A, 0
	.loc 7 8475 0
	#     tm_move(q, +1, q_nexttm_bit);                        // _0[_]1 ... 0dx
	.loc 7 8443 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8475 0
	#     tm_move(q, +1, q_nexttm_bit);                        // _0[_]1 ... 0dx
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9027:
	mov A, B
	add SP, 3
	jmp .L9028
	.L9026:
	.loc 7 8475 0
	#     tm_move(q, +1, q_nexttm_bit);                        // _0[_]1 ... 0dx
	.loc 7 8443 0
	# 
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_noop
	.L9029:
	mov A, B
	add SP, 2
	.L9028:
	.loc 7 8480 0
	#   q = tm_move(q, -1, tm_new_state());
	.loc 7 8442 0
	#   int q_nexttm_bit = q;                                  
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8481 0
	#   q = tm_write(q, TM_BLANK, 0, q_cleandst);
	mov A, .L9030
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9030:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9031
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9031:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8482 0
	#   q = tm_find(q, d, TM_DST, tm_new_state(), tm_q_reject);
	.loc 7 8442 0
	#   int q_nexttm_bit = q;                                  
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8482 0
	#   q = tm_find(q, d, TM_DST, tm_new_state(), tm_q_reject);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9032
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9032:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8483 0
	#   return tm_write(q, TM_BLANK, 0, r);
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8483 0
	#   return tm_write(q, TM_BLANK, 0, r);
	mov A, .L9033
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9033:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9034
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9034:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8484 0
	# }
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8430 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9035
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9035:
	mov A, B
	add SP, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_copy_value:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 8523 0
	# }
	.loc 8 12 0
	#     }                                           \
	.L1498:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L9036, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L9037:
	.string "assertion failed: inst->dst.type == REG\n"
.text
	mov A, .L9037
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9038
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L9038:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L9036:
	mov A, 0
	jeq .L9039, A, 0
	jmp .L1498
	.L9039:
	.L1499:
	.loc 7 8492 0
	#   if (inst->src.type == REG) {
	mov A, .L9040
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9040:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9041
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_register
	.L9041:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8520 0
	#   } else
	.loc 7 8493 0
	#     if (inst->dst.reg == inst->src.reg) {
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9042, A, 0
	.loc 7 8517 0
	#     }
	.loc 7 8494 0
	#       if (mode == TM_SKIP_AFTER_DST) {
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8494 0
	#       if (mode == TM_SKIP_AFTER_DST) {
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9043, A, 0
	.loc 7 8512 0
	#       }
	.loc 7 8495 0
	# 	// Copy each tm_bit to the cell to its left
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9044, A, 0
	.loc 7 8509 0
	#       } else {
	.loc 7 8497 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov A, 0
	mov B, SP
	mov A, .L9045
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9045:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	mov A, 0
	mov B, SP
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8498 0
	# 	tm_move_if2(q, TM_ZERO, +1, q_next, TM_ONE, +1, q_next, -1, q_end);
	mov A, .L9046
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9046:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9047
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9047:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8499 0
	# 	q = q_end;
	.loc 7 8497 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8499 0
	# 	q = q_end;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8497 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8499 0
	# 	q = q_end;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8497 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8499 0
	# 	q = q_end;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9048
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9048:
	mov A, B
	add SP, 9
	.loc 7 8500 0
	# 	q = tm_move(q, -1, tm_new_state());
	.loc 7 8497 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8501 0
	# 	q_next = q;
	mov A, .L9049
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9049:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9050
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9050:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8502 0
	# 	int q0 = tm_new_state(), q1 = tm_new_state();
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8503 0
	# 	q_end = tm_new_state();
	mov A, 0
	mov B, SP
	mov A, .L9051
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9051:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	mov A, 0
	mov B, SP
	mov A, .L9052
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9052:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8504 0
	# 	tm_move_if2(q, TM_ZERO, -1, q0, TM_ONE, -1, q1, +1, q_end);
	mov A, .L9053
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9053:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8505 0
	# 	tm_write(q0, TM_ZERO, -1, q_next);
	.loc 7 8497 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8505 0
	# 	tm_write(q0, TM_ZERO, -1, q_next);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8503 0
	# 	q_end = tm_new_state();
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8505 0
	# 	tm_write(q0, TM_ZERO, -1, q_next);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8503 0
	# 	q_end = tm_new_state();
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8505 0
	# 	tm_write(q0, TM_ZERO, -1, q_next);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9054:
	mov A, B
	add SP, 9
	.loc 7 8506 0
	# 	tm_write(q1, TM_ONE,  -1, q_next);
	.loc 7 8497 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8506 0
	# 	tm_write(q1, TM_ONE,  -1, q_next);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8503 0
	# 	q_end = tm_new_state();
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9055
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9055:
	mov A, B
	add SP, 4
	.loc 7 8507 0
	# 	q = q_end;
	.loc 7 8497 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8507 0
	# 	q = q_end;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8503 0
	# 	q_end = tm_new_state();
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9056:
	mov A, B
	add SP, 4
	.loc 7 8508 0
	# 	tm_move_if2(q, TM_ZERO, +1, q, TM_ONE, +1, q, 0, r);
	.loc 7 8497 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8509 0
	#       } else {
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8509 0
	#       } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8509 0
	#       } else {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8509 0
	#       } else {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9057:
	mov A, B
	add SP, 9
	jmp .L9058
	.L9044:
	.loc 7 8512 0
	#       }
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_noop
	.L9059:
	mov A, B
	add SP, 2
	.L9058:
	jmp .L9060
	.L9043:
	.loc 7 8517 0
	#     }
	.loc 7 8515 0
	#       q = tm_find_register(q, inst->src.reg, tm_new_state());
	mov A, .L9061
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9061:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9062:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8516 0
	#       q = tm_copy(q, tm_intcmp(inst->dst.reg, inst->src.reg), TM_SKIP_BEFORE_SRC|mode, r);
	mov A, .L9063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9063:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_register
	.L9064:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8517 0
	#     }
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8517 0
	#     }
	.loc 7 8196 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L9065:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8517 0
	#     }
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8517 0
	#     }
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_intcmp
	.L9066:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy
	.L9067:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.L9060:
	jmp .L9068
	.L9042:
	.loc 7 8520 0
	#   } else
	.loc 7 8517 0
	#     }
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9069, A, 0
	.loc 7 8520 0
	#   } else
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8520 0
	#   } else
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9070
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_tm_bits
	.L9070:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	jmp .L9071
	.L9069:
	.loc 7 8520 0
	#   } else
.data
	.L9072:
	.string "invalid src type"
.text
	mov A, .L9072
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9073:
	mov A, B
	add SP, 1
	.L9071:
	.L9068:
	.loc 7 8523 0
	# }
	.loc 7 8484 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_addsub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 13
	.loc 7 8563 0
	# }
	.loc 8 12 0
	#     }                                           \
	.L1500:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L9074, A, 0
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9074:
	mov A, B
	eq A, 0
	jeq .L9075, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L9076:
	.string "assertion failed: c == -1 || c == +1\n"
.text
	mov A, .L9076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9077
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L9077:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L9075:
	mov A, 0
	jeq .L9078, A, 0
	jmp .L1500
	.L9078:
	.L1501:
	.loc 7 8533 0
	#   q = tm_move_if2(q, TM_ZERO, +1, q, TM_ONE, +1, q, -1, q_end);
	mov A, 0
	mov B, SP
	mov A, .L9079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9079:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8534 0
	# 
	.loc 7 8533 0
	#   q = tm_move_if2(q, TM_ZERO, +1, q, TM_ONE, +1, q, -1, q_end);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8534 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8534 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8534 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9080:
	mov A, B
	add SP, 9
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, 0
	mov B, SP
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, .L9081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9081:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8540 0
	# 
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8540 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9082, A, 0
	mov A, 0
	mov B, SP
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, BP
	add A, 16777213
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8540 0
	# 
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, BP
	add A, 16777213
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8540 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, BP
	add A, 16777213
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8540 0
	# 
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, BP
	add A, 16777213
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8540 0
	# 
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L9082:
	.loc 7 8543 0
	# 
	mov A, 0
	mov B, SP
	mov A, .L9083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9083:
	mov A, B
	mov B, BP
	add B, 16777209
	store A, B
	mov A, .L9084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9084:
	mov A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov A, .L9085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9085:
	mov A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 8545 0
	#   for (int a=0; a<2; a++) {
	mov A, 0
	mov B, SP
	mov A, .L9086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9086:
	mov A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 8549 0
	#   }
	.loc 7 8546 0
	#     tm_transition(carry[a], TM_ZERO,  TM_BLANK, -1, inter[a]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777207
	mov A, 0
	store A, B
	.loc 7 8549 0
	#   }
	.L1502:
	.loc 7 8546 0
	#     tm_transition(carry[a], TM_ZERO,  TM_BLANK, -1, inter[a]);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9087, A, 0
	jmp .L9088
	.L9087:
	.loc 7 8549 0
	#   }
	jmp .L1504
	.L9088:
	.loc 7 8547 0
	#     tm_transition(carry[a], TM_ONE,   TM_BLANK, -1, inter[a+1]);
	.loc 7 8543 0
	# 
	mov A, BP
	add A, 16777209
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8546 0
	#     tm_transition(carry[a], TM_ZERO,  TM_BLANK, -1, inter[a]);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8547 0
	#     tm_transition(carry[a], TM_ONE,   TM_BLANK, -1, inter[a+1]);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8547 0
	#     tm_transition(carry[a], TM_ONE,   TM_BLANK, -1, inter[a+1]);
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, BP
	add A, 16777213
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8546 0
	#     tm_transition(carry[a], TM_ZERO,  TM_BLANK, -1, inter[a]);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L9089:
	mov A, B
	add SP, 5
	.loc 7 8548 0
	#     tm_transition(carry[a], TM_VALUE, TM_VALUE, +1, q_shift);
	.loc 7 8543 0
	# 
	mov A, BP
	add A, 16777209
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8548 0
	#     tm_transition(carry[a], TM_VALUE, TM_VALUE, +1, q_shift);
	.loc 7 8546 0
	#     tm_transition(carry[a], TM_ZERO,  TM_BLANK, -1, inter[a]);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8548 0
	#     tm_transition(carry[a], TM_VALUE, TM_VALUE, +1, q_shift);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8548 0
	#     tm_transition(carry[a], TM_VALUE, TM_VALUE, +1, q_shift);
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, BP
	add A, 16777213
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8546 0
	#     tm_transition(carry[a], TM_ZERO,  TM_BLANK, -1, inter[a]);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L9090:
	mov A, B
	add SP, 5
	.loc 7 8549 0
	#   }
	.loc 7 8545 0
	#   for (int a=0; a<2; a++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8549 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8549 0
	#   }
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, BP
	add A, 16777213
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8546 0
	#     tm_transition(carry[a], TM_ZERO,  TM_BLANK, -1, inter[a]);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L9091:
	mov A, B
	add SP, 5
	.loc 7 8549 0
	#   }
	.L1503:
	.loc 7 8546 0
	#     tm_transition(carry[a], TM_ZERO,  TM_BLANK, -1, inter[a]);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777207
	store A, B
	load A, SP
	add SP, 1
	.loc 7 8549 0
	#   }
	jmp .L1502
	.L1504:
	.loc 7 8553 0
	#     }
	.loc 7 8551 0
	#     for (int b=0; b<2; b++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777206
	mov A, 0
	store A, B
	.loc 7 8553 0
	#     }
	.L1505:
	.loc 7 8551 0
	#     for (int b=0; b<2; b++) {
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9092, A, 0
	jmp .L9093
	.L9092:
	.loc 7 8553 0
	#     }
	jmp .L1507
	.L9093:
	.loc 7 8552 0
	#       tm_transition(inter[a], tm_bit[c == +1 ? b : !b], tm_bit[(a+b)&1], -1, carry[(a+b)>>1]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777205
	mov A, 0
	store A, B
	.loc 7 8553 0
	#     }
	.L1508:
	.loc 7 8552 0
	#       tm_transition(inter[a], tm_bit[c == +1 ? b : !b], tm_bit[(a+b)&1], -1, carry[(a+b)>>1]);
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9094, A, 0
	jmp .L9095
	.L9094:
	.loc 7 8553 0
	#     }
	jmp .L1510
	.L9095:
	.loc 7 8539 0
	#   if (c == -1) { int tmp = carry[0]; carry[0] = carry[1]; carry[1] = tmp; }
	mov A, BP
	add A, 16777213
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8553 0
	#     }
	.loc 7 8551 0
	#     for (int b=0; b<2; b++) {
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8552 0
	#       tm_transition(inter[a], tm_bit[c == +1 ? b : !b], tm_bit[(a+b)&1], -1, carry[(a+b)>>1]);
	mov B, BP
	add B, 16777205
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8553 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shr
	.L9096:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, tm_bit
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8553 0
	#     }
	.loc 7 8551 0
	#     for (int b=0; b<2; b++) {
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8552 0
	#       tm_transition(inter[a], tm_bit[c == +1 ? b : !b], tm_bit[(a+b)&1], -1, carry[(a+b)>>1]);
	mov B, BP
	add B, 16777205
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8553 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9097
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_and
	.L9097:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, tm_bit
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8553 0
	#     }
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8553 0
	#     }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9098, A, 0
	.loc 7 8552 0
	#       tm_transition(inter[a], tm_bit[c == +1 ? b : !b], tm_bit[(a+b)&1], -1, carry[(a+b)>>1]);
	mov B, BP
	add B, 16777205
	load A, B
	jmp .L9099
	.L9098:
	.loc 7 8553 0
	#     }
	.loc 7 8552 0
	#       tm_transition(inter[a], tm_bit[c == +1 ? b : !b], tm_bit[(a+b)&1], -1, carry[(a+b)>>1]);
	mov B, BP
	add B, 16777205
	load A, B
	eq A, 0
	.L9099:
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8553 0
	#     }
	.loc 7 8543 0
	# 
	mov A, BP
	add A, 16777209
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8551 0
	#     for (int b=0; b<2; b++) {
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L9100:
	mov A, B
	add SP, 5
	.loc 7 8553 0
	#     }
	.L1509:
	.loc 7 8552 0
	#       tm_transition(inter[a], tm_bit[c == +1 ? b : !b], tm_bit[(a+b)&1], -1, carry[(a+b)>>1]);
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777205
	store A, B
	load A, SP
	add SP, 1
	.loc 7 8553 0
	#     }
	jmp .L1508
	.L1510:
	.L1506:
	.loc 7 8551 0
	#     for (int b=0; b<2; b++) {
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777206
	store A, B
	load A, SP
	add SP, 1
	.loc 7 8553 0
	#     }
	jmp .L1505
	.L1507:
	.loc 7 8555 0
	# 
	mov A, 0
	mov B, BP
	add B, 3
	store A, B
	.loc 7 8558 0
	#   q = q_shift;
	mov A, 0
	mov B, SP
	mov A, .L9101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9101:
	mov A, B
	mov B, BP
	add B, 16777204
	store A, B
	mov A, 0
	mov B, SP
	mov A, .L9102
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9102:
	mov A, B
	mov B, BP
	add B, 16777203
	store A, B
	.loc 7 8559 0
	#   tm_write_if2(q, TM_ZERO, TM_BLANK, +1, q0, TM_ONE, TM_BLANK, +1, q1, TM_BLANK, 0, r);
	.loc 7 8545 0
	#   for (int a=0; a<2; a++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8560 0
	#   q0 = tm_write(q0, TM_ZERO, +1, q);
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8560 0
	#   q0 = tm_write(q0, TM_ZERO, +1, q);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8558 0
	#   q = q_shift;
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8560 0
	#   q0 = tm_write(q0, TM_ZERO, +1, q);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8558 0
	#   q = q_shift;
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8560 0
	#   q0 = tm_write(q0, TM_ZERO, +1, q);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9103
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_if2
	.L9103:
	mov A, B
	add SP, 12
	.loc 7 8561 0
	#   q1 = tm_write(q1, TM_ONE,  +1, q);
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8561 0
	#   q1 = tm_write(q1, TM_ONE,  +1, q);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8558 0
	#   q = q_shift;
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9104
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9104:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777204
	store A, B
	.loc 7 8562 0
	#   return r;
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8562 0
	#   return r;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8558 0
	#   q = q_shift;
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9105:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777203
	store A, B
	.loc 7 8563 0
	# }
	.loc 7 8523 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_compare:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 9
	.loc 7 8589 0
	# }
	.loc 7 8570 0
	#   switch (op) {
	.loc 7 8578 0
	#   }
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8578 0
	#   }
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9106, A, 0
	jmp .L1512
	.L9106:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9107, A, 0
	jmp .L1513
	.L9107:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9108, A, 0
	jmp .L1514
	.L9108:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9109, A, 0
	jmp .L1515
	.L9109:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9110, A, 0
	jmp .L1516
	.L9110:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9111, A, 0
	jmp .L1517
	.L9111:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9112, A, 0
	jmp .L1518
	.L9112:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9113, A, 0
	jmp .L1519
	.L9113:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9114, A, 0
	jmp .L1520
	.L9114:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9115, A, 0
	jmp .L1521
	.L9115:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9116, A, 0
	jmp .L1522
	.L9116:
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9117, A, 0
	jmp .L1523
	.L9117:
	jmp .L1524
	.loc 7 8572 0
	#   case JNE: case NE: q_lt = r_true;  q_eq = r_false; q_gt = r_true;  break;
	.L1512:
	.L1513:
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8572 0
	#   case JNE: case NE: q_lt = r_true;  q_eq = r_false; q_gt = r_true;  break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8572 0
	#   case JNE: case NE: q_lt = r_true;  q_eq = r_false; q_gt = r_true;  break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8572 0
	#   case JNE: case NE: q_lt = r_true;  q_eq = r_false; q_gt = r_true;  break;
	jmp .L1511
	.loc 7 8573 0
	#   case JLT: case LT: q_lt = r_true;  q_eq = r_false; q_gt = r_false; break;
	.L1514:
	.L1515:
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8573 0
	#   case JLT: case LT: q_lt = r_true;  q_eq = r_false; q_gt = r_false; break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8573 0
	#   case JLT: case LT: q_lt = r_true;  q_eq = r_false; q_gt = r_false; break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8573 0
	#   case JLT: case LT: q_lt = r_true;  q_eq = r_false; q_gt = r_false; break;
	jmp .L1511
	.loc 7 8574 0
	#   case JGE: case GE: q_lt = r_false; q_eq = r_true;  q_gt = r_true;  break;
	.L1516:
	.L1517:
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8574 0
	#   case JGE: case GE: q_lt = r_false; q_eq = r_true;  q_gt = r_true;  break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8574 0
	#   case JGE: case GE: q_lt = r_false; q_eq = r_true;  q_gt = r_true;  break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8574 0
	#   case JGE: case GE: q_lt = r_false; q_eq = r_true;  q_gt = r_true;  break;
	jmp .L1511
	.loc 7 8575 0
	#   case JGT: case GT: q_lt = r_false; q_eq = r_false; q_gt = r_true;  break;
	.L1518:
	.L1519:
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8575 0
	#   case JGT: case GT: q_lt = r_false; q_eq = r_false; q_gt = r_true;  break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8575 0
	#   case JGT: case GT: q_lt = r_false; q_eq = r_false; q_gt = r_true;  break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8575 0
	#   case JGT: case GT: q_lt = r_false; q_eq = r_false; q_gt = r_true;  break;
	jmp .L1511
	.loc 7 8576 0
	#   case JLE: case LE: q_lt = r_true;  q_eq = r_true;  q_gt = r_false; break;
	.L1520:
	.L1521:
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8576 0
	#   case JLE: case LE: q_lt = r_true;  q_eq = r_true;  q_gt = r_false; break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8576 0
	#   case JLE: case LE: q_lt = r_true;  q_eq = r_true;  q_gt = r_false; break;
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8576 0
	#   case JLE: case LE: q_lt = r_true;  q_eq = r_true;  q_gt = r_false; break;
	jmp .L1511
	.loc 7 8577 0
	#   default: error("invalid comparison operation");
	.L1522:
	.L1523:
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8577 0
	#   default: error("invalid comparison operation");
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8577 0
	#   default: error("invalid comparison operation");
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8577 0
	#   default: error("invalid comparison operation");
	jmp .L1511
	.loc 7 8578 0
	#   }
	.L1524:
.data
	.L9118:
	.string "invalid comparison operation"
.text
	mov A, .L9118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9119:
	mov A, B
	add SP, 1
	.L1511:
	.loc 7 8581 0
	#   int q0 = tm_new_state(), q1 = tm_new_state();
	mov A, 0
	mov B, SP
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 8582 0
	#   int erase_gt = tm_new_state(), erase_lt = tm_new_state();
	mov A, 0
	mov B, SP
	mov A, .L9120
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9120:
	mov A, B
	mov B, BP
	add B, 16777210
	store A, B
	mov A, 0
	mov B, SP
	mov A, .L9121
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9121:
	mov A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 8583 0
	#   tm_write_if2(q, TM_ZERO, TM_BLANK, +1, q0, TM_ONE, TM_BLANK, +1, q1, TM_BLANK, 0, q_eq);
	mov A, 0
	mov B, SP
	mov A, .L9122
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9122:
	mov A, B
	mov B, BP
	add B, 16777208
	store A, B
	mov A, 0
	mov B, SP
	mov A, .L9123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9123:
	mov A, B
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 8584 0
	#   tm_move_if2(q0, TM_ZERO, +1, q_nexttm_bit, TM_ONE, +1, erase_gt, 0, tm_q_reject);
	.loc 7 8570 0
	#   switch (op) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8584 0
	#   tm_move_if2(q0, TM_ZERO, +1, q_nexttm_bit, TM_ONE, +1, erase_gt, 0, tm_q_reject);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8582 0
	#   int erase_gt = tm_new_state(), erase_lt = tm_new_state();
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8584 0
	#   tm_move_if2(q0, TM_ZERO, +1, q_nexttm_bit, TM_ONE, +1, erase_gt, 0, tm_q_reject);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8582 0
	#   int erase_gt = tm_new_state(), erase_lt = tm_new_state();
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8584 0
	#   tm_move_if2(q0, TM_ZERO, +1, q_nexttm_bit, TM_ONE, +1, erase_gt, 0, tm_q_reject);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_if2
	.L9124:
	mov A, B
	add SP, 12
	.loc 7 8585 0
	#   tm_move_if2(q1, TM_ZERO, +1, erase_lt, TM_ONE, +1, q_nexttm_bit, 0, tm_q_reject);
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8585 0
	#   tm_move_if2(q1, TM_ZERO, +1, erase_lt, TM_ONE, +1, q_nexttm_bit, 0, tm_q_reject);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8583 0
	#   tm_write_if2(q, TM_ZERO, TM_BLANK, +1, q0, TM_ONE, TM_BLANK, +1, q1, TM_BLANK, 0, q_eq);
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8585 0
	#   tm_move_if2(q1, TM_ZERO, +1, erase_lt, TM_ONE, +1, q_nexttm_bit, 0, tm_q_reject);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8581 0
	#   int q0 = tm_new_state(), q1 = tm_new_state();
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8585 0
	#   tm_move_if2(q1, TM_ZERO, +1, erase_lt, TM_ONE, +1, q_nexttm_bit, 0, tm_q_reject);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8582 0
	#   int erase_gt = tm_new_state(), erase_lt = tm_new_state();
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9125:
	mov A, B
	add SP, 9
	.loc 7 8586 0
	#   tm_erase_tm_bits(erase_lt, q_lt);
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8586 0
	#   tm_erase_tm_bits(erase_lt, q_lt);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8581 0
	#   int q0 = tm_new_state(), q1 = tm_new_state();
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8586 0
	#   tm_erase_tm_bits(erase_lt, q_lt);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8583 0
	#   tm_write_if2(q, TM_ZERO, TM_BLANK, +1, q0, TM_ONE, TM_BLANK, +1, q1, TM_BLANK, 0, q_eq);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8586 0
	#   tm_erase_tm_bits(erase_lt, q_lt);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8582 0
	#   int erase_gt = tm_new_state(), erase_lt = tm_new_state();
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9126:
	mov A, B
	add SP, 9
	.loc 7 8587 0
	#   tm_erase_tm_bits(erase_gt, q_gt);
	.loc 7 8570 0
	#   switch (op) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8583 0
	#   tm_write_if2(q, TM_ZERO, TM_BLANK, +1, q0, TM_ONE, TM_BLANK, +1, q1, TM_BLANK, 0, q_eq);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_erase_tm_bits
	.L9127:
	mov A, B
	add SP, 2
	.loc 7 8588 0
	#   return r_true;
	.loc 7 8570 0
	#   switch (op) {
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8583 0
	#   tm_write_if2(q, TM_ZERO, TM_BLANK, +1, q0, TM_ONE, TM_BLANK, +1, q1, TM_BLANK, 0, q_eq);
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_erase_tm_bits
	.L9128:
	mov A, B
	add SP, 2
	.loc 7 8589 0
	# }
	.loc 7 8563 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_equal:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 8601 0
	# }
	.loc 7 8596 0
	#   int q0 = tm_new_state(), q1 = tm_new_state();
	mov A, 0
	mov B, SP
	.loc 7 8589 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8597 0
	#   tm_move_if2(q, TM_ZERO, +1, q0, TM_ONE, +1, q1, 0, r_eq);
	mov A, 0
	mov B, SP
	mov A, .L9129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9129:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	mov A, 0
	mov B, SP
	mov A, .L9130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9130:
	mov A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8598 0
	#   tm_move_if2(q0, TM_ZERO, +1, q_nexttm_bit, TM_ONE, +1, r_ne, 0, tm_q_reject);
	.loc 7 8589 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8598 0
	#   tm_move_if2(q0, TM_ZERO, +1, q_nexttm_bit, TM_ONE, +1, r_ne, 0, tm_q_reject);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8597 0
	#   tm_move_if2(q, TM_ZERO, +1, q0, TM_ONE, +1, q1, 0, r_eq);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8598 0
	#   tm_move_if2(q0, TM_ZERO, +1, q_nexttm_bit, TM_ONE, +1, r_ne, 0, tm_q_reject);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8597 0
	#   tm_move_if2(q, TM_ZERO, +1, q0, TM_ONE, +1, q1, 0, r_eq);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8598 0
	#   tm_move_if2(q0, TM_ZERO, +1, q_nexttm_bit, TM_ONE, +1, r_ne, 0, tm_q_reject);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8589 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9131:
	mov A, B
	add SP, 9
	.loc 7 8599 0
	#   tm_move_if2(q1, TM_ZERO, +1, r_ne, TM_ONE, +1, q_nexttm_bit, 0, tm_q_reject);
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8599 0
	#   tm_move_if2(q1, TM_ZERO, +1, r_ne, TM_ONE, +1, q_nexttm_bit, 0, tm_q_reject);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8589 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8599 0
	#   tm_move_if2(q1, TM_ZERO, +1, r_ne, TM_ONE, +1, q_nexttm_bit, 0, tm_q_reject);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8596 0
	#   int q0 = tm_new_state(), q1 = tm_new_state();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8599 0
	#   tm_move_if2(q1, TM_ZERO, +1, r_ne, TM_ONE, +1, q_nexttm_bit, 0, tm_q_reject);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8597 0
	#   tm_move_if2(q, TM_ZERO, +1, q0, TM_ONE, +1, q1, 0, r_eq);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9132:
	mov A, B
	add SP, 9
	.loc 7 8600 0
	#   return r_eq;
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8600 0
	#   return r_eq;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8596 0
	#   int q0 = tm_new_state(), q1 = tm_new_state();
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8600 0
	#   return r_eq;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8589 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8600 0
	#   return r_eq;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8597 0
	#   tm_move_if2(q, TM_ZERO, +1, q0, TM_ONE, +1, q1, 0, r_eq);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if2
	.L9133:
	mov A, B
	add SP, 9
	.loc 7 8601 0
	# }
	.loc 7 8589 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_find_memory_indirect:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 8660 0
	# }
	.loc 7 8610 0
	#   q = tm_find(q, +1, TM_ADDRESS, tm_new_state(), q_append);
	mov A, 0
	mov B, SP
	mov A, .L9134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9134:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8611 0
	#   q = tm_move(q, +1, tm_new_state());
	.loc 7 8610 0
	#   q = tm_find(q, +1, TM_ADDRESS, tm_new_state(), q_append);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8611 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L9135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9135:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8611 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9136:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8612 0
	#   q = tm_write(q, TM_DST, -1, tm_new_state());
	mov A, .L9137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9137:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9138:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8613 0
	#   q = tm_find_register(q, reg, tm_new_state());
	mov A, .L9139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9139:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9140
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9140:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8614 0
	# 
	mov A, .L9141
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9141:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_register
	.L9142:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8616 0
	# 
	mov A, .L9143
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9143:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9144
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L9144:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8616 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9145
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy
	.L9145:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8619 0
	#   int q_compare = q;
	mov A, 0
	mov B, SP
	mov A, .L9146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9146:
	mov A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8620 0
	#   q = tm_find(q, -1, TM_ADDRESS, tm_new_state(), tm_q_reject);
	mov A, 0
	mov B, SP
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8621 0
	#   q = tm_move(q, +1, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8621 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L9147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9147:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8621 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9148
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9148:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8622 0
	#   q = tm_equal(q, tm_new_state(), q_nextaddr);
	mov A, .L9149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9149:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9150
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9150:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8623 0
	# 
	.loc 7 8619 0
	#   int q_compare = q;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8623 0
	# 
	mov A, .L9151
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9151:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_equal
	.L9152:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8626 0
	#   tm_move(q, +1, r);
	mov A, .L9153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9153:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9154
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9154:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8627 0
	# 
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8627 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9155
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9155:
	mov A, B
	add SP, 3
	.loc 7 8631 0
	#   q = tm_find(q, +1, TM_ADDRESS, tm_new_state(), q_append);
	.loc 7 8619 0
	#   int q_compare = q;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8632 0
	#   q = tm_move(q, +1, tm_new_state());
	.loc 7 8610 0
	#   q = tm_find(q, +1, TM_ADDRESS, tm_new_state(), q_append);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8632 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L9156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9156:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8632 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9157:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8633 0
	#   q = tm_write(q, TM_DST, -1, tm_new_state());
	mov A, .L9158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9158:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9159:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8634 0
	# 
	mov A, .L9160
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9160:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9161
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9161:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8637 0
	#   q = tm_move(q, -1, tm_new_state());
	mov A, .L9162
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9162:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9163
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9163:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8638 0
	#   q = tm_find(q, -1, TM_ADDRESS, tm_new_state(), tm_q_reject);
	mov A, .L9164
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9164:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9165
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9165:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8639 0
	#   q = tm_move(q, +1, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8639 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L9166
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9166:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8639 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9167
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9167:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8640 0
	#   
	mov A, .L9168
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9168:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9169
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9169:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8643 0
	# 
	.loc 7 8620 0
	#   q = tm_find(q, -1, TM_ADDRESS, tm_new_state(), tm_q_reject);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8643 0
	# 
	.loc 7 8196 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9170
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L9170:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8643 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9171
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy
	.L9171:
	mov A, B
	add SP, 4
	.loc 7 8646 0
	#   q = tm_write(q, TM_ADDRESS, +1, tm_new_state());
	.loc 7 8610 0
	#   q = tm_find(q, +1, TM_ADDRESS, tm_new_state(), q_append);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8647 0
	#   q = tm_write(q, TM_DST, -1, tm_new_state());
	mov A, .L9172
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9172:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9173
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9173:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8648 0
	#   q = tm_move(q, -1, tm_new_state());
	mov A, .L9174
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9174:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9175
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9175:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8649 0
	#   q = tm_find(q, -1, TM_ADDRESS, tm_new_state(), tm_q_reject);
	mov A, .L9176
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9176:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9177:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8650 0
	#   q = tm_move(q, +1, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8650 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L9178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9178:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8650 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9179:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8651 0
	#   q = tm_copy(q, +1, TM_SKIP_AFTER_SRC|TM_SKIP_BEFORE_DST, tm_new_state());
	mov A, .L9180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9180:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9181:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8652 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L9182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9182:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L9183:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8652 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy
	.L9184:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8653 0
	#   q = tm_write(q, TM_VALUE, +1, tm_new_state());
	mov A, .L9185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9185:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9186:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8654 0
	#   q = tm_write_tm_bits(q, 0, tm_word_size, TM_SKIP_BEFORE_DST, tm_new_state());
	mov A, .L9187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9187:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9188:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8655 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L9189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9189:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8655 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9190
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_tm_bits
	.L9190:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8656 0
	#   q = tm_write(q, TM_END, -1, tm_new_state());
	mov A, .L9191
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9191:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9192:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8657 0
	#   q = tm_find(q, -1, TM_VALUE, tm_new_state(), tm_q_reject);
	mov A, .L9193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9193:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9194:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8658 0
	#   tm_move(q, +1, r);
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8658 0
	#   tm_move(q, +1, r);
	mov A, .L9195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9195:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8658 0
	#   tm_move(q, +1, r);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9196:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 2
	store A, B
	.loc 7 8659 0
	#   return r;
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8659 0
	#   return r;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9197:
	mov A, B
	add SP, 3
	.loc 7 8660 0
	# }
	.loc 7 8601 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
tm_make_jmpreg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 4
	.loc 7 8679 0
	#   }
	.loc 7 8668 0
	#     return i;
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8668 0
	#     return i;
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9198, A, 0
	.loc 7 8669 0
	#   } else {
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L9199
	.L9198:
	.loc 7 8679 0
	#   }
	.loc 7 8671 0
	#     int q = tm_transition(q_new, TM_BLANK, TM_BLANK, +1, tm_new_state());
	mov A, 0
	mov B, SP
	mov A, .L9200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9200:
	mov A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8672 0
	#     int q0 = tm_make_jmpreg(pc_max, h-1, i);
	mov A, 0
	mov B, SP
	mov A, .L9201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9201:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8671 0
	#     int q = tm_transition(q_new, TM_BLANK, TM_BLANK, +1, tm_new_state());
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L9202:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8673 0
	#     tm_transition(q, TM_ZERO, TM_ZERO, +1, q0);
	mov A, 0
	mov B, SP
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8673 0
	#     tm_transition(q, TM_ZERO, TM_ZERO, +1, q0);
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8673 0
	#     tm_transition(q, TM_ZERO, TM_ZERO, +1, q0);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_make_jmpreg
	.L9203:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8674 0
	#     if (i+(1<<(h-1)) <= pc_max) {
	.loc 7 8673 0
	#     tm_transition(q, TM_ZERO, TM_ZERO, +1, q0);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8674 0
	#     if (i+(1<<(h-1)) <= pc_max) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8672 0
	#     int q0 = tm_make_jmpreg(pc_max, h-1, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L9204:
	mov A, B
	add SP, 5
	.loc 7 8677 0
	#     }
	.loc 7 8675 0
	#       int q1 = tm_make_jmpreg(pc_max, h-1, i + (1<<(h-1)));
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8675 0
	#       int q1 = tm_make_jmpreg(pc_max, h-1, i + (1<<(h-1)));
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8675 0
	#       int q1 = tm_make_jmpreg(pc_max, h-1, i + (1<<(h-1)));
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L9205:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L9206, A, 0
	.loc 7 8677 0
	#     }
	.loc 7 8676 0
	#       tm_transition(q, TM_ONE, TM_ONE, +1, q1);
	mov A, 0
	mov B, SP
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8676 0
	#       tm_transition(q, TM_ONE, TM_ONE, +1, q1);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8676 0
	#       tm_transition(q, TM_ONE, TM_ONE, +1, q1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_shl
	.L9207:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8676 0
	#       tm_transition(q, TM_ONE, TM_ONE, +1, q1);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8660 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_make_jmpreg
	.L9208:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8677 0
	#     }
	.loc 7 8676 0
	#       tm_transition(q, TM_ONE, TM_ONE, +1, q1);
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8677 0
	#     }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8672 0
	#     int q0 = tm_make_jmpreg(pc_max, h-1, i);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_transition
	.L9209:
	mov A, B
	add SP, 5
	.L9206:
	.loc 7 8679 0
	#   }
	.loc 7 8671 0
	#     int q = tm_transition(q_new, TM_BLANK, TM_BLANK, +1, tm_new_state());
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L9199:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_tm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 19
	.loc 7 8901 0
	#       error("invalid operation");
	.loc 7 8687 0
	#   for (Inst* inst = module->text; inst; inst = inst->next)
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 8688 0
	#     if (inst->pc >= pc_max)
	mov A, 0
	mov B, SP
	.loc 7 8679 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 8688 0
	#     if (inst->pc >= pc_max)
	.L1525:
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L9210, A, 0
	jmp .L9211
	.L9210:
	jmp .L1527
	.L9211:
	.loc 7 8687 0
	#   for (Inst* inst = module->text; inst; inst = inst->next)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8688 0
	#     if (inst->pc >= pc_max)
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L9212, A, 0
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.L9212:
	.L1526:
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	jmp .L1525
	.L1527:
	.loc 7 8691 0
	#   tm_q_reject = tm_new_state();
	.loc 7 8687 0
	#   for (Inst* inst = module->text; inst; inst = inst->next)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8691 0
	#   tm_q_reject = tm_new_state();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, tm_next_state
	store A, B
	.loc 7 8692 0
	# 
	mov A, .L9213
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9213:
	mov A, B
	mov B, tm_q_reject
	store A, B
	.loc 7 8694 0
	#   int q_jmpreg = tm_make_jmpreg(pc_max, tm_word_size, 0);
.data
	.L9214:
	.string "trie for jmp reg"
.text
	mov A, .L9214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_comment
	.L9215:
	mov A, B
	add SP, 1
	.loc 7 8695 0
	# 
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8687 0
	#   for (Inst* inst = module->text; inst; inst = inst->next)
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_make_jmpreg
	.L9216:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 8697 0
	# 
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777212
	mov A, 0
	store A, B
	.loc 7 8699 0
	# 
.data
	.L9217:
	.string "beginning-of-tape and input string"
.text
	mov A, .L9217
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_comment
	.L9218:
	mov A, B
	add SP, 1
	.loc 7 8702 0
	#   q = tm_rewind(q, tm_new_state());
	mov A, .L9219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9219:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9220
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_insert
	.L9220:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8703 0
	#   q = tm_move(q, +1, tm_new_state());
	mov A, .L9221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9221:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9222
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_rewind
	.L9222:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8704 0
	#   q = tm_insert(q, TM_BLANK, +1, tm_new_state());
	mov A, .L9223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9223:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9224:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8705 0
	#   q = tm_write(q, TM_END, 0, tm_new_state());
	mov A, .L9225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9225:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9226
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_insert
	.L9226:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8706 0
	# 
	mov A, .L9227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9227:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9228
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9228:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8711 0
	#   }
	.loc 7 8709 0
	#     tm_comment("register %s value 0", reg_names[reg]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777211
	mov A, 0
	store A, B
	.loc 7 8711 0
	#   }
	.L1528:
	.loc 7 8709 0
	#     tm_comment("register %s value 0", reg_names[reg]);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9229, A, 0
	jmp .L9230
	.L9229:
	.loc 7 8711 0
	#   }
	jmp .L1530
	.L9230:
	.loc 7 8710 0
	#     q = tm_new_location(q, TM_REGISTER, reg, 3, 0, tm_new_state());
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8709 0
	#     tm_comment("register %s value 0", reg_names[reg]);
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8710 0
	#     q = tm_new_location(q, TM_REGISTER, reg, 3, 0, tm_new_state());
.data
	.L9231:
	.string "register %s value 0"
.text
	mov A, .L9231
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_comment
	.L9232:
	mov A, B
	add SP, 2
	.loc 7 8711 0
	#   }
	mov A, .L9233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9233:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8709 0
	#     tm_comment("register %s value 0", reg_names[reg]);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_location
	.L9234:
	mov A, B
	add SP, 6
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8711 0
	#   }
	.L1529:
	.loc 7 8709 0
	#     tm_comment("register %s value 0", reg_names[reg]);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777211
	store A, B
	load A, SP
	add SP, 1
	.loc 7 8711 0
	#   }
	jmp .L1528
	.L1530:
	.loc 7 8715 0
	#   int mp = 0;
	mov A, 0
	mov B, SP
	.loc 7 8679 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 8716 0
	#   while (data) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777209
	mov A, 0
	store A, B
	.loc 7 8724 0
	#   }
	.L1531:
	.loc 7 8715 0
	#   int mp = 0;
	mov B, BP
	add B, 16777210
	load A, B
	jeq .L9235, A, 0
	.loc 7 8724 0
	#   }
	.loc 7 8718 0
	#       tm_comment("address %d value %d '%c'", mp, data->v, data->v);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8715 0
	#   int mp = 0;
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L9237, A, 0
	.loc 7 8718 0
	#       tm_comment("address %d value %d '%c'", mp, data->v, data->v);
	.loc 7 8715 0
	#   int mp = 0;
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8718 0
	#       tm_comment("address %d value %d '%c'", mp, data->v, data->v);
	mov A, 128
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, A
	ne B, 0
	.L9237:
	mov A, B
	mov B, 0
	jeq .L9236, A, 0
	.loc 7 8715 0
	#   int mp = 0;
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isprint
	.L9238:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L9236:
	mov A, B
	jeq .L9239, A, 0
	.loc 7 8718 0
	#       tm_comment("address %d value %d '%c'", mp, data->v, data->v);
	.loc 7 8715 0
	#   int mp = 0;
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8718 0
	#       tm_comment("address %d value %d '%c'", mp, data->v, data->v);
	.loc 7 8715 0
	#   int mp = 0;
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8716 0
	#   while (data) {
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8718 0
	#       tm_comment("address %d value %d '%c'", mp, data->v, data->v);
.data
	.L9240:
	.string "address %d value %d '%c'"
.text
	mov A, .L9240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_comment
	.L9241:
	mov A, B
	add SP, 4
	jmp .L9242
	.L9239:
	.loc 7 8715 0
	#   int mp = 0;
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8716 0
	#   while (data) {
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8718 0
	#       tm_comment("address %d value %d '%c'", mp, data->v, data->v);
.data
	.L9243:
	.string "address %d value %d"
.text
	mov A, .L9243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_comment
	.L9244:
	mov A, B
	add SP, 3
	.L9242:
	.loc 7 8722 0
	#     data = data->next;
	mov A, .L9245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9245:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8715 0
	#   int mp = 0;
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8716 0
	#   while (data) {
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_location
	.L9246:
	mov A, B
	add SP, 6
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8723 0
	#     mp++;
	.loc 7 8715 0
	#   int mp = 0;
	mov B, BP
	add B, 16777210
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 8724 0
	#   }
	.loc 7 8716 0
	#   while (data) {
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777209
	store A, B
	load A, SP
	add SP, 1
	jmp .L9247
	.L9235:
	.loc 7 8724 0
	#   }
	jmp .L1532
	.L9247:
	jmp .L1531
	.L1532:
	.loc 7 8726 0
	#   q = tm_write(q, TM_END, -1, tm_new_state());
	mov A, .L9248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9248:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9249
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9249:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8727 0
	#   q = tm_rewind(q, tm_new_state());
	mov A, .L9250
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9250:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9251:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8728 0
	# 
	mov A, .L9252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9252:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_rewind
	.L9253:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8730 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777208
	mov A, 0
	store A, B
	.loc 7 8901 0
	#       error("invalid operation");
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov A, 0
	mov B, SP
	.loc 7 8679 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 8901 0
	#       error("invalid operation");
	.L1533:
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	jeq .L9254, A, 0
	jmp .L9255
	.L9254:
	.loc 7 8901 0
	#       error("invalid operation");
	jmp .L1535
	.L9255:
	.loc 7 8732 0
	# 
.data
	.L9256:
	.string "// "
.text
	mov A, .L9256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L9257:
	mov A, B
	add SP, 1
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_inst_fp
	.L9258:
	mov A, B
	add SP, 2
	.loc 7 8735 0
	#       q = tm_noop(q, inst->pc);
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8730 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777208
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, 0
	jeq .L9259, A, 0
	.loc 7 8735 0
	#       q = tm_noop(q, inst->pc);
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8735 0
	#       q = tm_noop(q, inst->pc);
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L9259:
	mov A, B
	jeq .L9260, A, 0
	.loc 7 8735 0
	#       q = tm_noop(q, inst->pc);
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9261
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_noop
	.L9261:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.L9260:
	.loc 7 8737 0
	# 
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 8739 0
	# 
	mov A, .L9262
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9262:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9263
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_rewind
	.L9263:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8901 0
	#       error("invalid operation");
	.loc 7 8741 0
	# 
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777197
	store A, B
	.loc 7 8901 0
	#       error("invalid operation");
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9264, A, 0
	jmp .L1537
	.L9264:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9265, A, 0
	jmp .L1538
	.L9265:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9266, A, 0
	jmp .L1539
	.L9266:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9267, A, 0
	jmp .L1540
	.L9267:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9268, A, 0
	jmp .L1543
	.L9268:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9269, A, 0
	jmp .L1546
	.L9269:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9270, A, 0
	jmp .L1552
	.L9270:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9271, A, 0
	jmp .L1556
	.L9271:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9272, A, 0
	jmp .L1557
	.L9272:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9273, A, 0
	jmp .L1558
	.L9273:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9274, A, 0
	jmp .L1559
	.L9274:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9275, A, 0
	jmp .L1560
	.L9275:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9276, A, 0
	jmp .L1561
	.L9276:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9277, A, 0
	jmp .L1562
	.L9277:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9278, A, 0
	jmp .L1563
	.L9278:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9279, A, 0
	jmp .L1564
	.L9279:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9280, A, 0
	jmp .L1565
	.L9280:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9281, A, 0
	jmp .L1566
	.L9281:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9282, A, 0
	jmp .L1567
	.L9282:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9283, A, 0
	jmp .L1568
	.L9283:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9284, A, 0
	jmp .L1569
	.L9284:
	mov B, BP
	add B, 16777197
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9285, A, 0
	jmp .L1570
	.L9285:
	jmp .L1571
	.loc 7 8743 0
	#       q = tm_copy_value(q, inst, TM_SKIP_BEFORE_DST, tm_new_state());
	.L1537:
	mov A, .L9286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9286:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9287
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy_value
	.L9287:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8745 0
	# 
	jmp .L1536
	.loc 7 8747 0
	#     case SUB:
	.L1538:
	.L1539:
	mov A, .L9288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9288:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy_value
	.L9289:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8751 0
	# 	q = tm_addsub(q, +1, tm_new_state());
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9290, A, 0
	.loc 7 8751 0
	# 	q = tm_addsub(q, +1, tm_new_state());
	mov A, .L9291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9291:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9292
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_addsub
	.L9292:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L9293
	.L9290:
	.loc 7 8751 0
	# 	q = tm_addsub(q, +1, tm_new_state());
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9294, A, 0
	.loc 7 8751 0
	# 	q = tm_addsub(q, +1, tm_new_state());
	mov A, .L9295
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9295:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_addsub
	.L9296:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.L9294:
	.L9293:
	.loc 7 8755 0
	# 
	jmp .L1536
	.loc 8 12 0
	#     }                                           \
	.loc 7 8757 0
	#       assert (inst->dst.type == REG);
	.L1540:
	.loc 8 12 0
	#     }                                           \
	.L1541:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L9297, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L9298:
	.string "assertion failed: inst->dst.type == REG\n"
.text
	mov A, .L9298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L9299:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L9297:
	mov A, 0
	jeq .L9300, A, 0
	jmp .L1541
	.L9300:
	.L1542:
	.loc 7 8762 0
	#       } else
	.loc 7 8759 0
	# 	q = tm_find_memory_indirect(q, inst->src.reg, tm_new_state());
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9301, A, 0
	.loc 7 8760 0
	#       } else if (inst->src.type == IMM) {
	mov A, .L9302
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9302:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_memory_indirect
	.L9303:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L9304
	.L9301:
	.loc 7 8762 0
	#       } else
	.loc 7 8760 0
	#       } else if (inst->src.type == IMM) {
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9305, A, 0
	.loc 7 8762 0
	#       } else
	mov A, .L9306
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9306:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_memory
	.L9307:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L9308
	.L9305:
	.loc 7 8762 0
	#       } else
.data
	.L9309:
	.string "invalid src type"
.text
	mov A, .L9309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9310:
	mov A, B
	add SP, 1
	.L9308:
	.L9304:
	.loc 7 8765 0
	#       q = tm_find_register(q, inst->dst.reg, tm_new_state());
	mov A, .L9311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9311:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9312:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8766 0
	#       q = tm_write(q, TM_DST, +1, tm_new_state());
	mov A, .L9313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9313:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_register
	.L9314:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8767 0
	#       q = tm_move(q, +1, tm_new_state());
	mov A, .L9315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9315:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9316:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8768 0
	#       q = tm_find(q, +1, TM_SRC, tm_new_state(), tm_q_reject);
	mov A, .L9317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9317:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9318:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8769 0
	#       q = tm_copy(q, -1, TM_SKIP_BEFORE_SRC|TM_SKIP_BEFORE_DST, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8769 0
	#       q = tm_copy(q, -1, TM_SKIP_BEFORE_SRC|TM_SKIP_BEFORE_DST, tm_new_state());
	mov A, .L9319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9319:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8769 0
	#       q = tm_copy(q, -1, TM_SKIP_BEFORE_SRC|TM_SKIP_BEFORE_DST, tm_new_state());
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9320:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8770 0
	#       break;
	mov A, .L9321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9321:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L9322:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8770 0
	#       break;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy
	.L9323:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8771 0
	# 
	jmp .L1536
	.loc 8 12 0
	#     }                                           \
	.loc 7 8773 0
	#       assert (inst->dst.type == REG);
	.L1543:
	.loc 8 12 0
	#     }                                           \
	.L1544:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L9324, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L9325:
	.string "assertion failed: inst->dst.type == REG\n"
.text
	mov A, .L9325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L9326:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L9324:
	mov A, 0
	jeq .L9327, A, 0
	jmp .L1544
	.L9327:
	.L1545:
	.loc 7 8778 0
	#       } else
	.loc 7 8775 0
	# 	q = tm_find_memory_indirect(q, inst->src.reg, tm_new_state());
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9328, A, 0
	.loc 7 8776 0
	#       } else if (inst->src.type == IMM) {
	mov A, .L9329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9329:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_memory_indirect
	.L9330:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L9331
	.L9328:
	.loc 7 8778 0
	#       } else
	.loc 7 8776 0
	#       } else if (inst->src.type == IMM) {
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9332, A, 0
	.loc 7 8778 0
	#       } else
	mov A, .L9333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9333:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_memory
	.L9334:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L9335
	.L9332:
	.loc 7 8778 0
	#       } else
.data
	.L9336:
	.string "invalid dst type"
.text
	mov A, .L9336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9337:
	mov A, B
	add SP, 1
	.L9335:
	.L9331:
	.loc 7 8781 0
	#       q = tm_move(q, +1, tm_new_state());
	mov A, .L9338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9338:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9339:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8782 0
	#       q = tm_find_register(q, inst->dst.reg, tm_new_state());
	mov A, .L9340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9340:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9341:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8783 0
	#       q = tm_copy(q, +1, TM_SKIP_BEFORE_SRC|TM_SKIP_BEFORE_DST, tm_new_state());
	mov A, .L9342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9342:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_register
	.L9343:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8784 0
	#       break;
	mov A, .L9344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9344:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_or
	.L9345:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8784 0
	#       break;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy
	.L9346:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8785 0
	# 
	jmp .L1536
	.loc 8 12 0
	#     }                                           \
	.loc 7 8787 0
	#       // Mark last 8 tm_bits of register as TM_DST
	.L1546:
	.loc 8 12 0
	#     }                                           \
	.L1547:
	.loc 8 10 0
	#       print_str("assertion failed: " #x "\n");  \
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	eq A, 0
	jeq .L9347, A, 0
	.loc 8 12 0
	#     }                                           \
	.loc 8 11 0
	#       exit(1);                                  \
.data
	.L9348:
	.string "assertion failed: inst->dst.type == REG\n"
.text
	mov A, .L9348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp print_str
	.L9349:
	mov A, B
	add SP, 1
	.loc 8 12 0
	#     }                                           \
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L9347:
	mov A, 0
	jeq .L9350, A, 0
	jmp .L1547
	.L9350:
	.L1548:
	.loc 7 8790 0
	#       q = tm_write_tm_bits(q, 0, tm_word_size-8, TM_SKIP_BEFORE_DST, tm_new_state());
	mov A, .L9351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9351:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_register
	.L9352:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8791 0
	#       q = tm_write(q, TM_DST, -1, tm_new_state());
	mov A, .L9353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9353:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8791 0
	#       q = tm_write(q, TM_DST, -1, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8791 0
	#       q = tm_write(q, TM_DST, -1, tm_new_state());
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_tm_bits
	.L9354:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8792 0
	# 
	mov A, .L9355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9355:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9356
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9356:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8795 0
	#       q = tm_rewind(q, tm_new_state());
	mov A, 0
	mov B, SP
	mov A, .L9357
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9357:
	mov A, B
	mov B, BP
	add B, 16777206
	store A, B
	mov A, 0
	mov B, SP
	mov A, .L9358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9358:
	mov A, B
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 8796 0
	#       q = tm_move(q, +1, tm_new_state()); // ^[_]...
	mov A, .L9359
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9359:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9360
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_rewind
	.L9360:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8797 0
	#       q = tm_move_if(q, TM_BLANK, +1, q, 0, tm_new_state()); // ...[0] or ...[r]
	mov A, .L9361
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9361:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9362:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8798 0
	#       q = tm_move_if(q, TM_REGISTER, 0, q_eof, +1, tm_new_state());
	mov A, .L9363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9363:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8798 0
	#       q = tm_move_if(q, TM_REGISTER, 0, q_eof, +1, tm_new_state());
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if
	.L9364:
	mov A, B
	add SP, 6
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8799 0
	#       for (int i=0; i<6; i++)
	mov A, .L9365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9365:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8795 0
	#       q = tm_rewind(q, tm_new_state());
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8799 0
	#       for (int i=0; i<6; i++)
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move_if
	.L9366:
	mov A, B
	add SP, 6
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8800 0
	# 	q = tm_move(q, +1, tm_new_state());
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777204
	mov A, 0
	store A, B
	.L1549:
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9367, A, 0
	jmp .L9368
	.L9367:
	jmp .L1551
	.L9368:
	mov A, .L9369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9369:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9370:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8800 0
	# 	q = tm_move(q, +1, tm_new_state());
	.L1550:
	mov B, BP
	add B, 16777204
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777204
	store A, B
	load A, SP
	add SP, 1
	jmp .L1549
	.L1551:
	.loc 7 8802 0
	#       q = tm_move(q, +1, tm_new_state());
	mov A, .L9371
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9371:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9372
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_insert
	.L9372:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8803 0
	#       q = tm_copy(q, +1, TM_SKIP_BEFORE_DST, q_done);
	mov A, .L9373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9373:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9374
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9374:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8804 0
	# 
	.loc 7 8795 0
	#       q = tm_rewind(q, tm_new_state());
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8804 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9375
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy
	.L9375:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8807 0
	#       q = tm_find(q, +1, TM_DST, tm_new_state(), tm_q_reject);
	.loc 7 8795 0
	#       q = tm_rewind(q, tm_new_state());
	mov B, BP
	add B, 16777206
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8808 0
	#       q = tm_write(q, TM_BLANK, 0, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8808 0
	#       q = tm_write(q, TM_BLANK, 0, tm_new_state());
	mov A, .L9376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9376:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8808 0
	#       q = tm_write(q, TM_BLANK, 0, tm_new_state());
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9377:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8809 0
	#       q = tm_write_tm_bits(q, 0, 8, TM_SKIP_BEFORE_DST, q_done);
	mov A, .L9378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9378:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9379:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8810 0
	# 
	.loc 7 8795 0
	#       q = tm_rewind(q, tm_new_state());
	mov B, BP
	add B, 16777205
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8810 0
	# 
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9380
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_tm_bits
	.L9380:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8812 0
	#       
	.loc 7 8795 0
	#       q = tm_rewind(q, tm_new_state());
	mov B, BP
	add B, 16777205
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8814 0
	# 
	jmp .L1536
	.loc 7 8816 0
	#       q = tm_ffwd(q, tm_new_state());
	.L1552:
	mov A, .L9381
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9381:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9382
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_ffwd
	.L9382:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8818 0
	#       if (inst->src.type == REG) {
	mov A, .L9383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9383:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9384:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8826 0
	#       } else
	.loc 7 8819 0
	# 	q = tm_write(q, TM_DST, -1, tm_new_state());
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9385, A, 0
	.loc 7 8824 0
	#       } else if (inst->src.type == IMM) {
	.loc 7 8820 0
	# 	q = tm_find_register(q, inst->src.reg, tm_new_state());
	mov A, .L9386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9386:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9387
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9387:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8821 0
	# 	for (int i=0; i<(tm_word_size-8)*2; i++)
	mov A, .L9388
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9388:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_register
	.L9389:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8822 0
	# 	  q = tm_move(q, +1, tm_new_state());
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777203
	mov A, 0
	store A, B
	.L1553:
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8822 0
	# 	  q = tm_move(q, +1, tm_new_state());
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9390
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L9390:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9391, A, 0
	jmp .L9392
	.L9391:
	jmp .L1555
	.L9392:
	mov A, .L9393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9393:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9394
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9394:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8822 0
	# 	  q = tm_move(q, +1, tm_new_state());
	.L1554:
	mov B, BP
	add B, 16777203
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777203
	store A, B
	load A, SP
	add SP, 1
	jmp .L1553
	.L1555:
	.loc 7 8824 0
	#       } else if (inst->src.type == IMM) {
	mov A, .L9395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9395:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8824 0
	#       } else if (inst->src.type == IMM) {
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9396
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy
	.L9396:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L9397
	.L9385:
	.loc 7 8826 0
	#       } else
	.loc 7 8824 0
	#       } else if (inst->src.type == IMM) {
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9398, A, 0
	.loc 7 8826 0
	#       } else
	mov A, .L9399
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9399:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_tm_bits
	.L9400:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L9401
	.L9398:
	.loc 7 8826 0
	#       } else
.data
	.L9402:
	.string "invalid src type"
.text
	mov A, .L9402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9403:
	mov A, B
	add SP, 1
	.L9401:
	.L9397:
	.loc 7 8829 0
	#       q = tm_write(q, TM_END, 0, tm_new_state());
	mov A, .L9404
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9404:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9405:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8830 0
	#       break;
	mov A, .L9406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9406:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9407
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9407:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8831 0
	# 
	jmp .L1536
	.loc 7 8833 0
	#       // Consolidate output segments
	.L1556:
	mov A, .L9408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9408:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9409:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8836 0
	#       int q_findo = q;
	mov A, 0
	mov B, SP
	mov A, .L9410
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9410:
	mov A, B
	mov B, BP
	add B, 16777202
	store A, B
	.loc 7 8837 0
	#       q = tm_find(q, +1, TM_OUTPUT, tm_new_state(), q_clear);
	mov A, 0
	mov B, SP
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777201
	store A, B
	.loc 7 8838 0
	#       q = tm_write(q, TM_BLANK, +1, tm_new_state());
	.loc 7 8836 0
	#       int q_findo = q;
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8838 0
	#       q = tm_write(q, TM_BLANK, +1, tm_new_state());
	mov A, .L9411
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9411:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8838 0
	#       q = tm_write(q, TM_BLANK, +1, tm_new_state());
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9412:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8839 0
	#       q = tm_copy(q, -1, 0, tm_new_state());
	mov A, .L9413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9413:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9414
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9414:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8840 0
	#       tm_write(q, TM_DST, +1, q_findo);
	mov A, .L9415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9415:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9416
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy
	.L9416:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8841 0
	# 
	.loc 7 8837 0
	#       q = tm_find(q, +1, TM_OUTPUT, tm_new_state(), q_clear);
	mov B, BP
	add B, 16777201
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8841 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9417
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write
	.L9417:
	mov A, B
	add SP, 4
	.loc 7 8844 0
	#       tm_write_if(q_clear, TM_DST, TM_BLANK, 0, -1, TM_BLANK, -1, q_clear);
	mov A, .L9418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9418:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8836 0
	#       int q_findo = q;
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_ffwd
	.L9419:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777202
	store A, B
	.loc 7 8845 0
	#       q = tm_new_state();
	.loc 7 8836 0
	#       int q_findo = q;
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8845 0
	#       q = tm_new_state();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8845 0
	#       q = tm_new_state();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8836 0
	#       int q_findo = q;
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9420
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_if
	.L9420:
	mov A, B
	add SP, 8
	.loc 7 8846 0
	#       break;
	mov A, .L9421
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9421:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8847 0
	# 
	jmp .L1536
	.loc 7 8849 0
	#     case JNE:
	.L1557:
	.L1558:
	.L1559:
	.L1560:
	.L1561:
	.L1562:
	mov A, .L9422
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9422:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9423
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy_value
	.L9423:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8856 0
	#       q = tm_move(q, +1, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8856 0
	#       q = tm_move(q, +1, tm_new_state());
	mov A, .L9424
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9424:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8856 0
	#       q = tm_move(q, +1, tm_new_state());
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9425
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9425:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8857 0
	#       if (inst->jmp.type == REG)
	mov A, .L9426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9426:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9427
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9427:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8863 0
	#       } else
	.loc 7 8858 0
	# 	error("jmp reg not implemented");
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9428, A, 0
	.loc 7 8858 0
	# 	error("jmp reg not implemented");
.data
	.L9429:
	.string "jmp reg not implemented"
.text
	mov A, .L9429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9430:
	mov A, B
	add SP, 1
	jmp .L9431
	.L9428:
	.loc 7 8863 0
	#       } else
	.loc 7 8858 0
	# 	error("jmp reg not implemented");
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9432, A, 0
	.loc 7 8863 0
	#       } else
	.loc 7 8861 0
	# 	tm_compare(q, inst->op, inst->jmp.imm, q_false);
	mov A, 0
	mov B, SP
	mov A, .L9433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9433:
	mov A, B
	mov B, BP
	add B, 16777200
	store A, B
	.loc 7 8862 0
	# 	q = q_false;
	.loc 7 8861 0
	# 	tm_compare(q, inst->op, inst->jmp.imm, q_false);
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8862 0
	# 	q = q_false;
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8862 0
	# 	q = q_false;
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_compare
	.L9434:
	mov A, B
	add SP, 4
	.loc 7 8863 0
	#       } else
	.loc 7 8861 0
	# 	tm_compare(q, inst->op, inst->jmp.imm, q_false);
	mov B, BP
	add B, 16777200
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	jmp .L9435
	.L9432:
	.loc 7 8863 0
	#       } else
.data
	.L9436:
	.string "invalid jmp type"
.text
	mov A, .L9436
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9437:
	mov A, B
	add SP, 1
	.L9435:
	.L9431:
	.loc 7 8866 0
	# 
	jmp .L1536
	.loc 7 8868 0
	#       if (inst->jmp.type == REG)
	.L1563:
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9438, A, 0
	.loc 7 8868 0
	#       if (inst->jmp.type == REG)
	.loc 7 8695 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8868 0
	#       if (inst->jmp.type == REG)
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9439
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find_register
	.L9439:
	mov A, B
	add SP, 3
	jmp .L9440
	.L9438:
	.loc 7 8868 0
	#       if (inst->jmp.type == REG)
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9441, A, 0
	.loc 7 8868 0
	#       if (inst->jmp.type == REG)
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_noop
	.L9442:
	mov A, B
	add SP, 2
	jmp .L9443
	.L9441:
	.loc 7 8868 0
	#       if (inst->jmp.type == REG)
.data
	.L9444:
	.string "invalid jmp type"
.text
	mov A, .L9444
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9445:
	mov A, B
	add SP, 1
	.L9443:
	.L9440:
	.loc 7 8875 0
	#       break;
	mov A, .L9446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9446:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8876 0
	# 
	jmp .L1536
	.loc 7 8878 0
	#     case NE:
	.L1564:
	.L1565:
	.L1566:
	.L1567:
	.L1568:
	.L1569:
	mov A, .L9447
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9447:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9448
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_copy_value
	.L9448:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8885 0
	#       q = tm_move(q, +1, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8885 0
	#       q = tm_move(q, +1, tm_new_state());
	mov A, .L9449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9449:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8885 0
	#       q = tm_move(q, +1, tm_new_state());
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9450:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8886 0
	#       int qt = tm_new_state(), qf = tm_new_state();
	mov A, .L9451
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9451:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9452
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9452:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8887 0
	#       q = tm_compare(q, inst->op, qt, qf);
	mov A, 0
	mov B, SP
	mov A, .L9453
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9453:
	mov A, B
	mov B, BP
	add B, 16777199
	store A, B
	mov A, 0
	mov B, SP
	mov A, .L9454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9454:
	mov A, B
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 8888 0
	#       q = tm_new_state();
	.loc 7 8887 0
	#       q = tm_compare(q, inst->op, qt, qf);
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8888 0
	#       q = tm_new_state();
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9455
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_compare
	.L9455:
	mov A, B
	add SP, 4
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8889 0
	#       qf = tm_find(qf, -1, TM_VALUE, tm_new_state(), tm_q_reject);
	mov A, .L9456
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9456:
	mov A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 8890 0
	#       qf = tm_move(qf, +1, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8890 0
	#       qf = tm_move(qf, +1, tm_new_state());
	mov A, .L9457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9457:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8890 0
	#       qf = tm_move(qf, +1, tm_new_state());
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8887 0
	#       q = tm_compare(q, inst->op, qt, qf);
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9458:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 8891 0
	#       qf = tm_write_tm_bits(qf, 0, tm_word_size, TM_SKIP_BEFORE_DST, q);
	mov A, .L9459
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9459:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8887 0
	#       q = tm_compare(q, inst->op, qt, qf);
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9460
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9460:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 8892 0
	#       qt = tm_find(qt, -1, TM_VALUE, tm_new_state(), tm_q_reject);
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8892 0
	#       qt = tm_find(qt, -1, TM_VALUE, tm_new_state(), tm_q_reject);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8887 0
	#       q = tm_compare(q, inst->op, qt, qf);
	mov B, BP
	add B, 16777198
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9461
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_tm_bits
	.L9461:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777198
	store A, B
	.loc 7 8893 0
	#       qt = tm_move(qt, +1, tm_new_state());
	.loc 7 8196 0
	# }
	mov B, tm_q_reject
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8893 0
	#       qt = tm_move(qt, +1, tm_new_state());
	mov A, .L9462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9462:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8893 0
	#       qt = tm_move(qt, +1, tm_new_state());
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8887 0
	#       q = tm_compare(q, inst->op, qt, qf);
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9463
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_find
	.L9463:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 8894 0
	#       qt = tm_write_tm_bits(qt, 1, tm_word_size, TM_SKIP_BEFORE_DST, q);
	mov A, .L9464
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_new_state
	.L9464:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8887 0
	#       q = tm_compare(q, inst->op, qt, qf);
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9465
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_move
	.L9465:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 8895 0
	#       break;
	.loc 7 8697 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8196 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, tm_word_size
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8895 0
	#       break;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8887 0
	#       q = tm_compare(q, inst->op, qt, qf);
	mov B, BP
	add B, 16777199
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9466
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp tm_write_tm_bits
	.L9466:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777199
	store A, B
	.loc 7 8896 0
	# 
	jmp .L1536
	.loc 7 8898 0
	#       break;
	.L1570:
	jmp .L1536
	.loc 7 8901 0
	#       error("invalid operation");
	.L1571:
.data
	.L9467:
	.string "invalid operation"
.text
	mov A, .L9467
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9468
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9468:
	mov A, B
	add SP, 1
	.L1536:
	.L1534:
	.loc 7 8731 0
	#     printf("// "); dump_inst_fp(inst, stdout);
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777207
	store A, B
	.loc 7 8901 0
	#       error("invalid operation");
	jmp .L1533
	.L1535:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
unl_core:
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 99
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 99
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 99
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 105
	.long 118
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 118
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 118
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 99
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 105
	.long 118
	.long 118
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 99
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 99
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 99
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 105
	.long 118
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 118
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 118
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 99
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 115
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 100
	.long 96
	.long 107
	.long 96
	.long 96
	.long 96
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 99
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 96
	.long 107
	.long 0
	.data 0
S2:
	.long 96
	.long 96
	.long 115
	.long 0
	.data 0
K1:
	.long 96
	.long 107
	.long 0
	.data 0
CONS:
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 107
	.long 107
	.long 0
	.data 0
CAR:
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 0
	.data 0
CDR:
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 0
	.data 0
DOTCAR:
	.long 107
	.long 0
	.data 0
CONS_KI:
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 0
	.data 0
CONS_K:
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 0
	.data 0
APPLY_CDR:
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 0
	.data 0
REPLACE_CAR:
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 107
	.long 107
	.long 0
	.data 0
REPLACE_CAR1:
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 107
	.long 0
	.data 0
COMPOSE:
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 0
	.data 0
POST_INC:
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 96
	.long 107
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 0
	.data 0
POST_DEC:
	.long 96
	.long 96
	.long 96
	.long 115
	.long 105
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 96
	.long 107
	.long 105
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 105
	.long 96
	.long 107
	.long 107
	.long 107
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 96
	.long 115
	.long 105
	.long 96
	.long 96
	.long 115
	.long 96
	.long 96
	.long 115
	.long 96
	.long 107
	.long 115
	.long 107
	.long 107
	.long 0
	.data 0
CHURCHNUM:
	.data 1
	.L9469:
	.string "`ki"
	.data 0
	.long .L9469
	.data 1
	.L9470:
	.string "i"
	.data 0
	.long .L9470
	.data 1
	.L9471:
	.string "``s``s`kski"
	.data 0
	.long .L9471
	.data 1
	.L9472:
	.string "```ss``ss`ki``s`ksk"
	.data 0
	.long .L9472
	.data 1
	.L9473:
	.string "``ci``s``s`kski"
	.data 0
	.long .L9473
	.data 1
	.L9474:
	.string "``s``s`ksk``ci``s``s`kski"
	.data 0
	.long .L9474
	.data 1
	.L9475:
	.string "```ss``ss`k``ci``s``s`kski``s`ksk"
	.data 0
	.long .L9475
	.data 1
	.L9476:
	.string "```ss``ss``ss`k``ci``s``s`kski``s`ksk"
	.data 0
	.long .L9476
	.data 1
	.L9477:
	.string "```s``s`ksk`ci``s``s`kski"
	.data 0
	.long .L9477
	.data 1
	.L9478:
	.string "````ss`ss``ss`ki``s`ksk"
	.data 0
	.long .L9478
	.data 1
	.L9479:
	.string "```ss```ss`ss``ss`ki``s`ksk"
	.data 0
	.long .L9479
	.data 1
	.L9480:
	.string "```ss``ss```ss`ss``ss`ki``s`ksk"
	.data 0
	.long .L9480
	.data 1
	.L9481:
	.string "```ss``ss``ss```ss`ss``ss`ki``s`ksk"
	.data 0
	.long .L9481
	.data 1
	.L9482:
	.string "```ss``ss``ss``ss```ss`ss``ss`ki``s`ksk"
	.data 0
	.long .L9482
	.data 1
	.L9483:
	.string "```ss``ss``ss``ss``ss```ss`ss``ss`ki``s`ksk"
	.data 0
	.long .L9483
	.data 1
	.L9484:
	.string "```ss``ss``ss``ss``ss``ss```ss`ss``ss`ki``s`ksk"
	.data 0
	.long .L9484
	.data 1
	.L9485:
	.string "```s`cii``s``s`kski"
	.data 0
	.long .L9485
	.data 1
	.L9486:
	.string "``s``s`ksk```s`cii``s``s`kski"
	.data 0
	.long .L9486
	.data 1
	.L9487:
	.string "```ss``ss`k```s`cii``s``s`kski``s`ksk"
	.data 0
	.long .L9487
	.data 1
	.L9488:
	.string "```ss``ss``ss`k```s`cii``s``s`kski``s`ksk"
	.data 0
	.long .L9488
	.data 1
	.L9489:
	.string "````sss``s`ksk``ci``s``s`kski"
	.data 0
	.long .L9489
	.data 1
	.L9490:
	.string "```ss``s``sss`k``ci``s``s`kski``s`ksk"
	.data 0
	.long .L9490
	.data 1
	.L9491:
	.string "```ss``ss``s``sss`k``ci``s``s`kski``s`ksk"
	.data 0
	.long .L9491
	.data 1
	.L9492:
	.string "```ss``ss``ss``s``sss`k``ci``s``s`kski``s`ksk"
	.data 0
	.long .L9492
	.data 1
	.L9493:
	.string "```s``si``s`ci`k`s``s`ksk``s`cii``s``s`kski"
	.data 0
	.long .L9493
	.text
unl_regpos:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8983 0
	#     error("unknown reg: %d", r);
	.loc 7 8901 0
	#       error("invalid operation");
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 8983 0
	#     error("unknown reg: %d", r);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9494, A, 0
	jmp .L1573
	.L9494:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9495, A, 0
	jmp .L1574
	.L9495:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9496, A, 0
	jmp .L1575
	.L9496:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9497, A, 0
	jmp .L1576
	.L9497:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9498, A, 0
	jmp .L1577
	.L9498:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9499, A, 0
	jmp .L1578
	.L9499:
	jmp .L1579
	.loc 7 8977 0
	#   case B: return UNL_B;
	.L1573:
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 8978 0
	#   case C: return UNL_C;
	.L1574:
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 8979 0
	#   case D: return UNL_D;
	.L1575:
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 8980 0
	#   case BP: return UNL_BP;
	.L1576:
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 8981 0
	#   case SP: return UNL_SP;
	.L1577:
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, 5
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 8982 0
	#   default:
	.L1578:
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, 6
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.loc 7 8983 0
	#     error("unknown reg: %d", r);
	.L1579:
	.loc 7 8901 0
	#       error("invalid operation");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8983 0
	#     error("unknown reg: %d", r);
.data
	.L9500:
	.string "unknown reg: %d"
.text
	mov A, .L9500
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9501:
	mov A, B
	add SP, 2
	.L1572:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 8989 0
	# }
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8983 0
	#     error("unknown reg: %d", r);
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fputs
	.L9502:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_tick:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 8994 0
	#   }
	.loc 7 8993 0
	#     putchar('`');
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 8994 0
	#   }
	.L1580:
	.loc 7 8993 0
	#     putchar('`');
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8989 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9503, A, 0
	jmp .L9504
	.L9503:
	.loc 7 8994 0
	#   }
	jmp .L1582
	.L9504:
	mov A, 96
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L1581:
	.loc 7 8993 0
	#     putchar('`');
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 8994 0
	#   }
	jmp .L1580
	.L1582:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_list_begin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9001 0
	# }
	.loc 7 8999 0
	#     unl_emit(K1);
	.loc 7 8994 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	eq A, 0
	jeq .L9505, A, 0
	.loc 7 8999 0
	#     unl_emit(K1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9506:
	mov A, B
	add SP, 1
	.L9505:
	.loc 7 9001 0
	# }
.data
	.L9507:
	.string "``s``si`k"
.text
	mov A, .L9507
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9508
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9508:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_list_end:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9005 0
	# }
	mov A, 118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_churchnum:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9011 0
	# }
	.loc 7 9009 0
	#     error("churchnum table out of range: %d", n);
	mov A, 24
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9005 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9509, A, 0
	.loc 7 9009 0
	#     error("churchnum table out of range: %d", n);
	.loc 7 9005 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9009 0
	#     error("churchnum table out of range: %d", n);
.data
	.L9510:
	.string "churchnum table out of range: %d"
.text
	mov A, .L9510
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9511
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9511:
	mov A, B
	add SP, 2
	.L9509:
	.loc 7 9011 0
	# }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CHURCHNUM
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9005 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9512
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9512:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_number:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 9020 0
	# }
	.loc 7 9018 0
	#   }
	.loc 7 9015 0
	#     unl_list_begin(i == 0);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 9018 0
	#   }
	.L1583:
	.loc 7 9015 0
	#     unl_list_begin(i == 0);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9513, A, 0
	jmp .L9514
	.L9513:
	.loc 7 9018 0
	#   }
	jmp .L1585
	.L9514:
	.loc 7 9016 0
	#     unl_emit(n % 2 ? "k" : "`ki");
	.loc 7 9015 0
	#     unl_list_begin(i == 0);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9016 0
	#     unl_emit(n % 2 ? "k" : "`ki");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9515
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_begin
	.L9515:
	mov A, B
	add SP, 1
	.loc 7 9017 0
	#     n /= 2;
	.loc 7 9011 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9017 0
	#     n /= 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9516
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L9516:
	mov A, B
	add SP, 2
	jeq .L9517, A, 0
.data
	.L9518:
	.string "k"
.text
	mov A, .L9518
	jmp .L9519
	.L9517:
.data
	.L9520:
	.string "`ki"
.text
	mov A, .L9520
	.L9519:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9521:
	mov A, B
	add SP, 1
	.loc 7 9018 0
	#   }
	.loc 7 9011 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9018 0
	#   }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L9522:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.L1584:
	.loc 7 9015 0
	#     unl_list_begin(i == 0);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 9018 0
	#   }
	jmp .L1583
	.L1585:
	.loc 7 9020 0
	# }
	mov A, .L9523
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_end
	.L9523:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_number2:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 9050 0
	# }
	.loc 7 9025 0
	#   for (int i = 0; i < 24; i++) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 16777215
	store A, B
	.loc 7 9047 0
	#     }
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 9047 0
	#     }
	.L1586:
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9524, A, 0
	jmp .L9525
	.L9524:
	.loc 7 9047 0
	#     }
	jmp .L1588
	.L9525:
	.loc 7 9027 0
	#       if (i > 0) {
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9027 0
	#       if (i > 0) {
	mov A, 23
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 0
	jeq .L9526, A, 0
	.loc 7 9020 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9027 0
	#       if (i > 0) {
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9526:
	mov A, B
	jeq .L9527, A, 0
	.loc 7 9034 0
	#     } else if (i < 23 && n == all_one) {
	.loc 7 9029 0
	#       }
	.loc 7 9028 0
	# 	unl_emit(K1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9528, A, 0
	.loc 7 9029 0
	#       }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9529:
	mov A, B
	add SP, 1
	.L9528:
	.loc 7 9031 0
	#       unl_emit_churchnum(24 - i);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_tick
	.L9530:
	mov A, B
	add SP, 1
	.loc 7 9032 0
	#       unl_emit(CONS_KI);
	mov A, 24
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9531
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_churchnum
	.L9531:
	mov A, B
	add SP, 1
	.loc 7 9033 0
	#       break;
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CONS_KI
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9532
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9532:
	mov A, B
	add SP, 1
	.loc 7 9034 0
	#     } else if (i < 23 && n == all_one) {
	jmp .L1588
	jmp .L9533
	.L9527:
	.loc 7 9047 0
	#     }
	.loc 7 9034 0
	#     } else if (i < 23 && n == all_one) {
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9034 0
	#     } else if (i < 23 && n == all_one) {
	mov A, 23
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	mov B, 0
	jeq .L9534, A, 0
	.loc 7 9020 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9025 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9534:
	mov A, B
	jeq .L9535, A, 0
	.loc 7 9042 0
	#     } else {
	.loc 7 9037 0
	#       }
	.loc 7 9036 0
	# 	unl_emit(K1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9536, A, 0
	.loc 7 9037 0
	#       }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9537:
	mov A, B
	add SP, 1
	.L9536:
	.loc 7 9039 0
	#       unl_emit_churchnum(24 - i);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_tick
	.L9538:
	mov A, B
	add SP, 1
	.loc 7 9040 0
	#       unl_emit(CONS_K);
	mov A, 24
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9539
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_churchnum
	.L9539:
	mov A, B
	add SP, 1
	.loc 7 9041 0
	#       break;
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CONS_K
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9540
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9540:
	mov A, B
	add SP, 1
	.loc 7 9042 0
	#     } else {
	jmp .L1588
	jmp .L9541
	.L9535:
	.loc 7 9047 0
	#     }
	.loc 7 9044 0
	#       unl_emit(n % 2 ? "k" : "`ki");
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9044 0
	#       unl_emit(n % 2 ? "k" : "`ki");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_begin
	.L9542:
	mov A, B
	add SP, 1
	.loc 7 9045 0
	#       n /= 2;
	.loc 7 9020 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9045 0
	#       n /= 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9543
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L9543:
	mov A, B
	add SP, 2
	jeq .L9544, A, 0
.data
	.L9545:
	.string "k"
.text
	mov A, .L9545
	jmp .L9546
	.L9544:
.data
	.L9547:
	.string "`ki"
.text
	mov A, .L9547
	.L9546:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9548
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9548:
	mov A, B
	add SP, 1
	.loc 7 9046 0
	#       all_one /= 2;
	.loc 7 9020 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9046 0
	#       all_one /= 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9549
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L9549:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 9047 0
	#     }
	.loc 7 9025 0
	#   for (int i = 0; i < 24; i++) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9047 0
	#     }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L9550:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.L9541:
	.L9533:
	.L1587:
	.loc 7 9026 0
	#     if (i < 23 && n == 0) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 9047 0
	#     }
	jmp .L1586
	.L1588:
	.loc 7 9050 0
	# }
	mov A, .L9551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_end
	.L9551:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_nth_begin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9059 0
	# }
	.loc 7 9054 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9552:
	mov A, B
	add SP, 1
	.loc 7 9055 0
	#   unl_emit(K1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9553:
	mov A, B
	add SP, 1
	.loc 7 9056 0
	#   unl_emit("`");
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9554
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9554:
	mov A, B
	add SP, 1
	.loc 7 9057 0
	#   unl_emit_churchnum(n);
.data
	.L9555:
	.string "`"
.text
	mov A, .L9555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9556:
	mov A, B
	add SP, 1
	.loc 7 9058 0
	#   unl_emit(CDR);
	.loc 7 9050 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_churchnum
	.L9557:
	mov A, B
	add SP, 1
	.loc 7 9059 0
	# }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CDR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9558
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9558:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_nth_end:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9064 0
	# }
	.loc 7 9063 0
	#   unl_emit(DOTCAR);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9559
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9559:
	mov A, B
	add SP, 1
	.loc 7 9064 0
	# }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, DOTCAR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9560:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_lib:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9084 0
	# }
	.loc 7 9079 0
	#   unl_emit("`");
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9561
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9561:
	mov A, B
	add SP, 1
	.loc 7 9080 0
	#   unl_emit_churchnum(n);
.data
	.L9562:
	.string "`"
.text
	mov A, .L9562
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9563
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9563:
	mov A, B
	add SP, 1
	.loc 7 9081 0
	#   unl_emit(CDR);
	.loc 7 9064 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9564
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_churchnum
	.L9564:
	mov A, B
	add SP, 1
	.loc 7 9082 0
	#   unl_emit(K1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CDR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9565
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9565:
	mov A, B
	add SP, 1
	.loc 7 9083 0
	#   unl_emit(DOTCAR);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9566
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9566:
	mov A, B
	add SP, 1
	.loc 7 9084 0
	# }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, DOTCAR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9567
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9567:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_lib_add:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9090 0
	# }
	.loc 7 9088 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9568
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9568:
	mov A, B
	add SP, 1
	.loc 7 9089 0
	#   unl_emit_lib(LIB_ADD);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9569
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9569:
	mov A, B
	add SP, 1
	.loc 7 9090 0
	# }
	.loc 7 9064 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9570
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_lib
	.L9570:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_lib_sub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9096 0
	# }
	.loc 7 9094 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9571
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9571:
	mov A, B
	add SP, 1
	.loc 7 9095 0
	#   unl_emit_lib(LIB_SUB);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9572
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9572:
	mov A, B
	add SP, 1
	.loc 7 9096 0
	# }
	.loc 7 9064 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9573
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_lib
	.L9573:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_lib_eq:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9102 0
	# }
	.loc 7 9100 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9574
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9574:
	mov A, B
	add SP, 1
	.loc 7 9101 0
	#   unl_emit_lib(LIB_EQ);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9575
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9575:
	mov A, B
	add SP, 1
	.loc 7 9102 0
	# }
	.loc 7 9064 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_lib
	.L9576:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_lib_lt:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9108 0
	# }
	.loc 7 9106 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9577
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9577:
	mov A, B
	add SP, 1
	.loc 7 9107 0
	#   unl_emit_lib(LIB_LT);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9578
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9578:
	mov A, B
	add SP, 1
	.loc 7 9108 0
	# }
	.loc 7 9064 0
	# }
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9579
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_lib
	.L9579:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_lib_load:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9116 0
	# }
	.loc 7 9112 0
	# 
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9580
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9580:
	mov A, B
	add SP, 1
	.loc 7 9114 0
	#   unl_emit_lib(LIB_LOAD);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9581
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9581:
	mov A, B
	add SP, 1
	.loc 7 9115 0
	#   putchar('i');
	.loc 7 9064 0
	# }
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9582
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_lib
	.L9582:
	mov A, B
	add SP, 1
	.loc 7 9116 0
	# }
	mov A, 105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_lib_store:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9125 0
	# }
	.loc 7 9120 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9583
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9583:
	mov A, B
	add SP, 1
	.loc 7 9121 0
	# 
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9584:
	mov A, B
	add SP, 1
	.loc 7 9123 0
	#   unl_emit_lib(LIB_STORE);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9585:
	mov A, B
	add SP, 1
	.loc 7 9124 0
	#   putchar('i');
	.loc 7 9064 0
	# }
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9586
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_lib
	.L9586:
	mov A, B
	add SP, 1
	.loc 7 9125 0
	# }
	mov A, 105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_lib_putc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9130 0
	# }
	.loc 7 9129 0
	#   unl_emit_lib(LIB_PUTC);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9587:
	mov A, B
	add SP, 1
	.loc 7 9130 0
	# }
	.loc 7 9064 0
	# }
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_lib
	.L9588:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_lib_getc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9136 0
	# }
	.loc 7 9134 0
	#   unl_emit("`kc");
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9589:
	mov A, B
	add SP, 1
	.loc 7 9135 0
	#   unl_emit_lib(LIB_GETC);
.data
	.L9590:
	.string "`kc"
.text
	mov A, .L9590
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9591:
	mov A, B
	add SP, 1
	.loc 7 9136 0
	# }
	.loc 7 9064 0
	# }
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_lib
	.L9592:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_getreg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9142 0
	# }
	.loc 7 9140 0
	#   unl_emit(CAR);  // regs = car(vm)
	.loc 7 9136 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9593
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_regpos
	.L9593:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_nth_begin
	.L9594:
	mov A, B
	add SP, 1
	.loc 7 9141 0
	#   unl_nth_end();
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CAR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9595
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9595:
	mov A, B
	add SP, 1
	.loc 7 9142 0
	# }
	mov A, .L9596
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_nth_end
	.L9596:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_value:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9150 0
	#   }
	.loc 7 9146 0
	#     unl_getreg(val->reg);
	.loc 7 9142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9597, A, 0
	.loc 7 9147 0
	#   } else {
	.loc 7 9142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9598
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_getreg
	.L9598:
	mov A, B
	add SP, 1
	jmp .L9599
	.L9597:
	.loc 7 9150 0
	#   }
	.loc 7 9149 0
	#     unl_emit_number(val->imm);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9600:
	mov A, B
	add SP, 1
	.loc 7 9150 0
	#   }
	.loc 7 9142 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9601
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_number
	.L9601:
	mov A, B
	add SP, 1
	.L9599:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_setreg_begin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9168 0
	# }
	.loc 7 9155 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9602
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9602:
	mov A, B
	add SP, 1
	.loc 7 9156 0
	#   unl_emit(K1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9603:
	mov A, B
	add SP, 1
	.loc 7 9157 0
	#   unl_emit(CONS);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9604
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9604:
	mov A, B
	add SP, 1
	.loc 7 9158 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CONS
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9605
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9605:
	mov A, B
	add SP, 1
	.loc 7 9159 0
	# 
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9606
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9606:
	mov A, B
	add SP, 1
	.loc 7 9161 0
	#   unl_emit(K1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9607
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9607:
	mov A, B
	add SP, 1
	.loc 7 9162 0
	#   unl_emit_tick(1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9608:
	mov A, B
	add SP, 1
	.loc 7 9163 0
	#   unl_emit_churchnum(reg);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9609
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_tick
	.L9609:
	mov A, B
	add SP, 1
	.loc 7 9164 0
	#   unl_emit(APPLY_CDR);
	.loc 7 9150 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_churchnum
	.L9610:
	mov A, B
	add SP, 1
	.loc 7 9165 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, APPLY_CDR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9611:
	mov A, B
	add SP, 1
	.loc 7 9166 0
	#   unl_emit(K1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9612:
	mov A, B
	add SP, 1
	.loc 7 9167 0
	#   unl_emit(REPLACE_CAR);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9613:
	mov A, B
	add SP, 1
	.loc 7 9168 0
	# }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, REPLACE_CAR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9614
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9614:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_setreg_end:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9173 0
	# }
	.loc 7 9172 0
	#   unl_emit(CDR);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CAR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9615
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9615:
	mov A, B
	add SP, 1
	.loc 7 9173 0
	# }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CDR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9616
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9616:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_setreg_imm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9191 0
	# }
	.loc 7 9177 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9617
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9617:
	mov A, B
	add SP, 1
	.loc 7 9178 0
	#   unl_emit(K1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9618
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9618:
	mov A, B
	add SP, 1
	.loc 7 9179 0
	#   unl_emit(CONS);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9619
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9619:
	mov A, B
	add SP, 1
	.loc 7 9180 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CONS
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9620
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9620:
	mov A, B
	add SP, 1
	.loc 7 9181 0
	# 
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9621
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9621:
	mov A, B
	add SP, 1
	.loc 7 9183 0
	#   unl_emit_tick(2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9622
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9622:
	mov A, B
	add SP, 1
	.loc 7 9184 0
	#   unl_emit_churchnum(reg);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9623
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_tick
	.L9623:
	mov A, B
	add SP, 1
	.loc 7 9185 0
	#   unl_emit(APPLY_CDR);
	.loc 7 9173 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9624
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_churchnum
	.L9624:
	mov A, B
	add SP, 1
	.loc 7 9186 0
	#   unl_emit(REPLACE_CAR1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, APPLY_CDR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9625
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9625:
	mov A, B
	add SP, 1
	.loc 7 9187 0
	#   unl_emit_number(n);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, REPLACE_CAR1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9626
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9626:
	mov A, B
	add SP, 1
	.loc 7 9188 0
	# 
	.loc 7 9173 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9627
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_number
	.L9627:
	mov A, B
	add SP, 1
	.loc 7 9190 0
	#   unl_emit(CDR);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CAR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9628
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9628:
	mov A, B
	add SP, 1
	.loc 7 9191 0
	# }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CDR
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9629
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9629:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_jmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9200 0
	#   }
	.loc 7 9195 0
	#     unl_setreg_begin(UNL_PC);
	.loc 7 9191 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9630, A, 0
	.loc 7 9198 0
	#   } else {
	.loc 7 9196 0
	#     unl_getreg(jmp->reg);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9631
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_begin
	.L9631:
	mov A, B
	add SP, 1
	.loc 7 9197 0
	#     unl_setreg_end();
	.loc 7 9191 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9632
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_getreg
	.L9632:
	mov A, B
	add SP, 1
	.loc 7 9198 0
	#   } else {
	mov A, .L9633
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_end
	.L9633:
	mov A, B
	jmp .L9634
	.L9630:
	.loc 7 9200 0
	#   }
	.loc 7 9191 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9635
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_imm
	.L9635:
	mov A, B
	add SP, 2
	.L9634:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_bool_to_number_begin:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9208 0
	# }
	.loc 7 9205 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9636
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9636:
	mov A, B
	add SP, 1
	.loc 7 9206 0
	#   unl_emit(K1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9637:
	mov A, B
	add SP, 1
	.loc 7 9207 0
	#   unl_emit(CONS);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9638
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9638:
	mov A, B
	add SP, 1
	.loc 7 9208 0
	# }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CONS
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9639
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9639:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_bool_to_number_end:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9216 0
	# }
	.loc 7 9212 0
	#   unl_emit_tick(2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9640
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9640:
	mov A, B
	add SP, 1
	.loc 7 9213 0
	#   unl_emit_churchnum(23);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_tick
	.L9641:
	mov A, B
	add SP, 1
	.loc 7 9214 0
	#   unl_emit(CONS_KI);
	mov A, 23
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_churchnum
	.L9642:
	mov A, B
	add SP, 1
	.loc 7 9215 0
	#   putchar('v');
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, CONS_KI
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9643
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9643:
	mov A, B
	add SP, 1
	.loc 7 9216 0
	# }
	mov A, 118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	.loc 7 9220 0
	#   case MOV:
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9644, A, 0
	jmp .L1590
	.L9644:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9645, A, 0
	jmp .L1591
	.L9645:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9646, A, 0
	jmp .L1592
	.L9646:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9647, A, 0
	jmp .L1593
	.L9647:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9648, A, 0
	jmp .L1594
	.L9648:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9649, A, 0
	jmp .L1595
	.L9649:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9650, A, 0
	jmp .L1596
	.L9650:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9651, A, 0
	jmp .L1597
	.L9651:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9652, A, 0
	jmp .L1598
	.L9652:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9653, A, 0
	jmp .L1599
	.L9653:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9654, A, 0
	jmp .L1600
	.L9654:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9655, A, 0
	jmp .L1601
	.L9655:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9656, A, 0
	jmp .L1602
	.L9656:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9657, A, 0
	jmp .L1603
	.L9657:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9658, A, 0
	jmp .L1604
	.L9658:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9659, A, 0
	jmp .L1605
	.L9659:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9660, A, 0
	jmp .L1606
	.L9660:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9661, A, 0
	jmp .L1607
	.L9661:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9662, A, 0
	jmp .L1608
	.L9662:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9663, A, 0
	jmp .L1609
	.L9663:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9664, A, 0
	jmp .L1610
	.L9664:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9665, A, 0
	jmp .L1611
	.L9665:
	jmp .L1612
	.loc 7 9227 0
	#     }
	.loc 7 9221 0
	#     if (inst->src.type == REG) {
	.L1590:
	.loc 7 9227 0
	#     }
	.loc 7 9221 0
	#     if (inst->src.type == REG) {
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9666, A, 0
	.loc 7 9225 0
	#     } else {
	.loc 7 9223 0
	#       unl_getreg(inst->src.reg);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_regpos
	.L9667:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_begin
	.L9668:
	mov A, B
	add SP, 1
	.loc 7 9224 0
	#       unl_setreg_end();
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9669
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_getreg
	.L9669:
	mov A, B
	add SP, 1
	.loc 7 9225 0
	#     } else {
	mov A, .L9670
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_end
	.L9670:
	mov A, B
	jmp .L9671
	.L9666:
	.loc 7 9227 0
	#     }
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9227 0
	#     }
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_regpos
	.L9672:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9673
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_imm
	.L9673:
	mov A, B
	add SP, 2
	.L9671:
	.loc 7 9229 0
	# 
	jmp .L1589
	.loc 7 9231 0
	#     unl_setreg_begin(unl_regpos(inst->dst.reg));
	.L1591:
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9674
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_regpos
	.L9674:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_begin
	.L9675:
	mov A, B
	add SP, 1
	.loc 7 9246 0
	#     }
	.loc 7 9233 0
	#       unl_emit(S2);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L9676, A, 0
	.loc 7 9233 0
	#       unl_emit(S2);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9233 0
	#       unl_emit(S2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9676:
	mov A, B
	jeq .L9677, A, 0
	.loc 7 9237 0
	#     } else if (inst->src.type == IMM && inst->src.imm == UINT_MAX) {
	.loc 7 9234 0
	#       unl_getreg(inst->dst.reg);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9678
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9678:
	mov A, B
	add SP, 1
	.loc 7 9235 0
	#       unl_emit(K1);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_getreg
	.L9679:
	mov A, B
	add SP, 1
	.loc 7 9236 0
	#       unl_emit(POST_INC);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9680:
	mov A, B
	add SP, 1
	.loc 7 9237 0
	#     } else if (inst->src.type == IMM && inst->src.imm == UINT_MAX) {
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, POST_INC
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9681
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9681:
	mov A, B
	add SP, 1
	jmp .L9682
	.L9677:
	.loc 7 9246 0
	#     }
	.loc 7 9237 0
	#     } else if (inst->src.type == IMM && inst->src.imm == UINT_MAX) {
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L9683, A, 0
	.loc 7 9237 0
	#     } else if (inst->src.type == IMM && inst->src.imm == UINT_MAX) {
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9237 0
	#     } else if (inst->src.type == IMM && inst->src.imm == UINT_MAX) {
	mov A, 16777215
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9683:
	mov A, B
	jeq .L9684, A, 0
	.loc 7 9242 0
	#     } else {
	.loc 7 9239 0
	#       unl_getreg(inst->dst.reg);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9685
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9685:
	mov A, B
	add SP, 1
	.loc 7 9240 0
	#       unl_emit(K1);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_getreg
	.L9686:
	mov A, B
	add SP, 1
	.loc 7 9241 0
	#       unl_emit(POST_DEC);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9687
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9687:
	mov A, B
	add SP, 1
	.loc 7 9242 0
	#     } else {
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, POST_DEC
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9688
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9688:
	mov A, B
	add SP, 1
	jmp .L9689
	.L9684:
	.loc 7 9246 0
	#     }
	.loc 7 9244 0
	#       unl_getreg(inst->dst.reg);
	mov A, .L9690
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_add
	.L9690:
	mov A, B
	.loc 7 9245 0
	#       unl_emit_value(&inst->src);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_getreg
	.L9691:
	mov A, B
	add SP, 1
	.loc 7 9246 0
	#     }
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9692:
	mov A, B
	add SP, 1
	.L9689:
	.L9682:
	.loc 7 9248 0
	#     break;
	mov A, .L9693
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_end
	.L9693:
	mov A, B
	.loc 7 9249 0
	# 
	jmp .L1589
	.loc 7 9251 0
	#     unl_setreg_begin(unl_regpos(inst->dst.reg));
	.L1592:
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9694
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_regpos
	.L9694:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9695
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_begin
	.L9695:
	mov A, B
	add SP, 1
	.loc 7 9261 0
	#     }
	.loc 7 9253 0
	#       unl_emit(S2);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 0
	jeq .L9696, A, 0
	.loc 7 9253 0
	#       unl_emit(S2);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9253 0
	#       unl_emit(S2);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9696:
	mov A, B
	jeq .L9697, A, 0
	.loc 7 9257 0
	#     } else {
	.loc 7 9254 0
	#       unl_getreg(inst->dst.reg);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9698:
	mov A, B
	add SP, 1
	.loc 7 9255 0
	#       unl_emit(K1);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_getreg
	.L9699:
	mov A, B
	add SP, 1
	.loc 7 9256 0
	#       unl_emit(POST_DEC);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9700
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9700:
	mov A, B
	add SP, 1
	.loc 7 9257 0
	#     } else {
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, POST_DEC
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9701
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9701:
	mov A, B
	add SP, 1
	jmp .L9702
	.L9697:
	.loc 7 9261 0
	#     }
	.loc 7 9259 0
	#       unl_getreg(inst->dst.reg);
	mov A, .L9703
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_sub
	.L9703:
	mov A, B
	.loc 7 9260 0
	#       unl_emit_value(&inst->src);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9704
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_getreg
	.L9704:
	mov A, B
	add SP, 1
	.loc 7 9261 0
	#     }
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9705
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9705:
	mov A, B
	add SP, 1
	.L9702:
	.loc 7 9263 0
	#     break;
	mov A, .L9706
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_end
	.L9706:
	mov A, B
	.loc 7 9264 0
	# 
	jmp .L1589
	.loc 7 9266 0
	#     unl_emit_jmp(&inst->jmp);
	.L1593:
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9707
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_jmp
	.L9707:
	mov A, B
	add SP, 1
	.loc 7 9268 0
	# 
	jmp .L1589
	.loc 7 9270 0
	#   case JNE:
	.L1594:
	.L1595:
	.L1596:
	.L1597:
	.L1598:
	.L1599:
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9708
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9708:
	mov A, B
	add SP, 1
	.loc 7 9277 0
	#     if (inst->op == JEQ || inst->op == JNE) {
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9709
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9709:
	mov A, B
	add SP, 1
	.loc 7 9281 0
	#     }
	.loc 7 9278 0
	#       unl_lib_eq();
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L9710, A, 0
	.loc 7 9278 0
	#       unl_lib_eq();
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9710:
	mov A, B
	jeq .L9711, A, 0
	.loc 7 9279 0
	#     } else {
	mov A, .L9712
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_eq
	.L9712:
	mov A, B
	jmp .L9713
	.L9711:
	.loc 7 9281 0
	#     }
	mov A, .L9714
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_lt
	.L9714:
	mov A, B
	.L9713:
	.loc 7 9288 0
	#     }
	.loc 7 9283 0
	#       unl_emit_value(&inst->src);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L9715, A, 0
	.loc 7 9283 0
	#       unl_emit_value(&inst->src);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9715:
	mov A, B
	jeq .L9716, A, 0
	.loc 7 9285 0
	#     } else {
	.loc 7 9284 0
	#       unl_emit_value(&inst->dst);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9717
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9717:
	mov A, B
	add SP, 1
	.loc 7 9285 0
	#     } else {
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9718
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9718:
	mov A, B
	add SP, 1
	jmp .L9719
	.L9716:
	.loc 7 9288 0
	#     }
	.loc 7 9287 0
	#       unl_emit_value(&inst->src);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9720
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9720:
	mov A, B
	add SP, 1
	.loc 7 9288 0
	#     }
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9721
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9721:
	mov A, B
	add SP, 1
	.L9719:
	.loc 7 9295 0
	#     }
	.loc 7 9290 0
	#       putchar('i');
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L9723, A, 0
	.loc 7 9290 0
	#       putchar('i');
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9723:
	mov A, B
	mov B, 1
	jne .L9722, A, 0
	.loc 7 9290 0
	#       putchar('i');
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9722:
	mov A, B
	jeq .L9724, A, 0
	.loc 7 9292 0
	#     } else {
	.loc 7 9291 0
	#       unl_emit_jmp(&inst->jmp);
	mov A, 105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 9292 0
	#     } else {
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_jmp
	.L9725:
	mov A, B
	add SP, 1
	jmp .L9726
	.L9724:
	.loc 7 9295 0
	#     }
	.loc 7 9294 0
	#       putchar('i');
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_jmp
	.L9727:
	mov A, B
	add SP, 1
	.loc 7 9295 0
	#     }
	mov A, 105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L9726:
	.loc 7 9297 0
	# 
	jmp .L1589
	.loc 7 9299 0
	#   case NE:
	.L1600:
	.L1601:
	.L1602:
	.L1603:
	.L1604:
	.L1605:
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9728
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_regpos
	.L9728:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9729
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_begin
	.L9729:
	mov A, B
	add SP, 1
	.loc 7 9306 0
	#     if (inst->op == NE || inst->op == LE || inst->op == GE) {
	mov A, .L9730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_bool_to_number_begin
	.L9730:
	mov A, B
	.loc 7 9309 0
	#     }
	.loc 7 9307 0
	#       unl_emit(S2);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L9732, A, 0
	.loc 7 9307 0
	#       unl_emit(S2);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9732:
	mov A, B
	mov B, 1
	jne .L9731, A, 0
	.loc 7 9307 0
	#       unl_emit(S2);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9731:
	mov A, B
	jeq .L9733, A, 0
	.loc 7 9309 0
	#     }
	.loc 7 9308 0
	#       unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9734
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9734:
	mov A, B
	add SP, 1
	.loc 7 9309 0
	#     }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9735
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9735:
	mov A, B
	add SP, 1
	.L9733:
	.loc 7 9314 0
	#     }
	.loc 7 9311 0
	#       unl_lib_eq();
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L9736, A, 0
	.loc 7 9311 0
	#       unl_lib_eq();
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9736:
	mov A, B
	jeq .L9737, A, 0
	.loc 7 9312 0
	#     } else {
	mov A, .L9738
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_eq
	.L9738:
	mov A, B
	jmp .L9739
	.L9737:
	.loc 7 9314 0
	#     }
	mov A, .L9740
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_lt
	.L9740:
	mov A, B
	.L9739:
	.loc 7 9321 0
	#     }
	.loc 7 9316 0
	#       unl_emit_value(&inst->src);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L9741, A, 0
	.loc 7 9316 0
	#       unl_emit_value(&inst->src);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9741:
	mov A, B
	jeq .L9742, A, 0
	.loc 7 9318 0
	#     } else {
	.loc 7 9317 0
	#       unl_emit_value(&inst->dst);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9743:
	mov A, B
	add SP, 1
	.loc 7 9318 0
	#     } else {
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9744
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9744:
	mov A, B
	add SP, 1
	jmp .L9745
	.L9742:
	.loc 7 9321 0
	#     }
	.loc 7 9320 0
	#       unl_emit_value(&inst->src);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9746
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9746:
	mov A, B
	add SP, 1
	.loc 7 9321 0
	#     }
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9747:
	mov A, B
	add SP, 1
	.L9745:
	.loc 7 9325 0
	#     }
	.loc 7 9323 0
	#       unl_emit("`k`ki");
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L9749, A, 0
	.loc 7 9323 0
	#       unl_emit("`k`ki");
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9749:
	mov A, B
	mov B, 1
	jne .L9748, A, 0
	.loc 7 9323 0
	#       unl_emit("`k`ki");
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9748:
	mov A, B
	jeq .L9750, A, 0
	.loc 7 9325 0
	#     }
	.loc 7 9324 0
	#       unl_emit("`kk");
.data
	.L9751:
	.string "`k`ki"
.text
	mov A, .L9751
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9752:
	mov A, B
	add SP, 1
	.loc 7 9325 0
	#     }
.data
	.L9753:
	.string "`kk"
.text
	mov A, .L9753
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9754
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9754:
	mov A, B
	add SP, 1
	.L9750:
	.loc 7 9327 0
	#     unl_setreg_end();
	mov A, .L9755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_bool_to_number_end
	.L9755:
	mov A, B
	.loc 7 9328 0
	#     break;
	mov A, .L9756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_end
	.L9756:
	mov A, B
	.loc 7 9329 0
	# 
	jmp .L1589
	.loc 7 9331 0
	#     unl_setreg_begin(unl_regpos(inst->dst.reg));
	.L1606:
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_regpos
	.L9757:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_begin
	.L9758:
	mov A, B
	add SP, 1
	.loc 7 9333 0
	#     unl_emit_value(&inst->src);
	mov A, .L9759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_load
	.L9759:
	mov A, B
	.loc 7 9334 0
	#     unl_setreg_end();
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9760:
	mov A, B
	add SP, 1
	.loc 7 9335 0
	#     break;
	mov A, .L9761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_end
	.L9761:
	mov A, B
	.loc 7 9336 0
	# 
	jmp .L1589
	.loc 7 9338 0
	#     unl_lib_store();
	.L1607:
	mov A, .L9762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_store
	.L9762:
	mov A, B
	.loc 7 9340 0
	#     unl_emit_value(&inst->dst);
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9763:
	mov A, B
	add SP, 1
	.loc 7 9341 0
	#     break;
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9764:
	mov A, B
	add SP, 1
	.loc 7 9342 0
	# 
	jmp .L1589
	.loc 7 9344 0
	#     unl_emit(S2);
	.L1608:
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9765
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9765:
	mov A, B
	add SP, 1
	.loc 7 9346 0
	#     unl_lib_putc();
.data
	.L9766:
	.string "k"
.text
	mov A, .L9766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9767:
	mov A, B
	add SP, 1
	.loc 7 9347 0
	#     unl_emit_value(&inst->src);
	mov A, .L9768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_putc
	.L9768:
	mov A, B
	.loc 7 9348 0
	#     break;
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_value
	.L9769:
	mov A, B
	add SP, 1
	.loc 7 9349 0
	# 
	jmp .L1589
	.loc 7 9351 0
	#     unl_setreg_begin(unl_regpos(inst->dst.reg));
	.L1609:
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9770
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_regpos
	.L9770:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9771
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_begin
	.L9771:
	mov A, B
	add SP, 1
	.loc 7 9353 0
	#     unl_setreg_end();
	mov A, .L9772
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_lib_getc
	.L9772:
	mov A, B
	.loc 7 9354 0
	#     break;
	mov A, .L9773
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_setreg_end
	.L9773:
	mov A, B
	.loc 7 9355 0
	# 
	jmp .L1589
	.loc 7 9357 0
	#     unl_emit("``s`ke`ki");
	.L1610:
.data
	.L9774:
	.string "``s`ke`ki"
.text
	mov A, .L9774
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9775
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9775:
	mov A, B
	add SP, 1
	.loc 7 9359 0
	# 
	jmp .L1589
	.loc 7 9361 0
	#     putchar('i');
	.L1611:
	mov A, 105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 9363 0
	# 
	jmp .L1589
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	.L1612:
	.loc 7 9216 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
.data
	.L9776:
	.string "not implemented %d"
.text
	mov A, .L9776
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9777
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L9777:
	mov A, B
	add SP, 2
	.L1589:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_chunk:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 3
	.loc 7 9394 0
	# }
	.loc 7 9371 0
	#   printf("\n# pc=%d\n", pc);
	mov A, 0
	mov B, SP
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9372 0
	# 
	.loc 7 9371 0
	#   printf("\n# pc=%d\n", pc);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9372 0
	# 
.data
	.L9778:
	.string "\n# pc=%d\n"
.text
	mov A, .L9778
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9779
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L9779:
	mov A, B
	add SP, 2
	.loc 7 9374 0
	#   while (inst && inst->pc == pc) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 9379 0
	#   }
	.L1613:
	.loc 7 9375 0
	#     Inst* next = inst->next;
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	mov B, BP
	add B, 2
	load A, B
	mov B, 0
	jeq .L9780, A, 0
	.loc 7 9375 0
	#     Inst* next = inst->next;
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9371 0
	#   printf("\n# pc=%d\n", pc);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L9780:
	mov A, B
	jeq .L9781, A, 0
	.loc 7 9379 0
	#   }
	.loc 7 9376 0
	#     inst->next = reversed;
	mov A, 0
	mov B, SP
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 9377 0
	#     reversed = inst;
	.loc 7 9374 0
	#   while (inst && inst->pc == pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 9378 0
	#     inst = next;
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 9379 0
	#   }
	.loc 7 9376 0
	#     inst->next = reversed;
	mov B, BP
	add B, 16777213
	load A, B
	mov B, BP
	add B, 2
	store A, B
	jmp .L9782
	.L9781:
	.loc 7 9379 0
	#   }
	jmp .L1614
	.L9782:
	jmp .L1613
	.L1614:
	.loc 7 9391 0
	#   }
	.L1615:
	.loc 7 9374 0
	#   while (inst && inst->pc == pc) {
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L9783, A, 0
	jmp .L9784
	.L9783:
	.loc 7 9391 0
	#   }
	jmp .L1617
	.L9784:
	.loc 7 9383 0
	#     dump_inst_fp(reversed, stdout);
.data
	.L9785:
	.string "# "
.text
	mov A, .L9785
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9786
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L9786:
	mov A, B
	add SP, 1
	.loc 7 9384 0
	# 
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9374 0
	#   while (inst && inst->pc == pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9787
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_inst_fp
	.L9787:
	mov A, B
	add SP, 2
	.loc 7 9388 0
	#     }
	.loc 7 9386 0
	#       unl_emit_tick(2);
	.loc 7 9374 0
	#   while (inst && inst->pc == pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	jeq .L9788, A, 0
	.loc 7 9388 0
	#     }
	.loc 7 9387 0
	#       unl_emit(COMPOSE);
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9789
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_tick
	.L9789:
	mov A, B
	add SP, 1
	.loc 7 9388 0
	#     }
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, COMPOSE
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9790
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9790:
	mov A, B
	add SP, 1
	.L9788:
	.loc 7 9390 0
	#     putchar('\n');
	.loc 7 9374 0
	#   while (inst && inst->pc == pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9791
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_op
	.L9791:
	mov A, B
	add SP, 1
	.loc 7 9391 0
	#   }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L1616:
	.loc 7 9382 0
	#     printf("# ");
	.loc 7 9374 0
	#   while (inst && inst->pc == pc) {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 9391 0
	#   }
	jmp .L1615
	.L1617:
	.loc 7 9394 0
	# }
	.loc 7 9365 0
	#     error("not implemented %d", inst->op);
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_text:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 9404 0
	# }
	.loc 7 9398 0
	#   while (inst) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 1
	store A, B
	.loc 7 9402 0
	#   }
	.L1618:
	.loc 7 9394 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L9792, A, 0
	.loc 7 9402 0
	#   }
	.loc 7 9400 0
	#     first = 0;
	.loc 7 9398 0
	#   while (inst) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_begin
	.L9793:
	mov A, B
	add SP, 1
	.loc 7 9401 0
	#     inst = unl_emit_chunk(inst);
	mov A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9402 0
	#   }
	.loc 7 9394 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_chunk
	.L9794:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 2
	store A, B
	jmp .L9795
	.L9792:
	.loc 7 9402 0
	#   }
	jmp .L1619
	.L9795:
	jmp .L1618
	.L1619:
	.loc 7 9404 0
	# }
	mov A, .L9796
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_end
	.L9796:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_data:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 9412 0
	# }
	.loc 7 9410 0
	#   }
	.loc 7 9408 0
	#     unl_list_begin(d == data);
	mov A, 0
	mov B, SP
	.loc 7 9404 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9410 0
	#   }
	.L1620:
	.loc 7 9408 0
	#     unl_list_begin(d == data);
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L9797, A, 0
	jmp .L9798
	.L9797:
	.loc 7 9410 0
	#   }
	jmp .L1622
	.L9798:
	.loc 7 9409 0
	#     unl_emit_number2(d->v);
	.loc 7 9408 0
	#     unl_list_begin(d == data);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9404 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9799
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_begin
	.L9799:
	mov A, B
	add SP, 1
	.loc 7 9410 0
	#   }
	.loc 7 9408 0
	#     unl_list_begin(d == data);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9800
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_number2
	.L9800:
	mov A, B
	add SP, 1
	.loc 7 9410 0
	#   }
	.L1621:
	.loc 7 9408 0
	#     unl_list_begin(d == data);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9410 0
	#   }
	jmp .L1620
	.L1622:
	.loc 7 9412 0
	# }
	mov A, .L9801
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_end
	.L9801:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_print:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9420 0
	#   }
	.loc 7 9416 0
	#     putchar('r');
	.loc 7 9412 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9416 0
	#     putchar('r');
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9802, A, 0
	.loc 7 9417 0
	#   } else {
	mov A, 114
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	jmp .L9803
	.L9802:
	.loc 7 9420 0
	#   }
	.loc 7 9419 0
	#     putchar(n);
	mov A, 46
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 9420 0
	#   }
	.loc 7 9412 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L9803:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_putc_rec:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9435 0
	#   }
	.loc 7 9425 0
	#     unl_emit("``s``s`ks``s``s`ksk`k`k");
	.loc 7 9420 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9425 0
	#     unl_emit("``s``s`ks``s``s`ksk`k`k");
	mov A, 128
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9804, A, 0
	.loc 7 9429 0
	#   } else {
	.loc 7 9426 0
	#     unl_emit_print(n + b);
.data
	.L9805:
	.string "``s``s`ks``s``s`ksk`k`k"
.text
	mov A, .L9805
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9806:
	mov A, B
	add SP, 1
	.loc 7 9427 0
	#     unl_emit("`k`k");
	.loc 7 9420 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_print
	.L9807:
	mov A, B
	add SP, 1
	.loc 7 9428 0
	#     unl_emit_print(n);
.data
	.L9808:
	.string "`k`k"
.text
	mov A, .L9808
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9809:
	mov A, B
	add SP, 1
	.loc 7 9429 0
	#   } else {
	.loc 7 9420 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_print
	.L9810:
	mov A, B
	add SP, 1
	jmp .L9811
	.L9804:
	.loc 7 9435 0
	#   }
	.loc 7 9431 0
	#     unl_emit("`k`k");
.data
	.L9812:
	.string "``s`k`si``s``s`ks``s``s`ksk"
.text
	mov A, .L9812
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9813
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9813:
	mov A, B
	add SP, 1
	.loc 7 9432 0
	#     unl_emit_putc_rec(n + b, b + b);
.data
	.L9814:
	.string "`k`k"
.text
	mov A, .L9814
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9815
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9815:
	mov A, B
	add SP, 1
	.loc 7 9433 0
	#     unl_emit("`k`k");
	.loc 7 9420 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9433 0
	#     unl_emit("`k`k");
	.loc 7 9420 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9816
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_putc_rec
	.L9816:
	mov A, B
	add SP, 2
	.loc 7 9434 0
	#     unl_emit_putc_rec(n, b + b);
.data
	.L9817:
	.string "`k`k"
.text
	mov A, .L9817
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9818
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9818:
	mov A, B
	add SP, 1
	.loc 7 9435 0
	#   }
	.loc 7 9420 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9819
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_putc_rec
	.L9819:
	mov A, B
	add SP, 2
	.L9811:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_libputc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9445 0
	# }
	.loc 7 9440 0
	#   unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9820
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9820:
	mov A, B
	add SP, 1
	.loc 7 9441 0
	#   putchar('i');
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9821
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9821:
	mov A, B
	add SP, 1
	.loc 7 9442 0
	#   unl_emit(K1);
	mov A, 105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 9443 0
	#   unl_emit_putc_rec(0, 1);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9822
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9822:
	mov A, B
	add SP, 1
	.loc 7 9444 0
	#   unl_emit("`ki");
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9823
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_putc_rec
	.L9823:
	mov A, B
	add SP, 2
	.loc 7 9445 0
	# }
.data
	.L9824:
	.string "`ki"
.text
	mov A, .L9824
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9825
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9825:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_libgetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 9463 0
	# }
	.loc 7 9449 0
	#   for (int c = 1; c < 256; c++) {
.data
	.L9826:
	.string "``s`d`@k"
.text
	mov A, .L9826
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9827
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9827:
	mov A, B
	add SP, 1
	.loc 7 9458 0
	#   }
	.loc 7 9450 0
	#     unl_emit(S2);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 1
	store A, B
	.loc 7 9458 0
	#   }
	.L1623:
	.loc 7 9450 0
	#     unl_emit(S2);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 256
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9828, A, 0
	jmp .L9829
	.L9828:
	.loc 7 9458 0
	#   }
	jmp .L1625
	.L9829:
	.loc 7 9451 0
	#     unl_emit(S2);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9830
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9830:
	mov A, B
	add SP, 1
	.loc 7 9452 0
	#     unl_emit("`d");
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9831
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9831:
	mov A, B
	add SP, 1
	.loc 7 9453 0
	#     unl_emit("`?");
.data
	.L9832:
	.string "`d"
.text
	mov A, .L9832
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9833
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9833:
	mov A, B
	add SP, 1
	.loc 7 9454 0
	#     putchar(c);
.data
	.L9834:
	.string "`?"
.text
	mov A, .L9834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9835:
	mov A, B
	add SP, 1
	.loc 7 9455 0
	#     putchar('i');
	.loc 7 9450 0
	#     unl_emit(S2);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 9456 0
	#     unl_emit(K1);
	mov A, 105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 9457 0
	#     unl_emit_number2(c);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9836:
	mov A, B
	add SP, 1
	.loc 7 9458 0
	#   }
	.loc 7 9450 0
	#     unl_emit(S2);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_number2
	.L9837:
	mov A, B
	add SP, 1
	.loc 7 9458 0
	#   }
	.L1624:
	.loc 7 9450 0
	#     unl_emit(S2);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 9458 0
	#   }
	jmp .L1623
	.L1625:
	.loc 7 9460 0
	#   putchar('i');
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, S2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9838:
	mov A, B
	add SP, 1
	.loc 7 9461 0
	#   unl_emit(K1);
	mov A, 105
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 9462 0
	#   unl_emit_number2(0);
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, K1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9839:
	mov A, B
	add SP, 1
	.loc 7 9463 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_number2
	.L9840:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_libs:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9471 0
	# }
	.loc 7 9467 0
	#   unl_emit_libputc();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_begin
	.L9841:
	mov A, B
	add SP, 1
	.loc 7 9468 0
	#   unl_list_begin(0);
	mov A, .L9842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_libputc
	.L9842:
	mov A, B
	.loc 7 9469 0
	#   unl_emit_libgetc();
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_begin
	.L9843:
	mov A, B
	add SP, 1
	.loc 7 9470 0
	#   unl_list_end();
	mov A, .L9844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_libgetc
	.L9844:
	mov A, B
	.loc 7 9471 0
	# }
	mov A, .L9845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_list_end
	.L9845:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
unl_emit_core:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9477 0
	# }
	.loc 7 9475 0
	#   unl_emit_libs();
	.loc 7 8901 0
	#       error("invalid operation");
	mov A, unl_core
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit
	.L9846:
	mov A, B
	add SP, 1
	.loc 7 9476 0
	#   putchar('\n');
	mov A, .L9847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_libs
	.L9847:
	mov A, B
	.loc 7 9477 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_unl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9488 0
	# }
	.loc 7 9481 0
	#   printf("# VM core\n");
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_tick
	.L9848:
	mov A, B
	add SP, 1
	.loc 7 9482 0
	#   unl_emit_core();
.data
	.L9849:
	.string "# VM core\n"
.text
	mov A, .L9849
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L9850:
	mov A, B
	add SP, 1
	.loc 7 9483 0
	#   printf("# instructions\n");
	mov A, .L9851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_core
	.L9851:
	mov A, B
	.loc 7 9484 0
	#   unl_emit_text(module->text);
.data
	.L9852:
	.string "# instructions\n"
.text
	mov A, .L9852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L9853:
	mov A, B
	add SP, 1
	.loc 7 9485 0
	#   printf("# data\n");
	.loc 7 9477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_text
	.L9854:
	mov A, B
	add SP, 1
	.loc 7 9486 0
	#   unl_emit_data(module->data);
.data
	.L9855:
	.string "# data\n"
.text
	mov A, .L9855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp printf
	.L9856:
	mov A, B
	add SP, 1
	.loc 7 9487 0
	#   putchar('\n');
	.loc 7 9477 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp unl_emit_data
	.L9857:
	mov A, B
	add SP, 1
	.loc 7 9488 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
REG_NAMES_VIM:
	.data 1
	.L9858:
	.string "s:a"
	.data 0
	.long .L9858
	.data 1
	.L9859:
	.string "s:b"
	.data 0
	.long .L9859
	.data 1
	.L9860:
	.string "s:c"
	.data 0
	.long .L9860
	.data 1
	.L9861:
	.string "s:d"
	.data 0
	.long .L9861
	.data 1
	.L9862:
	.string "s:bp"
	.data 0
	.long .L9862
	.data 1
	.L9863:
	.string "s:sp"
	.data 0
	.long .L9863
	.data 1
	.L9864:
	.string "s:pc"
	.data 0
	.long .L9864
	.text
init_state_vim:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 9516 0
	# }
	.loc 7 9498 0
	#   for (int i = 0; i < 7; i++) {
	.loc 7 9488 0
	# }
	mov A, REG_NAMES_VIM
	mov B, reg_names
	store A, B
	.loc 7 9500 0
	#   }
	.loc 7 9499 0
	#     emit_line("let %s = 0", reg_names[i]);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 9500 0
	#   }
	.L1626:
	.loc 7 9499 0
	#     emit_line("let %s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L9865, A, 0
	jmp .L9866
	.L9865:
	.loc 7 9500 0
	#   }
	jmp .L1628
	.L9866:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9499 0
	#     emit_line("let %s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9500 0
	#   }
.data
	.L9867:
	.string "let %s = 0"
.text
	mov A, .L9867
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9868:
	mov A, B
	add SP, 2
	.L1627:
	.loc 7 9499 0
	#     emit_line("let %s = 0", reg_names[i]);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 9500 0
	#   }
	jmp .L1626
	.L1628:
	.loc 7 9502 0
	#   for (int mp = 0; data; data = data->next, mp++) {
.data
	.L9869:
	.string "let s:mem = repeat([0], 16777216)"
.text
	mov A, .L9869
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9870
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9870:
	mov A, B
	add SP, 1
	.loc 7 9505 0
	#     }
	.loc 7 9503 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 9505 0
	#     }
	.L1629:
	.loc 7 9488 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L9871, A, 0
	jmp .L9872
	.L9871:
	.loc 7 9505 0
	#     }
	jmp .L1631
	.L9872:
	.loc 7 9504 0
	#       emit_line("let s:mem[%d] = %d", mp, data->v);
	.loc 7 9488 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L9873, A, 0
	.loc 7 9505 0
	#     }
	.loc 7 9488 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9503 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9505 0
	#     }
.data
	.L9874:
	.string "let s:mem[%d] = %d"
.text
	mov A, .L9874
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9875
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9875:
	mov A, B
	add SP, 3
	.L9873:
	.L1630:
	.loc 7 9503 0
	#     if (data->v) {
	.loc 7 9488 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 9503 0
	#     if (data->v) {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 9505 0
	#     }
	jmp .L1629
	.L1631:
	.loc 7 9511 0
	#   emit_line("let s:ic = 0");
.data
	.L9876:
	.string "let s:input = map(split(join(getline(1, '$'), \"\\n\"), '\\zs'), 'char2nr(v:val)')"
.text
	mov A, .L9876
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9877
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9877:
	mov A, B
	add SP, 1
	.loc 7 9512 0
	#   emit_line("let s:output = []");
.data
	.L9878:
	.string "let s:ic = 0"
.text
	mov A, .L9878
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9879
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9879:
	mov A, B
	add SP, 1
	.loc 7 9513 0
	# 
.data
	.L9880:
	.string "let s:output = []"
.text
	mov A, .L9880
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9881
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9881:
	mov A, B
	add SP, 1
	.loc 7 9516 0
	# }
.data
	.L9882:
	.string "normal! dG"
.text
	mov A, .L9882
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9883
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9883:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vim_emit_func_prologue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9527 0
	# }
	.loc 7 9520 0
	#   emit_line("function! Func%d()", func_id);
.data
	.L9884:
	.string ""
.text
	mov A, .L9884
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9885
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9885:
	mov A, B
	add SP, 1
	.loc 7 9521 0
	#   inc_indent();
	.loc 7 9516 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9521 0
	#   inc_indent();
.data
	.L9886:
	.string "function! Func%d()"
.text
	mov A, .L9886
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9887
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9887:
	mov A, B
	add SP, 2
	.loc 7 9522 0
	#   emit_line("while %d <= s:pc && s:pc < %d",
	mov A, .L9888
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L9888:
	mov A, B
	.loc 7 9523 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 9516 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9523 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9889
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L9889:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9523 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
	.loc 7 9516 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9890
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L9890:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9523 0
	#             func_id * CHUNKED_FUNC_SIZE, (func_id + 1) * CHUNKED_FUNC_SIZE);
.data
	.L9891:
	.string "while %d <= s:pc && s:pc < %d"
.text
	mov A, .L9891
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9892
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9892:
	mov A, B
	add SP, 3
	.loc 7 9525 0
	#   emit_line("if 0");
	mov A, .L9893
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L9893:
	mov A, B
	.loc 7 9526 0
	#   inc_indent();
.data
	.L9894:
	.string "if 0"
.text
	mov A, .L9894
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9895
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9895:
	mov A, B
	add SP, 1
	.loc 7 9527 0
	# }
	mov A, .L9896
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L9896:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vim_emit_func_epilogue:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9537 0
	# }
	.loc 7 9531 0
	#   emit_line("endif");
	mov A, .L9897
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L9897:
	mov A, B
	.loc 7 9532 0
	#   emit_line("let s:pc += 1");
.data
	.L9898:
	.string "endif"
.text
	mov A, .L9898
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9899
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9899:
	mov A, B
	add SP, 1
	.loc 7 9533 0
	#   dec_indent();
.data
	.L9900:
	.string "let s:pc += 1"
.text
	mov A, .L9900
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9901
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9901:
	mov A, B
	add SP, 1
	.loc 7 9534 0
	#   emit_line("endwhile");
	mov A, .L9902
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L9902:
	mov A, B
	.loc 7 9535 0
	#   dec_indent();
.data
	.L9903:
	.string "endwhile"
.text
	mov A, .L9903
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9904
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9904:
	mov A, B
	add SP, 1
	.loc 7 9536 0
	#   emit_line("endfunction");
	mov A, .L9905
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L9905:
	mov A, B
	.loc 7 9537 0
	# }
.data
	.L9906:
	.string "endfunction"
.text
	mov A, .L9906
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9907
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9907:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vim_emit_pc_change:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9544 0
	# }
	.loc 7 9541 0
	#   dec_indent();
.data
	.L9908:
	.string ""
.text
	mov A, .L9908
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9909
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9909:
	mov A, B
	add SP, 1
	.loc 7 9542 0
	#   emit_line("elseif s:pc == %d", pc);
	mov A, .L9910
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L9910:
	mov A, B
	.loc 7 9543 0
	#   inc_indent();
	.loc 7 9537 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9543 0
	#   inc_indent();
.data
	.L9911:
	.string "elseif s:pc == %d"
.text
	mov A, .L9911
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9912
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9912:
	mov A, B
	add SP, 2
	.loc 7 9544 0
	# }
	mov A, .L9913
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L9913:
	mov A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
vim_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 9648 0
	#     error("oops");
	.loc 7 9548 0
	#   case MOV:
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9648 0
	#     error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9914, A, 0
	jmp .L1633
	.L9914:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9915, A, 0
	jmp .L1634
	.L9915:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9916, A, 0
	jmp .L1635
	.L9916:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9917, A, 0
	jmp .L1636
	.L9917:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9918, A, 0
	jmp .L1637
	.L9918:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9919, A, 0
	jmp .L1638
	.L9919:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9920, A, 0
	jmp .L1639
	.L9920:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9921, A, 0
	jmp .L1640
	.L9921:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9922, A, 0
	jmp .L1641
	.L9922:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9923, A, 0
	jmp .L1642
	.L9923:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9924, A, 0
	jmp .L1643
	.L9924:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9925, A, 0
	jmp .L1644
	.L9925:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9926, A, 0
	jmp .L1645
	.L9926:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9927, A, 0
	jmp .L1646
	.L9927:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9928, A, 0
	jmp .L1647
	.L9928:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9929, A, 0
	jmp .L1648
	.L9929:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9930, A, 0
	jmp .L1649
	.L9930:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9931, A, 0
	jmp .L1650
	.L9931:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9932, A, 0
	jmp .L1651
	.L9932:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9933, A, 0
	jmp .L1652
	.L9933:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9934, A, 0
	jmp .L1653
	.L9934:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L9935, A, 0
	jmp .L1654
	.L9935:
	jmp .L1655
	.loc 7 9549 0
	#     emit_line("let %s = %s", reg_names[inst->dst.reg], src_str(inst));
	.L1633:
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9936
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L9936:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9549 0
	#     emit_line("let %s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9549 0
	#     emit_line("let %s = %s", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9549 0
	#     emit_line("let %s = %s", reg_names[inst->dst.reg], src_str(inst));
.data
	.L9937:
	.string "let %s = %s"
.text
	mov A, .L9937
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9938
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9938:
	mov A, B
	add SP, 3
	.loc 7 9551 0
	# 
	jmp .L1632
	.loc 7 9553 0
	#     emit_line("let %s = and((%s + %s), " UINT_MAX_STR ")",
	.L1634:
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9939
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L9939:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9553 0
	#     emit_line("let %s = and((%s + %s), " UINT_MAX_STR ")",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9553 0
	#     emit_line("let %s = and((%s + %s), " UINT_MAX_STR ")",
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9553 0
	#     emit_line("let %s = and((%s + %s), " UINT_MAX_STR ")",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9553 0
	#     emit_line("let %s = and((%s + %s), " UINT_MAX_STR ")",
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9553 0
	#     emit_line("let %s = and((%s + %s), " UINT_MAX_STR ")",
.data
	.L9940:
	.string "let %s = and((%s + %s), 16777215)"
.text
	mov A, .L9940
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9941
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9941:
	mov A, B
	add SP, 4
	.loc 7 9557 0
	# 
	jmp .L1632
	.loc 7 9559 0
	#     emit_line("let %s = and((%s - %s), " UINT_MAX_STR ")",
	.L1635:
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9942
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L9942:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9559 0
	#     emit_line("let %s = and((%s - %s), " UINT_MAX_STR ")",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9559 0
	#     emit_line("let %s = and((%s - %s), " UINT_MAX_STR ")",
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9559 0
	#     emit_line("let %s = and((%s - %s), " UINT_MAX_STR ")",
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9559 0
	#     emit_line("let %s = and((%s - %s), " UINT_MAX_STR ")",
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9559 0
	#     emit_line("let %s = and((%s - %s), " UINT_MAX_STR ")",
.data
	.L9943:
	.string "let %s = and((%s - %s), 16777215)"
.text
	mov A, .L9943
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9944
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9944:
	mov A, B
	add SP, 4
	.loc 7 9563 0
	# 
	jmp .L1632
	.loc 7 9565 0
	#     emit_line("let %s = s:mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.L1636:
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9945
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L9945:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9565 0
	#     emit_line("let %s = s:mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9565 0
	#     emit_line("let %s = s:mem[%s]", reg_names[inst->dst.reg], src_str(inst));
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9565 0
	#     emit_line("let %s = s:mem[%s]", reg_names[inst->dst.reg], src_str(inst));
.data
	.L9946:
	.string "let %s = s:mem[%s]"
.text
	mov A, .L9946
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9947
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9947:
	mov A, B
	add SP, 3
	.loc 7 9567 0
	# 
	jmp .L1632
	.loc 7 9569 0
	#     emit_line("let s:mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.L1637:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9569 0
	#     emit_line("let s:mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9569 0
	#     emit_line("let s:mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9948
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L9948:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9569 0
	#     emit_line("let s:mem[%s] = %s", src_str(inst), reg_names[inst->dst.reg]);
.data
	.L9949:
	.string "let s:mem[%s] = %s"
.text
	mov A, .L9949
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9950
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9950:
	mov A, B
	add SP, 3
	.loc 7 9571 0
	# 
	jmp .L1632
	.loc 7 9573 0
	#     // :echon is not available because it can't output invisible characters such as Nul.
	.L1638:
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9951
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp src_str
	.L9951:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9573 0
	#     // :echon is not available because it can't output invisible characters such as Nul.
.data
	.L9952:
	.string "let s:output += [%s]"
.text
	mov A, .L9952
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9953
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9953:
	mov A, B
	add SP, 2
	.loc 7 9577 0
	# 
	jmp .L1632
	.loc 7 9579 0
	#     // getchar() is not available because Vim finishes to run script when stdin reaches to EOF
	.L1639:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9579 0
	#     // getchar() is not available because Vim finishes to run script when stdin reaches to EOF
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9579 0
	#     // getchar() is not available because Vim finishes to run script when stdin reaches to EOF
.data
	.L9954:
	.string "let %s = len(s:input) <= s:ic ? 0 : s:input[s:ic]"
.text
	mov A, .L9954
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9955
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9955:
	mov A, B
	add SP, 2
	.loc 7 9584 0
	#     break;
.data
	.L9956:
	.string "let s:ic += 1"
.text
	mov A, .L9956
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9957
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9957:
	mov A, B
	add SP, 1
	.loc 7 9585 0
	# 
	jmp .L1632
	.loc 7 9587 0
	#     // When no output, return the script immediately.
	.L1640:
.data
	.L9958:
	.string "if len(s:output) == 0 | return 1 | endif"
.text
	mov A, .L9958
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9959
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9959:
	mov A, B
	add SP, 1
	.loc 7 9595 0
	#     emit_line("for s:ch in s:output");
.data
	.L9960:
	.string "let s:lines = ['']"
.text
	mov A, .L9960
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9961
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9961:
	mov A, B
	add SP, 1
	.loc 7 9596 0
	#     inc_indent();
.data
	.L9962:
	.string "for s:ch in s:output"
.text
	mov A, .L9962
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9963
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9963:
	mov A, B
	add SP, 1
	.loc 7 9597 0
	#     emit_line("if s:ch == 10");
	mov A, .L9964
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L9964:
	mov A, B
	.loc 7 9598 0
	#     inc_indent();
.data
	.L9965:
	.string "if s:ch == 10"
.text
	mov A, .L9965
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9966
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9966:
	mov A, B
	add SP, 1
	.loc 7 9599 0
	#     emit_line("let s:lines += ['']");
	mov A, .L9967
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L9967:
	mov A, B
	.loc 7 9600 0
	#     dec_indent();
.data
	.L9968:
	.string "let s:lines += ['']"
.text
	mov A, .L9968
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9969
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9969:
	mov A, B
	add SP, 1
	.loc 7 9601 0
	#     emit_line("else");
	mov A, .L9970
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L9970:
	mov A, B
	.loc 7 9602 0
	#     inc_indent();
.data
	.L9971:
	.string "else"
.text
	mov A, .L9971
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9972
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9972:
	mov A, B
	add SP, 1
	.loc 7 9603 0
	#     // Note that Vim treats Nul characters with NL (0xa) in a Vim buffer.
	mov A, .L9973
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L9973:
	mov A, B
	.loc 7 9606 0
	#     dec_indent();
.data
	.L9974:
	.string "let s:lines[len(s:lines)-1] .= nr2char(s:ch == 0 ? 10 : s:ch)"
.text
	mov A, .L9974
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9975
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9975:
	mov A, B
	add SP, 1
	.loc 7 9607 0
	#     emit_line("endif");
	mov A, .L9976
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L9976:
	mov A, B
	.loc 7 9608 0
	#     emit_line("unlet s:ch");
.data
	.L9977:
	.string "endif"
.text
	mov A, .L9977
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9978
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9978:
	mov A, B
	add SP, 1
	.loc 7 9609 0
	#     dec_indent();
.data
	.L9979:
	.string "unlet s:ch"
.text
	mov A, .L9979
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9980
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9980:
	mov A, B
	add SP, 1
	.loc 7 9610 0
	#     emit_line("endfor");
	mov A, .L9981
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L9981:
	mov A, B
	.loc 7 9611 0
	# 
.data
	.L9982:
	.string "endfor"
.text
	mov A, .L9982
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9983
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9983:
	mov A, B
	add SP, 1
	.loc 7 9617 0
	#     emit_line("return 1");
.data
	.L9984:
	.string "call setline(1, s:lines)"
.text
	mov A, .L9984
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9985
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9985:
	mov A, B
	add SP, 1
	.loc 7 9618 0
	#     break;
.data
	.L9986:
	.string "return 1"
.text
	mov A, .L9986
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9987
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9987:
	mov A, B
	add SP, 1
	.loc 7 9619 0
	# 
	jmp .L1632
	.loc 7 9621 0
	#     break;
	.L1641:
	jmp .L1632
	.loc 7 9624 0
	#   case NE:
	.L1642:
	.L1643:
	.L1644:
	.L1645:
	.L1646:
	.L1647:
.data
	.L9988:
	.string "1"
.text
	mov A, .L9988
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9989
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L9989:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9624 0
	#   case NE:
	.loc 7 177 0
	# }
	mov B, reg_names
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9624 0
	#   case NE:
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9624 0
	#   case NE:
.data
	.L9990:
	.string "let %s = %s ? 1 : 0"
.text
	mov A, .L9990
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9991
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9991:
	mov A, B
	add SP, 3
	.loc 7 9632 0
	# 
	jmp .L1632
	.loc 7 9634 0
	#   case JNE:
	.L1648:
	.L1649:
	.L1650:
	.L1651:
	.L1652:
	.L1653:
	.L1654:
.data
	.L9992:
	.string "1"
.text
	mov A, .L9992
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9993
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp cmp_str
	.L9993:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9634 0
	#   case JNE:
.data
	.L9994:
	.string "if %s"
.text
	mov A, .L9994
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9995
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9995:
	mov A, B
	add SP, 2
	.loc 7 9642 0
	#     emit_line("let s:pc = %s - 1", value_str(&inst->jmp));
	mov A, .L9996
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L9996:
	mov A, B
	.loc 7 9643 0
	#     dec_indent();
	.loc 7 9544 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9997
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp value_str
	.L9997:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9643 0
	#     dec_indent();
.data
	.L9998:
	.string "let s:pc = %s - 1"
.text
	mov A, .L9998
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L9999
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L9999:
	mov A, B
	add SP, 2
	.loc 7 9644 0
	#     emit_line("endif");
	mov A, .L10000
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L10000:
	mov A, B
	.loc 7 9645 0
	#     break;
.data
	.L10001:
	.string "endif"
.text
	mov A, .L10001
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10002
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L10002:
	mov A, B
	add SP, 1
	.loc 7 9646 0
	# 
	jmp .L1632
	.loc 7 9648 0
	#     error("oops");
	.L1655:
.data
	.L10003:
	.string "oops"
.text
	mov A, .L10003
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10004
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L10004:
	mov A, B
	add SP, 1
	.L1632:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_vim:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 9676 0
	# }
	.loc 7 9654 0
	#   emit_line("");
	.loc 7 9648 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10005
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_vim
	.L10005:
	mov A, B
	add SP, 1
	.loc 7 9655 0
	# 
.data
	.L10006:
	.string ""
.text
	mov A, .L10006
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10007
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L10007:
	mov A, B
	add SP, 1
	.loc 7 9657 0
	#                                          vim_emit_func_prologue,
	mov A, 0
	mov B, SP
	mov A, vim_emit_inst
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, vim_emit_pc_change
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, vim_emit_func_epilogue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, vim_emit_func_prologue
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9648 0
	#     error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10008
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_chunked_main_loop
	.L10008:
	mov A, B
	add SP, 5
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9663 0
	#   emit_line("while 1");
.data
	.L10009:
	.string ""
.text
	mov A, .L10009
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10010
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L10010:
	mov A, B
	add SP, 1
	.loc 7 9664 0
	#   inc_indent();
.data
	.L10011:
	.string "while 1"
.text
	mov A, .L10011
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10012
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L10012:
	mov A, B
	add SP, 1
	.loc 7 9665 0
	#   emit_line("if 0");
	mov A, .L10013
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L10013:
	mov A, B
	.loc 7 9666 0
	#   for (int i = 0; i < num_funcs; i++) {
.data
	.L10014:
	.string "if 0"
.text
	mov A, .L10014
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10015
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L10015:
	mov A, B
	add SP, 1
	.loc 7 9672 0
	#   }
	.loc 7 9667 0
	#     emit_line("elseif s:pc < %d", (i + 1) * CHUNKED_FUNC_SIZE);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 9672 0
	#   }
	.L1656:
	.loc 7 9667 0
	#     emit_line("elseif s:pc < %d", (i + 1) * CHUNKED_FUNC_SIZE);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9657 0
	#                                          vim_emit_func_prologue,
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L10016, A, 0
	jmp .L10017
	.L10016:
	.loc 7 9672 0
	#   }
	jmp .L1658
	.L10017:
	.loc 7 9668 0
	#     inc_indent();
	.loc 7 9667 0
	#     emit_line("elseif s:pc < %d", (i + 1) * CHUNKED_FUNC_SIZE);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9668 0
	#     inc_indent();
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 310 0
	# }
	mov B, CHUNKED_FUNC_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10018
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10018:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9668 0
	#     inc_indent();
.data
	.L10019:
	.string "elseif s:pc < %d"
.text
	mov A, .L10019
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10020
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L10020:
	mov A, B
	add SP, 2
	.loc 7 9669 0
	#     // Func%d() returns 1 if the program exited or not (otherwise returns 0).
	mov A, .L10021
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp inc_indent
	.L10021:
	mov A, B
	.loc 7 9671 0
	#     dec_indent();
	.loc 7 9667 0
	#     emit_line("elseif s:pc < %d", (i + 1) * CHUNKED_FUNC_SIZE);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9671 0
	#     dec_indent();
.data
	.L10022:
	.string "if Func%d() | break | endif"
.text
	mov A, .L10022
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10023
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L10023:
	mov A, B
	add SP, 2
	.loc 7 9672 0
	#   }
	mov A, .L10024
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L10024:
	mov A, B
	.L1657:
	.loc 7 9667 0
	#     emit_line("elseif s:pc < %d", (i + 1) * CHUNKED_FUNC_SIZE);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 9672 0
	#   }
	jmp .L1656
	.L1658:
	.loc 7 9674 0
	#   dec_indent();
.data
	.L10025:
	.string "endif"
.text
	mov A, .L10025
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10026
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L10026:
	mov A, B
	add SP, 1
	.loc 7 9675 0
	#   emit_line("endwhile");
	mov A, .L10027
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dec_indent
	.L10027:
	mov A, B
	.loc 7 9676 0
	# }
.data
	.L10028:
	.string "endwhile"
.text
	mov A, .L10028
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10029
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_line
	.L10029:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
MEM:
	.long 8
	.text
mem:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9687 0
	# 
	.loc 7 9676 0
	# }
	mov B, MEM
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
WS_OPS:
	.data 1
	.L10030:
	.string "  "
	.data 0
	.long .L10030
	.data 1
	.L10031:
	.string " \n "
	.data 0
	.long .L10031
	.data 1
	.L10032:
	.string " \t "
	.data 0
	.long .L10032
	.data 1
	.L10033:
	.string " \n\t"
	.data 0
	.long .L10033
	.data 1
	.L10034:
	.string " \n\n"
	.data 0
	.long .L10034
	.data 1
	.L10035:
	.string " \t\n"
	.data 0
	.long .L10035
	.data 1
	.L10036:
	.string "\t   "
	.data 0
	.long .L10036
	.data 1
	.L10037:
	.string "\t  \t"
	.data 0
	.long .L10037
	.data 1
	.L10038:
	.string "\t  \n"
	.data 0
	.long .L10038
	.data 1
	.L10039:
	.string "\t \t "
	.data 0
	.long .L10039
	.data 1
	.L10040:
	.string "\t \t\t"
	.data 0
	.long .L10040
	.data 1
	.L10041:
	.string "\t\t "
	.data 0
	.long .L10041
	.data 1
	.L10042:
	.string "\t\t\t"
	.data 0
	.long .L10042
	.data 1
	.L10043:
	.string "\n  "
	.data 0
	.long .L10043
	.data 1
	.L10044:
	.string "\n \t"
	.data 0
	.long .L10044
	.data 1
	.L10045:
	.string "\n \n"
	.data 0
	.long .L10045
	.data 1
	.L10046:
	.string "\n\t "
	.data 0
	.long .L10046
	.data 1
	.L10047:
	.string "\n\t\t"
	.data 0
	.long .L10047
	.data 1
	.L10048:
	.string "\n\t\n"
	.data 0
	.long .L10048
	.data 1
	.L10049:
	.string "\n\n\n"
	.data 0
	.long .L10049
	.data 1
	.L10050:
	.string "\t\n  "
	.data 0
	.long .L10050
	.data 1
	.L10051:
	.string "\t\n \t"
	.data 0
	.long .L10051
	.data 1
	.L10052:
	.string "\t\n\t "
	.data 0
	.long .L10052
	.data 1
	.L10053:
	.string "\t\n\t\t"
	.data 0
	.long .L10053
	.text
ws_emit_str:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9752 0
	# }
	.loc 6 123 0
	# }
	mov B, stdout
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10054
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fputs
	.L10054:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_num:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 41
	.loc 7 9765 0
	# }
	.loc 7 9756 0
	#   int i = 39;
	.loc 7 9757 0
	#   buf[i--] = 0;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777175
	mov A, 39
	store A, B
	.loc 7 9758 0
	#   buf[i--] = '\n';
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9756 0
	#   int i = 39;
	mov A, BP
	add A, 16777176
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9758 0
	#   buf[i--] = '\n';
	.loc 7 9757 0
	#   buf[i--] = 0;
	mov B, BP
	add B, 16777175
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777175
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 9759 0
	#   do {
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9756 0
	#   int i = 39;
	mov A, BP
	add A, 16777176
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9759 0
	#   do {
	.loc 7 9757 0
	#   buf[i--] = 0;
	mov B, BP
	add B, 16777175
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777175
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 9762 0
	#   } while (v);
	.L1659:
	.loc 7 9761 0
	#     v /= 2;
.data
	.L10055:
	.string " \t"
.text
	mov A, .L10055
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9761 0
	#     v /= 2;
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10056
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mod
	.L10056:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9756 0
	#   int i = 39;
	mov A, BP
	add A, 16777176
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9761 0
	#     v /= 2;
	.loc 7 9757 0
	#   buf[i--] = 0;
	mov B, BP
	add B, 16777175
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 16777175
	store A, B
	load A, SP
	add SP, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 9762 0
	#   } while (v);
	.loc 7 9752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9762 0
	#   } while (v);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10057
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L10057:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 2
	store A, B
	.loc 7 9752 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L10058, A, 0
	.loc 7 9762 0
	#   } while (v);
	jmp .L1659
	.L10058:
	.L1660:
	.loc 7 9764 0
	#   ws_emit_str(&buf[i]);
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9756 0
	#   int i = 39;
	mov A, BP
	add A, 16777176
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9757 0
	#   buf[i--] = 0;
	mov B, BP
	add B, 16777175
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 9765 0
	# }
	.loc 7 9756 0
	#   int i = 39;
	mov A, BP
	add A, 16777176
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9757 0
	#   buf[i--] = 0;
	mov B, BP
	add B, 16777175
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10059
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_str
	.L10059:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_uint_mod_ws:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 9773 0
	# }
	.loc 7 9769 0
	#   putchar('\t');
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 9770 0
	#   for (int i = 0; i < 24; i++)
	mov A, 9
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.loc 7 9771 0
	#     putchar(' ');
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.L1661:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L10060, A, 0
	jmp .L10061
	.L10060:
	jmp .L1663
	.L10061:
	mov A, 32
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	.L1662:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	jmp .L1661
	.L1663:
	.loc 7 9773 0
	# }
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	putc A
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9777 0
	# }
	.loc 7 9687 0
	# 
	mov A, WS_OPS
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9773 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10062
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_str
	.L10062:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9782 0
	# }
	.loc 7 9781 0
	#   ws_emit_num(a);
	.loc 7 9777 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10063
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10063:
	mov A, B
	add SP, 1
	.loc 7 9782 0
	# }
	.loc 7 9777 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10064
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_num
	.L10064:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_local_jmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9787 0
	# }
	.loc 7 9786 0
	#   ws_emit_num(l);
	.loc 7 9782 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10065
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10065:
	mov A, B
	add SP, 1
	.loc 7 9787 0
	# }
	.loc 7 9782 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10066
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_num
	.L10066:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_store:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9793 0
	# }
	.loc 7 9791 0
	#   ws_emit_op(WS_PUSH, val);
	.loc 7 9787 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10067
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10067:
	mov A, B
	add SP, 2
	.loc 7 9792 0
	#   ws_emit(WS_STORE);
	.loc 7 9787 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10068
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10068:
	mov A, B
	add SP, 2
	.loc 7 9793 0
	# }
	.loc 7 9687 0
	# 
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10069
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10069:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_retrieve:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9798 0
	# }
	.loc 7 9797 0
	#   ws_emit(WS_RETRIEVE);
	.loc 7 9793 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10070
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10070:
	mov A, B
	add SP, 2
	.loc 7 9798 0
	# }
	.loc 7 9687 0
	# 
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10071
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10071:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_value:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9809 0
	#   }
	.loc 7 9802 0
	#     ws_emit_retrieve(v->reg);
	.loc 7 9798 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10072, A, 0
	.loc 7 9806 0
	#     }
	.loc 7 9803 0
	#     if (off) {
	.loc 7 9798 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10073
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_retrieve
	.L10073:
	mov A, B
	add SP, 1
	.loc 7 9806 0
	#     }
	.loc 7 9798 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L10074, A, 0
	.loc 7 9806 0
	#     }
	.loc 7 9805 0
	#       ws_emit(WS_ADD);
	.loc 7 9798 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10075
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10075:
	mov A, B
	add SP, 2
	.loc 7 9806 0
	#     }
	.loc 7 9687 0
	# 
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10076
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10076:
	mov A, B
	add SP, 1
	.L10074:
	jmp .L10077
	.L10072:
	.loc 7 9809 0
	#   }
	.loc 7 9798 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10078
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10078:
	mov A, B
	add SP, 2
	.L10077:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_src:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9814 0
	# }
	.loc 7 9809 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9814 0
	# }
	.loc 7 9809 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10079
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_value
	.L10079:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_addsub:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9826 0
	# }
	.loc 7 9818 0
	#   ws_emit_retrieve(inst->dst.reg);
	.loc 7 9814 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10080
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10080:
	mov A, B
	add SP, 2
	.loc 7 9819 0
	#   ws_emit_src(inst, 0);
	.loc 7 9814 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10081
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_retrieve
	.L10081:
	mov A, B
	add SP, 1
	.loc 7 9820 0
	#   ws_emit(op);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9814 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10082
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_src
	.L10082:
	mov A, B
	add SP, 2
	.loc 7 9821 0
	#   ws_emit(WS_PUSH); ws_emit_uint_mod_ws();
	.loc 7 9814 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10083
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10083:
	mov A, B
	add SP, 1
	.loc 7 9822 0
	#   ws_emit(WS_ADD);
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10084
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10084:
	mov A, B
	add SP, 1
	.loc 7 9822 0
	#   ws_emit(WS_ADD);
	mov A, .L10085
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_uint_mod_ws
	.L10085:
	mov A, B
	.loc 7 9823 0
	#   ws_emit(WS_PUSH); ws_emit_uint_mod_ws();
	.loc 7 9687 0
	# 
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10086
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10086:
	mov A, B
	add SP, 1
	.loc 7 9824 0
	#   ws_emit(WS_MOD);
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10087
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10087:
	mov A, B
	add SP, 1
	.loc 7 9824 0
	#   ws_emit(WS_MOD);
	mov A, .L10088
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_uint_mod_ws
	.L10088:
	mov A, B
	.loc 7 9825 0
	#   ws_emit(WS_STORE);
	.loc 7 9687 0
	# 
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10089
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10089:
	mov A, B
	add SP, 1
	.loc 7 9826 0
	# }
	.loc 7 9687 0
	# 
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10090
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10090:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_cmp_ws:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 5
	.loc 7 9875 0
	# }
	.loc 7 9830 0
	#   int lt = ++*label;
	mov A, 0
	mov B, SP
	.loc 7 9826 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9831 0
	#   int ld = ++*label;
	mov A, 0
	mov B, SP
	.loc 7 9826 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 9832 0
	#   int op = normalize_cond(inst->op, flip);
	mov A, 0
	mov B, SP
	.loc 7 9826 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov B, A
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 9833 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 9826 0
	# }
	mov B, BP
	add B, 3
	load A, B
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9833 0
	# 
	.loc 7 9826 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10091
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp normalize_cond
	.L10091:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 9841 0
	#   }
	.loc 7 9835 0
	#     op = op == JGT ? JLT : JGE;
	.loc 7 9833 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L10092, A, 0
	.loc 7 9835 0
	#     op = op == JGT ? JLT : JGE;
	.loc 7 9833 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L10092:
	mov A, B
	jeq .L10093, A, 0
	.loc 7 9838 0
	#   } else {
	.loc 7 9836 0
	#     ws_emit_src(inst, 0);
	.loc 7 9833 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10094, A, 0
	mov A, 10
	jmp .L10095
	.L10094:
	mov A, 13
	.L10095:
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 9837 0
	#     ws_emit_retrieve(inst->dst.reg);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9826 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10096
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_src
	.L10096:
	mov A, B
	add SP, 2
	.loc 7 9838 0
	#   } else {
	.loc 7 9826 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10097
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_retrieve
	.L10097:
	mov A, B
	add SP, 1
	jmp .L10098
	.L10093:
	.loc 7 9841 0
	#   }
	.loc 7 9840 0
	#     ws_emit_src(inst, 0);
	.loc 7 9826 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10099
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_retrieve
	.L10099:
	mov A, B
	add SP, 1
	.loc 7 9841 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9826 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10100
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_src
	.L10100:
	mov A, B
	add SP, 2
	.L10098:
	.loc 7 9843 0
	# 
	.loc 7 9687 0
	# 
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10101
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10101:
	mov A, B
	add SP, 1
	.loc 7 9866 0
	#       error("oops %d", op);
	.loc 7 9833 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 9866 0
	#       error("oops %d", op);
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10102, A, 0
	jmp .L1665
	.L10102:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10103, A, 0
	jmp .L1666
	.L10103:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10104, A, 0
	jmp .L1667
	.L10104:
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10105, A, 0
	jmp .L1668
	.L10105:
	jmp .L1669
	.loc 7 9846 0
	#       ws_emit_local_jmp(WS_JZ, lt);
	.L1665:
	.loc 7 9831 0
	#   int ld = ++*label;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_local_jmp
	.L10106:
	mov A, B
	add SP, 2
	.loc 7 9848 0
	#       break;
	.loc 7 9830 0
	#   int lt = ++*label;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10107
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_local_jmp
	.L10107:
	mov A, B
	add SP, 2
	.loc 7 9849 0
	# 
	jmp .L1664
	.loc 7 9851 0
	#       ws_emit_local_jmp(WS_JZ, lf);
	.L1666:
	.loc 7 9830 0
	#   int lt = ++*label;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10108
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_local_jmp
	.L10108:
	mov A, B
	add SP, 2
	.loc 7 9853 0
	#       break;
	.loc 7 9831 0
	#   int ld = ++*label;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10109
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_local_jmp
	.L10109:
	mov A, B
	add SP, 2
	.loc 7 9854 0
	# 
	jmp .L1664
	.loc 7 9856 0
	#       ws_emit_local_jmp(WS_JN, lt);
	.L1667:
	.loc 7 9831 0
	#   int ld = ++*label;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 17
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10110
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_local_jmp
	.L10110:
	mov A, B
	add SP, 2
	.loc 7 9858 0
	#       break;
	.loc 7 9830 0
	#   int lt = ++*label;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10111
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_local_jmp
	.L10111:
	mov A, B
	add SP, 2
	.loc 7 9859 0
	# 
	jmp .L1664
	.loc 7 9861 0
	#       ws_emit_local_jmp(WS_JN, lf);
	.L1668:
	.loc 7 9830 0
	#   int lt = ++*label;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 17
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10112
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_local_jmp
	.L10112:
	mov A, B
	add SP, 2
	.loc 7 9863 0
	#       break;
	.loc 7 9831 0
	#   int ld = ++*label;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10113
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_local_jmp
	.L10113:
	mov A, B
	add SP, 2
	.loc 7 9864 0
	# 
	jmp .L1664
	.loc 7 9866 0
	#       error("oops %d", op);
	.L1669:
	.loc 7 9833 0
	# 
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9866 0
	#       error("oops %d", op);
.data
	.L10114:
	.string "oops %d"
.text
	mov A, .L10114
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10115
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L10115:
	mov A, B
	add SP, 2
	.L1664:
	.loc 7 9870 0
	#   ws_emit_op(WS_PUSH, 1);
	.loc 7 9831 0
	#   int ld = ++*label;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 13
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10116:
	mov A, B
	add SP, 2
	.loc 7 9871 0
	#   ws_emit_op(WS_JMP, ld);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10117:
	mov A, B
	add SP, 2
	.loc 7 9872 0
	#   ws_emit_op(WS_MARK, lf);
	.loc 7 9832 0
	#   int op = normalize_cond(inst->op, flip);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10118
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10118:
	mov A, B
	add SP, 2
	.loc 7 9873 0
	#   ws_emit_op(WS_PUSH, 0);
	.loc 7 9830 0
	#   int lt = ++*label;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 13
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10119
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10119:
	mov A, B
	add SP, 2
	.loc 7 9874 0
	#   ws_emit_op(WS_MARK, ld);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10120
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10120:
	mov A, B
	add SP, 2
	.loc 7 9875 0
	# }
	.loc 7 9832 0
	#   int op = normalize_cond(inst->op, flip);
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 13
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10121
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10121:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_jmp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 9886 0
	#   }
	.loc 7 9879 0
	#     ws_emit_retrieve(inst->jmp.reg);
	.loc 7 9875 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10122, A, 0
	.loc 7 9884 0
	#   } else {
	.loc 7 9880 0
	#     if (op != WS_JMP) {
	.loc 7 9875 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10123
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_retrieve
	.L10123:
	mov A, B
	add SP, 1
	.loc 7 9882 0
	#     }
	.loc 7 9881 0
	#       ws_emit(WS_SWAP);
	.loc 7 9875 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 15
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L10124, A, 0
	.loc 7 9882 0
	#     }
	.loc 7 9687 0
	# 
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10125:
	mov A, B
	add SP, 1
	.L10124:
	.loc 7 9884 0
	#   } else {
	.loc 7 9875 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10126:
	mov A, B
	add SP, 2
	jmp .L10127
	.L10122:
	.loc 7 9886 0
	#   }
	.loc 7 9875 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10128:
	mov A, B
	add SP, 2
	.L10127:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ws_emit_reg_jmp_table:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 9904 0
	# }
	.loc 7 9894 0
	#   }
	.loc 7 9891 0
	#     ws_emit(WS_DISCARD);
	.loc 7 9886 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9891 0
	#     ws_emit(WS_DISCARD);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9886 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10129, A, 0
	.loc 7 9894 0
	#   }
	.loc 7 9892 0
	#     ws_emit_op(WS_JMP, min_pc);
	.loc 7 9687 0
	# 
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10130
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10130:
	mov A, B
	add SP, 1
	.loc 7 9893 0
	#     return;
	.loc 7 9886 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10131:
	mov A, B
	add SP, 2
	.loc 7 9894 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L10129:
	.loc 7 9897 0
	#   ws_emit(WS_DUP);
	mov A, 0
	mov B, SP
	.loc 7 9886 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9897 0
	#   ws_emit(WS_DUP);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10132
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_div
	.L10132:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9898 0
	#   ws_emit_op(WS_PUSH, mid_pc);
	.loc 7 9687 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10133:
	mov A, B
	add SP, 1
	.loc 7 9899 0
	#   ws_emit(WS_SUB);
	.loc 7 9897 0
	#   ws_emit(WS_DUP);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10134:
	mov A, B
	add SP, 2
	.loc 7 9900 0
	#   ws_emit_op(WS_JN, last_label + mid_pc);
	.loc 7 9687 0
	# 
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10135
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10135:
	mov A, B
	add SP, 1
	.loc 7 9901 0
	#   ws_emit_reg_jmp_table(mid_pc, max_pc, last_label);
	.loc 7 9886 0
	#   }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9897 0
	#   ws_emit(WS_DUP);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 17
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10136
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10136:
	mov A, B
	add SP, 2
	.loc 7 9902 0
	#   ws_emit_op(WS_MARK, last_label + mid_pc);
	.loc 7 9886 0
	#   }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9897 0
	#   ws_emit(WS_DUP);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_reg_jmp_table
	.L10137:
	mov A, B
	add SP, 3
	.loc 7 9903 0
	#   ws_emit_reg_jmp_table(min_pc, mid_pc, last_label);
	.loc 7 9886 0
	#   }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9897 0
	#   ws_emit(WS_DUP);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 13
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10138
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10138:
	mov A, B
	add SP, 2
	.loc 7 9904 0
	# }
	.loc 7 9886 0
	#   }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9897 0
	#   ws_emit(WS_DUP);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9886 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_reg_jmp_table
	.L10139:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_state_ws:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 9912 0
	#   }
	.loc 7 9909 0
	#   }
	.loc 7 9908 0
	#     ws_emit_store(i, 0);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 9909 0
	#   }
	.L1670:
	.loc 7 9908 0
	#     ws_emit_store(i, 0);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L10140, A, 0
	jmp .L10141
	.L10140:
	.loc 7 9909 0
	#   }
	jmp .L1672
	.L10141:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9908 0
	#     ws_emit_store(i, 0);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10142
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_store
	.L10142:
	mov A, B
	add SP, 2
	.loc 7 9909 0
	#   }
	.L1671:
	.loc 7 9908 0
	#     ws_emit_store(i, 0);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 9909 0
	#   }
	jmp .L1670
	.L1672:
	.loc 7 9912 0
	#   }
	.loc 7 9911 0
	#     ws_emit_store(mem(mp), data->v);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 9912 0
	#   }
	.L1673:
	.loc 7 9904 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L10143, A, 0
	jmp .L10144
	.L10143:
	.loc 7 9912 0
	#   }
	jmp .L1675
	.L10144:
	.loc 7 9904 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9912 0
	#   }
	.loc 7 9911 0
	#     ws_emit_store(mem(mp), data->v);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10145
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp mem
	.L10145:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10146
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_store
	.L10146:
	mov A, B
	add SP, 2
	.loc 7 9912 0
	#   }
	.L1674:
	.loc 7 9911 0
	#     ws_emit_store(mem(mp), data->v);
	.loc 7 9904 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 9911 0
	#     ws_emit_store(mem(mp), data->v);
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777214
	store A, B
	load A, SP
	add SP, 1
	.loc 7 9912 0
	#   }
	jmp .L1673
	.L1675:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_ws:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 6
	.loc 7 10008 0
	# }
	.loc 7 9917 0
	# 
	.loc 7 9912 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10147
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_ws
	.L10147:
	mov A, B
	add SP, 1
	.loc 7 9919 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 9921 0
	#   }
	.loc 7 9920 0
	#     label = inst->pc;
	mov A, 0
	mov B, SP
	.loc 7 9912 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 9921 0
	#   }
	.L1676:
	.loc 7 9920 0
	#     label = inst->pc;
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L10148, A, 0
	jmp .L10149
	.L10148:
	.loc 7 9921 0
	#   }
	jmp .L1678
	.L10149:
	.loc 7 9920 0
	#     label = inst->pc;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 9921 0
	#   }
	.L1677:
	.loc 7 9920 0
	#     label = inst->pc;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 9921 0
	#   }
	jmp .L1676
	.L1678:
	.loc 7 9923 0
	# 
	mov A, 0
	mov B, SP
	.loc 7 9919 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 9925 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 10002 0
	#         error("oops");
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 9912 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 10002 0
	#         error("oops");
	.L1679:
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L10150, A, 0
	jmp .L10151
	.L10150:
	.loc 7 10002 0
	#         error("oops");
	jmp .L1681
	.L10151:
	.loc 7 9928 0
	#     }
	.loc 7 9927 0
	#       ws_emit_op(WS_MARK, inst->pc);
	.loc 7 9925 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9927 0
	#       ws_emit_op(WS_MARK, inst->pc);
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L10152, A, 0
	.loc 7 9928 0
	#     }
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 13
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10153
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10153:
	mov A, B
	add SP, 2
	.L10152:
	.loc 7 9930 0
	# 
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 10002 0
	#         error("oops");
	.loc 7 9932 0
	#       case MOV:
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 10002 0
	#         error("oops");
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10154, A, 0
	jmp .L1683
	.L10154:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10155, A, 0
	jmp .L1684
	.L10155:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10156, A, 0
	jmp .L1685
	.L10156:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10157, A, 0
	jmp .L1686
	.L10157:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10158, A, 0
	jmp .L1687
	.L10158:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10159, A, 0
	jmp .L1688
	.L10159:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10160, A, 0
	jmp .L1689
	.L10160:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10161, A, 0
	jmp .L1690
	.L10161:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10162, A, 0
	jmp .L1691
	.L10162:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10163, A, 0
	jmp .L1692
	.L10163:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10164, A, 0
	jmp .L1693
	.L10164:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10165, A, 0
	jmp .L1694
	.L10165:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10166, A, 0
	jmp .L1695
	.L10166:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10167, A, 0
	jmp .L1696
	.L10167:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10168, A, 0
	jmp .L1697
	.L10168:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10169, A, 0
	jmp .L1698
	.L10169:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10170, A, 0
	jmp .L1699
	.L10170:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10171, A, 0
	jmp .L1700
	.L10171:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10172, A, 0
	jmp .L1701
	.L10172:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10173, A, 0
	jmp .L1702
	.L10173:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10174, A, 0
	jmp .L1703
	.L10174:
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10175, A, 0
	jmp .L1704
	.L10175:
	jmp .L1705
	.loc 7 9933 0
	#         ws_emit_op(WS_PUSH, inst->dst.reg);
	.L1683:
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10176
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10176:
	mov A, B
	add SP, 2
	.loc 7 9935 0
	#         ws_emit(WS_STORE);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10177
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_src
	.L10177:
	mov A, B
	add SP, 2
	.loc 7 9936 0
	#         break;
	.loc 7 9687 0
	# 
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10178
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10178:
	mov A, B
	add SP, 1
	.loc 7 9937 0
	# 
	jmp .L1682
	.loc 7 9939 0
	#         ws_emit_addsub(inst, WS_ADD);
	.L1684:
	.loc 7 9687 0
	# 
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10179
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_addsub
	.L10179:
	mov A, B
	add SP, 2
	.loc 7 9941 0
	# 
	jmp .L1682
	.loc 7 9943 0
	#         ws_emit_addsub(inst, WS_SUB);
	.L1685:
	.loc 7 9687 0
	# 
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10180
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_addsub
	.L10180:
	mov A, B
	add SP, 2
	.loc 7 9945 0
	# 
	jmp .L1682
	.loc 7 9947 0
	#         ws_emit_op(WS_PUSH, inst->dst.reg);
	.L1686:
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10181
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10181:
	mov A, B
	add SP, 2
	.loc 7 9949 0
	#         ws_emit(WS_RETRIEVE);
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10182
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_src
	.L10182:
	mov A, B
	add SP, 2
	.loc 7 9950 0
	#         ws_emit(WS_STORE);
	.loc 7 9687 0
	# 
	mov A, 12
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10183
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10183:
	mov A, B
	add SP, 1
	.loc 7 9951 0
	#         break;
	.loc 7 9687 0
	# 
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10184:
	mov A, B
	add SP, 1
	.loc 7 9952 0
	# 
	jmp .L1682
	.loc 7 9954 0
	#         ws_emit_src(inst, 8);
	.L1687:
	mov A, 8
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10185
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_src
	.L10185:
	mov A, B
	add SP, 2
	.loc 7 9956 0
	#         ws_emit(WS_STORE);
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10186
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_retrieve
	.L10186:
	mov A, B
	add SP, 1
	.loc 7 9957 0
	#         break;
	.loc 7 9687 0
	# 
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10187
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10187:
	mov A, B
	add SP, 1
	.loc 7 9958 0
	# 
	jmp .L1682
	.loc 7 9960 0
	#         ws_emit_src(inst, 0);
	.L1688:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10188
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_src
	.L10188:
	mov A, B
	add SP, 2
	.loc 7 9962 0
	#         break;
	.loc 7 9687 0
	# 
	mov A, 20
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10189
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10189:
	mov A, B
	add SP, 1
	.loc 7 9963 0
	# 
	jmp .L1682
	.loc 7 9965 0
	#         ws_emit_op(WS_PUSH, inst->dst.reg);
	.L1689:
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10190
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10190:
	mov A, B
	add SP, 2
	.loc 7 9967 0
	#         break;
	.loc 7 9687 0
	# 
	mov A, 22
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10191
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10191:
	mov A, B
	add SP, 1
	.loc 7 9968 0
	# 
	jmp .L1682
	.loc 7 9970 0
	#         ws_emit(WS_EXIT);
	.L1690:
	.loc 7 9687 0
	# 
	mov A, 19
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10192:
	mov A, B
	add SP, 1
	.loc 7 9972 0
	# 
	jmp .L1682
	.loc 7 9974 0
	#         break;
	.L1691:
	jmp .L1682
	.loc 7 9977 0
	#       case NE:
	.L1692:
	.L1693:
	.L1694:
	.L1695:
	.L1696:
	.L1697:
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10193
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10193:
	mov A, B
	add SP, 2
	.loc 7 9984 0
	#         ws_emit(WS_STORE);
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10194
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_cmp_ws
	.L10194:
	mov A, B
	add SP, 3
	.loc 7 9985 0
	#         break;
	.loc 7 9687 0
	# 
	mov A, 11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10195
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit
	.L10195:
	mov A, B
	add SP, 1
	.loc 7 9986 0
	# 
	jmp .L1682
	.loc 7 9988 0
	#       case JNE:
	.L1698:
	.L1699:
	.L1700:
	.L1701:
	.L1702:
	.L1703:
	mov A, BP
	add A, -1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10196
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_cmp_ws
	.L10196:
	mov A, B
	add SP, 3
	.loc 7 9995 0
	#         break;
	.loc 7 9923 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10197
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_jmp
	.L10197:
	mov A, B
	add SP, 3
	.loc 7 9996 0
	# 
	jmp .L1682
	.loc 7 9998 0
	#         ws_emit_jmp(inst, WS_JMP, reg_jmp);
	.L1704:
	.loc 7 9923 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10198
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_jmp
	.L10198:
	mov A, B
	add SP, 3
	.loc 7 10000 0
	# 
	jmp .L1682
	.loc 7 10002 0
	#         error("oops");
	.L1705:
.data
	.L10199:
	.string "oops"
.text
	mov A, .L10199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10200
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L10200:
	mov A, B
	add SP, 1
	.L1682:
	.L1680:
	.loc 7 9926 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 10002 0
	#         error("oops");
	jmp .L1679
	.L1681:
	.loc 7 10007 0
	#   ws_emit_reg_jmp_table(0, reg_jmp, label);
	.loc 7 9923 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9687 0
	# 
	mov A, 13
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10201
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_op
	.L10201:
	mov A, B
	add SP, 2
	.loc 7 10008 0
	# }
	.loc 7 9919 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 9923 0
	# 
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10202
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ws_emit_reg_jmp_table
	.L10202:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
REGNO:
	.long 0
	.long 3
	.long 1
	.long 2
	.long 5
	.long 7
	.long 6
	.long 4
	.text
emit_int80:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10032 0
	# }
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10203
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10203:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
modr:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10036 0
	# }
	mov A, 192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10032 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10036 0
	# }
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10032 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10036 0
	# }
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10204
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10204:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_reg2:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10040 0
	# }
	.loc 7 10036 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10205
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp modr
	.L10205:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10206
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10206:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_zero_reg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10044 0
	# }
	.loc 7 10040 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10207
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp modr
	.L10207:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10044 0
	# }
	mov A, 49
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10208
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10208:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_mov_reg:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10049 0
	# }
	.loc 7 10048 0
	#   emit_reg2(dst, src);
	mov A, 137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10209
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10209:
	mov A, B
	add SP, 1
	.loc 7 10049 0
	# }
	.loc 7 10044 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10210
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reg2
	.L10210:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_mov_imm:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10054 0
	# }
	.loc 7 10053 0
	#   emit_le(src);
	mov A, 184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10049 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10211
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10211:
	mov A, B
	add SP, 1
	.loc 7 10054 0
	# }
	.loc 7 10049 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10212
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10212:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_mov:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10061 0
	#   }
	.loc 7 10058 0
	#     emit_mov_reg(dst, src->reg);
	.loc 7 10054 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10213, A, 0
	.loc 7 10059 0
	#   } else {
	.loc 7 10054 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10214
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_reg
	.L10214:
	mov A, B
	add SP, 2
	jmp .L10215
	.L10213:
	.loc 7 10061 0
	#   }
	.loc 7 10054 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10216
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10216:
	mov A, B
	add SP, 2
	.L10215:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_cmp_x86:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10070 0
	#   }
	.loc 7 10066 0
	#     emit_2(0x39, modr(inst->dst.reg, inst->src.reg));
	.loc 7 10061 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10217, A, 0
	.loc 7 10067 0
	#   } else {
	.loc 7 10061 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10067 0
	#   } else {
	.loc 7 10061 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10218
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp modr
	.L10218:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10067 0
	#   } else {
	mov A, 57
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10219
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10219:
	mov A, B
	add SP, 2
	jmp .L10220
	.L10217:
	.loc 7 10070 0
	#   }
	.loc 7 10069 0
	#     emit_le(inst->src.imm);
	mov A, 248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10069 0
	#     emit_le(inst->src.imm);
	.loc 7 10061 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10069 0
	#     emit_le(inst->src.imm);
	mov A, 129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10221
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10221:
	mov A, B
	add SP, 2
	.loc 7 10070 0
	#   }
	.loc 7 10061 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10222
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10222:
	mov A, B
	add SP, 1
	.L10220:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_setcc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10077 0
	# }
	.loc 7 10075 0
	#   emit_mov_imm(inst->dst.reg, 0);
	.loc 7 10070 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10223
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cmp_x86
	.L10223:
	mov A, B
	add SP, 1
	.loc 7 10076 0
	#   emit_3(0x0f, op, 0xc0 + REGNO[inst->dst.reg]);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10070 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10224:
	mov A, B
	add SP, 2
	.loc 7 10077 0
	# }
	mov A, 192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10077 0
	# }
	.loc 7 10070 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10077 0
	# }
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10225
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_3
	.L10225:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
emit_jcc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10091 0
	#   }
	.loc 7 10083 0
	#   }
	.loc 7 10077 0
	# }
	mov B, BP
	add B, 3
	load A, B
	jeq .L10226, A, 0
	.loc 7 10083 0
	#   }
	.loc 7 10082 0
	#     emit_2(op, inst->jmp.type == REG ? 7 : 5);
	.loc 7 10077 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10227
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cmp_x86
	.L10227:
	mov A, B
	add SP, 1
	.loc 7 10083 0
	#   }
	.loc 7 10077 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10228, A, 0
	.loc 7 10083 0
	#   }
	mov A, 7
	jmp .L10229
	.L10228:
	mov A, 5
	.L10229:
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10077 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10230
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10230:
	mov A, B
	add SP, 2
	.L10226:
	.loc 7 10091 0
	#   }
	.loc 7 10086 0
	#     emit_3(0xff, 0x24, 0x85 + (REGNO[inst->jmp.reg] * 8));
	.loc 7 10077 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10231, A, 0
	.loc 7 10088 0
	#   } else {
	.loc 7 10087 0
	#     emit_le(rodata_addr);
	mov A, 133
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10087 0
	#     emit_le(rodata_addr);
	.loc 7 10077 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10087 0
	#     emit_le(rodata_addr);
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10232:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 36
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_3
	.L10233:
	mov A, B
	add SP, 3
	.loc 7 10088 0
	#   } else {
	.loc 7 10077 0
	# }
	mov B, BP
	add B, 5
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10234
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10234:
	mov A, B
	add SP, 1
	jmp .L10235
	.L10231:
	.loc 7 10091 0
	#   }
	.loc 7 10090 0
	#     emit_diff(pc2addr[inst->jmp.imm], emit_cnt() + 4);
	mov A, 233
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10236
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10236:
	mov A, B
	add SP, 1
	.loc 7 10091 0
	#   }
	mov A, .L10237
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cnt
	.L10237:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10077 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10091 0
	#   }
	.loc 7 10077 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10238
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_diff
	.L10238:
	mov A, B
	add SP, 2
	.L10235:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
init_state_x86:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10124 0
	# }
	.loc 7 10096 0
	#   // mov ECX, 1<<26
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10239
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10239:
	mov A, B
	add SP, 2
	.loc 7 10098 0
	#   emit_mov_imm(D, 3);  // PROT_READ | PROT_WRITE
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10240
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_5
	.L10240:
	mov A, B
	add SP, 5
	.loc 7 10099 0
	#   emit_mov_imm(ESI, 0x22);  // MAP_PRIVATE | MAP_ANONYMOUS
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10241
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10241:
	mov A, B
	add SP, 2
	.loc 7 10100 0
	#   // mov EDI, 0xffffffff
	mov A, 34
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10242
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10242:
	mov A, B
	add SP, 2
	.loc 7 10102 0
	#   emit_mov_imm(BP, 0);
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10243
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_5
	.L10243:
	mov A, B
	add SP, 5
	.loc 7 10103 0
	#   emit_mov_imm(A, 192);  // mmap2
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10244
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10244:
	mov A, B
	add SP, 2
	.loc 7 10104 0
	#   emit_int80();
	mov A, 192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10245
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10245:
	mov A, B
	add SP, 2
	.loc 7 10105 0
	# 
	mov A, .L10246
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_int80
	.L10246:
	mov A, B
	.loc 7 10107 0
	# 
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10107 0
	# 
	mov A, 6
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10247
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_reg
	.L10247:
	mov A, B
	add SP, 2
	.loc 7 10114 0
	#     }
	.loc 7 10109 0
	#     if (data->v) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 10114 0
	#     }
	.L1706:
	.loc 7 10091 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	jeq .L10248, A, 0
	jmp .L10249
	.L10248:
	.loc 7 10114 0
	#     }
	jmp .L1708
	.L10249:
	.loc 7 10110 0
	#       // mov dword [EAX+mp*4], data->v
	.loc 7 10091 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	jeq .L10250, A, 0
	.loc 7 10114 0
	#     }
	.loc 7 10112 0
	#       emit_le(mp * 4);
	mov A, 128
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 199
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10251:
	mov A, B
	add SP, 2
	.loc 7 10113 0
	#       emit_le(data->v);
	.loc 7 10109 0
	#     if (data->v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10113 0
	#       emit_le(data->v);
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10252
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10252:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10253
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10253:
	mov A, B
	add SP, 1
	.loc 7 10114 0
	#     }
	.loc 7 10091 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10254
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10254:
	mov A, B
	add SP, 1
	.L10250:
	.loc 7 10114 0
	#     }
	.L1707:
	.loc 7 10109 0
	#     if (data->v) {
	.loc 7 10091 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 10109 0
	#     if (data->v) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 10114 0
	#     }
	jmp .L1706
	.L1708:
	.loc 7 10119 0
	#   emit_zero_reg(A);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 184
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10255
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_5
	.L10255:
	mov A, B
	add SP, 5
	.loc 7 10120 0
	#   emit_zero_reg(B);
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10256
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_zero_reg
	.L10256:
	mov A, B
	add SP, 1
	.loc 7 10121 0
	#   emit_zero_reg(C);
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10257
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_zero_reg
	.L10257:
	mov A, B
	add SP, 1
	.loc 7 10122 0
	#   emit_zero_reg(D);
	.loc 6 205 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10258
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_zero_reg
	.L10258:
	mov A, B
	add SP, 1
	.loc 7 10123 0
	#   emit_zero_reg(BP);
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10259
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_zero_reg
	.L10259:
	mov A, B
	add SP, 1
	.loc 7 10124 0
	# }
	.loc 6 205 0
	# }
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10260
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_zero_reg
	.L10260:
	mov A, B
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
x86_emit_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10279 0
	#       error("oops");
	.loc 7 10128 0
	#     case MOV:
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10279 0
	#       error("oops");
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10261, A, 0
	jmp .L1710
	.L10261:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10262, A, 0
	jmp .L1711
	.L10262:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10263, A, 0
	jmp .L1712
	.L10263:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10264, A, 0
	jmp .L1713
	.L10264:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10265, A, 0
	jmp .L1714
	.L10265:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10266, A, 0
	jmp .L1715
	.L10266:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10267, A, 0
	jmp .L1716
	.L10267:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10268, A, 0
	jmp .L1717
	.L10268:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10269, A, 0
	jmp .L1718
	.L10269:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10270, A, 0
	jmp .L1719
	.L10270:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10271, A, 0
	jmp .L1720
	.L10271:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10272, A, 0
	jmp .L1721
	.L10272:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10273, A, 0
	jmp .L1722
	.L10273:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10274, A, 0
	jmp .L1723
	.L10274:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10275, A, 0
	jmp .L1724
	.L10275:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10276, A, 0
	jmp .L1725
	.L10276:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10277, A, 0
	jmp .L1726
	.L10277:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10278, A, 0
	jmp .L1727
	.L10278:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10279, A, 0
	jmp .L1728
	.L10279:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10280, A, 0
	jmp .L1729
	.L10280:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10281, A, 0
	jmp .L1730
	.L10281:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10282, A, 0
	jmp .L1731
	.L10282:
	jmp .L1732
	.loc 7 10129 0
	#       emit_mov(inst->dst.reg, &inst->src);
	.L1710:
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10129 0
	#       emit_mov(inst->dst.reg, &inst->src);
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10283
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov
	.L10283:
	mov A, B
	add SP, 2
	.loc 7 10131 0
	# 
	jmp .L1709
	.loc 7 10139 0
	#       }
	.loc 7 10133 0
	#       if (inst->src.type == REG) {
	.L1711:
	.loc 7 10139 0
	#       }
	.loc 7 10133 0
	#       if (inst->src.type == REG) {
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10284, A, 0
	.loc 7 10136 0
	#       } else {
	.loc 7 10135 0
	#         emit_reg2(inst->dst.reg, inst->src.reg);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10285
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10285:
	mov A, B
	add SP, 1
	.loc 7 10136 0
	#       } else {
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10136 0
	#       } else {
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10286
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reg2
	.L10286:
	mov A, B
	add SP, 2
	jmp .L10287
	.L10284:
	.loc 7 10139 0
	#       }
	.loc 7 10138 0
	#         emit_le(inst->src.imm);
	mov A, 192
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10138 0
	#         emit_le(inst->src.imm);
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10138 0
	#         emit_le(inst->src.imm);
	mov A, 129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10288
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10288:
	mov A, B
	add SP, 2
	.loc 7 10139 0
	#       }
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10289
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10289:
	mov A, B
	add SP, 1
	.L10287:
	.loc 7 10141 0
	#       emit_le(0xffffff);
	mov A, 224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10141 0
	#       emit_le(0xffffff);
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10141 0
	#       emit_le(0xffffff);
	mov A, 129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10290
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10290:
	mov A, B
	add SP, 2
	.loc 7 10142 0
	#       break;
	mov A, 16777215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10291
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10291:
	mov A, B
	add SP, 1
	.loc 7 10143 0
	# 
	jmp .L1709
	.loc 7 10151 0
	#       }
	.loc 7 10145 0
	#       if (inst->src.type == REG) {
	.L1712:
	.loc 7 10151 0
	#       }
	.loc 7 10145 0
	#       if (inst->src.type == REG) {
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10292, A, 0
	.loc 7 10148 0
	#       } else {
	.loc 7 10147 0
	#         emit_reg2(inst->dst.reg, inst->src.reg);
	mov A, 41
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10293
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10293:
	mov A, B
	add SP, 1
	.loc 7 10148 0
	#       } else {
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10148 0
	#       } else {
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10294
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reg2
	.L10294:
	mov A, B
	add SP, 2
	jmp .L10295
	.L10292:
	.loc 7 10151 0
	#       }
	.loc 7 10150 0
	#         emit_le(inst->src.imm);
	mov A, 232
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10150 0
	#         emit_le(inst->src.imm);
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10150 0
	#         emit_le(inst->src.imm);
	mov A, 129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10296
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10296:
	mov A, B
	add SP, 2
	.loc 7 10151 0
	#       }
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10297
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10297:
	mov A, B
	add SP, 1
	.L10295:
	.loc 7 10153 0
	#       emit_le(0xffffff);
	mov A, 224
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10153 0
	#       emit_le(0xffffff);
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10153 0
	#       emit_le(0xffffff);
	mov A, 129
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10298
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10298:
	mov A, B
	add SP, 2
	.loc 7 10154 0
	#       break;
	mov A, 16777215
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10299
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10299:
	mov A, B
	add SP, 1
	.loc 7 10155 0
	# 
	jmp .L1709
	.loc 7 10157 0
	#       emit_1(0x8b);
	.L1713:
	mov A, 139
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10300
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10300:
	mov A, B
	add SP, 1
	.loc 7 10159 0
	# 
	jmp .L1733
	.loc 7 10161 0
	#       emit_1(0x89);
	.L1714:
	mov A, 137
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10301
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10301:
	mov A, B
	add SP, 1
	.loc 7 10169 0
	#       }
	.loc 7 10163 0
	#       if (inst->src.type == REG) {
	.L1733:
	.loc 7 10169 0
	#       }
	.loc 7 10163 0
	#       if (inst->src.type == REG) {
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10302, A, 0
	.loc 7 10165 0
	#                0x86 + (REGNO[inst->src.reg] * 8));
	mov A, 134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10165 0
	#                0x86 + (REGNO[inst->src.reg] * 8));
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10165 0
	#                0x86 + (REGNO[inst->src.reg] * 8));
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10303
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10303:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10165 0
	#                0x86 + (REGNO[inst->src.reg] * 8));
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10165 0
	#                0x86 + (REGNO[inst->src.reg] * 8));
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10304
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10304:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10305
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10305:
	mov A, B
	add SP, 2
	jmp .L10306
	.L10302:
	.loc 7 10169 0
	#       }
	.loc 7 10168 0
	#         emit_le(inst->src.imm * 4);
	mov A, 134
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10008 0
	# }
	mov A, REGNO
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10168 0
	#         emit_le(inst->src.imm * 4);
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10168 0
	#         emit_le(inst->src.imm * 4);
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10307
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10307:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10308
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10308:
	mov A, B
	add SP, 1
	.loc 7 10169 0
	#       }
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10169 0
	#       }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10309
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10309:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10310
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10310:
	mov A, B
	add SP, 1
	.L10306:
	.loc 7 10171 0
	# 
	jmp .L1709
	.loc 7 10173 0
	#       // push EDI
	.L1715:
	mov A, 87
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10311
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10311:
	mov A, B
	add SP, 1
	.loc 7 10176 0
	#       // push EAX, ECX, EDX, EBX, EDI
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10312
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov
	.L10312:
	mov A, B
	add SP, 2
	.loc 7 10178 0
	#       emit_mov_imm(B, 1);  // stdout
	mov A, 87
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 83
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 82
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 81
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10313
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_5
	.L10313:
	mov A, B
	add SP, 5
	.loc 7 10179 0
	#       emit_mov_reg(C, ESP);
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10314
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10314:
	mov A, B
	add SP, 2
	.loc 7 10180 0
	#       emit_mov_imm(D, 1);
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10315
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_reg
	.L10315:
	mov A, B
	add SP, 2
	.loc 7 10181 0
	#       emit_mov_imm(A, 4);  // write
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10316
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10316:
	mov A, B
	add SP, 2
	.loc 7 10182 0
	#       emit_int80();
	mov A, 4
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10317
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10317:
	mov A, B
	add SP, 2
	.loc 7 10183 0
	#       // pop EDI, EBX, EDX, ECX, EAX
	mov A, .L10318
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_int80
	.L10318:
	mov A, B
	.loc 7 10185 0
	#       // pop EDI
	mov A, 88
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 89
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 90
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 91
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 95
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10319
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_5
	.L10319:
	mov A, B
	add SP, 5
	.loc 7 10187 0
	#       break;
	mov A, 95
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10320
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10320:
	mov A, B
	add SP, 1
	.loc 7 10188 0
	# 
	jmp .L1709
	.loc 7 10190 0
	#       // push EDI
	.L1716:
	mov A, 87
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10321
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10321:
	mov A, B
	add SP, 1
	.loc 7 10194 0
	#       // push 0
	mov A, 83
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 82
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 81
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10322
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4
	.L10322:
	mov A, B
	add SP, 4
	.loc 7 10196 0
	#       emit_mov_imm(B, 0);  // stdin
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 106
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10323
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_2
	.L10323:
	mov A, B
	add SP, 2
	.loc 7 10197 0
	#       emit_mov_reg(C, ESP);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10324
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10324:
	mov A, B
	add SP, 2
	.loc 7 10198 0
	#       emit_mov_imm(D, 1);
	mov A, 7
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10325
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_reg
	.L10325:
	mov A, B
	add SP, 2
	.loc 7 10199 0
	#       emit_mov_imm(A, 3);  // read
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10326
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10326:
	mov A, B
	add SP, 2
	.loc 7 10200 0
	#       emit_int80();
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10327
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10327:
	mov A, B
	add SP, 2
	.loc 7 10201 0
	# 
	mov A, .L10328
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_int80
	.L10328:
	mov A, B
	.loc 7 10204 0
	#       emit_mov_imm(B, 0);
	mov A, 95
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10329
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10329:
	mov A, B
	add SP, 1
	.loc 7 10205 0
	#       // cmp EAX, 1
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10330
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10330:
	mov A, B
	add SP, 2
	.loc 7 10207 0
	#       // cmovnz EDI, EBX
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 248
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 131
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10331
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_3
	.L10331:
	mov A, B
	add SP, 3
	.loc 7 10209 0
	# 
	mov A, 251
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 69
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10332
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_3
	.L10332:
	mov A, B
	add SP, 3
	.loc 7 10212 0
	#       emit_mov_reg(inst->dst.reg, EDI);
	mov A, 88
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 89
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 90
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 91
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10333
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_4
	.L10333:
	mov A, B
	add SP, 4
	.loc 7 10213 0
	#       // pop EDI
	.loc 6 205 0
	# }
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10213 0
	#       // pop EDI
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10334
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_reg
	.L10334:
	mov A, B
	add SP, 2
	.loc 7 10215 0
	#       break;
	mov A, 95
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10335
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_1
	.L10335:
	mov A, B
	add SP, 1
	.loc 7 10216 0
	# 
	jmp .L1709
	.loc 7 10218 0
	#       emit_mov_imm(B, 0);
	.L1717:
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10336
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10336:
	mov A, B
	add SP, 2
	.loc 7 10220 0
	#       emit_int80();
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10337
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_mov_imm
	.L10337:
	mov A, B
	add SP, 2
	.loc 7 10221 0
	#       break;
	mov A, .L10338
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_int80
	.L10338:
	mov A, B
	.loc 7 10222 0
	# 
	jmp .L1709
	.loc 7 10224 0
	#       break;
	.L1718:
	jmp .L1709
	.loc 7 10227 0
	#       emit_setcc(inst, 0x94);
	.L1719:
	mov A, 148
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10339
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_setcc
	.L10339:
	mov A, B
	add SP, 2
	.loc 7 10229 0
	# 
	jmp .L1709
	.loc 7 10231 0
	#       emit_setcc(inst, 0x95);
	.L1720:
	mov A, 149
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10340
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_setcc
	.L10340:
	mov A, B
	add SP, 2
	.loc 7 10233 0
	# 
	jmp .L1709
	.loc 7 10235 0
	#       emit_setcc(inst, 0x9c);
	.L1721:
	mov A, 156
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10341
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_setcc
	.L10341:
	mov A, B
	add SP, 2
	.loc 7 10237 0
	# 
	jmp .L1709
	.loc 7 10239 0
	#       emit_setcc(inst, 0x9f);
	.L1722:
	mov A, 159
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10342
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_setcc
	.L10342:
	mov A, B
	add SP, 2
	.loc 7 10241 0
	# 
	jmp .L1709
	.loc 7 10243 0
	#       emit_setcc(inst, 0x9e);
	.L1723:
	mov A, 158
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10343
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_setcc
	.L10343:
	mov A, B
	add SP, 2
	.loc 7 10245 0
	# 
	jmp .L1709
	.loc 7 10247 0
	#       emit_setcc(inst, 0x9d);
	.L1724:
	mov A, 157
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10344
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_setcc
	.L10344:
	mov A, B
	add SP, 2
	.loc 7 10249 0
	# 
	jmp .L1709
	.loc 7 10251 0
	#       emit_jcc(inst, 0x75, pc2addr, rodata_addr);
	.L1725:
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10251 0
	#       emit_jcc(inst, 0x75, pc2addr, rodata_addr);
	mov A, 117
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10345
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jcc
	.L10345:
	mov A, B
	add SP, 4
	.loc 7 10253 0
	# 
	jmp .L1709
	.loc 7 10255 0
	#       emit_jcc(inst, 0x74, pc2addr, rodata_addr);
	.L1726:
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10255 0
	#       emit_jcc(inst, 0x74, pc2addr, rodata_addr);
	mov A, 116
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10346
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jcc
	.L10346:
	mov A, B
	add SP, 4
	.loc 7 10257 0
	# 
	jmp .L1709
	.loc 7 10259 0
	#       emit_jcc(inst, 0x7d, pc2addr, rodata_addr);
	.L1727:
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10259 0
	#       emit_jcc(inst, 0x7d, pc2addr, rodata_addr);
	mov A, 125
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10347
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jcc
	.L10347:
	mov A, B
	add SP, 4
	.loc 7 10261 0
	# 
	jmp .L1709
	.loc 7 10263 0
	#       emit_jcc(inst, 0x7e, pc2addr, rodata_addr);
	.L1728:
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10263 0
	#       emit_jcc(inst, 0x7e, pc2addr, rodata_addr);
	mov A, 126
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10348
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jcc
	.L10348:
	mov A, B
	add SP, 4
	.loc 7 10265 0
	# 
	jmp .L1709
	.loc 7 10267 0
	#       emit_jcc(inst, 0x7f, pc2addr, rodata_addr);
	.L1729:
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10267 0
	#       emit_jcc(inst, 0x7f, pc2addr, rodata_addr);
	mov A, 127
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10349
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jcc
	.L10349:
	mov A, B
	add SP, 4
	.loc 7 10269 0
	# 
	jmp .L1709
	.loc 7 10271 0
	#       emit_jcc(inst, 0x7c, pc2addr, rodata_addr);
	.L1730:
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10271 0
	#       emit_jcc(inst, 0x7c, pc2addr, rodata_addr);
	mov A, 124
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10350
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jcc
	.L10350:
	mov A, B
	add SP, 4
	.loc 7 10273 0
	# 
	jmp .L1709
	.loc 7 10275 0
	#       emit_jcc(inst, 0, pc2addr, rodata_addr);
	.L1731:
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10275 0
	#       emit_jcc(inst, 0, pc2addr, rodata_addr);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10124 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10351
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_jcc
	.L10351:
	mov A, B
	add SP, 4
	.loc 7 10277 0
	# 
	jmp .L1709
	.loc 7 10279 0
	#       error("oops");
	.L1732:
.data
	.L10352:
	.string "oops"
.text
	mov A, .L10352
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10353
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp error
	.L10353:
	mov A, B
	add SP, 1
	.L1709:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
target_x86:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 8
	.loc 7 10316 0
	#   }
	.loc 7 10285 0
	#   init_state_x86(module->data);
	mov A, .L10354
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reset
	.L10354:
	mov A, B
	.loc 7 10286 0
	# 
	.loc 7 10279 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10355
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_x86
	.L10355:
	mov A, B
	add SP, 1
	.loc 7 10288 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777215
	mov A, 0
	store A, B
	.loc 7 10290 0
	#   }
	.loc 7 10289 0
	#     pc_cnt++;
	mov A, 0
	mov B, SP
	.loc 7 10279 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 10290 0
	#   }
	.L1734:
	.loc 7 10289 0
	#     pc_cnt++;
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L10356, A, 0
	jmp .L10357
	.L10356:
	.loc 7 10290 0
	#   }
	jmp .L1736
	.L10357:
	.loc 7 10288 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777215
	store A, B
	load A, SP
	add SP, 1
	.loc 7 10290 0
	#   }
	.L1735:
	.loc 7 10289 0
	#     pc_cnt++;
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 10290 0
	#   }
	jmp .L1734
	.L1736:
	.loc 7 10293 0
	#   int prev_pc = -1;
	mov A, 0
	mov B, SP
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10288 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10358
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L10358:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777213
	store A, B
	.loc 7 10294 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 10300 0
	#   }
	.loc 7 10295 0
	#     if (prev_pc != inst->pc) {
	mov A, 0
	mov B, SP
	.loc 7 10279 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 10300 0
	#   }
	.L1737:
	.loc 7 10295 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	jeq .L10359, A, 0
	jmp .L10360
	.L10359:
	.loc 7 10300 0
	#   }
	jmp .L1739
	.L10360:
	.loc 7 10297 0
	#     }
	.loc 7 10296 0
	#       pc2addr[inst->pc] = emit_cnt();
	.loc 7 10294 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777212
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10296 0
	#       pc2addr[inst->pc] = emit_cnt();
	.loc 7 10295 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L10361, A, 0
	.loc 7 10297 0
	#     }
	mov A, .L10362
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cnt
	.L10362:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10293 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10297 0
	#     }
	.loc 7 10295 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.L10361:
	.loc 7 10299 0
	#     x86_emit_inst(inst, pc2addr, 0);
	.loc 7 10295 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777212
	store A, B
	.loc 7 10300 0
	#   }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10293 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10295 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10363
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp x86_emit_inst
	.L10363:
	mov A, B
	add SP, 3
	.loc 7 10300 0
	#   }
	.L1738:
	.loc 7 10295 0
	#     if (prev_pc != inst->pc) {
	mov B, BP
	add B, 16777211
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777211
	store A, B
	.loc 7 10300 0
	#   }
	jmp .L1737
	.L1739:
	.loc 7 10303 0
	# 
	mov A, 0
	mov B, SP
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10303 0
	# 
	mov A, .L10364
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cnt
	.L10364:
	mov A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777210
	store A, B
	.loc 7 10305 0
	# 
	mov A, .L10365
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_cnt
	.L10365:
	mov A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10288 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10305 0
	# 
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10366
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10366:
	mov A, B
	add SP, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10367
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_elf_header
	.L10367:
	mov A, B
	add SP, 2
	.loc 7 10307 0
	#   emit_start();
	mov A, .L10368
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_reset
	.L10368:
	mov A, B
	.loc 7 10308 0
	#   init_state_x86(module->data);
	mov A, .L10369
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_start
	.L10369:
	mov A, B
	.loc 7 10309 0
	# 
	.loc 7 10279 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10370
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp init_state_x86
	.L10370:
	mov A, B
	add SP, 1
	.loc 7 10312 0
	#   }
	.loc 7 10311 0
	#     x86_emit_inst(inst, pc2addr, rodata_addr);
	mov A, 0
	mov B, SP
	.loc 7 10279 0
	#       error("oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 10312 0
	#   }
	.L1740:
	.loc 7 10311 0
	#     x86_emit_inst(inst, pc2addr, rodata_addr);
	mov B, BP
	add B, 16777209
	load A, B
	jeq .L10371, A, 0
	jmp .L10372
	.L10371:
	.loc 7 10312 0
	#   }
	jmp .L1742
	.L10372:
	.loc 7 10303 0
	# 
	mov B, BP
	add B, 16777210
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10293 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10311 0
	#     x86_emit_inst(inst, pc2addr, rodata_addr);
	mov B, BP
	add B, 16777209
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10373
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp x86_emit_inst
	.L10373:
	mov A, B
	add SP, 3
	.loc 7 10312 0
	#   }
	.L1741:
	.loc 7 10311 0
	#     x86_emit_inst(inst, pc2addr, rodata_addr);
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 10312 0
	#   }
	jmp .L1740
	.L1742:
	.loc 7 10316 0
	#   }
	.loc 7 10315 0
	#     emit_le(ELF_TEXT_START + pc2addr[i] + ELF_HEADER_SIZE);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777208
	mov A, 0
	store A, B
	.loc 7 10316 0
	#   }
	.L1743:
	.loc 7 10315 0
	#     emit_le(ELF_TEXT_START + pc2addr[i] + ELF_HEADER_SIZE);
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10288 0
	#   for (Inst* inst = module->text; inst; inst = inst->next) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L10374, A, 0
	jmp .L10375
	.L10374:
	.loc 7 10316 0
	#   }
	jmp .L1745
	.L10375:
	.loc 6 205 0
	# }
	mov B, ELF_TEXT_START
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10316 0
	#   }
	.loc 7 10293 0
	#   int prev_pc = -1;
	mov B, BP
	add B, 16777213
	load A, B
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10315 0
	#     emit_le(ELF_TEXT_START + pc2addr[i] + ELF_HEADER_SIZE);
	mov B, BP
	add B, 16777208
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov B, ELF_HEADER_SIZE
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10376
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp emit_le
	.L10376:
	mov A, B
	add SP, 1
	.loc 7 10316 0
	#   }
	.L1744:
	.loc 7 10315 0
	#     emit_le(ELF_TEXT_START + pc2addr[i] + ELF_HEADER_SIZE);
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777208
	store A, B
	load A, SP
	add SP, 1
	.loc 7 10316 0
	#   }
	jmp .L1743
	.L1745:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
g_split_basic_block_by_mem:
	.long 0
	.text
ir_error:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10366 0
	# }
	.loc 7 10365 0
	#   exit(1);
	.loc 7 10316 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10365 0
	#   exit(1);
	.loc 7 10316 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10365 0
	#   exit(1);
	.loc 7 10316 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10365 0
	#   exit(1);
	.loc 7 10316 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10365 0
	#   exit(1);
.data
	.L10377:
	.string "%s:%d:%d: %s\n"
.text
	mov A, .L10377
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10378
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10378:
	mov A, B
	add SP, 6
	.loc 7 10366 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ir_getc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10377 0
	# }
	.loc 7 10370 0
	#   if (c == '\n') {
	mov A, 0
	mov B, SP
	.loc 7 10366 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10379
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fgetc
	.L10379:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10375 0
	#   }
	.loc 7 10371 0
	#     p->lineno++;
	.loc 7 10370 0
	#   if (c == '\n') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10371 0
	#     p->lineno++;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10380, A, 0
	.loc 7 10373 0
	#   } else {
	.loc 7 10372 0
	#     p->col = 0;
	.loc 7 10366 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.loc 7 10373 0
	#   } else {
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10366 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	jmp .L10381
	.L10380:
	.loc 7 10375 0
	#   }
	.loc 7 10366 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.L10381:
	.loc 7 10377 0
	# }
	.loc 7 10370 0
	#   if (c == '\n') {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
ir_ungetc:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10384 0
	# }
	.loc 7 10382 0
	#   }
	.loc 7 10381 0
	#     p->lineno--;
	.loc 7 10377 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10381 0
	#     p->lineno--;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10382, A, 0
	.loc 7 10382 0
	#   }
	.loc 7 10377 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.L10382:
	.loc 7 10384 0
	# }
	.loc 7 10377 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10383
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ungetc
	.L10383:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
peek:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10390 0
	# }
	.loc 7 10388 0
	#   ungetc(c, p->fp);
	mov A, 0
	mov B, SP
	.loc 7 10384 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10384
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fgetc
	.L10384:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10389 0
	#   return c;
	.loc 7 10384 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10388 0
	#   ungetc(c, p->fp);
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10385
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ungetc
	.L10385:
	mov A, B
	add SP, 2
	.loc 7 10390 0
	# }
	.loc 7 10388 0
	#   ungetc(c, p->fp);
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_until_ret:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10400 0
	# }
	.loc 7 10394 0
	#   for (;;) {
	.loc 7 10397 0
	#       break;
	.L1746:
	.loc 7 10396 0
	#     if (c == '\n' || c == EOF)
	.loc 7 10390 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10386
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10386:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10397 0
	#       break;
	.loc 7 10394 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10397 0
	#       break;
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L10387, A, 0
	.loc 7 10394 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10397 0
	#       break;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L10387:
	mov A, B
	jeq .L10388, A, 0
	jmp .L1748
	.L10388:
	.L1747:
	jmp .L1746
	.L1748:
	.loc 7 10400 0
	# }
	.loc 7 10394 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10390 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10389
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L10389:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
skip_ws:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10410 0
	# }
	.loc 7 10404 0
	#   for (;;) {
	.loc 7 10407 0
	#       break;
	.L1749:
	.loc 7 10406 0
	#     if (!isspace(c))
	.loc 7 10400 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10390
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10390:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10407 0
	#       break;
	.loc 7 10404 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10391
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isspace
	.L10391:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L10392, A, 0
	.loc 7 10407 0
	#       break;
	jmp .L1751
	.L10392:
	.L1750:
	jmp .L1749
	.L1751:
	.loc 7 10410 0
	# }
	.loc 7 10404 0
	#   for (;;) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10400 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10393
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L10393:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_while_ident:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10423 0
	# }
	.loc 7 10421 0
	#   }
	.L1752:
	.loc 7 10414 0
	#     int c = ir_getc(p);
	.loc 7 10410 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	sub A, 1
	mov B, BP
	add B, 4
	store A, B
	load A, SP
	add SP, 1
	jeq .L10394, A, 0
	.loc 7 10421 0
	#   }
	.loc 7 10415 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov A, 0
	mov B, SP
	.loc 7 10410 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10395
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10395:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10419 0
	#     }
	.loc 7 10416 0
	#       ir_ungetc(p, c);
	.loc 7 10415 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10398
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalnum
	.L10398:
	mov A, B
	add SP, 1
	eq A, 0
	mov B, 0
	jeq .L10397, A, 0
	.loc 7 10416 0
	#       ir_ungetc(p, c);
	.loc 7 10415 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10416 0
	#       ir_ungetc(p, c);
	mov A, 95
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L10397:
	mov A, B
	mov B, 0
	jeq .L10396, A, 0
	.loc 7 10415 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10416 0
	#       ir_ungetc(p, c);
	mov A, 46
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	mov B, A
	ne B, 0
	.L10396:
	mov A, B
	jeq .L10399, A, 0
	.loc 7 10419 0
	#     }
	.loc 7 10417 0
	#       *buf = 0;
	.loc 7 10415 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10410 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10400
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L10400:
	mov A, B
	add SP, 2
	.loc 7 10418 0
	#       return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10410 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10419 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L10399:
	.loc 7 10421 0
	#   }
	.loc 7 10415 0
	#     if (!isalnum(c) && c != '_' && c != '.') {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10421 0
	#   }
	.loc 7 10410 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 3
	store A, B
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	jmp .L10401
	.L10394:
	.loc 7 10421 0
	#   }
	jmp .L1753
	.L10401:
	jmp .L1752
	.L1753:
	.loc 7 10423 0
	# }
.data
	.L10402:
	.string "too long ident"
.text
	mov A, .L10402
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10410 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10403
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10403:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
read_int:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 10441 0
	# }
	.loc 9 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10428 0
	#   if (c == '-') {
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777214
	mov A, 0
	store A, B
	.loc 7 10432 0
	#       ir_error(p, "digit expected");
	.loc 7 10429 0
	#     is_minus = true;
	.loc 7 10423 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10429 0
	#     is_minus = true;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10404, A, 0
	.loc 7 10432 0
	#       ir_error(p, "digit expected");
	.loc 7 10430 0
	#     c = ir_getc(p);
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10431 0
	#     if (!isdigit(c))
	.loc 7 10423 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10405
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10405:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 10432 0
	#       ir_error(p, "digit expected");
	.loc 7 10423 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10406
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L10406:
	mov A, B
	add SP, 1
	eq A, 0
	jeq .L10407, A, 0
	.loc 7 10432 0
	#       ir_error(p, "digit expected");
.data
	.L10408:
	.string "digit expected"
.text
	mov A, .L10408
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10423 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10409
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10409:
	mov A, B
	add SP, 2
	.L10407:
	.L10404:
	.loc 7 10438 0
	#   }
	.L1754:
	.loc 7 10435 0
	#     r *= 10;
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10423 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L10410, A, 0
	.loc 7 10435 0
	#     r *= 10;
	.loc 7 10423 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10435 0
	#     r *= 10;
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L10410:
	mov A, B
	jeq .L10411, A, 0
	.loc 7 10438 0
	#   }
	.loc 7 10436 0
	#     r += c - '0';
	.loc 7 10428 0
	#   if (c == '-') {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10436 0
	#     r += c - '0';
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10412
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp __builtin_mul
	.L10412:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 10437 0
	#     c = ir_getc(p);
	.loc 7 10428 0
	#   if (c == '-') {
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10437 0
	#     c = ir_getc(p);
	.loc 7 10423 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10437 0
	#     c = ir_getc(p);
	mov A, 48
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 10438 0
	#   }
	.loc 7 10423 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10413
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10413:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	jmp .L10414
	.L10411:
	.loc 7 10438 0
	#   }
	jmp .L1755
	.L10414:
	jmp .L1754
	.L1755:
	.loc 7 10440 0
	#   return is_minus ? -r : r;
	.loc 7 10423 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10415
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L10415:
	mov A, B
	add SP, 2
	.loc 7 10441 0
	# }
	.loc 9 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L10416, A, 0
	.loc 7 10441 0
	# }
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10428 0
	#   if (c == '-') {
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	jmp .L10417
	.L10416:
	mov B, BP
	add B, 16777214
	load A, B
	.L10417:
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
add_data:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10451 0
	# }
	.loc 7 10445 0
	#   n->next = 0;
	mov A, 0
	mov B, SP
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10418
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L10418:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10446 0
	#   n->v = p->subsection;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10445 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10447 0
	#   n->lineno = p->lineno;
	.loc 7 10441 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10445 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10448 0
	#   p->data->next = n;
	.loc 7 10441 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10445 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10449 0
	#   p->data = n;
	.loc 7 10445 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10449 0
	#   p->data = n;
	.loc 7 10441 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10450 0
	#   return n;
	.loc 7 10445 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10441 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10451 0
	# }
	.loc 7 10445 0
	#   n->next = 0;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
add_imm_data:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10457 0
	# }
	.loc 7 10455 0
	#   n->val.type = IMM;
	mov A, 0
	mov B, SP
	.loc 7 10451 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10419
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_data
	.L10419:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10456 0
	#   n->val.imm = v;
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10455 0
	#   n->val.type = IMM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10457 0
	# }
	.loc 7 10451 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10455 0
	#   n->val.type = IMM;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
serialize_data:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 11
	.loc 7 10495 0
	# }
	.loc 9 4 0
	# #define true 1
	mov A, 0
	mov B, SP
	mov A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10462 0
	#   DataPrivate* serialized = &serialized_root;
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 10463 0
	#   intptr_t mp = 0;
	mov A, 0
	mov B, SP
	mov A, BP
	add A, -6
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 10464 0
	#   for (int subsection = 0; !done; subsection++) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 10485 0
	#     }
	.loc 7 10465 0
	#     done = true;
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777207
	mov A, 0
	store A, B
	.loc 7 10485 0
	#     }
	.L1756:
	.loc 7 10465 0
	#     done = true;
	.loc 9 4 0
	# #define true 1
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L10420, A, 0
	jmp .L10421
	.L10420:
	.loc 7 10485 0
	#     }
	jmp .L1758
	.L10421:
	.loc 7 10466 0
	#     for (DataPrivate* data = data_root; data->next;) {
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10485 0
	#     }
	.loc 7 10467 0
	#       DataPrivate* prev = data;
	mov A, 0
	mov B, SP
	.loc 7 10457 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 10485 0
	#     }
	.L1759:
	.loc 7 10467 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	add B, 1
	load A, B
	jeq .L10422, A, 0
	jmp .L10423
	.L10422:
	.loc 7 10485 0
	#     }
	jmp .L1761
	.L10423:
	.loc 7 10468 0
	#       data = prev->next;
	mov A, 0
	mov B, SP
	.loc 7 10467 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, BP
	add B, 16777205
	store A, B
	.loc 7 10469 0
	#       if (data->v != subsection) {
	.loc 7 10468 0
	#       data = prev->next;
	mov B, BP
	add B, 16777205
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 10471 0
	#       }
	.loc 7 10470 0
	#         continue;
	.loc 7 10467 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10465 0
	#     done = true;
	mov B, BP
	add B, 16777207
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L10424, A, 0
	.loc 7 10471 0
	#       }
	jmp .L1760
	.L10424:
	.loc 7 10473 0
	# 
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10475 0
	# 
	.loc 7 10467 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10468 0
	#       data = prev->next;
	mov B, BP
	add B, 16777205
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10483 0
	#       }
	.loc 7 10477 0
	#         p->symtab = table_add(p->symtab, data->val.tmp, (void*)mp);
	.loc 7 10467 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10477 0
	#         p->symtab = table_add(p->symtab, data->val.tmp, (void*)mp);
	.loc 7 10316 0
	#   }
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10425, A, 0
	.loc 7 10478 0
	#       } else {
	.loc 7 10464 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10478 0
	#       } else {
	.loc 7 10467 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10478 0
	#       } else {
	.loc 7 10457 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10426
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_add
	.L10426:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	jmp .L10427
	.L10425:
	.loc 7 10483 0
	#       }
	.loc 7 10480 0
	#         serialized = data;
	.loc 7 10467 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10463 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10481 0
	#         serialized->next = 0;
	.loc 7 10467 0
	#       DataPrivate* prev = data;
	mov B, BP
	add B, 16777206
	load A, B
	mov B, BP
	add B, 16777209
	store A, B
	.loc 7 10482 0
	#         mp++;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10463 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10483 0
	#       }
	.loc 7 10464 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777208
	store A, B
	load A, SP
	add SP, 1
	.L10427:
	.loc 7 10485 0
	#     }
	.loc 7 10468 0
	#       data = prev->next;
	mov B, BP
	add B, 16777205
	load A, B
	mov B, BP
	add B, 16777206
	store A, B
	.loc 7 10485 0
	#     }
	.L1760:
	jmp .L1759
	.L1761:
	.L1757:
	.loc 7 10465 0
	#     done = true;
	mov B, BP
	add B, 16777207
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777207
	store A, B
	load A, SP
	add SP, 1
	.loc 7 10485 0
	#     }
	jmp .L1756
	.L1758:
	.loc 7 10489 0
	#   serialized->next = malloc(sizeof(DataPrivate));
	.loc 7 10464 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10489 0
	#   serialized->next = malloc(sizeof(DataPrivate));
.data
	.L10428:
	.string "_edata"
.text
	mov A, .L10428
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10457 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10429
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_add
	.L10429:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10490 0
	#   serialized->next->v = mp + 1;
	mov A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10430
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L10430:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10463 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10491 0
	#   serialized->next->next = 0;
	.loc 7 10464 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10491 0
	#   serialized->next->next = 0;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10463 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10492 0
	#   serialized->next->val.type = IMM;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10463 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10493 0
	#   serialized->next->val.imm = mp + 1;
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10493 0
	#   serialized->next->val.imm = mp + 1;
	.loc 7 10463 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10494 0
	#   data_root->next = serialized_root.next;
	.loc 7 10464 0
	#   for (int subsection = 0; !done; subsection++) {
	mov B, BP
	add B, 16777208
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10494 0
	#   data_root->next = serialized_root.next;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10463 0
	#   intptr_t mp = 0;
	mov B, BP
	add B, 16777209
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10457 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
get_op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10558 0
	# }
	.loc 7 10499 0
	#     return OP_UNSET;
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10431
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L10431:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10499 0
	#     return OP_UNSET;
	mov A, 58
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10432, A, 0
	.loc 6 205 0
	# }
	mov A, 16777214
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L10432:
	.loc 7 10556 0
	#   }
	.loc 7 10501 0
	#     return MOV;
.data
	.L10433:
	.string "mov"
.text
	mov A, .L10433
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10434
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10434:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10435, A, 0
	.loc 7 10502 0
	#   } else if (!strcmp(buf, "add")) {
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10436
	.L10435:
	.loc 7 10556 0
	#   }
	.loc 7 10502 0
	#   } else if (!strcmp(buf, "add")) {
.data
	.L10437:
	.string "add"
.text
	mov A, .L10437
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10438
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10438:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10439, A, 0
	.loc 7 10504 0
	#   } else if (!strcmp(buf, "sub")) {
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10440
	.L10439:
	.loc 7 10556 0
	#   }
	.loc 7 10504 0
	#   } else if (!strcmp(buf, "sub")) {
.data
	.L10441:
	.string "sub"
.text
	mov A, .L10441
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10442
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10442:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10443, A, 0
	.loc 7 10506 0
	#   } else if (!strcmp(buf, "load")) {
	.loc 6 205 0
	# }
	mov A, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10444
	.L10443:
	.loc 7 10556 0
	#   }
	.loc 7 10506 0
	#   } else if (!strcmp(buf, "load")) {
.data
	.L10445:
	.string "load"
.text
	mov A, .L10445
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10446
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10446:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10447, A, 0
	.loc 7 10508 0
	#   } else if (!strcmp(buf, "store")) {
	.loc 6 205 0
	# }
	mov A, 3
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10448
	.L10447:
	.loc 7 10556 0
	#   }
	.loc 7 10508 0
	#   } else if (!strcmp(buf, "store")) {
.data
	.L10449:
	.string "store"
.text
	mov A, .L10449
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10450
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10450:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10451, A, 0
	.loc 7 10510 0
	#   } else if (!strcmp(buf, "putc")) {
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10452
	.L10451:
	.loc 7 10556 0
	#   }
	.loc 7 10510 0
	#   } else if (!strcmp(buf, "putc")) {
.data
	.L10453:
	.string "putc"
.text
	mov A, .L10453
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10454
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10454:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10455, A, 0
	.loc 7 10512 0
	#   } else if (!strcmp(buf, "getc")) {
	.loc 6 205 0
	# }
	mov A, 5
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10456
	.L10455:
	.loc 7 10556 0
	#   }
	.loc 7 10512 0
	#   } else if (!strcmp(buf, "getc")) {
.data
	.L10457:
	.string "getc"
.text
	mov A, .L10457
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10458
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10458:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10459, A, 0
	.loc 7 10514 0
	#   } else if (!strcmp(buf, "exit")) {
	.loc 6 205 0
	# }
	mov A, 6
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10460
	.L10459:
	.loc 7 10556 0
	#   }
	.loc 7 10514 0
	#   } else if (!strcmp(buf, "exit")) {
.data
	.L10461:
	.string "exit"
.text
	mov A, .L10461
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10462
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10462:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10463, A, 0
	.loc 7 10516 0
	#   } else if (!strcmp(buf, "dump")) {
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10464
	.L10463:
	.loc 7 10556 0
	#   }
	.loc 7 10516 0
	#   } else if (!strcmp(buf, "dump")) {
.data
	.L10465:
	.string "dump"
.text
	mov A, .L10465
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10466
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10466:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10467, A, 0
	.loc 7 10518 0
	#   } else if (!strcmp(buf, "jeq")) {
	.loc 6 205 0
	# }
	mov A, 22
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10468
	.L10467:
	.loc 7 10556 0
	#   }
	.loc 7 10518 0
	#   } else if (!strcmp(buf, "jeq")) {
.data
	.L10469:
	.string "jeq"
.text
	mov A, .L10469
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10470
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10470:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10471, A, 0
	.loc 7 10520 0
	#   } else if (!strcmp(buf, "jne")) {
	.loc 6 205 0
	# }
	mov A, 8
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10472
	.L10471:
	.loc 7 10556 0
	#   }
	.loc 7 10520 0
	#   } else if (!strcmp(buf, "jne")) {
.data
	.L10473:
	.string "jne"
.text
	mov A, .L10473
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10474
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10474:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10475, A, 0
	.loc 7 10522 0
	#   } else if (!strcmp(buf, "jlt")) {
	.loc 6 205 0
	# }
	mov A, 9
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10476
	.L10475:
	.loc 7 10556 0
	#   }
	.loc 7 10522 0
	#   } else if (!strcmp(buf, "jlt")) {
.data
	.L10477:
	.string "jlt"
.text
	mov A, .L10477
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10478
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10478:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10479, A, 0
	.loc 7 10524 0
	#   } else if (!strcmp(buf, "jgt")) {
	.loc 6 205 0
	# }
	mov A, 10
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10480
	.L10479:
	.loc 7 10556 0
	#   }
	.loc 7 10524 0
	#   } else if (!strcmp(buf, "jgt")) {
.data
	.L10481:
	.string "jgt"
.text
	mov A, .L10481
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10482
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10482:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10483, A, 0
	.loc 7 10526 0
	#   } else if (!strcmp(buf, "jle")) {
	.loc 6 205 0
	# }
	mov A, 11
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10484
	.L10483:
	.loc 7 10556 0
	#   }
	.loc 7 10526 0
	#   } else if (!strcmp(buf, "jle")) {
.data
	.L10485:
	.string "jle"
.text
	mov A, .L10485
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10486
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10486:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10487, A, 0
	.loc 7 10528 0
	#   } else if (!strcmp(buf, "jge")) {
	.loc 6 205 0
	# }
	mov A, 12
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10488
	.L10487:
	.loc 7 10556 0
	#   }
	.loc 7 10528 0
	#   } else if (!strcmp(buf, "jge")) {
.data
	.L10489:
	.string "jge"
.text
	mov A, .L10489
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10490
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10490:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10491, A, 0
	.loc 7 10530 0
	#   } else if (!strcmp(buf, "jmp")) {
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10492
	.L10491:
	.loc 7 10556 0
	#   }
	.loc 7 10530 0
	#   } else if (!strcmp(buf, "jmp")) {
.data
	.L10493:
	.string "jmp"
.text
	mov A, .L10493
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10494
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10494:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10495, A, 0
	.loc 7 10532 0
	#   } else if (!strcmp(buf, "eq")) {
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10496
	.L10495:
	.loc 7 10556 0
	#   }
	.loc 7 10532 0
	#   } else if (!strcmp(buf, "eq")) {
.data
	.L10497:
	.string "eq"
.text
	mov A, .L10497
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10498
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10498:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10499, A, 0
	.loc 7 10534 0
	#   } else if (!strcmp(buf, "ne")) {
	.loc 6 205 0
	# }
	mov A, 16
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10500
	.L10499:
	.loc 7 10556 0
	#   }
	.loc 7 10534 0
	#   } else if (!strcmp(buf, "ne")) {
.data
	.L10501:
	.string "ne"
.text
	mov A, .L10501
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10502
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10502:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10503, A, 0
	.loc 7 10536 0
	#   } else if (!strcmp(buf, "lt")) {
	.loc 6 205 0
	# }
	mov A, 17
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10504
	.L10503:
	.loc 7 10556 0
	#   }
	.loc 7 10536 0
	#   } else if (!strcmp(buf, "lt")) {
.data
	.L10505:
	.string "lt"
.text
	mov A, .L10505
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10506
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10506:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10507, A, 0
	.loc 7 10538 0
	#   } else if (!strcmp(buf, "gt")) {
	.loc 6 205 0
	# }
	mov A, 18
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10508
	.L10507:
	.loc 7 10556 0
	#   }
	.loc 7 10538 0
	#   } else if (!strcmp(buf, "gt")) {
.data
	.L10509:
	.string "gt"
.text
	mov A, .L10509
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10510
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10510:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10511, A, 0
	.loc 7 10540 0
	#   } else if (!strcmp(buf, "le")) {
	.loc 6 205 0
	# }
	mov A, 19
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10512
	.L10511:
	.loc 7 10556 0
	#   }
	.loc 7 10540 0
	#   } else if (!strcmp(buf, "le")) {
.data
	.L10513:
	.string "le"
.text
	mov A, .L10513
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10514
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10514:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10515, A, 0
	.loc 7 10542 0
	#   } else if (!strcmp(buf, "ge")) {
	.loc 6 205 0
	# }
	mov A, 20
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10516
	.L10515:
	.loc 7 10556 0
	#   }
	.loc 7 10542 0
	#   } else if (!strcmp(buf, "ge")) {
.data
	.L10517:
	.string "ge"
.text
	mov A, .L10517
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10518
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10518:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10519, A, 0
	.loc 7 10544 0
	#   } else if (!strcmp(buf, ".text")) {
	.loc 6 205 0
	# }
	mov A, 21
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10520
	.L10519:
	.loc 7 10556 0
	#   }
	.loc 7 10544 0
	#   } else if (!strcmp(buf, ".text")) {
.data
	.L10521:
	.string ".text"
.text
	mov A, .L10521
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10522
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10522:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10523, A, 0
	.loc 7 10546 0
	#   } else if (!strcmp(buf, ".data")) {
	.loc 7 10316 0
	#   }
	mov A, 25
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10524
	.L10523:
	.loc 7 10556 0
	#   }
	.loc 7 10546 0
	#   } else if (!strcmp(buf, ".data")) {
.data
	.L10525:
	.string ".data"
.text
	mov A, .L10525
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10526
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10526:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10527, A, 0
	.loc 7 10548 0
	#   } else if (!strcmp(buf, ".long")) {
	.loc 7 10316 0
	#   }
	mov A, 24
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10528
	.L10527:
	.loc 7 10556 0
	#   }
	.loc 7 10548 0
	#   } else if (!strcmp(buf, ".long")) {
.data
	.L10529:
	.string ".long"
.text
	mov A, .L10529
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10530
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10530:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10531, A, 0
	.loc 7 10550 0
	#   } else if (!strcmp(buf, ".string")) {
	.loc 7 10316 0
	#   }
	mov A, 26
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10532
	.L10531:
	.loc 7 10556 0
	#   }
	.loc 7 10550 0
	#   } else if (!strcmp(buf, ".string")) {
.data
	.L10533:
	.string ".string"
.text
	mov A, .L10533
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10534
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10534:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10535, A, 0
	.loc 7 10552 0
	#   } else if (!strcmp(buf, ".file")) {
	.loc 7 10316 0
	#   }
	mov A, 27
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10536
	.L10535:
	.loc 7 10556 0
	#   }
	.loc 7 10552 0
	#   } else if (!strcmp(buf, ".file")) {
.data
	.L10537:
	.string ".file"
.text
	mov A, .L10537
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10538
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10538:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10539, A, 0
	.loc 7 10554 0
	#   } else if (!strcmp(buf, ".loc")) {
	.loc 7 10316 0
	#   }
	mov A, 28
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10540
	.L10539:
	.loc 7 10556 0
	#   }
	.loc 7 10554 0
	#   } else if (!strcmp(buf, ".loc")) {
.data
	.L10541:
	.string ".loc"
.text
	mov A, .L10541
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10495 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10542
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10542:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10543, A, 0
	.loc 7 10556 0
	#   }
	.loc 7 10316 0
	#   }
	mov A, 29
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L10543:
	.L10540:
	.L10536:
	.L10532:
	.L10528:
	.L10524:
	.L10520:
	.L10516:
	.L10512:
	.L10508:
	.L10504:
	.L10500:
	.L10496:
	.L10492:
	.L10488:
	.L10484:
	.L10480:
	.L10476:
	.L10472:
	.L10468:
	.L10464:
	.L10460:
	.L10456:
	.L10452:
	.L10448:
	.L10444:
	.L10440:
	.L10436:
	.loc 7 10558 0
	# }
	.loc 6 205 0
	# }
	mov A, 16777214
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parse_line:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 82
	.loc 7 10775 0
	#       ir_error(p, "oops");
	.loc 7 10562 0
	#   buf[0] = c;
	.loc 7 10563 0
	#   read_while_ident(p, buf + 1, 62);
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10563 0
	#   read_while_ident(p, buf + 1, 62);
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10563 0
	#   read_while_ident(p, buf + 1, 62);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10564 0
	#   Op op = get_op(p, buf);
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10564 0
	#   Op op = get_op(p, buf);
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10544
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_while_ident
	.L10544:
	mov A, B
	add SP, 3
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov A, 0
	mov B, SP
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10545
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp get_op
	.L10545:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777151
	store A, B
	.loc 7 10641 0
	#   }
	.loc 7 10566 0
	#     p->in_text = 1;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10566 0
	#     p->in_text = 1;
	.loc 7 10316 0
	#   }
	mov A, 25
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10546, A, 0
	.loc 7 10568 0
	#   } else if (op == (Op)STRING) {
	.loc 7 10567 0
	#     return;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10568 0
	#   } else if (op == (Op)STRING) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10547
	.L10546:
	.loc 7 10641 0
	#   }
	.loc 7 10568 0
	#   } else if (op == (Op)STRING) {
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10568 0
	#   } else if (op == (Op)STRING) {
	.loc 7 10316 0
	#   }
	mov A, 27
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10548, A, 0
	.loc 7 10617 0
	#   } else if (op == (Op)FILENAME) {
	.loc 7 10570 0
	#       ir_error(p, "in text");
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L10549, A, 0
	.loc 7 10570 0
	#       ir_error(p, "in text");
.data
	.L10550:
	.string "in text"
.text
	mov A, .L10550
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10551
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10551:
	mov A, B
	add SP, 2
	.L10549:
	.loc 7 10572 0
	#     if (ir_getc(p) != '"')
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10552
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L10552:
	mov A, B
	add SP, 1
	.loc 7 10573 0
	#       ir_error(p, "expected open '\"'");
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10553
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10553:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10573 0
	#       ir_error(p, "expected open '\"'");
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L10554, A, 0
.data
	.L10555:
	.string "expected open '\"'"
.text
	mov A, .L10555
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10556
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10556:
	mov A, B
	add SP, 2
	.L10554:
	.loc 7 10576 0
	#     while (c != '"') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10557
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10557:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 10614 0
	#     }
	.L1762:
	.loc 7 10577 0
	#       if (c == '\\') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10577 0
	#       if (c == '\\') {
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L10558, A, 0
	.loc 7 10614 0
	#     }
	.loc 7 10612 0
	#       }
	.loc 7 10578 0
	#         c = ir_getc(p);
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10578 0
	#         c = ir_getc(p);
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10559, A, 0
	.loc 7 10610 0
	#       } else {
	.loc 7 10579 0
	#         if (c == 'n') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10560
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10560:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 10608 0
	#         }
	.loc 7 10580 0
	#           c = '\n';
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10580 0
	#           c = '\n';
	mov A, 110
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10561, A, 0
	.loc 7 10581 0
	#         } else if (c == 't') {
	mov A, 10
	mov B, BP
	add B, 3
	store A, B
	jmp .L10562
	.L10561:
	.loc 7 10608 0
	#         }
	.loc 7 10581 0
	#         } else if (c == 't') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10581 0
	#         } else if (c == 't') {
	mov A, 116
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10563, A, 0
	.loc 7 10583 0
	#         } else if (c == 'b') {
	mov A, 9
	mov B, BP
	add B, 3
	store A, B
	jmp .L10564
	.L10563:
	.loc 7 10608 0
	#         }
	.loc 7 10583 0
	#         } else if (c == 'b') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10583 0
	#         } else if (c == 'b') {
	mov A, 98
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10565, A, 0
	.loc 7 10585 0
	#         } else if (c == 'f') {
	mov A, 8
	mov B, BP
	add B, 3
	store A, B
	jmp .L10566
	.L10565:
	.loc 7 10608 0
	#         }
	.loc 7 10585 0
	#         } else if (c == 'f') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10585 0
	#         } else if (c == 'f') {
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10567, A, 0
	.loc 7 10587 0
	#         } else if (c == 'r') {
	mov A, 12
	mov B, BP
	add B, 3
	store A, B
	jmp .L10568
	.L10567:
	.loc 7 10608 0
	#         }
	.loc 7 10587 0
	#         } else if (c == 'r') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10587 0
	#         } else if (c == 'r') {
	mov A, 114
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10569, A, 0
	.loc 7 10589 0
	#         } else if (c == '\"') {
	mov A, 13
	mov B, BP
	add B, 3
	store A, B
	jmp .L10570
	.L10569:
	.loc 7 10608 0
	#         }
	.loc 7 10589 0
	#         } else if (c == '\"') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10589 0
	#         } else if (c == '\"') {
	mov A, 34
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10571, A, 0
	.loc 7 10591 0
	#         } else if (c == '\\') {
	mov A, 34
	mov B, BP
	add B, 3
	store A, B
	jmp .L10572
	.L10571:
	.loc 7 10608 0
	#         }
	.loc 7 10591 0
	#         } else if (c == '\\') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10591 0
	#         } else if (c == '\\') {
	mov A, 92
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10573, A, 0
	.loc 7 10593 0
	#         } else if (c == 'x') {
	mov A, 92
	mov B, BP
	add B, 3
	store A, B
	jmp .L10574
	.L10573:
	.loc 7 10608 0
	#         }
	.loc 7 10593 0
	#         } else if (c == 'x') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10593 0
	#         } else if (c == 'x') {
	mov A, 120
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10575, A, 0
	.loc 7 10606 0
	#         } else {
	.loc 7 10595 0
	#           b[0] = ir_getc(p);
	.loc 7 10596 0
	#           c = ir_getc(p);
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10576
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10576:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10596 0
	#           c = ir_getc(p);
	.loc 7 10595 0
	#           b[0] = ir_getc(p);
	mov A, BP
	add A, 16777148
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10596 0
	#           c = ir_getc(p);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10597 0
	#           if (!((c >= '0' && c <= '9') ||
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10577
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10577:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 10602 0
	#           }
	.loc 7 10598 0
	#                 (c >= 'a' && c <= 'f') ||
	mov A, 48
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L10580, A, 0
	.loc 7 10598 0
	#                 (c >= 'a' && c <= 'f') ||
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10598 0
	#                 (c >= 'a' && c <= 'f') ||
	mov A, 57
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L10580:
	mov A, B
	mov B, 1
	jne .L10579, A, 0
	mov A, 97
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L10581, A, 0
	.loc 7 10598 0
	#                 (c >= 'a' && c <= 'f') ||
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10598 0
	#                 (c >= 'a' && c <= 'f') ||
	mov A, 102
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L10581:
	mov A, B
	mov B, A
	ne B, 0
	.L10579:
	mov A, B
	mov B, 1
	jne .L10578, A, 0
	mov A, 65
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, 0
	jeq .L10582, A, 0
	.loc 7 10598 0
	#                 (c >= 'a' && c <= 'f') ||
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10598 0
	#                 (c >= 'a' && c <= 'f') ||
	mov A, 70
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	mov B, A
	ne B, 0
	.L10582:
	mov A, B
	mov B, A
	ne B, 0
	.L10578:
	mov A, B
	eq A, 0
	jeq .L10583, A, 0
	.loc 7 10602 0
	#           }
	.loc 7 10601 0
	#             c = 0;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10584
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_ungetc
	.L10584:
	mov A, B
	add SP, 2
	.loc 7 10602 0
	#           }
	mov A, 0
	mov B, BP
	add B, 3
	store A, B
	.L10583:
	.loc 7 10604 0
	#           b[2] = 0;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10604 0
	#           b[2] = 0;
	.loc 7 10595 0
	#           b[0] = ir_getc(p);
	mov A, BP
	add A, 16777148
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10604 0
	#           b[2] = 0;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10605 0
	#           c = strtoul(b, NULL, 16);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10595 0
	#           b[0] = ir_getc(p);
	mov A, BP
	add A, 16777148
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10605 0
	#           c = strtoul(b, NULL, 16);
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10606 0
	#         } else {
	mov A, 16
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10595 0
	#           b[0] = ir_getc(p);
	mov A, BP
	add A, 16777148
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10585
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strtoul
	.L10585:
	mov A, B
	add SP, 3
	mov B, BP
	add B, 3
	store A, B
	jmp .L10586
	.L10575:
	.loc 7 10608 0
	#         }
.data
	.L10587:
	.string "unknown escape"
.text
	mov A, .L10587
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10588
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10588:
	mov A, B
	add SP, 2
	.L10586:
	.L10574:
	.L10572:
	.L10570:
	.L10568:
	.L10566:
	.L10564:
	.L10562:
	.loc 7 10610 0
	#       } else {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10589
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_imm_data
	.L10589:
	mov A, B
	add SP, 2
	jmp .L10590
	.L10559:
	.loc 7 10612 0
	#       }
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10591
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_imm_data
	.L10591:
	mov A, B
	add SP, 2
	.L10590:
	.loc 7 10614 0
	#     }
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10592
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10592:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	jmp .L10593
	.L10558:
	.loc 7 10614 0
	#     }
	jmp .L1763
	.L10593:
	jmp .L1762
	.L1763:
	.loc 7 10616 0
	#     return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10594
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_imm_data
	.L10594:
	mov A, B
	add SP, 2
	.loc 7 10617 0
	#   } else if (op == (Op)FILENAME) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10595
	.L10548:
	.loc 7 10641 0
	#   }
	.loc 7 10617 0
	#   } else if (op == (Op)FILENAME) {
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10617 0
	#   } else if (op == (Op)FILENAME) {
	.loc 7 10316 0
	#   }
	mov A, 28
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10596, A, 0
	.loc 7 10620 0
	#   } else if (op == (Op)LOC) {
	.loc 7 10619 0
	#     return;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10597
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_until_ret
	.L10597:
	mov A, B
	add SP, 1
	.loc 7 10620 0
	#   } else if (op == (Op)LOC) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10598
	.L10596:
	.loc 7 10641 0
	#   }
	.loc 7 10620 0
	#   } else if (op == (Op)LOC) {
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10620 0
	#   } else if (op == (Op)LOC) {
	.loc 7 10316 0
	#   }
	mov A, 29
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10599, A, 0
	.loc 7 10623 0
	#   } else if (op == OP_UNSET) {
	.loc 7 10622 0
	#     return;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10600
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_until_ret
	.L10600:
	mov A, B
	add SP, 1
	.loc 7 10623 0
	#   } else if (op == OP_UNSET) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10601
	.L10599:
	.loc 7 10641 0
	#   }
	.loc 7 10623 0
	#   } else if (op == OP_UNSET) {
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 16777214
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10602, A, 0
	.loc 7 10641 0
	#   }
	.loc 7 10625 0
	#     if (c == ':') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10603
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10603:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 10639 0
	#     }
	.loc 7 10626 0
	#       intptr_t value = 0;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10626 0
	#       intptr_t value = 0;
	mov A, 58
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10604, A, 0
	.loc 7 10639 0
	#     }
	.loc 7 10627 0
	#       if (p->in_text) {
	mov A, 0
	mov B, SP
	mov A, 0
	mov B, BP
	add B, 16777147
	store A, B
	.loc 7 10637 0
	#       }
	.loc 7 10628 0
	#         if (!p->prev_boundary)
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 5
	load A, B
	jeq .L10605, A, 0
	.loc 7 10633 0
	#       } else {
	.loc 7 10629 0
	#           p->pc++;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 10
	load A, B
	eq A, 0
	jeq .L10606, A, 0
	.loc 7 10629 0
	#           p->pc++;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.L10606:
	.loc 7 10631 0
	#         p->prev_boundary = true;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov B, BP
	add B, 16777147
	store A, B
	.loc 7 10632 0
	#         p->symtab = table_add(p->symtab, strdup(buf), (void*)value);
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10633 0
	#       } else {
	.loc 7 10627 0
	#       if (p->in_text) {
	mov B, BP
	add B, 16777147
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10633 0
	#       } else {
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10607
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strdup
	.L10607:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10633 0
	#       } else {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10608
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_add
	.L10608:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	jmp .L10609
	.L10605:
	.loc 7 10637 0
	#       }
	.loc 7 10635 0
	#         d->val.type = LABEL;
	mov A, 0
	mov B, SP
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10610
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_data
	.L10610:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777146
	store A, B
	.loc 7 10636 0
	#         d->val.tmp = strdup(buf);
	.loc 7 10316 0
	#   }
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10635 0
	#         d->val.type = LABEL;
	mov B, BP
	add B, 16777146
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10637 0
	#       }
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10611
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strdup
	.L10611:
	mov A, B
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10635 0
	#         d->val.type = LABEL;
	mov B, BP
	add B, 16777146
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	.L10609:
	.loc 7 10639 0
	#     }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L10604:
	.loc 7 10641 0
	#   }
.data
	.L10612:
	.string "unknown op"
.text
	mov A, .L10612
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10613
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10613:
	mov A, B
	add SP, 2
	.L10602:
	.L10601:
	.L10598:
	.L10595:
	.L10547:
	.loc 7 10645 0
	#   }
	.loc 7 10644 0
	#     ir_error(p, "oops");
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10644 0
	#     ir_error(p, "oops");
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L10614, A, 0
	.loc 7 10645 0
	#   }
.data
	.L10615:
	.string "oops"
.text
	mov A, .L10615
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10616
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10616:
	mov A, B
	add SP, 2
	.L10614:
	.loc 7 10647 0
	#   if (op <= STORE)
	.loc 7 10667 0
	#   } else
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L10617, A, 0
	.loc 7 10648 0
	#     argc = 2;
	mov A, 2
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L10618
	.L10617:
	.loc 7 10667 0
	#   } else
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L10619, A, 0
	.loc 7 10648 0
	#     argc = 2;
	mov A, 1
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L10620
	.L10619:
	.loc 7 10667 0
	#   } else
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L10621, A, 0
	.loc 7 10648 0
	#     argc = 2;
	mov A, 0
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L10622
	.L10621:
	.loc 7 10667 0
	#   } else
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L10623, A, 0
	.loc 7 10648 0
	#     argc = 2;
	mov A, 3
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L10624
	.L10623:
	.loc 7 10667 0
	#   } else
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L10625, A, 0
	.loc 7 10648 0
	#     argc = 2;
	mov A, 1
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L10626
	.L10625:
	.loc 7 10667 0
	#   } else
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	le A, B
	jeq .L10627, A, 0
	.loc 7 10648 0
	#     argc = 2;
	mov A, 2
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L10628
	.L10627:
	.loc 7 10667 0
	#   } else
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10629, A, 0
	.loc 7 10648 0
	#     argc = 2;
	mov A, 0
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L10630
	.L10629:
	.loc 7 10667 0
	#   } else
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10316 0
	#   }
	mov A, 26
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10631, A, 0
	.loc 7 10648 0
	#     argc = 2;
	mov A, 1
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L10632
	.L10631:
	.loc 7 10667 0
	#   } else
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10648 0
	#     argc = 2;
	.loc 7 10316 0
	#   }
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10633, A, 0
	.loc 7 10667 0
	#   } else
	.loc 7 10665 0
	#     c = peek(p);
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10634
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L10634:
	mov A, B
	add SP, 1
	.loc 7 10666 0
	#     argc = c == '-' || isdigit(c) ? 1 : 0;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10635
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp peek
	.L10635:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 10667 0
	#   } else
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10667 0
	#   } else
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L10636, A, 0
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10637
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L10637:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L10636:
	mov A, B
	jeq .L10638, A, 0
	.loc 7 10667 0
	#   } else
	mov A, 1
	jmp .L10639
	.L10638:
	mov A, 0
	.L10639:
	mov B, BP
	add B, 16777145
	store A, B
	jmp .L10640
	.L10633:
.data
	.L10641:
	.string "oops"
.text
	mov A, .L10641
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10642
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10642:
	mov A, B
	add SP, 2
	.L10640:
	.L10632:
	.L10630:
	.L10628:
	.L10626:
	.L10624:
	.L10622:
	.L10620:
	.L10618:
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	.loc 7 10707 0
	#   }
	.loc 7 10672 0
	#     skip_ws(p);
	mov A, 0
	mov B, SP
	mov B, BP
	add B, 16777138
	mov A, 0
	store A, B
	.loc 7 10707 0
	#   }
	.L1764:
	.loc 7 10672 0
	#     skip_ws(p);
	mov B, BP
	add B, 16777138
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10647 0
	#   if (op <= STORE)
	mov B, BP
	add B, 16777145
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	lt A, B
	jeq .L10643, A, 0
	jmp .L10644
	.L10643:
	.loc 7 10707 0
	#   }
	jmp .L1766
	.L10644:
	.loc 7 10673 0
	#     if (i) {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10645
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L10645:
	mov A, B
	add SP, 1
	.loc 7 10678 0
	#     }
	.loc 7 10672 0
	#     skip_ws(p);
	mov B, BP
	add B, 16777138
	load A, B
	jeq .L10646, A, 0
	.loc 7 10678 0
	#     }
	.loc 7 10675 0
	#       if (c != ',')
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10647
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10647:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 10676 0
	#         ir_error(p, "comma expected");
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10676 0
	#         ir_error(p, "comma expected");
	mov A, 44
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L10648, A, 0
.data
	.L10649:
	.string "comma expected"
.text
	mov A, .L10649
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10650
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10650:
	mov A, B
	add SP, 2
	.L10648:
	.loc 7 10678 0
	#     }
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10651
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L10651:
	mov A, B
	add SP, 1
	.L10646:
	.loc 7 10681 0
	#     c = ir_getc(p);
	.loc 7 10682 0
	#     if (isdigit(c) || c == '-') {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10652
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10652:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 3
	store A, B
	.loc 7 10704 0
	#       }
	.loc 7 10683 0
	#       a.type = IMM;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10654
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isdigit
	.L10654:
	mov A, B
	add SP, 1
	mov B, 1
	jne .L10653, A, 0
	.loc 7 10683 0
	#       a.type = IMM;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10683 0
	#       a.type = IMM;
	mov A, 45
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L10653:
	mov A, B
	jeq .L10655, A, 0
	.loc 7 10685 0
	#     } else {
	.loc 7 10684 0
	#       a.imm = MOD24(read_int(p, c));
	.loc 6 205 0
	# }
	mov A, 1
	mov B, BP
	add B, 16777136
	store A, B
	.loc 7 10685 0
	#     } else {
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10656
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_int
	.L10656:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L10657
	.L10655:
	.loc 7 10704 0
	#       }
	.loc 7 10687 0
	#       read_while_ident(p, buf + 1, 62);
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10687 0
	#       read_while_ident(p, buf + 1, 62);
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10687 0
	#       read_while_ident(p, buf + 1, 62);
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10688 0
	#       a.type = REG;
	mov A, 62
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10688 0
	#       a.type = REG;
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10658
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp read_while_ident
	.L10658:
	mov A, B
	add SP, 3
	.loc 7 10689 0
	#       if (!strcmp(buf, "A")) {
	.loc 6 205 0
	# }
	mov A, 0
	mov B, BP
	add B, 16777136
	store A, B
	.loc 7 10704 0
	#       }
	.loc 7 10690 0
	#         a.reg = A;
.data
	.L10659:
	.string "A"
.text
	mov A, .L10659
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10660
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10660:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10661, A, 0
	.loc 7 10691 0
	#       } else if (!strcmp(buf, "B")) {
	.loc 6 205 0
	# }
	mov A, 0
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L10662
	.L10661:
	.loc 7 10704 0
	#       }
	.loc 7 10691 0
	#       } else if (!strcmp(buf, "B")) {
.data
	.L10663:
	.string "B"
.text
	mov A, .L10663
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10664
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10664:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10665, A, 0
	.loc 7 10693 0
	#       } else if (!strcmp(buf, "C")) {
	.loc 6 205 0
	# }
	mov A, 1
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L10666
	.L10665:
	.loc 7 10704 0
	#       }
	.loc 7 10693 0
	#       } else if (!strcmp(buf, "C")) {
.data
	.L10667:
	.string "C"
.text
	mov A, .L10667
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10668
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10668:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10669, A, 0
	.loc 7 10695 0
	#       } else if (!strcmp(buf, "D")) {
	.loc 6 205 0
	# }
	mov A, 2
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L10670
	.L10669:
	.loc 7 10704 0
	#       }
	.loc 7 10695 0
	#       } else if (!strcmp(buf, "D")) {
.data
	.L10671:
	.string "D"
.text
	mov A, .L10671
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10672
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10672:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10673, A, 0
	.loc 7 10697 0
	#       } else if (!strcmp(buf, "SP")) {
	.loc 6 205 0
	# }
	mov A, 3
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L10674
	.L10673:
	.loc 7 10704 0
	#       }
	.loc 7 10697 0
	#       } else if (!strcmp(buf, "SP")) {
.data
	.L10675:
	.string "SP"
.text
	mov A, .L10675
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10676
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10676:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10677, A, 0
	.loc 7 10699 0
	#       } else if (!strcmp(buf, "BP")) {
	.loc 6 205 0
	# }
	mov A, 5
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L10678
	.L10677:
	.loc 7 10704 0
	#       }
	.loc 7 10699 0
	#       } else if (!strcmp(buf, "BP")) {
.data
	.L10679:
	.string "BP"
.text
	mov A, .L10679
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10680
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10680:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10681, A, 0
	.loc 7 10701 0
	#       } else {
	.loc 6 205 0
	# }
	mov A, 4
	mov B, BP
	add B, 16777137
	store A, B
	jmp .L10682
	.L10681:
	.loc 7 10704 0
	#       }
	.loc 7 10703 0
	#         a.tmp = strdup(buf);
	.loc 7 10316 0
	#   }
	mov A, 2
	mov B, BP
	add B, 16777136
	store A, B
	.loc 7 10704 0
	#       }
	.loc 7 10562 0
	#   buf[0] = c;
	mov A, BP
	add A, 16777152
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10683
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strdup
	.L10683:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777137
	store A, B
	.L10682:
	.L10678:
	.L10674:
	.L10670:
	.L10666:
	.L10662:
	.L10657:
	.loc 7 10707 0
	#   }
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	mov A, BP
	add A, -80
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10672 0
	#     skip_ws(p);
	mov B, BP
	add B, 16777138
	load A, B
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 10707 0
	#   }
	.L1765:
	.loc 7 10672 0
	#     skip_ws(p);
	mov B, BP
	add B, 16777138
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov B, BP
	add B, 16777138
	store A, B
	load A, SP
	add SP, 1
	.loc 7 10707 0
	#   }
	jmp .L1764
	.L1766:
	.loc 7 10728 0
	#   }
	.loc 7 10710 0
	#     if (args[0].type == IMM) {
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10710 0
	#     if (args[0].type == IMM) {
	.loc 7 10316 0
	#   }
	mov A, 26
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10684, A, 0
	.loc 7 10720 0
	#   } else if (op == (Op)DATA) {
	.loc 7 10718 0
	#     }
	.loc 7 10711 0
	#       add_imm_data(p, args[0].imm);
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10711 0
	#       add_imm_data(p, args[0].imm);
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10685, A, 0
	.loc 7 10712 0
	#     } else if (args[0].type == (ValueType)REF) {
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10712 0
	#     } else if (args[0].type == (ValueType)REF) {
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10686
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_imm_data
	.L10686:
	mov A, B
	add SP, 2
	jmp .L10687
	.L10685:
	.loc 7 10718 0
	#     }
	.loc 7 10712 0
	#     } else if (args[0].type == (ValueType)REF) {
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10712 0
	#     } else if (args[0].type == (ValueType)REF) {
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10316 0
	#   }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10688, A, 0
	.loc 7 10716 0
	#     } else {
	.loc 7 10714 0
	#       d->val.type = REF;
	mov A, 0
	mov B, SP
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10689
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp add_data
	.L10689:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777135
	store A, B
	.loc 7 10715 0
	#       d->val.tmp = args[0].tmp;
	.loc 7 10316 0
	#   }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10714 0
	#       d->val.type = REF;
	mov B, BP
	add B, 16777135
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10716 0
	#     } else {
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10716 0
	#     } else {
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10714 0
	#       d->val.type = REF;
	mov B, BP
	add B, 16777135
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 3
	store B, A
	load A, SP
	add SP, 1
	jmp .L10690
	.L10688:
	.loc 7 10718 0
	#     }
.data
	.L10691:
	.string "number expected"
.text
	mov A, .L10691
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10692
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10692:
	mov A, B
	add SP, 2
	.L10690:
	.L10687:
	.loc 7 10720 0
	#   } else if (op == (Op)DATA) {
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	jmp .L10693
	.L10684:
	.loc 7 10728 0
	#   }
	.loc 7 10720 0
	#   } else if (op == (Op)DATA) {
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10720 0
	#   } else if (op == (Op)DATA) {
	.loc 7 10316 0
	#   }
	mov A, 24
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10694, A, 0
	.loc 7 10728 0
	#   }
	.loc 7 10725 0
	#     }
	.loc 7 10722 0
	#       if (args[0].type != IMM)
	.loc 7 10647 0
	#   if (op <= STORE)
	mov B, BP
	add B, 16777145
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10722 0
	#       if (args[0].type != IMM)
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10695, A, 0
	.loc 7 10725 0
	#     }
	.loc 7 10723 0
	#         ir_error(p, "number expected");
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10723 0
	#         ir_error(p, "number expected");
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L10696, A, 0
	.loc 7 10723 0
	#         ir_error(p, "number expected");
.data
	.L10697:
	.string "number expected"
.text
	mov A, .L10697
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10698
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10698:
	mov A, B
	add SP, 2
	.L10696:
	.loc 7 10725 0
	#     }
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10725 0
	#     }
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.L10695:
	.loc 7 10727 0
	#     return;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10728 0
	#   }
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L10694:
	.L10693:
	.loc 7 10731 0
	#   p->text = p->text->next;
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10699
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L10699:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10732 0
	#   p->text->op = op;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10733 0
	#   p->text->pc = p->pc;
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10733 0
	#   p->text->pc = p->pc;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10734 0
	#   p->text->lineno = p->lineno;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10734 0
	#   p->text->lineno = p->lineno;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10735 0
	#   p->prev_boundary = false;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10735 0
	#   p->prev_boundary = false;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10736 0
	#   switch (op) {
	mov A, 0
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10775 0
	#       ir_error(p, "oops");
	.loc 7 10565 0
	#   if (op == (Op)TEXT) {
	mov B, BP
	add B, 16777151
	load A, B
	mov B, BP
	add B, 16777134
	store A, B
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10700, A, 0
	jmp .L1768
	.L10700:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10701, A, 0
	jmp .L1769
	.L10701:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10702, A, 0
	jmp .L1770
	.L10702:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10703, A, 0
	jmp .L1771
	.L10703:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10704, A, 0
	jmp .L1772
	.L10704:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10705, A, 0
	jmp .L1773
	.L10705:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10706, A, 0
	jmp .L1774
	.L10706:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10707, A, 0
	jmp .L1775
	.L10707:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10708, A, 0
	jmp .L1776
	.L10708:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10709, A, 0
	jmp .L1777
	.L10709:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10710, A, 0
	jmp .L1778
	.L10710:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10711, A, 0
	jmp .L1779
	.L10711:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10712, A, 0
	jmp .L1780
	.L10712:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10713, A, 0
	jmp .L1781
	.L10713:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10714, A, 0
	jmp .L1782
	.L10714:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10715, A, 0
	jmp .L1783
	.L10715:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10716, A, 0
	jmp .L1784
	.L10716:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10717, A, 0
	jmp .L1785
	.L10717:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10718, A, 0
	jmp .L1786
	.L10718:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10719, A, 0
	jmp .L1787
	.L10719:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10720, A, 0
	jmp .L1788
	.L10720:
	mov B, BP
	add B, 16777134
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10721, A, 0
	jmp .L1789
	.L10721:
	jmp .L1790
	.loc 7 10742 0
	#       }
	.loc 7 10738 0
	#     case STORE:
	.L1768:
	.loc 7 10742 0
	#       }
	.loc 7 10738 0
	#     case STORE:
	.L1769:
	.loc 7 10742 0
	#       }
	.loc 7 10316 0
	#   }
	mov B, g_split_basic_block_by_mem
	load A, B
	jeq .L10722, A, 0
	.loc 7 10742 0
	#       }
	.loc 7 10741 0
	#         p->prev_boundary = true;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.loc 7 10742 0
	#       }
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.L10722:
	.loc 7 10744 0
	#     case ADD:
	.L1770:
	.L1771:
	.L1772:
	.L1773:
	.L1774:
	.L1775:
	.L1776:
	.L1777:
	.L1778:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10744 0
	#     case ADD:
	mov A, 1
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 3
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 10754 0
	#       p->text->dst = args[0];
	.L1779:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10754 0
	#       p->text->dst = args[0];
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 10756 0
	#     case PUTC:
	jmp .L1767
	.loc 7 10757 0
	#       p->text->src = args[0];
	.L1780:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10757 0
	#       p->text->src = args[0];
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 3
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 10759 0
	#     case DUMP:
	.L1781:
	.L1782:
	jmp .L1767
	.loc 7 10762 0
	#     case JNE:
	.L1783:
	.L1784:
	.L1785:
	.L1786:
	.L1787:
	.L1788:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10762 0
	#     case JNE:
	mov A, 1
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 10769 0
	#     case JMP:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10769 0
	#     case JMP:
	mov A, 2
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 3
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 10770 0
	#       p->text->jmp = args[0];
	.L1789:
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store C, D
	mov SP, D
	.loc 7 10671 0
	#   for (int i = 0; i < argc; i++) {
	mov A, BP
	add A, 16777139
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10770 0
	#       p->text->jmp = args[0];
	mov A, 0
	add A, A
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	add A, 5
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, B
	store A, C
	add B, 1
	add C, 1
	load A, SP
	add SP, 1
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	.loc 7 10772 0
	#       p->prev_boundary = true;
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	.loc 7 10773 0
	#       break;
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10774 0
	#     default:
	jmp .L1767
	.loc 7 10775 0
	#       ir_error(p, "oops");
	.L1790:
.data
	.L10723:
	.string "oops"
.text
	mov A, .L10723
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10558 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10724
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10724:
	mov A, B
	add SP, 2
	.loc 7 10775 0
	#       ir_error(p, "oops");
	.L1767:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
parse_eir:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 16
	.loc 7 10823 0
	# }
	.loc 7 10785 0
	#   DataPrivate data_root = {};
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 10786 0
	#   int c;
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 10787 0
	# 
	.loc 7 10789 0
	#   p->lineno = 1;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10790 0
	#   p->text = &text_root;
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10791 0
	#   p->data = &data_root;
	mov A, BP
	add A, -10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10792 0
	#   p->pc = 0;
	mov A, BP
	add A, -15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10793 0
	#   p->prev_boundary = true;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10794 0
	# 
	mov A, 1
	ne A, 0
	ne A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 10
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10796 0
	#   p->text = p->text->next;
	mov A, 10
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10725
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp calloc
	.L10725:
	mov A, B
	add SP, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10797 0
	#   p->text->op = JMP;
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10798 0
	#   p->text->pc = p->pc++;
	.loc 6 205 0
	# }
	mov A, 14
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10798 0
	#   p->text->pc = p->pc++;
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10799 0
	#   p->text->lineno = -1;
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	load A, SP
	add SP, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10799 0
	#   p->text->lineno = -1;
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 7
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10800 0
	#   p->text->jmp.type = (ValueType)REF;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 8
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10801 0
	#   p->text->jmp.tmp = "main";
	.loc 7 10316 0
	#   }
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10801 0
	#   p->text->jmp.tmp = "main";
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 5
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10802 0
	#   p->text->next = 0;
.data
	.L10726:
	.string "main"
.text
	mov A, .L10726
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10803 0
	#   p->symtab = table_add(p->symtab, "main", (void*)1);
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10804 0
	# 
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
.data
	.L10727:
	.string "main"
.text
	mov A, .L10727
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10728
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_add
	.L10728:
	mov A, B
	add SP, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 4
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10817 0
	#     }
	.L1791:
	.loc 7 10807 0
	#     c = ir_getc(p);
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10729
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_ws
	.L10729:
	mov A, B
	add SP, 1
	.loc 7 10808 0
	#     if (c == EOF)
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10730
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_getc
	.L10730:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777200
	store A, B
	.loc 7 10809 0
	#       break;
	.loc 7 10787 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10809 0
	#       break;
	mov A, 0
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	sub A, B
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10731, A, 0
	jmp .L1793
	.L10731:
	.loc 7 10817 0
	#     }
	.loc 7 10812 0
	#       skip_until_ret(p);
	.loc 7 10787 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10812 0
	#       skip_until_ret(p);
	mov A, 35
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10732, A, 0
	.loc 7 10813 0
	#     } else if (c == '_' || c == '.' || isalpha(c)) {
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10733
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp skip_until_ret
	.L10733:
	mov A, B
	add SP, 1
	jmp .L10734
	.L10732:
	.loc 7 10817 0
	#     }
	.loc 7 10813 0
	#     } else if (c == '_' || c == '.' || isalpha(c)) {
	.loc 7 10787 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10813 0
	#     } else if (c == '_' || c == '.' || isalpha(c)) {
	mov A, 95
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, 1
	jne .L10736, A, 0
	.loc 7 10787 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10813 0
	#     } else if (c == '_' || c == '.' || isalpha(c)) {
	mov A, 46
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	mov B, A
	ne B, 0
	.L10736:
	mov A, B
	mov B, 1
	jne .L10735, A, 0
	.loc 7 10787 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10737
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp isalpha
	.L10737:
	mov A, B
	add SP, 1
	mov B, A
	ne B, 0
	.L10735:
	mov A, B
	jeq .L10738, A, 0
	.loc 7 10815 0
	#     } else {
	.loc 7 10787 0
	# 
	mov B, BP
	add B, 16777200
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10739
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse_line
	.L10739:
	mov A, B
	add SP, 2
	jmp .L10740
	.L10738:
	.loc 7 10817 0
	#     }
.data
	.L10741:
	.string "unexpected char"
.text
	mov A, .L10741
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10742
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp ir_error
	.L10742:
	mov A, B
	add SP, 2
	.L10740:
	.L10734:
	.loc 7 10817 0
	#     }
	.L1792:
	jmp .L1791
	.L1793:
	.loc 7 10821 0
	#   p->text = text_root.next;
	mov A, BP
	add A, -15
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10743
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp serialize_data
	.L10743:
	mov A, B
	add SP, 2
	.loc 7 10822 0
	#   p->data = data_root.next;
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 6
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10823 0
	# }
	mov B, BP
	add B, 16777202
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10775 0
	#       ir_error(p, "oops");
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 9
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
resolve:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10835 0
	# }
	.loc 7 10827 0
	#     return;
	.loc 7 10823 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10827 0
	#     return;
	.loc 7 10316 0
	#   }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	ne A, B
	jeq .L10744, A, 0
	.loc 7 10827 0
	#     return;
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L10744:
	.loc 7 10829 0
	#   if (!table_get(symtab, name, (void*)&v->imm)) {
	mov A, 0
	mov B, SP
	.loc 7 10823 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10832 0
	#   }
	.loc 7 10830 0
	#     fprintf(stderr, "undefined sym: %s\n", name);
	.loc 7 10823 0
	# }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10829 0
	#   if (!table_get(symtab, name, (void*)&v->imm)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10823 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10745
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp table_get
	.L10745:
	mov A, B
	add SP, 3
	eq A, 0
	jeq .L10746, A, 0
	.loc 7 10832 0
	#   }
	.loc 7 10831 0
	#     exit(1);
	.loc 7 10829 0
	#   if (!table_get(symtab, name, (void*)&v->imm)) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10831 0
	#     exit(1);
.data
	.L10747:
	.string "undefined sym: %s\n"
.text
	mov A, .L10747
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10748
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10748:
	mov A, B
	add SP, 3
	.loc 7 10832 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L10746:
	.loc 7 10835 0
	# }
	.loc 6 205 0
	# }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10823 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
resolve_syms:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 10849 0
	#   }
	.loc 7 10843 0
	#   }
	.loc 7 10839 0
	#     if (data->val.type == (ValueType)REF) {
	mov A, 0
	mov B, SP
	.loc 7 10835 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10843 0
	#   }
	.L1794:
	.loc 7 10839 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	jeq .L10749, A, 0
	jmp .L10750
	.L10749:
	.loc 7 10843 0
	#   }
	jmp .L1796
	.L10750:
	.loc 7 10841 0
	#     }
	.loc 7 10840 0
	#       resolve(&data->val, p->symtab);
	.loc 7 10839 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10840 0
	#       resolve(&data->val, p->symtab);
	.loc 7 10316 0
	#   }
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10751, A, 0
	.loc 7 10841 0
	#     }
	.loc 7 10835 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10841 0
	#     }
	.loc 7 10839 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	add A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10752
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve
	.L10752:
	mov A, B
	add SP, 2
	.L10751:
	.loc 7 10843 0
	#   }
	.loc 7 10839 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10843 0
	#   }
	.L1795:
	.loc 7 10839 0
	#     if (data->val.type == (ValueType)REF) {
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10843 0
	#   }
	jmp .L1794
	.L1796:
	.loc 7 10849 0
	#   }
	.loc 7 10846 0
	#     resolve(&inst->dst, p->symtab);
	mov A, 0
	mov B, SP
	.loc 7 10835 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 6
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 10849 0
	#   }
	.L1797:
	.loc 7 10846 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	jeq .L10753, A, 0
	jmp .L10754
	.L10753:
	.loc 7 10849 0
	#   }
	jmp .L1799
	.L10754:
	.loc 7 10847 0
	#     resolve(&inst->src, p->symtab);
	.loc 7 10835 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10847 0
	#     resolve(&inst->src, p->symtab);
	.loc 7 10846 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10755
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve
	.L10755:
	mov A, B
	add SP, 2
	.loc 7 10848 0
	#     resolve(&inst->jmp, p->symtab);
	.loc 7 10835 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10848 0
	#     resolve(&inst->jmp, p->symtab);
	.loc 7 10846 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10756
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve
	.L10756:
	mov A, B
	add SP, 2
	.loc 7 10849 0
	#   }
	.loc 7 10835 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10849 0
	#   }
	.loc 7 10846 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10757
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve
	.L10757:
	mov A, B
	add SP, 2
	.loc 7 10849 0
	#   }
	.L1798:
	.loc 7 10846 0
	#     resolve(&inst->dst, p->symtab);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	add B, 9
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 10849 0
	#   }
	jmp .L1797
	.L1799:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
load_eir_impl:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 12
	.loc 7 10864 0
	# }
	.loc 7 10854 0
	#     .filename = filename,
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	mov A, 0
	mov B, SP
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	store A, B
	add B, 1
	.loc 7 10849 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, BP
	add B, 16777205
	store A, B
	mov B, BP
	add B, 3
	load A, B
	mov B, BP
	add B, 16777208
	store A, B
	.loc 7 10858 0
	#   resolve_syms(&parser);
	mov A, BP
	add A, -11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10758
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp parse_eir
	.L10758:
	mov A, B
	add SP, 1
	.loc 7 10859 0
	# 
	mov A, BP
	add A, -11
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10759
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp resolve_syms
	.L10759:
	mov A, B
	add SP, 1
	.loc 7 10861 0
	#   m->text = parser.text;
	mov A, 0
	mov B, SP
	mov A, 2
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10760
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L10760:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777204
	store A, B
	.loc 7 10862 0
	#   m->data = (Data*)parser.data;
	mov B, BP
	add B, 16777211
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10861 0
	#   m->text = parser.text;
	mov B, BP
	add B, 16777204
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10863 0
	#   return m;
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10861 0
	#   m->text = parser.text;
	mov B, BP
	add B, 16777204
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10864 0
	# }
	.loc 7 10861 0
	#   m->text = parser.text;
	mov B, BP
	add B, 16777204
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
load_eir:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10868 0
	# }
	.loc 7 10864 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10868 0
	# }
.data
	.L10761:
	.string "<stdin>"
.text
	mov A, .L10761
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10762
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp load_eir_impl
	.L10762:
	mov A, B
	add SP, 2
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
load_eir_from_file:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 10879 0
	# }
	.loc 7 10872 0
	#   if (!fp) {
	mov A, 0
	mov B, SP
.data
	.L10763:
	.string "r"
.text
	mov A, .L10763
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10868 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10764
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fopen
	.L10764:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10875 0
	#   }
	.loc 7 10873 0
	#     fprintf(stderr, "no such file: %s\n", filename);
	.loc 7 10872 0
	#   if (!fp) {
	mov B, BP
	add B, 16777215
	load A, B
	eq A, 0
	jeq .L10765, A, 0
	.loc 7 10875 0
	#   }
	.loc 7 10874 0
	#     exit(1);
	.loc 7 10868 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10874 0
	#     exit(1);
.data
	.L10766:
	.string "no such file: %s\n"
.text
	mov A, .L10766
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10767
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10767:
	mov A, B
	add SP, 3
	.loc 7 10875 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L10765:
	.loc 7 10877 0
	#   fclose(fp);
	mov A, 0
	mov B, SP
	.loc 7 10872 0
	#   if (!fp) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10868 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10768
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp load_eir_impl
	.L10768:
	mov A, B
	add SP, 2
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 10878 0
	#   return r;
	.loc 7 10872 0
	#   if (!fp) {
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10769
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fclose
	.L10769:
	mov A, B
	add SP, 1
	.loc 7 10879 0
	# }
	.loc 7 10877 0
	#   fclose(fp);
	mov B, BP
	add B, 16777214
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
split_basic_block_by_mem:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10883 0
	# }
	mov A, 1
	ne A, 0
	ne A, 0
	ne A, 0
	mov B, g_split_basic_block_by_mem
	store A, B
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S7.op_strs:
	.data 1
	.L10770:
	.string "mov"
	.data 0
	.long .L10770
	.data 1
	.L10771:
	.string "add"
	.data 0
	.long .L10771
	.data 1
	.L10772:
	.string "sub"
	.data 0
	.long .L10772
	.data 1
	.L10773:
	.string "load"
	.data 0
	.long .L10773
	.data 1
	.L10774:
	.string "store"
	.data 0
	.long .L10774
	.data 1
	.L10775:
	.string "putc"
	.data 0
	.long .L10775
	.data 1
	.L10776:
	.string "getc"
	.data 0
	.long .L10776
	.data 1
	.L10777:
	.string "exit"
	.data 0
	.long .L10777
	.data 1
	.L10778:
	.string "jeq"
	.data 0
	.long .L10778
	.data 1
	.L10779:
	.string "jne"
	.data 0
	.long .L10779
	.data 1
	.L10780:
	.string "jlt"
	.data 0
	.long .L10780
	.data 1
	.L10781:
	.string "jgt"
	.data 0
	.long .L10781
	.data 1
	.L10782:
	.string "jle"
	.data 0
	.long .L10782
	.data 1
	.L10783:
	.string "jge"
	.data 0
	.long .L10783
	.data 1
	.L10784:
	.string "jmp"
	.data 0
	.long .L10784
	.data 1
	.L10785:
	.string "xxx"
	.data 0
	.long .L10785
	.data 1
	.L10786:
	.string "eq"
	.data 0
	.long .L10786
	.data 1
	.L10787:
	.string "ne"
	.data 0
	.long .L10787
	.data 1
	.L10788:
	.string "lt"
	.data 0
	.long .L10788
	.data 1
	.L10789:
	.string "gt"
	.data 0
	.long .L10789
	.data 1
	.L10790:
	.string "le"
	.data 0
	.long .L10790
	.data 1
	.L10791:
	.string "ge"
	.data 0
	.long .L10791
	.data 1
	.L10792:
	.string "dump"
	.data 0
	.long .L10792
	.text
dump_op:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10892 0
	# }
	.loc 7 10887 0
	#     "mov", "add", "sub", "load", "store", "putc", "getc", "exit",
	mov A, .S7.op_strs
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10883 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10892 0
	# }
.data
	.L10793:
	.string "%s"
.text
	mov A, .L10793
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10883 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10794
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10794:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.data 0
.S8.reg_strs:
	.data 1
	.L10795:
	.string "A"
	.data 0
	.long .L10795
	.data 1
	.L10796:
	.string "B"
	.data 0
	.long .L10796
	.data 1
	.L10797:
	.string "C"
	.data 0
	.long .L10797
	.data 1
	.L10798:
	.string "D"
	.data 0
	.long .L10798
	.data 1
	.L10799:
	.string "BP"
	.data 0
	.long .L10799
	.data 1
	.L10800:
	.string "SP"
	.data 0
	.long .L10800
	.text
dump_val:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10904 0
	#   }
	.loc 7 10899 0
	#     fprintf(fp, "%s", reg_strs[val->reg]);
	.loc 7 10892 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10801, A, 0
	.loc 7 10900 0
	#   } else if (val->type == IMM) {
	.loc 7 10896 0
	#     "A", "B", "C", "D", "BP", "SP"
	mov A, .S8.reg_strs
	mov D, SP
	add D, -1
	store B, D
	mov SP, D
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10900 0
	#   } else if (val->type == IMM) {
	.loc 7 10892 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov B, A
	load A, SP
	add SP, 1
	add A, B
	mov C, A
	load A, SP
	add SP, 1
	mov B, A
	mov A, C
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10900 0
	#   } else if (val->type == IMM) {
.data
	.L10802:
	.string "%s"
.text
	mov A, .L10802
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10892 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10803
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10803:
	mov A, B
	add SP, 3
	jmp .L10804
	.L10801:
	.loc 7 10904 0
	#   }
	.loc 7 10900 0
	#   } else if (val->type == IMM) {
	.loc 7 10892 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 6 205 0
	# }
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10805, A, 0
	.loc 7 10902 0
	#   } else {
	.loc 7 10892 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10902 0
	#   } else {
.data
	.L10806:
	.string "%d"
.text
	mov A, .L10806
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10892 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10807
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10807:
	mov A, B
	add SP, 3
	jmp .L10808
	.L10805:
	.loc 7 10904 0
	#   }
	.loc 7 10892 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	.loc 7 10892 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
.data
	.L10809:
	.string "%d (type=%d)"
.text
	mov A, .L10809
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10892 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10810
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10810:
	mov A, B
	add SP, 4
	.L10808:
	.L10804:
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
dump_inst_fp:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 2
	.loc 7 10965 0
	# }
	.loc 7 10909 0
	#   switch (inst->op) {
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10909 0
	#   switch (inst->op) {
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10811
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_op
	.L10811:
	mov A, B
	add SP, 2
	.loc 7 10957 0
	#   }
	.loc 7 10910 0
	#     case MOV:
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10957 0
	#   }
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 0
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10812, A, 0
	jmp .L1801
	.L10812:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 1
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10813, A, 0
	jmp .L1802
	.L10813:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 2
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10814, A, 0
	jmp .L1803
	.L10814:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 3
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10815, A, 0
	jmp .L1804
	.L10815:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 4
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10816, A, 0
	jmp .L1805
	.L10816:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 16
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10817, A, 0
	jmp .L1806
	.L10817:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 17
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10818, A, 0
	jmp .L1807
	.L10818:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 18
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10819, A, 0
	jmp .L1808
	.L10819:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 19
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10820, A, 0
	jmp .L1809
	.L10820:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 20
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10821, A, 0
	jmp .L1810
	.L10821:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 21
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10822, A, 0
	jmp .L1811
	.L10822:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 5
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10823, A, 0
	jmp .L1812
	.L10823:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 6
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10824, A, 0
	jmp .L1813
	.L10824:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 7
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10825, A, 0
	jmp .L1814
	.L10825:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 22
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10826, A, 0
	jmp .L1815
	.L10826:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 8
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10827, A, 0
	jmp .L1816
	.L10827:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 9
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10828, A, 0
	jmp .L1817
	.L10828:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 10
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10829, A, 0
	jmp .L1818
	.L10829:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 11
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10830, A, 0
	jmp .L1819
	.L10830:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 12
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10831, A, 0
	jmp .L1820
	.L10831:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 13
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10832, A, 0
	jmp .L1821
	.L10832:
	mov B, BP
	add B, 16777215
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, 14
	mov B, A
	load A, SP
	add SP, 1
	eq A, B
	jeq .L10833, A, 0
	jmp .L1822
	.L10833:
	jmp .L1823
	.loc 7 10911 0
	#     case ADD:
	.L1801:
	.L1802:
	.L1803:
	.L1804:
	.L1805:
	.L1806:
	.L1807:
	.L1808:
	.L1809:
	.L1810:
	.L1811:
.data
	.L10834:
	.string " "
.text
	mov A, .L10834
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10835
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10835:
	mov A, B
	add SP, 2
	.loc 7 10923 0
	#       fprintf(fp, " ");
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10923 0
	#       fprintf(fp, " ");
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10836
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L10836:
	mov A, B
	add SP, 2
	.loc 7 10924 0
	#       dump_val(&inst->src, fp);
.data
	.L10837:
	.string " "
.text
	mov A, .L10837
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10838
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10838:
	mov A, B
	add SP, 2
	.loc 7 10925 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10925 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10839
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L10839:
	mov A, B
	add SP, 2
	.loc 7 10926 0
	#     case PUTC:
	jmp .L1800
	.loc 7 10927 0
	#       fprintf(fp, " ");
	.L1812:
.data
	.L10840:
	.string " "
.text
	mov A, .L10840
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10841
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10841:
	mov A, B
	add SP, 2
	.loc 7 10929 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10929 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10842
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L10842:
	mov A, B
	add SP, 2
	.loc 7 10930 0
	#     case GETC:
	jmp .L1800
	.loc 7 10931 0
	#       fprintf(fp, " ");
	.L1813:
.data
	.L10843:
	.string " "
.text
	mov A, .L10843
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10844
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10844:
	mov A, B
	add SP, 2
	.loc 7 10933 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10933 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10845
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L10845:
	mov A, B
	add SP, 2
	.loc 7 10934 0
	#     case EXIT:
	jmp .L1800
	.loc 7 10935 0
	#     case DUMP:
	.L1814:
	.L1815:
	jmp .L1800
	.loc 7 10938 0
	#     case JNE:
	.L1816:
	.L1817:
	.L1818:
	.L1819:
	.L1820:
	.L1821:
.data
	.L10846:
	.string " "
.text
	mov A, .L10846
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10847
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10847:
	mov A, B
	add SP, 2
	.loc 7 10945 0
	#       fprintf(fp, " ");
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10945 0
	#       fprintf(fp, " ");
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10848
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L10848:
	mov A, B
	add SP, 2
	.loc 7 10946 0
	#       dump_val(&inst->dst, fp);
.data
	.L10849:
	.string " "
.text
	mov A, .L10849
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10850
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10850:
	mov A, B
	add SP, 2
	.loc 7 10947 0
	#       fprintf(fp, " ");
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10947 0
	#       fprintf(fp, " ");
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10851
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L10851:
	mov A, B
	add SP, 2
	.loc 7 10948 0
	#       dump_val(&inst->src, fp);
.data
	.L10852:
	.string " "
.text
	mov A, .L10852
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10853
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10853:
	mov A, B
	add SP, 2
	.loc 7 10949 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10949 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10854
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L10854:
	mov A, B
	add SP, 2
	.loc 7 10950 0
	#     case JMP:
	jmp .L1800
	.loc 7 10951 0
	#       fprintf(fp, " ");
	.L1822:
.data
	.L10855:
	.string " "
.text
	mov A, .L10855
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10856
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10856:
	mov A, B
	add SP, 2
	.loc 7 10953 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10953 0
	#       break;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	add A, 5
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10857
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_val
	.L10857:
	mov A, B
	add SP, 2
	.loc 7 10954 0
	#     default:
	jmp .L1800
	.loc 7 10955 0
	#       fprintf(fp, "oops op=%d\n", inst->op);
	.L1823:
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10955 0
	#       fprintf(fp, "oops op=%d\n", inst->op);
.data
	.L10858:
	.string "oops op=%d\n"
.text
	mov A, .L10858
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10859
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10859:
	mov A, B
	add SP, 3
	.loc 7 10957 0
	#   }
	mov A, 1
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	exit
	add SP, 1
	.L1800:
	.loc 7 10959 0
	#   int lineno = inst->lineno;
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 7
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10959 0
	#   int lineno = inst->lineno;
.data
	.L10860:
	.string " pc=%d @"
.text
	mov A, .L10860
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10861
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10861:
	mov A, B
	add SP, 3
	.loc 7 10960 0
	#   // A hack to make the test for dump_ir.c.eir pass.
	mov A, 0
	mov B, SP
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 8
	load A, B
	mov B, BP
	add B, 16777214
	store A, B
	.loc 7 10965 0
	# }
	.loc 7 10960 0
	#   // A hack to make the test for dump_ir.c.eir pass.
	mov B, BP
	add B, 16777214
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10965 0
	# }
.data
	.L10862:
	.string "%d\n"
.text
	mov A, .L10862
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10904 0
	#   }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10863
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp fprintf
	.L10863:
	mov A, B
	add SP, 3
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
dump_inst:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10969 0
	# }
	.loc 6 123 0
	# }
	mov B, stderr
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10965 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10864
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp dump_inst_fp
	.L10864:
	mov A, B
	add SP, 2
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
table_add:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	sub SP, 1
	.loc 7 10981 0
	# }
	.loc 7 10977 0
	#   ntbl->next = tbl;
	mov A, 0
	mov B, SP
	mov A, 3
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10865
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp malloc
	.L10865:
	mov A, B
	add SP, 1
	mov B, BP
	add B, 16777215
	store A, B
	.loc 7 10978 0
	#   ntbl->key = key;
	.loc 7 10969 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10977 0
	#   ntbl->next = tbl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 2
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10979 0
	#   ntbl->value = value;
	.loc 7 10969 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10977 0
	#   ntbl->next = tbl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10980 0
	#   return ntbl;
	.loc 7 10969 0
	# }
	mov B, BP
	add B, 4
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10977 0
	#   ntbl->next = tbl;
	mov B, BP
	add B, 16777215
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	add A, 1
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10981 0
	# }
	.loc 7 10977 0
	#   ntbl->next = tbl;
	mov B, BP
	add B, 16777215
	load A, B
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.text
table_get:
	mov D, SP
	add D, -1
	store BP, D
	mov SP, D
	mov BP, SP
	.loc 7 10991 0
	# }
	.loc 7 10988 0
	#     }
	.L1824:
	.loc 7 10981 0
	# }
	mov B, BP
	add B, 2
	load A, B
	jeq .L10866, A, 0
	jmp .L10867
	.L10866:
	.loc 7 10988 0
	#     }
	jmp .L1826
	.L10867:
	.loc 7 10986 0
	#       *value = tbl->value;
	.loc 7 10981 0
	# }
	mov B, BP
	add B, 3
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	.loc 7 10986 0
	#       *value = tbl->value;
	.loc 7 10981 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov A, .L10868
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	jmp strcmp
	.L10868:
	mov A, B
	add SP, 2
	eq A, 0
	jeq .L10869, A, 0
	.loc 7 10988 0
	#     }
	.loc 7 10987 0
	#       return true;
	.loc 7 10981 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 1
	load A, B
	mov D, SP
	add D, -1
	store A, D
	mov SP, D
	mov B, BP
	add B, 4
	load A, B
	mov C, A
	load A, SP
	mov B, A
	mov A, C
	store B, A
	load A, SP
	add SP, 1
	.loc 7 10988 0
	#     }
	mov A, 1
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	.L10869:
	.L1825:
	.loc 7 10985 0
	#     if (!strcmp(tbl->key, key)) {
	.loc 7 10981 0
	# }
	mov B, BP
	add B, 2
	load A, B
	mov B, A
	add B, 2
	load A, B
	mov B, BP
	add B, 2
	store A, B
	.loc 7 10988 0
	#     }
	jmp .L1824
	.L1826:
	.loc 7 10991 0
	# }
	mov A, 0
	ne A, 0
	ne A, 0
	mov B, A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
	mov SP, BP
	load A, SP
	add SP, 1
	mov BP, A
	load A, SP
	add SP, 1
	jmp A
